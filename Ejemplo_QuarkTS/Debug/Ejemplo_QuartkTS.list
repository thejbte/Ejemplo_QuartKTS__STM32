
Ejemplo_QuartkTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c09c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001700  0800c15c  0800c15c  0001c15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d85c  0800d85c  00020454  2**0
                  CONTENTS
  4 .ARM          00000008  0800d85c  0800d85c  0001d85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d864  0800d864  00020454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d864  0800d864  0001d864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d868  0800d868  0001d868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000454  20000000  0800d86c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fd0  20000454  0800dcc0  00020454  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002424  0800dcc0  00022424  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020454  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e427  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009da5  00000000  00000000  0005e8a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013860  00000000  00000000  00068648  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001910  00000000  00000000  0007bea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002f00  00000000  00000000  0007d7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001fa46  00000000  00000000  000806b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00023a28  00000000  00000000  000a00fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009db2c  00000000  00000000  000c3b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00161652  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048b4  00000000  00000000  001616d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000454 	.word	0x20000454
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c144 	.word	0x0800c144

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000458 	.word	0x20000458
 8000104:	0800c144 	.word	0x0800c144

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uhi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5a09      	ldrh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_cdrcmple>:
 8000258:	4684      	mov	ip, r0
 800025a:	1c10      	adds	r0, r2, #0
 800025c:	4662      	mov	r2, ip
 800025e:	468c      	mov	ip, r1
 8000260:	1c19      	adds	r1, r3, #0
 8000262:	4663      	mov	r3, ip
 8000264:	e000      	b.n	8000268 <__aeabi_cdcmpeq>
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_cdcmpeq>:
 8000268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800026a:	f001 feed 	bl	8002048 <__ledf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	d401      	bmi.n	8000276 <__aeabi_cdcmpeq+0xe>
 8000272:	2100      	movs	r1, #0
 8000274:	42c8      	cmn	r0, r1
 8000276:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000278 <__aeabi_dcmpeq>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f001 fe45 	bl	8001f08 <__eqdf2>
 800027e:	4240      	negs	r0, r0
 8000280:	3001      	adds	r0, #1
 8000282:	bd10      	pop	{r4, pc}

08000284 <__aeabi_dcmplt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f001 fedf 	bl	8002048 <__ledf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	db01      	blt.n	8000292 <__aeabi_dcmplt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmple>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f001 fed5 	bl	8002048 <__ledf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	dd01      	ble.n	80002a6 <__aeabi_dcmple+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_dcmpgt>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	f001 fe67 	bl	8001f80 <__gedf2>
 80002b2:	2800      	cmp	r0, #0
 80002b4:	dc01      	bgt.n	80002ba <__aeabi_dcmpgt+0xe>
 80002b6:	2000      	movs	r0, #0
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	2001      	movs	r0, #1
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	46c0      	nop			; (mov r8, r8)

080002c0 <__aeabi_dcmpge>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f001 fe5d 	bl	8001f80 <__gedf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	da01      	bge.n	80002ce <__aeabi_dcmpge+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_cfrcmple>:
 80002d4:	4684      	mov	ip, r0
 80002d6:	1c08      	adds	r0, r1, #0
 80002d8:	4661      	mov	r1, ip
 80002da:	e7ff      	b.n	80002dc <__aeabi_cfcmpeq>

080002dc <__aeabi_cfcmpeq>:
 80002dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002de:	f000 fc4f 	bl	8000b80 <__lesf2>
 80002e2:	2800      	cmp	r0, #0
 80002e4:	d401      	bmi.n	80002ea <__aeabi_cfcmpeq+0xe>
 80002e6:	2100      	movs	r1, #0
 80002e8:	42c8      	cmn	r0, r1
 80002ea:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002ec <__aeabi_fcmpeq>:
 80002ec:	b510      	push	{r4, lr}
 80002ee:	f000 fbd1 	bl	8000a94 <__eqsf2>
 80002f2:	4240      	negs	r0, r0
 80002f4:	3001      	adds	r0, #1
 80002f6:	bd10      	pop	{r4, pc}

080002f8 <__aeabi_fcmplt>:
 80002f8:	b510      	push	{r4, lr}
 80002fa:	f000 fc41 	bl	8000b80 <__lesf2>
 80002fe:	2800      	cmp	r0, #0
 8000300:	db01      	blt.n	8000306 <__aeabi_fcmplt+0xe>
 8000302:	2000      	movs	r0, #0
 8000304:	bd10      	pop	{r4, pc}
 8000306:	2001      	movs	r0, #1
 8000308:	bd10      	pop	{r4, pc}
 800030a:	46c0      	nop			; (mov r8, r8)

0800030c <__aeabi_fcmple>:
 800030c:	b510      	push	{r4, lr}
 800030e:	f000 fc37 	bl	8000b80 <__lesf2>
 8000312:	2800      	cmp	r0, #0
 8000314:	dd01      	ble.n	800031a <__aeabi_fcmple+0xe>
 8000316:	2000      	movs	r0, #0
 8000318:	bd10      	pop	{r4, pc}
 800031a:	2001      	movs	r0, #1
 800031c:	bd10      	pop	{r4, pc}
 800031e:	46c0      	nop			; (mov r8, r8)

08000320 <__aeabi_fcmpgt>:
 8000320:	b510      	push	{r4, lr}
 8000322:	f000 fbdf 	bl	8000ae4 <__gesf2>
 8000326:	2800      	cmp	r0, #0
 8000328:	dc01      	bgt.n	800032e <__aeabi_fcmpgt+0xe>
 800032a:	2000      	movs	r0, #0
 800032c:	bd10      	pop	{r4, pc}
 800032e:	2001      	movs	r0, #1
 8000330:	bd10      	pop	{r4, pc}
 8000332:	46c0      	nop			; (mov r8, r8)

08000334 <__aeabi_fcmpge>:
 8000334:	b510      	push	{r4, lr}
 8000336:	f000 fbd5 	bl	8000ae4 <__gesf2>
 800033a:	2800      	cmp	r0, #0
 800033c:	da01      	bge.n	8000342 <__aeabi_fcmpge+0xe>
 800033e:	2000      	movs	r0, #0
 8000340:	bd10      	pop	{r4, pc}
 8000342:	2001      	movs	r0, #1
 8000344:	bd10      	pop	{r4, pc}
 8000346:	46c0      	nop			; (mov r8, r8)

08000348 <__aeabi_uldivmod>:
 8000348:	2b00      	cmp	r3, #0
 800034a:	d111      	bne.n	8000370 <__aeabi_uldivmod+0x28>
 800034c:	2a00      	cmp	r2, #0
 800034e:	d10f      	bne.n	8000370 <__aeabi_uldivmod+0x28>
 8000350:	2900      	cmp	r1, #0
 8000352:	d100      	bne.n	8000356 <__aeabi_uldivmod+0xe>
 8000354:	2800      	cmp	r0, #0
 8000356:	d002      	beq.n	800035e <__aeabi_uldivmod+0x16>
 8000358:	2100      	movs	r1, #0
 800035a:	43c9      	mvns	r1, r1
 800035c:	1c08      	adds	r0, r1, #0
 800035e:	b407      	push	{r0, r1, r2}
 8000360:	4802      	ldr	r0, [pc, #8]	; (800036c <__aeabi_uldivmod+0x24>)
 8000362:	a102      	add	r1, pc, #8	; (adr r1, 800036c <__aeabi_uldivmod+0x24>)
 8000364:	1840      	adds	r0, r0, r1
 8000366:	9002      	str	r0, [sp, #8]
 8000368:	bd03      	pop	{r0, r1, pc}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	fffffee9 	.word	0xfffffee9
 8000370:	b403      	push	{r0, r1}
 8000372:	4668      	mov	r0, sp
 8000374:	b501      	push	{r0, lr}
 8000376:	9802      	ldr	r0, [sp, #8]
 8000378:	f000 f81e 	bl	80003b8 <__udivmoddi4>
 800037c:	9b01      	ldr	r3, [sp, #4]
 800037e:	469e      	mov	lr, r3
 8000380:	b002      	add	sp, #8
 8000382:	bc0c      	pop	{r2, r3}
 8000384:	4770      	bx	lr
 8000386:	46c0      	nop			; (mov r8, r8)

08000388 <__aeabi_f2uiz>:
 8000388:	219e      	movs	r1, #158	; 0x9e
 800038a:	b510      	push	{r4, lr}
 800038c:	05c9      	lsls	r1, r1, #23
 800038e:	1c04      	adds	r4, r0, #0
 8000390:	f7ff ffd0 	bl	8000334 <__aeabi_fcmpge>
 8000394:	2800      	cmp	r0, #0
 8000396:	d103      	bne.n	80003a0 <__aeabi_f2uiz+0x18>
 8000398:	1c20      	adds	r0, r4, #0
 800039a:	f000 ff37 	bl	800120c <__aeabi_f2iz>
 800039e:	bd10      	pop	{r4, pc}
 80003a0:	219e      	movs	r1, #158	; 0x9e
 80003a2:	1c20      	adds	r0, r4, #0
 80003a4:	05c9      	lsls	r1, r1, #23
 80003a6:	f000 fd6d 	bl	8000e84 <__aeabi_fsub>
 80003aa:	f000 ff2f 	bl	800120c <__aeabi_f2iz>
 80003ae:	2380      	movs	r3, #128	; 0x80
 80003b0:	061b      	lsls	r3, r3, #24
 80003b2:	469c      	mov	ip, r3
 80003b4:	4460      	add	r0, ip
 80003b6:	e7f2      	b.n	800039e <__aeabi_f2uiz+0x16>

080003b8 <__udivmoddi4>:
 80003b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ba:	464f      	mov	r7, r9
 80003bc:	4646      	mov	r6, r8
 80003be:	46d6      	mov	lr, sl
 80003c0:	b5c0      	push	{r6, r7, lr}
 80003c2:	0004      	movs	r4, r0
 80003c4:	b082      	sub	sp, #8
 80003c6:	000d      	movs	r5, r1
 80003c8:	4691      	mov	r9, r2
 80003ca:	4698      	mov	r8, r3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d82f      	bhi.n	8000430 <__udivmoddi4+0x78>
 80003d0:	d02c      	beq.n	800042c <__udivmoddi4+0x74>
 80003d2:	4641      	mov	r1, r8
 80003d4:	4648      	mov	r0, r9
 80003d6:	f002 fdb9 	bl	8002f4c <__clzdi2>
 80003da:	0029      	movs	r1, r5
 80003dc:	0006      	movs	r6, r0
 80003de:	0020      	movs	r0, r4
 80003e0:	f002 fdb4 	bl	8002f4c <__clzdi2>
 80003e4:	1a33      	subs	r3, r6, r0
 80003e6:	469c      	mov	ip, r3
 80003e8:	3b20      	subs	r3, #32
 80003ea:	469a      	mov	sl, r3
 80003ec:	d500      	bpl.n	80003f0 <__udivmoddi4+0x38>
 80003ee:	e076      	b.n	80004de <__udivmoddi4+0x126>
 80003f0:	464b      	mov	r3, r9
 80003f2:	4652      	mov	r2, sl
 80003f4:	4093      	lsls	r3, r2
 80003f6:	001f      	movs	r7, r3
 80003f8:	464b      	mov	r3, r9
 80003fa:	4662      	mov	r2, ip
 80003fc:	4093      	lsls	r3, r2
 80003fe:	001e      	movs	r6, r3
 8000400:	42af      	cmp	r7, r5
 8000402:	d828      	bhi.n	8000456 <__udivmoddi4+0x9e>
 8000404:	d025      	beq.n	8000452 <__udivmoddi4+0x9a>
 8000406:	4653      	mov	r3, sl
 8000408:	1ba4      	subs	r4, r4, r6
 800040a:	41bd      	sbcs	r5, r7
 800040c:	2b00      	cmp	r3, #0
 800040e:	da00      	bge.n	8000412 <__udivmoddi4+0x5a>
 8000410:	e07b      	b.n	800050a <__udivmoddi4+0x152>
 8000412:	2200      	movs	r2, #0
 8000414:	2300      	movs	r3, #0
 8000416:	9200      	str	r2, [sp, #0]
 8000418:	9301      	str	r3, [sp, #4]
 800041a:	2301      	movs	r3, #1
 800041c:	4652      	mov	r2, sl
 800041e:	4093      	lsls	r3, r2
 8000420:	9301      	str	r3, [sp, #4]
 8000422:	2301      	movs	r3, #1
 8000424:	4662      	mov	r2, ip
 8000426:	4093      	lsls	r3, r2
 8000428:	9300      	str	r3, [sp, #0]
 800042a:	e018      	b.n	800045e <__udivmoddi4+0xa6>
 800042c:	4282      	cmp	r2, r0
 800042e:	d9d0      	bls.n	80003d2 <__udivmoddi4+0x1a>
 8000430:	2200      	movs	r2, #0
 8000432:	2300      	movs	r3, #0
 8000434:	9200      	str	r2, [sp, #0]
 8000436:	9301      	str	r3, [sp, #4]
 8000438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <__udivmoddi4+0x8a>
 800043e:	601c      	str	r4, [r3, #0]
 8000440:	605d      	str	r5, [r3, #4]
 8000442:	9800      	ldr	r0, [sp, #0]
 8000444:	9901      	ldr	r1, [sp, #4]
 8000446:	b002      	add	sp, #8
 8000448:	bc1c      	pop	{r2, r3, r4}
 800044a:	4690      	mov	r8, r2
 800044c:	4699      	mov	r9, r3
 800044e:	46a2      	mov	sl, r4
 8000450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000452:	42a3      	cmp	r3, r4
 8000454:	d9d7      	bls.n	8000406 <__udivmoddi4+0x4e>
 8000456:	2200      	movs	r2, #0
 8000458:	2300      	movs	r3, #0
 800045a:	9200      	str	r2, [sp, #0]
 800045c:	9301      	str	r3, [sp, #4]
 800045e:	4663      	mov	r3, ip
 8000460:	2b00      	cmp	r3, #0
 8000462:	d0e9      	beq.n	8000438 <__udivmoddi4+0x80>
 8000464:	07fb      	lsls	r3, r7, #31
 8000466:	4698      	mov	r8, r3
 8000468:	4641      	mov	r1, r8
 800046a:	0872      	lsrs	r2, r6, #1
 800046c:	430a      	orrs	r2, r1
 800046e:	087b      	lsrs	r3, r7, #1
 8000470:	4666      	mov	r6, ip
 8000472:	e00e      	b.n	8000492 <__udivmoddi4+0xda>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d101      	bne.n	800047c <__udivmoddi4+0xc4>
 8000478:	42a2      	cmp	r2, r4
 800047a:	d80c      	bhi.n	8000496 <__udivmoddi4+0xde>
 800047c:	1aa4      	subs	r4, r4, r2
 800047e:	419d      	sbcs	r5, r3
 8000480:	2001      	movs	r0, #1
 8000482:	1924      	adds	r4, r4, r4
 8000484:	416d      	adcs	r5, r5
 8000486:	2100      	movs	r1, #0
 8000488:	3e01      	subs	r6, #1
 800048a:	1824      	adds	r4, r4, r0
 800048c:	414d      	adcs	r5, r1
 800048e:	2e00      	cmp	r6, #0
 8000490:	d006      	beq.n	80004a0 <__udivmoddi4+0xe8>
 8000492:	42ab      	cmp	r3, r5
 8000494:	d9ee      	bls.n	8000474 <__udivmoddi4+0xbc>
 8000496:	3e01      	subs	r6, #1
 8000498:	1924      	adds	r4, r4, r4
 800049a:	416d      	adcs	r5, r5
 800049c:	2e00      	cmp	r6, #0
 800049e:	d1f8      	bne.n	8000492 <__udivmoddi4+0xda>
 80004a0:	9800      	ldr	r0, [sp, #0]
 80004a2:	9901      	ldr	r1, [sp, #4]
 80004a4:	4653      	mov	r3, sl
 80004a6:	1900      	adds	r0, r0, r4
 80004a8:	4169      	adcs	r1, r5
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	db23      	blt.n	80004f6 <__udivmoddi4+0x13e>
 80004ae:	002b      	movs	r3, r5
 80004b0:	4652      	mov	r2, sl
 80004b2:	40d3      	lsrs	r3, r2
 80004b4:	002a      	movs	r2, r5
 80004b6:	4664      	mov	r4, ip
 80004b8:	40e2      	lsrs	r2, r4
 80004ba:	001c      	movs	r4, r3
 80004bc:	4653      	mov	r3, sl
 80004be:	0015      	movs	r5, r2
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	db2d      	blt.n	8000520 <__udivmoddi4+0x168>
 80004c4:	0026      	movs	r6, r4
 80004c6:	4657      	mov	r7, sl
 80004c8:	40be      	lsls	r6, r7
 80004ca:	0033      	movs	r3, r6
 80004cc:	0026      	movs	r6, r4
 80004ce:	4667      	mov	r7, ip
 80004d0:	40be      	lsls	r6, r7
 80004d2:	0032      	movs	r2, r6
 80004d4:	1a80      	subs	r0, r0, r2
 80004d6:	4199      	sbcs	r1, r3
 80004d8:	9000      	str	r0, [sp, #0]
 80004da:	9101      	str	r1, [sp, #4]
 80004dc:	e7ac      	b.n	8000438 <__udivmoddi4+0x80>
 80004de:	4662      	mov	r2, ip
 80004e0:	2320      	movs	r3, #32
 80004e2:	1a9b      	subs	r3, r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	40da      	lsrs	r2, r3
 80004e8:	4661      	mov	r1, ip
 80004ea:	0013      	movs	r3, r2
 80004ec:	4642      	mov	r2, r8
 80004ee:	408a      	lsls	r2, r1
 80004f0:	0017      	movs	r7, r2
 80004f2:	431f      	orrs	r7, r3
 80004f4:	e780      	b.n	80003f8 <__udivmoddi4+0x40>
 80004f6:	4662      	mov	r2, ip
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	002a      	movs	r2, r5
 80004fe:	4666      	mov	r6, ip
 8000500:	409a      	lsls	r2, r3
 8000502:	0023      	movs	r3, r4
 8000504:	40f3      	lsrs	r3, r6
 8000506:	4313      	orrs	r3, r2
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0xfc>
 800050a:	4662      	mov	r2, ip
 800050c:	2320      	movs	r3, #32
 800050e:	2100      	movs	r1, #0
 8000510:	1a9b      	subs	r3, r3, r2
 8000512:	2200      	movs	r2, #0
 8000514:	9100      	str	r1, [sp, #0]
 8000516:	9201      	str	r2, [sp, #4]
 8000518:	2201      	movs	r2, #1
 800051a:	40da      	lsrs	r2, r3
 800051c:	9201      	str	r2, [sp, #4]
 800051e:	e780      	b.n	8000422 <__udivmoddi4+0x6a>
 8000520:	2320      	movs	r3, #32
 8000522:	4662      	mov	r2, ip
 8000524:	0026      	movs	r6, r4
 8000526:	1a9b      	subs	r3, r3, r2
 8000528:	40de      	lsrs	r6, r3
 800052a:	002f      	movs	r7, r5
 800052c:	46b0      	mov	r8, r6
 800052e:	4666      	mov	r6, ip
 8000530:	40b7      	lsls	r7, r6
 8000532:	4646      	mov	r6, r8
 8000534:	003b      	movs	r3, r7
 8000536:	4333      	orrs	r3, r6
 8000538:	e7c8      	b.n	80004cc <__udivmoddi4+0x114>
 800053a:	46c0      	nop			; (mov r8, r8)

0800053c <__aeabi_fadd>:
 800053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053e:	4647      	mov	r7, r8
 8000540:	46ce      	mov	lr, r9
 8000542:	0243      	lsls	r3, r0, #9
 8000544:	0a5b      	lsrs	r3, r3, #9
 8000546:	0044      	lsls	r4, r0, #1
 8000548:	0fc2      	lsrs	r2, r0, #31
 800054a:	469c      	mov	ip, r3
 800054c:	0048      	lsls	r0, r1, #1
 800054e:	00dd      	lsls	r5, r3, #3
 8000550:	024b      	lsls	r3, r1, #9
 8000552:	0e24      	lsrs	r4, r4, #24
 8000554:	0a5b      	lsrs	r3, r3, #9
 8000556:	0e00      	lsrs	r0, r0, #24
 8000558:	b580      	push	{r7, lr}
 800055a:	4698      	mov	r8, r3
 800055c:	0026      	movs	r6, r4
 800055e:	4691      	mov	r9, r2
 8000560:	0fc9      	lsrs	r1, r1, #31
 8000562:	00db      	lsls	r3, r3, #3
 8000564:	1a27      	subs	r7, r4, r0
 8000566:	428a      	cmp	r2, r1
 8000568:	d029      	beq.n	80005be <__aeabi_fadd+0x82>
 800056a:	2f00      	cmp	r7, #0
 800056c:	dd15      	ble.n	800059a <__aeabi_fadd+0x5e>
 800056e:	2800      	cmp	r0, #0
 8000570:	d14a      	bne.n	8000608 <__aeabi_fadd+0xcc>
 8000572:	2b00      	cmp	r3, #0
 8000574:	d000      	beq.n	8000578 <__aeabi_fadd+0x3c>
 8000576:	e095      	b.n	80006a4 <__aeabi_fadd+0x168>
 8000578:	08ed      	lsrs	r5, r5, #3
 800057a:	2cff      	cmp	r4, #255	; 0xff
 800057c:	d100      	bne.n	8000580 <__aeabi_fadd+0x44>
 800057e:	e088      	b.n	8000692 <__aeabi_fadd+0x156>
 8000580:	026b      	lsls	r3, r5, #9
 8000582:	0a5b      	lsrs	r3, r3, #9
 8000584:	b2e6      	uxtb	r6, r4
 8000586:	025b      	lsls	r3, r3, #9
 8000588:	05f6      	lsls	r6, r6, #23
 800058a:	0a58      	lsrs	r0, r3, #9
 800058c:	4330      	orrs	r0, r6
 800058e:	07d2      	lsls	r2, r2, #31
 8000590:	4310      	orrs	r0, r2
 8000592:	bc0c      	pop	{r2, r3}
 8000594:	4690      	mov	r8, r2
 8000596:	4699      	mov	r9, r3
 8000598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800059a:	2f00      	cmp	r7, #0
 800059c:	d000      	beq.n	80005a0 <__aeabi_fadd+0x64>
 800059e:	e087      	b.n	80006b0 <__aeabi_fadd+0x174>
 80005a0:	1c60      	adds	r0, r4, #1
 80005a2:	b2c0      	uxtb	r0, r0
 80005a4:	2801      	cmp	r0, #1
 80005a6:	dc00      	bgt.n	80005aa <__aeabi_fadd+0x6e>
 80005a8:	e0b6      	b.n	8000718 <__aeabi_fadd+0x1dc>
 80005aa:	1aee      	subs	r6, r5, r3
 80005ac:	0172      	lsls	r2, r6, #5
 80005ae:	d500      	bpl.n	80005b2 <__aeabi_fadd+0x76>
 80005b0:	e0c5      	b.n	800073e <__aeabi_fadd+0x202>
 80005b2:	2e00      	cmp	r6, #0
 80005b4:	d13d      	bne.n	8000632 <__aeabi_fadd+0xf6>
 80005b6:	2200      	movs	r2, #0
 80005b8:	2600      	movs	r6, #0
 80005ba:	2300      	movs	r3, #0
 80005bc:	e7e3      	b.n	8000586 <__aeabi_fadd+0x4a>
 80005be:	2f00      	cmp	r7, #0
 80005c0:	dc00      	bgt.n	80005c4 <__aeabi_fadd+0x88>
 80005c2:	e096      	b.n	80006f2 <__aeabi_fadd+0x1b6>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d05d      	beq.n	8000684 <__aeabi_fadd+0x148>
 80005c8:	2cff      	cmp	r4, #255	; 0xff
 80005ca:	d060      	beq.n	800068e <__aeabi_fadd+0x152>
 80005cc:	2280      	movs	r2, #128	; 0x80
 80005ce:	04d2      	lsls	r2, r2, #19
 80005d0:	4313      	orrs	r3, r2
 80005d2:	2f1b      	cmp	r7, #27
 80005d4:	dd00      	ble.n	80005d8 <__aeabi_fadd+0x9c>
 80005d6:	e0ec      	b.n	80007b2 <__aeabi_fadd+0x276>
 80005d8:	2220      	movs	r2, #32
 80005da:	1bd2      	subs	r2, r2, r7
 80005dc:	0018      	movs	r0, r3
 80005de:	4093      	lsls	r3, r2
 80005e0:	40f8      	lsrs	r0, r7
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	4193      	sbcs	r3, r2
 80005e6:	4303      	orrs	r3, r0
 80005e8:	18ed      	adds	r5, r5, r3
 80005ea:	016b      	lsls	r3, r5, #5
 80005ec:	d57b      	bpl.n	80006e6 <__aeabi_fadd+0x1aa>
 80005ee:	3401      	adds	r4, #1
 80005f0:	2cff      	cmp	r4, #255	; 0xff
 80005f2:	d100      	bne.n	80005f6 <__aeabi_fadd+0xba>
 80005f4:	e0b7      	b.n	8000766 <__aeabi_fadd+0x22a>
 80005f6:	2201      	movs	r2, #1
 80005f8:	2607      	movs	r6, #7
 80005fa:	402a      	ands	r2, r5
 80005fc:	086b      	lsrs	r3, r5, #1
 80005fe:	4d9a      	ldr	r5, [pc, #616]	; (8000868 <__aeabi_fadd+0x32c>)
 8000600:	401d      	ands	r5, r3
 8000602:	4315      	orrs	r5, r2
 8000604:	402e      	ands	r6, r5
 8000606:	e029      	b.n	800065c <__aeabi_fadd+0x120>
 8000608:	2cff      	cmp	r4, #255	; 0xff
 800060a:	d0b5      	beq.n	8000578 <__aeabi_fadd+0x3c>
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	04d2      	lsls	r2, r2, #19
 8000610:	4313      	orrs	r3, r2
 8000612:	2f1b      	cmp	r7, #27
 8000614:	dd00      	ble.n	8000618 <__aeabi_fadd+0xdc>
 8000616:	e0b2      	b.n	800077e <__aeabi_fadd+0x242>
 8000618:	2220      	movs	r2, #32
 800061a:	1bd2      	subs	r2, r2, r7
 800061c:	0019      	movs	r1, r3
 800061e:	4093      	lsls	r3, r2
 8000620:	40f9      	lsrs	r1, r7
 8000622:	1e5a      	subs	r2, r3, #1
 8000624:	4193      	sbcs	r3, r2
 8000626:	430b      	orrs	r3, r1
 8000628:	1aed      	subs	r5, r5, r3
 800062a:	016b      	lsls	r3, r5, #5
 800062c:	d55b      	bpl.n	80006e6 <__aeabi_fadd+0x1aa>
 800062e:	01ad      	lsls	r5, r5, #6
 8000630:	09ae      	lsrs	r6, r5, #6
 8000632:	0030      	movs	r0, r6
 8000634:	f002 fc6c 	bl	8002f10 <__clzsi2>
 8000638:	3805      	subs	r0, #5
 800063a:	4086      	lsls	r6, r0
 800063c:	4284      	cmp	r4, r0
 800063e:	dc65      	bgt.n	800070c <__aeabi_fadd+0x1d0>
 8000640:	1b04      	subs	r4, r0, r4
 8000642:	0033      	movs	r3, r6
 8000644:	2020      	movs	r0, #32
 8000646:	3401      	adds	r4, #1
 8000648:	40e3      	lsrs	r3, r4
 800064a:	1b04      	subs	r4, r0, r4
 800064c:	40a6      	lsls	r6, r4
 800064e:	1e75      	subs	r5, r6, #1
 8000650:	41ae      	sbcs	r6, r5
 8000652:	4333      	orrs	r3, r6
 8000654:	2607      	movs	r6, #7
 8000656:	001d      	movs	r5, r3
 8000658:	2400      	movs	r4, #0
 800065a:	401e      	ands	r6, r3
 800065c:	2201      	movs	r2, #1
 800065e:	464b      	mov	r3, r9
 8000660:	401a      	ands	r2, r3
 8000662:	2e00      	cmp	r6, #0
 8000664:	d004      	beq.n	8000670 <__aeabi_fadd+0x134>
 8000666:	230f      	movs	r3, #15
 8000668:	402b      	ands	r3, r5
 800066a:	2b04      	cmp	r3, #4
 800066c:	d000      	beq.n	8000670 <__aeabi_fadd+0x134>
 800066e:	3504      	adds	r5, #4
 8000670:	016b      	lsls	r3, r5, #5
 8000672:	d400      	bmi.n	8000676 <__aeabi_fadd+0x13a>
 8000674:	e780      	b.n	8000578 <__aeabi_fadd+0x3c>
 8000676:	3401      	adds	r4, #1
 8000678:	b2e6      	uxtb	r6, r4
 800067a:	2cff      	cmp	r4, #255	; 0xff
 800067c:	d12f      	bne.n	80006de <__aeabi_fadd+0x1a2>
 800067e:	26ff      	movs	r6, #255	; 0xff
 8000680:	2300      	movs	r3, #0
 8000682:	e780      	b.n	8000586 <__aeabi_fadd+0x4a>
 8000684:	2b00      	cmp	r3, #0
 8000686:	d152      	bne.n	800072e <__aeabi_fadd+0x1f2>
 8000688:	2cff      	cmp	r4, #255	; 0xff
 800068a:	d000      	beq.n	800068e <__aeabi_fadd+0x152>
 800068c:	e774      	b.n	8000578 <__aeabi_fadd+0x3c>
 800068e:	000a      	movs	r2, r1
 8000690:	08ed      	lsrs	r5, r5, #3
 8000692:	2d00      	cmp	r5, #0
 8000694:	d0f3      	beq.n	800067e <__aeabi_fadd+0x142>
 8000696:	2380      	movs	r3, #128	; 0x80
 8000698:	03db      	lsls	r3, r3, #15
 800069a:	432b      	orrs	r3, r5
 800069c:	025b      	lsls	r3, r3, #9
 800069e:	0a5b      	lsrs	r3, r3, #9
 80006a0:	26ff      	movs	r6, #255	; 0xff
 80006a2:	e770      	b.n	8000586 <__aeabi_fadd+0x4a>
 80006a4:	3f01      	subs	r7, #1
 80006a6:	2f00      	cmp	r7, #0
 80006a8:	d0be      	beq.n	8000628 <__aeabi_fadd+0xec>
 80006aa:	2cff      	cmp	r4, #255	; 0xff
 80006ac:	d1b1      	bne.n	8000612 <__aeabi_fadd+0xd6>
 80006ae:	e763      	b.n	8000578 <__aeabi_fadd+0x3c>
 80006b0:	2c00      	cmp	r4, #0
 80006b2:	d047      	beq.n	8000744 <__aeabi_fadd+0x208>
 80006b4:	28ff      	cmp	r0, #255	; 0xff
 80006b6:	d069      	beq.n	800078c <__aeabi_fadd+0x250>
 80006b8:	2480      	movs	r4, #128	; 0x80
 80006ba:	04e4      	lsls	r4, r4, #19
 80006bc:	427a      	negs	r2, r7
 80006be:	4325      	orrs	r5, r4
 80006c0:	2a1b      	cmp	r2, #27
 80006c2:	dd00      	ble.n	80006c6 <__aeabi_fadd+0x18a>
 80006c4:	e0c5      	b.n	8000852 <__aeabi_fadd+0x316>
 80006c6:	002c      	movs	r4, r5
 80006c8:	2620      	movs	r6, #32
 80006ca:	40d4      	lsrs	r4, r2
 80006cc:	1ab2      	subs	r2, r6, r2
 80006ce:	4095      	lsls	r5, r2
 80006d0:	1e6a      	subs	r2, r5, #1
 80006d2:	4195      	sbcs	r5, r2
 80006d4:	4325      	orrs	r5, r4
 80006d6:	1b5d      	subs	r5, r3, r5
 80006d8:	0004      	movs	r4, r0
 80006da:	4689      	mov	r9, r1
 80006dc:	e7a5      	b.n	800062a <__aeabi_fadd+0xee>
 80006de:	01ab      	lsls	r3, r5, #6
 80006e0:	0a5b      	lsrs	r3, r3, #9
 80006e2:	e750      	b.n	8000586 <__aeabi_fadd+0x4a>
 80006e4:	2400      	movs	r4, #0
 80006e6:	2201      	movs	r2, #1
 80006e8:	464b      	mov	r3, r9
 80006ea:	401a      	ands	r2, r3
 80006ec:	076b      	lsls	r3, r5, #29
 80006ee:	d1ba      	bne.n	8000666 <__aeabi_fadd+0x12a>
 80006f0:	e742      	b.n	8000578 <__aeabi_fadd+0x3c>
 80006f2:	2f00      	cmp	r7, #0
 80006f4:	d13b      	bne.n	800076e <__aeabi_fadd+0x232>
 80006f6:	3401      	adds	r4, #1
 80006f8:	b2e0      	uxtb	r0, r4
 80006fa:	2801      	cmp	r0, #1
 80006fc:	dd4a      	ble.n	8000794 <__aeabi_fadd+0x258>
 80006fe:	2cff      	cmp	r4, #255	; 0xff
 8000700:	d0bd      	beq.n	800067e <__aeabi_fadd+0x142>
 8000702:	2607      	movs	r6, #7
 8000704:	18ed      	adds	r5, r5, r3
 8000706:	086d      	lsrs	r5, r5, #1
 8000708:	402e      	ands	r6, r5
 800070a:	e7a7      	b.n	800065c <__aeabi_fadd+0x120>
 800070c:	2307      	movs	r3, #7
 800070e:	4d57      	ldr	r5, [pc, #348]	; (800086c <__aeabi_fadd+0x330>)
 8000710:	1a24      	subs	r4, r4, r0
 8000712:	4035      	ands	r5, r6
 8000714:	401e      	ands	r6, r3
 8000716:	e7a1      	b.n	800065c <__aeabi_fadd+0x120>
 8000718:	2c00      	cmp	r4, #0
 800071a:	d11b      	bne.n	8000754 <__aeabi_fadd+0x218>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d16e      	bne.n	80007fe <__aeabi_fadd+0x2c2>
 8000720:	2b00      	cmp	r3, #0
 8000722:	d100      	bne.n	8000726 <__aeabi_fadd+0x1ea>
 8000724:	e09a      	b.n	800085c <__aeabi_fadd+0x320>
 8000726:	000a      	movs	r2, r1
 8000728:	001d      	movs	r5, r3
 800072a:	003c      	movs	r4, r7
 800072c:	e724      	b.n	8000578 <__aeabi_fadd+0x3c>
 800072e:	3f01      	subs	r7, #1
 8000730:	2f00      	cmp	r7, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x1fa>
 8000734:	e758      	b.n	80005e8 <__aeabi_fadd+0xac>
 8000736:	2cff      	cmp	r4, #255	; 0xff
 8000738:	d000      	beq.n	800073c <__aeabi_fadd+0x200>
 800073a:	e74a      	b.n	80005d2 <__aeabi_fadd+0x96>
 800073c:	e7a7      	b.n	800068e <__aeabi_fadd+0x152>
 800073e:	1b5e      	subs	r6, r3, r5
 8000740:	4689      	mov	r9, r1
 8000742:	e776      	b.n	8000632 <__aeabi_fadd+0xf6>
 8000744:	2d00      	cmp	r5, #0
 8000746:	d11c      	bne.n	8000782 <__aeabi_fadd+0x246>
 8000748:	000a      	movs	r2, r1
 800074a:	28ff      	cmp	r0, #255	; 0xff
 800074c:	d01f      	beq.n	800078e <__aeabi_fadd+0x252>
 800074e:	0004      	movs	r4, r0
 8000750:	001d      	movs	r5, r3
 8000752:	e711      	b.n	8000578 <__aeabi_fadd+0x3c>
 8000754:	2d00      	cmp	r5, #0
 8000756:	d15d      	bne.n	8000814 <__aeabi_fadd+0x2d8>
 8000758:	2b00      	cmp	r3, #0
 800075a:	d117      	bne.n	800078c <__aeabi_fadd+0x250>
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	2200      	movs	r2, #0
 8000760:	03db      	lsls	r3, r3, #15
 8000762:	26ff      	movs	r6, #255	; 0xff
 8000764:	e70f      	b.n	8000586 <__aeabi_fadd+0x4a>
 8000766:	000a      	movs	r2, r1
 8000768:	26ff      	movs	r6, #255	; 0xff
 800076a:	2300      	movs	r3, #0
 800076c:	e70b      	b.n	8000586 <__aeabi_fadd+0x4a>
 800076e:	2c00      	cmp	r4, #0
 8000770:	d121      	bne.n	80007b6 <__aeabi_fadd+0x27a>
 8000772:	2d00      	cmp	r5, #0
 8000774:	d166      	bne.n	8000844 <__aeabi_fadd+0x308>
 8000776:	28ff      	cmp	r0, #255	; 0xff
 8000778:	d1e9      	bne.n	800074e <__aeabi_fadd+0x212>
 800077a:	001d      	movs	r5, r3
 800077c:	e787      	b.n	800068e <__aeabi_fadd+0x152>
 800077e:	2301      	movs	r3, #1
 8000780:	e752      	b.n	8000628 <__aeabi_fadd+0xec>
 8000782:	1c7a      	adds	r2, r7, #1
 8000784:	d0a7      	beq.n	80006d6 <__aeabi_fadd+0x19a>
 8000786:	43fa      	mvns	r2, r7
 8000788:	28ff      	cmp	r0, #255	; 0xff
 800078a:	d199      	bne.n	80006c0 <__aeabi_fadd+0x184>
 800078c:	000a      	movs	r2, r1
 800078e:	001d      	movs	r5, r3
 8000790:	24ff      	movs	r4, #255	; 0xff
 8000792:	e6f1      	b.n	8000578 <__aeabi_fadd+0x3c>
 8000794:	2e00      	cmp	r6, #0
 8000796:	d121      	bne.n	80007dc <__aeabi_fadd+0x2a0>
 8000798:	2d00      	cmp	r5, #0
 800079a:	d04f      	beq.n	800083c <__aeabi_fadd+0x300>
 800079c:	2b00      	cmp	r3, #0
 800079e:	d04c      	beq.n	800083a <__aeabi_fadd+0x2fe>
 80007a0:	18ed      	adds	r5, r5, r3
 80007a2:	016b      	lsls	r3, r5, #5
 80007a4:	d59e      	bpl.n	80006e4 <__aeabi_fadd+0x1a8>
 80007a6:	4b31      	ldr	r3, [pc, #196]	; (800086c <__aeabi_fadd+0x330>)
 80007a8:	3607      	adds	r6, #7
 80007aa:	402e      	ands	r6, r5
 80007ac:	2401      	movs	r4, #1
 80007ae:	401d      	ands	r5, r3
 80007b0:	e754      	b.n	800065c <__aeabi_fadd+0x120>
 80007b2:	2301      	movs	r3, #1
 80007b4:	e718      	b.n	80005e8 <__aeabi_fadd+0xac>
 80007b6:	28ff      	cmp	r0, #255	; 0xff
 80007b8:	d0df      	beq.n	800077a <__aeabi_fadd+0x23e>
 80007ba:	2480      	movs	r4, #128	; 0x80
 80007bc:	04e4      	lsls	r4, r4, #19
 80007be:	427f      	negs	r7, r7
 80007c0:	4325      	orrs	r5, r4
 80007c2:	2f1b      	cmp	r7, #27
 80007c4:	dc4d      	bgt.n	8000862 <__aeabi_fadd+0x326>
 80007c6:	2620      	movs	r6, #32
 80007c8:	1bf6      	subs	r6, r6, r7
 80007ca:	002c      	movs	r4, r5
 80007cc:	40b5      	lsls	r5, r6
 80007ce:	40fc      	lsrs	r4, r7
 80007d0:	1e6a      	subs	r2, r5, #1
 80007d2:	4195      	sbcs	r5, r2
 80007d4:	4325      	orrs	r5, r4
 80007d6:	18ed      	adds	r5, r5, r3
 80007d8:	0004      	movs	r4, r0
 80007da:	e706      	b.n	80005ea <__aeabi_fadd+0xae>
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d0cc      	beq.n	800077a <__aeabi_fadd+0x23e>
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d100      	bne.n	80007e6 <__aeabi_fadd+0x2aa>
 80007e4:	e753      	b.n	800068e <__aeabi_fadd+0x152>
 80007e6:	2180      	movs	r1, #128	; 0x80
 80007e8:	4660      	mov	r0, ip
 80007ea:	03c9      	lsls	r1, r1, #15
 80007ec:	4208      	tst	r0, r1
 80007ee:	d003      	beq.n	80007f8 <__aeabi_fadd+0x2bc>
 80007f0:	4640      	mov	r0, r8
 80007f2:	4208      	tst	r0, r1
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fadd+0x2bc>
 80007f6:	001d      	movs	r5, r3
 80007f8:	2101      	movs	r1, #1
 80007fa:	4011      	ands	r1, r2
 80007fc:	e747      	b.n	800068e <__aeabi_fadd+0x152>
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_fadd+0x2c8>
 8000802:	e6b9      	b.n	8000578 <__aeabi_fadd+0x3c>
 8000804:	1aea      	subs	r2, r5, r3
 8000806:	0150      	lsls	r0, r2, #5
 8000808:	d525      	bpl.n	8000856 <__aeabi_fadd+0x31a>
 800080a:	2607      	movs	r6, #7
 800080c:	1b5d      	subs	r5, r3, r5
 800080e:	402e      	ands	r6, r5
 8000810:	4689      	mov	r9, r1
 8000812:	e723      	b.n	800065c <__aeabi_fadd+0x120>
 8000814:	24ff      	movs	r4, #255	; 0xff
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <__aeabi_fadd+0x2e0>
 800081a:	e6ad      	b.n	8000578 <__aeabi_fadd+0x3c>
 800081c:	2280      	movs	r2, #128	; 0x80
 800081e:	4660      	mov	r0, ip
 8000820:	03d2      	lsls	r2, r2, #15
 8000822:	4210      	tst	r0, r2
 8000824:	d004      	beq.n	8000830 <__aeabi_fadd+0x2f4>
 8000826:	4640      	mov	r0, r8
 8000828:	4210      	tst	r0, r2
 800082a:	d101      	bne.n	8000830 <__aeabi_fadd+0x2f4>
 800082c:	001d      	movs	r5, r3
 800082e:	4689      	mov	r9, r1
 8000830:	2201      	movs	r2, #1
 8000832:	464b      	mov	r3, r9
 8000834:	24ff      	movs	r4, #255	; 0xff
 8000836:	401a      	ands	r2, r3
 8000838:	e69e      	b.n	8000578 <__aeabi_fadd+0x3c>
 800083a:	002b      	movs	r3, r5
 800083c:	08dd      	lsrs	r5, r3, #3
 800083e:	000a      	movs	r2, r1
 8000840:	2400      	movs	r4, #0
 8000842:	e69d      	b.n	8000580 <__aeabi_fadd+0x44>
 8000844:	1c7a      	adds	r2, r7, #1
 8000846:	d0c6      	beq.n	80007d6 <__aeabi_fadd+0x29a>
 8000848:	43ff      	mvns	r7, r7
 800084a:	28ff      	cmp	r0, #255	; 0xff
 800084c:	d1b9      	bne.n	80007c2 <__aeabi_fadd+0x286>
 800084e:	001d      	movs	r5, r3
 8000850:	e71d      	b.n	800068e <__aeabi_fadd+0x152>
 8000852:	2501      	movs	r5, #1
 8000854:	e73f      	b.n	80006d6 <__aeabi_fadd+0x19a>
 8000856:	1e15      	subs	r5, r2, #0
 8000858:	d000      	beq.n	800085c <__aeabi_fadd+0x320>
 800085a:	e744      	b.n	80006e6 <__aeabi_fadd+0x1aa>
 800085c:	2200      	movs	r2, #0
 800085e:	2300      	movs	r3, #0
 8000860:	e691      	b.n	8000586 <__aeabi_fadd+0x4a>
 8000862:	2501      	movs	r5, #1
 8000864:	e7b7      	b.n	80007d6 <__aeabi_fadd+0x29a>
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	7dffffff 	.word	0x7dffffff
 800086c:	fbffffff 	.word	0xfbffffff

08000870 <__aeabi_fdiv>:
 8000870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000872:	4657      	mov	r7, sl
 8000874:	464e      	mov	r6, r9
 8000876:	4645      	mov	r5, r8
 8000878:	46de      	mov	lr, fp
 800087a:	0244      	lsls	r4, r0, #9
 800087c:	b5e0      	push	{r5, r6, r7, lr}
 800087e:	0046      	lsls	r6, r0, #1
 8000880:	4688      	mov	r8, r1
 8000882:	0a64      	lsrs	r4, r4, #9
 8000884:	0e36      	lsrs	r6, r6, #24
 8000886:	0fc7      	lsrs	r7, r0, #31
 8000888:	2e00      	cmp	r6, #0
 800088a:	d063      	beq.n	8000954 <__aeabi_fdiv+0xe4>
 800088c:	2eff      	cmp	r6, #255	; 0xff
 800088e:	d024      	beq.n	80008da <__aeabi_fdiv+0x6a>
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	00e4      	lsls	r4, r4, #3
 8000894:	04db      	lsls	r3, r3, #19
 8000896:	431c      	orrs	r4, r3
 8000898:	2300      	movs	r3, #0
 800089a:	4699      	mov	r9, r3
 800089c:	469b      	mov	fp, r3
 800089e:	3e7f      	subs	r6, #127	; 0x7f
 80008a0:	4643      	mov	r3, r8
 80008a2:	4642      	mov	r2, r8
 80008a4:	025d      	lsls	r5, r3, #9
 80008a6:	0fd2      	lsrs	r2, r2, #31
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	0a6d      	lsrs	r5, r5, #9
 80008ac:	0e1b      	lsrs	r3, r3, #24
 80008ae:	4690      	mov	r8, r2
 80008b0:	4692      	mov	sl, r2
 80008b2:	d065      	beq.n	8000980 <__aeabi_fdiv+0x110>
 80008b4:	2bff      	cmp	r3, #255	; 0xff
 80008b6:	d055      	beq.n	8000964 <__aeabi_fdiv+0xf4>
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	2100      	movs	r1, #0
 80008bc:	00ed      	lsls	r5, r5, #3
 80008be:	04d2      	lsls	r2, r2, #19
 80008c0:	3b7f      	subs	r3, #127	; 0x7f
 80008c2:	4315      	orrs	r5, r2
 80008c4:	1af6      	subs	r6, r6, r3
 80008c6:	4643      	mov	r3, r8
 80008c8:	464a      	mov	r2, r9
 80008ca:	407b      	eors	r3, r7
 80008cc:	2a0f      	cmp	r2, #15
 80008ce:	d900      	bls.n	80008d2 <__aeabi_fdiv+0x62>
 80008d0:	e08d      	b.n	80009ee <__aeabi_fdiv+0x17e>
 80008d2:	486d      	ldr	r0, [pc, #436]	; (8000a88 <__aeabi_fdiv+0x218>)
 80008d4:	0092      	lsls	r2, r2, #2
 80008d6:	5882      	ldr	r2, [r0, r2]
 80008d8:	4697      	mov	pc, r2
 80008da:	2c00      	cmp	r4, #0
 80008dc:	d154      	bne.n	8000988 <__aeabi_fdiv+0x118>
 80008de:	2308      	movs	r3, #8
 80008e0:	4699      	mov	r9, r3
 80008e2:	3b06      	subs	r3, #6
 80008e4:	26ff      	movs	r6, #255	; 0xff
 80008e6:	469b      	mov	fp, r3
 80008e8:	e7da      	b.n	80008a0 <__aeabi_fdiv+0x30>
 80008ea:	2500      	movs	r5, #0
 80008ec:	4653      	mov	r3, sl
 80008ee:	2902      	cmp	r1, #2
 80008f0:	d01b      	beq.n	800092a <__aeabi_fdiv+0xba>
 80008f2:	2903      	cmp	r1, #3
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fdiv+0x88>
 80008f6:	e0bf      	b.n	8000a78 <__aeabi_fdiv+0x208>
 80008f8:	2901      	cmp	r1, #1
 80008fa:	d028      	beq.n	800094e <__aeabi_fdiv+0xde>
 80008fc:	0030      	movs	r0, r6
 80008fe:	307f      	adds	r0, #127	; 0x7f
 8000900:	2800      	cmp	r0, #0
 8000902:	dd20      	ble.n	8000946 <__aeabi_fdiv+0xd6>
 8000904:	076a      	lsls	r2, r5, #29
 8000906:	d004      	beq.n	8000912 <__aeabi_fdiv+0xa2>
 8000908:	220f      	movs	r2, #15
 800090a:	402a      	ands	r2, r5
 800090c:	2a04      	cmp	r2, #4
 800090e:	d000      	beq.n	8000912 <__aeabi_fdiv+0xa2>
 8000910:	3504      	adds	r5, #4
 8000912:	012a      	lsls	r2, r5, #4
 8000914:	d503      	bpl.n	800091e <__aeabi_fdiv+0xae>
 8000916:	0030      	movs	r0, r6
 8000918:	4a5c      	ldr	r2, [pc, #368]	; (8000a8c <__aeabi_fdiv+0x21c>)
 800091a:	3080      	adds	r0, #128	; 0x80
 800091c:	4015      	ands	r5, r2
 800091e:	28fe      	cmp	r0, #254	; 0xfe
 8000920:	dc03      	bgt.n	800092a <__aeabi_fdiv+0xba>
 8000922:	01ac      	lsls	r4, r5, #6
 8000924:	0a64      	lsrs	r4, r4, #9
 8000926:	b2c2      	uxtb	r2, r0
 8000928:	e001      	b.n	800092e <__aeabi_fdiv+0xbe>
 800092a:	22ff      	movs	r2, #255	; 0xff
 800092c:	2400      	movs	r4, #0
 800092e:	0264      	lsls	r4, r4, #9
 8000930:	05d2      	lsls	r2, r2, #23
 8000932:	0a60      	lsrs	r0, r4, #9
 8000934:	07db      	lsls	r3, r3, #31
 8000936:	4310      	orrs	r0, r2
 8000938:	4318      	orrs	r0, r3
 800093a:	bc3c      	pop	{r2, r3, r4, r5}
 800093c:	4690      	mov	r8, r2
 800093e:	4699      	mov	r9, r3
 8000940:	46a2      	mov	sl, r4
 8000942:	46ab      	mov	fp, r5
 8000944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000946:	2201      	movs	r2, #1
 8000948:	1a10      	subs	r0, r2, r0
 800094a:	281b      	cmp	r0, #27
 800094c:	dd7c      	ble.n	8000a48 <__aeabi_fdiv+0x1d8>
 800094e:	2200      	movs	r2, #0
 8000950:	2400      	movs	r4, #0
 8000952:	e7ec      	b.n	800092e <__aeabi_fdiv+0xbe>
 8000954:	2c00      	cmp	r4, #0
 8000956:	d11d      	bne.n	8000994 <__aeabi_fdiv+0x124>
 8000958:	2304      	movs	r3, #4
 800095a:	4699      	mov	r9, r3
 800095c:	3b03      	subs	r3, #3
 800095e:	2600      	movs	r6, #0
 8000960:	469b      	mov	fp, r3
 8000962:	e79d      	b.n	80008a0 <__aeabi_fdiv+0x30>
 8000964:	3eff      	subs	r6, #255	; 0xff
 8000966:	2d00      	cmp	r5, #0
 8000968:	d120      	bne.n	80009ac <__aeabi_fdiv+0x13c>
 800096a:	2102      	movs	r1, #2
 800096c:	4643      	mov	r3, r8
 800096e:	464a      	mov	r2, r9
 8000970:	407b      	eors	r3, r7
 8000972:	430a      	orrs	r2, r1
 8000974:	2a0f      	cmp	r2, #15
 8000976:	d8d8      	bhi.n	800092a <__aeabi_fdiv+0xba>
 8000978:	4845      	ldr	r0, [pc, #276]	; (8000a90 <__aeabi_fdiv+0x220>)
 800097a:	0092      	lsls	r2, r2, #2
 800097c:	5882      	ldr	r2, [r0, r2]
 800097e:	4697      	mov	pc, r2
 8000980:	2d00      	cmp	r5, #0
 8000982:	d119      	bne.n	80009b8 <__aeabi_fdiv+0x148>
 8000984:	2101      	movs	r1, #1
 8000986:	e7f1      	b.n	800096c <__aeabi_fdiv+0xfc>
 8000988:	230c      	movs	r3, #12
 800098a:	4699      	mov	r9, r3
 800098c:	3b09      	subs	r3, #9
 800098e:	26ff      	movs	r6, #255	; 0xff
 8000990:	469b      	mov	fp, r3
 8000992:	e785      	b.n	80008a0 <__aeabi_fdiv+0x30>
 8000994:	0020      	movs	r0, r4
 8000996:	f002 fabb 	bl	8002f10 <__clzsi2>
 800099a:	2676      	movs	r6, #118	; 0x76
 800099c:	1f43      	subs	r3, r0, #5
 800099e:	409c      	lsls	r4, r3
 80009a0:	2300      	movs	r3, #0
 80009a2:	4276      	negs	r6, r6
 80009a4:	1a36      	subs	r6, r6, r0
 80009a6:	4699      	mov	r9, r3
 80009a8:	469b      	mov	fp, r3
 80009aa:	e779      	b.n	80008a0 <__aeabi_fdiv+0x30>
 80009ac:	464a      	mov	r2, r9
 80009ae:	2303      	movs	r3, #3
 80009b0:	431a      	orrs	r2, r3
 80009b2:	4691      	mov	r9, r2
 80009b4:	2103      	movs	r1, #3
 80009b6:	e786      	b.n	80008c6 <__aeabi_fdiv+0x56>
 80009b8:	0028      	movs	r0, r5
 80009ba:	f002 faa9 	bl	8002f10 <__clzsi2>
 80009be:	1f43      	subs	r3, r0, #5
 80009c0:	1836      	adds	r6, r6, r0
 80009c2:	409d      	lsls	r5, r3
 80009c4:	3676      	adds	r6, #118	; 0x76
 80009c6:	2100      	movs	r1, #0
 80009c8:	e77d      	b.n	80008c6 <__aeabi_fdiv+0x56>
 80009ca:	2480      	movs	r4, #128	; 0x80
 80009cc:	2300      	movs	r3, #0
 80009ce:	03e4      	lsls	r4, r4, #15
 80009d0:	22ff      	movs	r2, #255	; 0xff
 80009d2:	e7ac      	b.n	800092e <__aeabi_fdiv+0xbe>
 80009d4:	2500      	movs	r5, #0
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	03db      	lsls	r3, r3, #15
 80009da:	421c      	tst	r4, r3
 80009dc:	d028      	beq.n	8000a30 <__aeabi_fdiv+0x1c0>
 80009de:	421d      	tst	r5, r3
 80009e0:	d126      	bne.n	8000a30 <__aeabi_fdiv+0x1c0>
 80009e2:	432b      	orrs	r3, r5
 80009e4:	025c      	lsls	r4, r3, #9
 80009e6:	0a64      	lsrs	r4, r4, #9
 80009e8:	4643      	mov	r3, r8
 80009ea:	22ff      	movs	r2, #255	; 0xff
 80009ec:	e79f      	b.n	800092e <__aeabi_fdiv+0xbe>
 80009ee:	0162      	lsls	r2, r4, #5
 80009f0:	016c      	lsls	r4, r5, #5
 80009f2:	42a2      	cmp	r2, r4
 80009f4:	d224      	bcs.n	8000a40 <__aeabi_fdiv+0x1d0>
 80009f6:	211b      	movs	r1, #27
 80009f8:	2500      	movs	r5, #0
 80009fa:	3e01      	subs	r6, #1
 80009fc:	2701      	movs	r7, #1
 80009fe:	0010      	movs	r0, r2
 8000a00:	006d      	lsls	r5, r5, #1
 8000a02:	0052      	lsls	r2, r2, #1
 8000a04:	2800      	cmp	r0, #0
 8000a06:	db01      	blt.n	8000a0c <__aeabi_fdiv+0x19c>
 8000a08:	4294      	cmp	r4, r2
 8000a0a:	d801      	bhi.n	8000a10 <__aeabi_fdiv+0x1a0>
 8000a0c:	1b12      	subs	r2, r2, r4
 8000a0e:	433d      	orrs	r5, r7
 8000a10:	3901      	subs	r1, #1
 8000a12:	2900      	cmp	r1, #0
 8000a14:	d1f3      	bne.n	80009fe <__aeabi_fdiv+0x18e>
 8000a16:	0014      	movs	r4, r2
 8000a18:	1e62      	subs	r2, r4, #1
 8000a1a:	4194      	sbcs	r4, r2
 8000a1c:	4325      	orrs	r5, r4
 8000a1e:	e76d      	b.n	80008fc <__aeabi_fdiv+0x8c>
 8000a20:	46ba      	mov	sl, r7
 8000a22:	4659      	mov	r1, fp
 8000a24:	0025      	movs	r5, r4
 8000a26:	4653      	mov	r3, sl
 8000a28:	2902      	cmp	r1, #2
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_fdiv+0x1be>
 8000a2c:	e761      	b.n	80008f2 <__aeabi_fdiv+0x82>
 8000a2e:	e77c      	b.n	800092a <__aeabi_fdiv+0xba>
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	03db      	lsls	r3, r3, #15
 8000a34:	431c      	orrs	r4, r3
 8000a36:	0264      	lsls	r4, r4, #9
 8000a38:	0a64      	lsrs	r4, r4, #9
 8000a3a:	003b      	movs	r3, r7
 8000a3c:	22ff      	movs	r2, #255	; 0xff
 8000a3e:	e776      	b.n	800092e <__aeabi_fdiv+0xbe>
 8000a40:	1b12      	subs	r2, r2, r4
 8000a42:	211a      	movs	r1, #26
 8000a44:	2501      	movs	r5, #1
 8000a46:	e7d9      	b.n	80009fc <__aeabi_fdiv+0x18c>
 8000a48:	369e      	adds	r6, #158	; 0x9e
 8000a4a:	002a      	movs	r2, r5
 8000a4c:	40b5      	lsls	r5, r6
 8000a4e:	002c      	movs	r4, r5
 8000a50:	40c2      	lsrs	r2, r0
 8000a52:	1e65      	subs	r5, r4, #1
 8000a54:	41ac      	sbcs	r4, r5
 8000a56:	4314      	orrs	r4, r2
 8000a58:	0762      	lsls	r2, r4, #29
 8000a5a:	d004      	beq.n	8000a66 <__aeabi_fdiv+0x1f6>
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	4022      	ands	r2, r4
 8000a60:	2a04      	cmp	r2, #4
 8000a62:	d000      	beq.n	8000a66 <__aeabi_fdiv+0x1f6>
 8000a64:	3404      	adds	r4, #4
 8000a66:	0162      	lsls	r2, r4, #5
 8000a68:	d403      	bmi.n	8000a72 <__aeabi_fdiv+0x202>
 8000a6a:	01a4      	lsls	r4, r4, #6
 8000a6c:	0a64      	lsrs	r4, r4, #9
 8000a6e:	2200      	movs	r2, #0
 8000a70:	e75d      	b.n	800092e <__aeabi_fdiv+0xbe>
 8000a72:	2201      	movs	r2, #1
 8000a74:	2400      	movs	r4, #0
 8000a76:	e75a      	b.n	800092e <__aeabi_fdiv+0xbe>
 8000a78:	2480      	movs	r4, #128	; 0x80
 8000a7a:	03e4      	lsls	r4, r4, #15
 8000a7c:	432c      	orrs	r4, r5
 8000a7e:	0264      	lsls	r4, r4, #9
 8000a80:	0a64      	lsrs	r4, r4, #9
 8000a82:	22ff      	movs	r2, #255	; 0xff
 8000a84:	e753      	b.n	800092e <__aeabi_fdiv+0xbe>
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	0800c184 	.word	0x0800c184
 8000a8c:	f7ffffff 	.word	0xf7ffffff
 8000a90:	0800c1c4 	.word	0x0800c1c4

08000a94 <__eqsf2>:
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	0042      	lsls	r2, r0, #1
 8000a98:	024e      	lsls	r6, r1, #9
 8000a9a:	004c      	lsls	r4, r1, #1
 8000a9c:	0245      	lsls	r5, r0, #9
 8000a9e:	0a6d      	lsrs	r5, r5, #9
 8000aa0:	0e12      	lsrs	r2, r2, #24
 8000aa2:	0fc3      	lsrs	r3, r0, #31
 8000aa4:	0a76      	lsrs	r6, r6, #9
 8000aa6:	0e24      	lsrs	r4, r4, #24
 8000aa8:	0fc9      	lsrs	r1, r1, #31
 8000aaa:	2aff      	cmp	r2, #255	; 0xff
 8000aac:	d00f      	beq.n	8000ace <__eqsf2+0x3a>
 8000aae:	2cff      	cmp	r4, #255	; 0xff
 8000ab0:	d011      	beq.n	8000ad6 <__eqsf2+0x42>
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	42a2      	cmp	r2, r4
 8000ab6:	d000      	beq.n	8000aba <__eqsf2+0x26>
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
 8000aba:	42b5      	cmp	r5, r6
 8000abc:	d1fc      	bne.n	8000ab8 <__eqsf2+0x24>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d00d      	beq.n	8000ade <__eqsf2+0x4a>
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	d1f8      	bne.n	8000ab8 <__eqsf2+0x24>
 8000ac6:	0028      	movs	r0, r5
 8000ac8:	1e45      	subs	r5, r0, #1
 8000aca:	41a8      	sbcs	r0, r5
 8000acc:	e7f4      	b.n	8000ab8 <__eqsf2+0x24>
 8000ace:	2001      	movs	r0, #1
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d1f1      	bne.n	8000ab8 <__eqsf2+0x24>
 8000ad4:	e7eb      	b.n	8000aae <__eqsf2+0x1a>
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d1ed      	bne.n	8000ab8 <__eqsf2+0x24>
 8000adc:	e7e9      	b.n	8000ab2 <__eqsf2+0x1e>
 8000ade:	2000      	movs	r0, #0
 8000ae0:	e7ea      	b.n	8000ab8 <__eqsf2+0x24>
 8000ae2:	46c0      	nop			; (mov r8, r8)

08000ae4 <__gesf2>:
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	004a      	lsls	r2, r1, #1
 8000ae8:	024e      	lsls	r6, r1, #9
 8000aea:	0245      	lsls	r5, r0, #9
 8000aec:	0044      	lsls	r4, r0, #1
 8000aee:	0a6d      	lsrs	r5, r5, #9
 8000af0:	0e24      	lsrs	r4, r4, #24
 8000af2:	0fc3      	lsrs	r3, r0, #31
 8000af4:	0a76      	lsrs	r6, r6, #9
 8000af6:	0e12      	lsrs	r2, r2, #24
 8000af8:	0fc9      	lsrs	r1, r1, #31
 8000afa:	2cff      	cmp	r4, #255	; 0xff
 8000afc:	d015      	beq.n	8000b2a <__gesf2+0x46>
 8000afe:	2aff      	cmp	r2, #255	; 0xff
 8000b00:	d00e      	beq.n	8000b20 <__gesf2+0x3c>
 8000b02:	2c00      	cmp	r4, #0
 8000b04:	d115      	bne.n	8000b32 <__gesf2+0x4e>
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	d101      	bne.n	8000b0e <__gesf2+0x2a>
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d01c      	beq.n	8000b48 <__gesf2+0x64>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d014      	beq.n	8000b3c <__gesf2+0x58>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d027      	beq.n	8000b66 <__gesf2+0x82>
 8000b16:	2002      	movs	r0, #2
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	4018      	ands	r0, r3
 8000b1c:	3801      	subs	r0, #1
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}
 8000b20:	2e00      	cmp	r6, #0
 8000b22:	d0ee      	beq.n	8000b02 <__gesf2+0x1e>
 8000b24:	2002      	movs	r0, #2
 8000b26:	4240      	negs	r0, r0
 8000b28:	e7f9      	b.n	8000b1e <__gesf2+0x3a>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	d1fa      	bne.n	8000b24 <__gesf2+0x40>
 8000b2e:	2aff      	cmp	r2, #255	; 0xff
 8000b30:	d00e      	beq.n	8000b50 <__gesf2+0x6c>
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	d10e      	bne.n	8000b54 <__gesf2+0x70>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d0ed      	beq.n	8000b16 <__gesf2+0x32>
 8000b3a:	e00b      	b.n	8000b54 <__gesf2+0x70>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	3901      	subs	r1, #1
 8000b40:	4399      	bics	r1, r3
 8000b42:	0008      	movs	r0, r1
 8000b44:	3001      	adds	r0, #1
 8000b46:	e7ea      	b.n	8000b1e <__gesf2+0x3a>
 8000b48:	2000      	movs	r0, #0
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d0e7      	beq.n	8000b1e <__gesf2+0x3a>
 8000b4e:	e7e2      	b.n	8000b16 <__gesf2+0x32>
 8000b50:	2e00      	cmp	r6, #0
 8000b52:	d1e7      	bne.n	8000b24 <__gesf2+0x40>
 8000b54:	428b      	cmp	r3, r1
 8000b56:	d1de      	bne.n	8000b16 <__gesf2+0x32>
 8000b58:	4294      	cmp	r4, r2
 8000b5a:	dd05      	ble.n	8000b68 <__gesf2+0x84>
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	1e58      	subs	r0, r3, #1
 8000b60:	4008      	ands	r0, r1
 8000b62:	3801      	subs	r0, #1
 8000b64:	e7db      	b.n	8000b1e <__gesf2+0x3a>
 8000b66:	2400      	movs	r4, #0
 8000b68:	42a2      	cmp	r2, r4
 8000b6a:	dc04      	bgt.n	8000b76 <__gesf2+0x92>
 8000b6c:	42b5      	cmp	r5, r6
 8000b6e:	d8d2      	bhi.n	8000b16 <__gesf2+0x32>
 8000b70:	2000      	movs	r0, #0
 8000b72:	42b5      	cmp	r5, r6
 8000b74:	d2d3      	bcs.n	8000b1e <__gesf2+0x3a>
 8000b76:	1e58      	subs	r0, r3, #1
 8000b78:	2301      	movs	r3, #1
 8000b7a:	4398      	bics	r0, r3
 8000b7c:	3001      	adds	r0, #1
 8000b7e:	e7ce      	b.n	8000b1e <__gesf2+0x3a>

08000b80 <__lesf2>:
 8000b80:	b530      	push	{r4, r5, lr}
 8000b82:	0042      	lsls	r2, r0, #1
 8000b84:	0244      	lsls	r4, r0, #9
 8000b86:	024d      	lsls	r5, r1, #9
 8000b88:	0fc3      	lsrs	r3, r0, #31
 8000b8a:	0048      	lsls	r0, r1, #1
 8000b8c:	0a64      	lsrs	r4, r4, #9
 8000b8e:	0e12      	lsrs	r2, r2, #24
 8000b90:	0a6d      	lsrs	r5, r5, #9
 8000b92:	0e00      	lsrs	r0, r0, #24
 8000b94:	0fc9      	lsrs	r1, r1, #31
 8000b96:	2aff      	cmp	r2, #255	; 0xff
 8000b98:	d012      	beq.n	8000bc0 <__lesf2+0x40>
 8000b9a:	28ff      	cmp	r0, #255	; 0xff
 8000b9c:	d00c      	beq.n	8000bb8 <__lesf2+0x38>
 8000b9e:	2a00      	cmp	r2, #0
 8000ba0:	d112      	bne.n	8000bc8 <__lesf2+0x48>
 8000ba2:	2800      	cmp	r0, #0
 8000ba4:	d119      	bne.n	8000bda <__lesf2+0x5a>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d117      	bne.n	8000bda <__lesf2+0x5a>
 8000baa:	2c00      	cmp	r4, #0
 8000bac:	d02b      	beq.n	8000c06 <__lesf2+0x86>
 8000bae:	2002      	movs	r0, #2
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	4018      	ands	r0, r3
 8000bb4:	3801      	subs	r0, #1
 8000bb6:	e026      	b.n	8000c06 <__lesf2+0x86>
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	d0f0      	beq.n	8000b9e <__lesf2+0x1e>
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	e022      	b.n	8000c06 <__lesf2+0x86>
 8000bc0:	2c00      	cmp	r4, #0
 8000bc2:	d1fb      	bne.n	8000bbc <__lesf2+0x3c>
 8000bc4:	28ff      	cmp	r0, #255	; 0xff
 8000bc6:	d01f      	beq.n	8000c08 <__lesf2+0x88>
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	d11f      	bne.n	8000c0c <__lesf2+0x8c>
 8000bcc:	2d00      	cmp	r5, #0
 8000bce:	d11d      	bne.n	8000c0c <__lesf2+0x8c>
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	4018      	ands	r0, r3
 8000bd6:	3801      	subs	r0, #1
 8000bd8:	e015      	b.n	8000c06 <__lesf2+0x86>
 8000bda:	2c00      	cmp	r4, #0
 8000bdc:	d00e      	beq.n	8000bfc <__lesf2+0x7c>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d1e5      	bne.n	8000bae <__lesf2+0x2e>
 8000be2:	2200      	movs	r2, #0
 8000be4:	4290      	cmp	r0, r2
 8000be6:	dc04      	bgt.n	8000bf2 <__lesf2+0x72>
 8000be8:	42ac      	cmp	r4, r5
 8000bea:	d8e0      	bhi.n	8000bae <__lesf2+0x2e>
 8000bec:	2000      	movs	r0, #0
 8000bee:	42ac      	cmp	r4, r5
 8000bf0:	d209      	bcs.n	8000c06 <__lesf2+0x86>
 8000bf2:	1e58      	subs	r0, r3, #1
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	4398      	bics	r0, r3
 8000bf8:	3001      	adds	r0, #1
 8000bfa:	e004      	b.n	8000c06 <__lesf2+0x86>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	3901      	subs	r1, #1
 8000c00:	4399      	bics	r1, r3
 8000c02:	0008      	movs	r0, r1
 8000c04:	3001      	adds	r0, #1
 8000c06:	bd30      	pop	{r4, r5, pc}
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d1d7      	bne.n	8000bbc <__lesf2+0x3c>
 8000c0c:	428b      	cmp	r3, r1
 8000c0e:	d1ce      	bne.n	8000bae <__lesf2+0x2e>
 8000c10:	4282      	cmp	r2, r0
 8000c12:	dde7      	ble.n	8000be4 <__lesf2+0x64>
 8000c14:	2102      	movs	r1, #2
 8000c16:	1e58      	subs	r0, r3, #1
 8000c18:	4008      	ands	r0, r1
 8000c1a:	3801      	subs	r0, #1
 8000c1c:	e7f3      	b.n	8000c06 <__lesf2+0x86>
 8000c1e:	46c0      	nop			; (mov r8, r8)

08000c20 <__aeabi_fmul>:
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c22:	464e      	mov	r6, r9
 8000c24:	4657      	mov	r7, sl
 8000c26:	4645      	mov	r5, r8
 8000c28:	46de      	mov	lr, fp
 8000c2a:	b5e0      	push	{r5, r6, r7, lr}
 8000c2c:	0243      	lsls	r3, r0, #9
 8000c2e:	0a5b      	lsrs	r3, r3, #9
 8000c30:	0045      	lsls	r5, r0, #1
 8000c32:	b083      	sub	sp, #12
 8000c34:	1c0f      	adds	r7, r1, #0
 8000c36:	4699      	mov	r9, r3
 8000c38:	0e2d      	lsrs	r5, r5, #24
 8000c3a:	0fc6      	lsrs	r6, r0, #31
 8000c3c:	2d00      	cmp	r5, #0
 8000c3e:	d057      	beq.n	8000cf0 <__aeabi_fmul+0xd0>
 8000c40:	2dff      	cmp	r5, #255	; 0xff
 8000c42:	d024      	beq.n	8000c8e <__aeabi_fmul+0x6e>
 8000c44:	2080      	movs	r0, #128	; 0x80
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	04c0      	lsls	r0, r0, #19
 8000c4a:	4318      	orrs	r0, r3
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	4681      	mov	r9, r0
 8000c50:	469a      	mov	sl, r3
 8000c52:	469b      	mov	fp, r3
 8000c54:	3d7f      	subs	r5, #127	; 0x7f
 8000c56:	027c      	lsls	r4, r7, #9
 8000c58:	007a      	lsls	r2, r7, #1
 8000c5a:	0ffb      	lsrs	r3, r7, #31
 8000c5c:	0a64      	lsrs	r4, r4, #9
 8000c5e:	0e12      	lsrs	r2, r2, #24
 8000c60:	4698      	mov	r8, r3
 8000c62:	d023      	beq.n	8000cac <__aeabi_fmul+0x8c>
 8000c64:	2aff      	cmp	r2, #255	; 0xff
 8000c66:	d04b      	beq.n	8000d00 <__aeabi_fmul+0xe0>
 8000c68:	00e3      	lsls	r3, r4, #3
 8000c6a:	2480      	movs	r4, #128	; 0x80
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	04e4      	lsls	r4, r4, #19
 8000c70:	3a7f      	subs	r2, #127	; 0x7f
 8000c72:	431c      	orrs	r4, r3
 8000c74:	18ad      	adds	r5, r5, r2
 8000c76:	1c6b      	adds	r3, r5, #1
 8000c78:	4647      	mov	r7, r8
 8000c7a:	9301      	str	r3, [sp, #4]
 8000c7c:	4653      	mov	r3, sl
 8000c7e:	4077      	eors	r7, r6
 8000c80:	003a      	movs	r2, r7
 8000c82:	2b0f      	cmp	r3, #15
 8000c84:	d848      	bhi.n	8000d18 <__aeabi_fmul+0xf8>
 8000c86:	497d      	ldr	r1, [pc, #500]	; (8000e7c <__aeabi_fmul+0x25c>)
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	58cb      	ldr	r3, [r1, r3]
 8000c8c:	469f      	mov	pc, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fmul+0x74>
 8000c92:	e085      	b.n	8000da0 <__aeabi_fmul+0x180>
 8000c94:	3308      	adds	r3, #8
 8000c96:	469a      	mov	sl, r3
 8000c98:	3b06      	subs	r3, #6
 8000c9a:	469b      	mov	fp, r3
 8000c9c:	027c      	lsls	r4, r7, #9
 8000c9e:	007a      	lsls	r2, r7, #1
 8000ca0:	0ffb      	lsrs	r3, r7, #31
 8000ca2:	25ff      	movs	r5, #255	; 0xff
 8000ca4:	0a64      	lsrs	r4, r4, #9
 8000ca6:	0e12      	lsrs	r2, r2, #24
 8000ca8:	4698      	mov	r8, r3
 8000caa:	d1db      	bne.n	8000c64 <__aeabi_fmul+0x44>
 8000cac:	2c00      	cmp	r4, #0
 8000cae:	d000      	beq.n	8000cb2 <__aeabi_fmul+0x92>
 8000cb0:	e090      	b.n	8000dd4 <__aeabi_fmul+0x1b4>
 8000cb2:	4652      	mov	r2, sl
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	4692      	mov	sl, r2
 8000cba:	2001      	movs	r0, #1
 8000cbc:	e7db      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000cbe:	464c      	mov	r4, r9
 8000cc0:	4658      	mov	r0, fp
 8000cc2:	0017      	movs	r7, r2
 8000cc4:	2802      	cmp	r0, #2
 8000cc6:	d024      	beq.n	8000d12 <__aeabi_fmul+0xf2>
 8000cc8:	2803      	cmp	r0, #3
 8000cca:	d100      	bne.n	8000cce <__aeabi_fmul+0xae>
 8000ccc:	e0cf      	b.n	8000e6e <__aeabi_fmul+0x24e>
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	2801      	cmp	r0, #1
 8000cd4:	d14d      	bne.n	8000d72 <__aeabi_fmul+0x152>
 8000cd6:	0258      	lsls	r0, r3, #9
 8000cd8:	05d2      	lsls	r2, r2, #23
 8000cda:	0a40      	lsrs	r0, r0, #9
 8000cdc:	07ff      	lsls	r7, r7, #31
 8000cde:	4310      	orrs	r0, r2
 8000ce0:	4338      	orrs	r0, r7
 8000ce2:	b003      	add	sp, #12
 8000ce4:	bc3c      	pop	{r2, r3, r4, r5}
 8000ce6:	4690      	mov	r8, r2
 8000ce8:	4699      	mov	r9, r3
 8000cea:	46a2      	mov	sl, r4
 8000cec:	46ab      	mov	fp, r5
 8000cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d15b      	bne.n	8000dac <__aeabi_fmul+0x18c>
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	469a      	mov	sl, r3
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	2500      	movs	r5, #0
 8000cfc:	469b      	mov	fp, r3
 8000cfe:	e7aa      	b.n	8000c56 <__aeabi_fmul+0x36>
 8000d00:	35ff      	adds	r5, #255	; 0xff
 8000d02:	2c00      	cmp	r4, #0
 8000d04:	d160      	bne.n	8000dc8 <__aeabi_fmul+0x1a8>
 8000d06:	4652      	mov	r2, sl
 8000d08:	2302      	movs	r3, #2
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	4692      	mov	sl, r2
 8000d0e:	2002      	movs	r0, #2
 8000d10:	e7b1      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000d12:	22ff      	movs	r2, #255	; 0xff
 8000d14:	2300      	movs	r3, #0
 8000d16:	e7de      	b.n	8000cd6 <__aeabi_fmul+0xb6>
 8000d18:	464b      	mov	r3, r9
 8000d1a:	0c1b      	lsrs	r3, r3, #16
 8000d1c:	469c      	mov	ip, r3
 8000d1e:	464b      	mov	r3, r9
 8000d20:	0426      	lsls	r6, r4, #16
 8000d22:	0c36      	lsrs	r6, r6, #16
 8000d24:	0418      	lsls	r0, r3, #16
 8000d26:	4661      	mov	r1, ip
 8000d28:	0033      	movs	r3, r6
 8000d2a:	0c22      	lsrs	r2, r4, #16
 8000d2c:	4664      	mov	r4, ip
 8000d2e:	0c00      	lsrs	r0, r0, #16
 8000d30:	4343      	muls	r3, r0
 8000d32:	434e      	muls	r6, r1
 8000d34:	4350      	muls	r0, r2
 8000d36:	4354      	muls	r4, r2
 8000d38:	1980      	adds	r0, r0, r6
 8000d3a:	0c1a      	lsrs	r2, r3, #16
 8000d3c:	1812      	adds	r2, r2, r0
 8000d3e:	4296      	cmp	r6, r2
 8000d40:	d903      	bls.n	8000d4a <__aeabi_fmul+0x12a>
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	0249      	lsls	r1, r1, #9
 8000d46:	468c      	mov	ip, r1
 8000d48:	4464      	add	r4, ip
 8000d4a:	041b      	lsls	r3, r3, #16
 8000d4c:	0c1b      	lsrs	r3, r3, #16
 8000d4e:	0410      	lsls	r0, r2, #16
 8000d50:	18c0      	adds	r0, r0, r3
 8000d52:	0183      	lsls	r3, r0, #6
 8000d54:	1e5e      	subs	r6, r3, #1
 8000d56:	41b3      	sbcs	r3, r6
 8000d58:	0e80      	lsrs	r0, r0, #26
 8000d5a:	4318      	orrs	r0, r3
 8000d5c:	0c13      	lsrs	r3, r2, #16
 8000d5e:	191b      	adds	r3, r3, r4
 8000d60:	019b      	lsls	r3, r3, #6
 8000d62:	4303      	orrs	r3, r0
 8000d64:	001c      	movs	r4, r3
 8000d66:	0123      	lsls	r3, r4, #4
 8000d68:	d579      	bpl.n	8000e5e <__aeabi_fmul+0x23e>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	0862      	lsrs	r2, r4, #1
 8000d6e:	401c      	ands	r4, r3
 8000d70:	4314      	orrs	r4, r2
 8000d72:	9a01      	ldr	r2, [sp, #4]
 8000d74:	327f      	adds	r2, #127	; 0x7f
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	dd4d      	ble.n	8000e16 <__aeabi_fmul+0x1f6>
 8000d7a:	0763      	lsls	r3, r4, #29
 8000d7c:	d004      	beq.n	8000d88 <__aeabi_fmul+0x168>
 8000d7e:	230f      	movs	r3, #15
 8000d80:	4023      	ands	r3, r4
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d000      	beq.n	8000d88 <__aeabi_fmul+0x168>
 8000d86:	3404      	adds	r4, #4
 8000d88:	0123      	lsls	r3, r4, #4
 8000d8a:	d503      	bpl.n	8000d94 <__aeabi_fmul+0x174>
 8000d8c:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <__aeabi_fmul+0x260>)
 8000d8e:	9a01      	ldr	r2, [sp, #4]
 8000d90:	401c      	ands	r4, r3
 8000d92:	3280      	adds	r2, #128	; 0x80
 8000d94:	2afe      	cmp	r2, #254	; 0xfe
 8000d96:	dcbc      	bgt.n	8000d12 <__aeabi_fmul+0xf2>
 8000d98:	01a3      	lsls	r3, r4, #6
 8000d9a:	0a5b      	lsrs	r3, r3, #9
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	e79a      	b.n	8000cd6 <__aeabi_fmul+0xb6>
 8000da0:	230c      	movs	r3, #12
 8000da2:	469a      	mov	sl, r3
 8000da4:	3b09      	subs	r3, #9
 8000da6:	25ff      	movs	r5, #255	; 0xff
 8000da8:	469b      	mov	fp, r3
 8000daa:	e754      	b.n	8000c56 <__aeabi_fmul+0x36>
 8000dac:	0018      	movs	r0, r3
 8000dae:	f002 f8af 	bl	8002f10 <__clzsi2>
 8000db2:	464a      	mov	r2, r9
 8000db4:	1f43      	subs	r3, r0, #5
 8000db6:	2576      	movs	r5, #118	; 0x76
 8000db8:	409a      	lsls	r2, r3
 8000dba:	2300      	movs	r3, #0
 8000dbc:	426d      	negs	r5, r5
 8000dbe:	4691      	mov	r9, r2
 8000dc0:	1a2d      	subs	r5, r5, r0
 8000dc2:	469a      	mov	sl, r3
 8000dc4:	469b      	mov	fp, r3
 8000dc6:	e746      	b.n	8000c56 <__aeabi_fmul+0x36>
 8000dc8:	4652      	mov	r2, sl
 8000dca:	2303      	movs	r3, #3
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	4692      	mov	sl, r2
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	e750      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000dd4:	0020      	movs	r0, r4
 8000dd6:	f002 f89b 	bl	8002f10 <__clzsi2>
 8000dda:	1f43      	subs	r3, r0, #5
 8000ddc:	1a2d      	subs	r5, r5, r0
 8000dde:	409c      	lsls	r4, r3
 8000de0:	3d76      	subs	r5, #118	; 0x76
 8000de2:	2000      	movs	r0, #0
 8000de4:	e747      	b.n	8000c76 <__aeabi_fmul+0x56>
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	2700      	movs	r7, #0
 8000dea:	03db      	lsls	r3, r3, #15
 8000dec:	22ff      	movs	r2, #255	; 0xff
 8000dee:	e772      	b.n	8000cd6 <__aeabi_fmul+0xb6>
 8000df0:	4642      	mov	r2, r8
 8000df2:	e766      	b.n	8000cc2 <__aeabi_fmul+0xa2>
 8000df4:	464c      	mov	r4, r9
 8000df6:	0032      	movs	r2, r6
 8000df8:	4658      	mov	r0, fp
 8000dfa:	e762      	b.n	8000cc2 <__aeabi_fmul+0xa2>
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	464a      	mov	r2, r9
 8000e00:	03db      	lsls	r3, r3, #15
 8000e02:	421a      	tst	r2, r3
 8000e04:	d022      	beq.n	8000e4c <__aeabi_fmul+0x22c>
 8000e06:	421c      	tst	r4, r3
 8000e08:	d120      	bne.n	8000e4c <__aeabi_fmul+0x22c>
 8000e0a:	4323      	orrs	r3, r4
 8000e0c:	025b      	lsls	r3, r3, #9
 8000e0e:	0a5b      	lsrs	r3, r3, #9
 8000e10:	4647      	mov	r7, r8
 8000e12:	22ff      	movs	r2, #255	; 0xff
 8000e14:	e75f      	b.n	8000cd6 <__aeabi_fmul+0xb6>
 8000e16:	2301      	movs	r3, #1
 8000e18:	1a9a      	subs	r2, r3, r2
 8000e1a:	2a1b      	cmp	r2, #27
 8000e1c:	dc21      	bgt.n	8000e62 <__aeabi_fmul+0x242>
 8000e1e:	0023      	movs	r3, r4
 8000e20:	9901      	ldr	r1, [sp, #4]
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	319e      	adds	r1, #158	; 0x9e
 8000e26:	408c      	lsls	r4, r1
 8000e28:	001a      	movs	r2, r3
 8000e2a:	0023      	movs	r3, r4
 8000e2c:	1e5c      	subs	r4, r3, #1
 8000e2e:	41a3      	sbcs	r3, r4
 8000e30:	4313      	orrs	r3, r2
 8000e32:	075a      	lsls	r2, r3, #29
 8000e34:	d004      	beq.n	8000e40 <__aeabi_fmul+0x220>
 8000e36:	220f      	movs	r2, #15
 8000e38:	401a      	ands	r2, r3
 8000e3a:	2a04      	cmp	r2, #4
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_fmul+0x220>
 8000e3e:	3304      	adds	r3, #4
 8000e40:	015a      	lsls	r2, r3, #5
 8000e42:	d411      	bmi.n	8000e68 <__aeabi_fmul+0x248>
 8000e44:	019b      	lsls	r3, r3, #6
 8000e46:	0a5b      	lsrs	r3, r3, #9
 8000e48:	2200      	movs	r2, #0
 8000e4a:	e744      	b.n	8000cd6 <__aeabi_fmul+0xb6>
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	464a      	mov	r2, r9
 8000e50:	03db      	lsls	r3, r3, #15
 8000e52:	4313      	orrs	r3, r2
 8000e54:	025b      	lsls	r3, r3, #9
 8000e56:	0a5b      	lsrs	r3, r3, #9
 8000e58:	0037      	movs	r7, r6
 8000e5a:	22ff      	movs	r2, #255	; 0xff
 8000e5c:	e73b      	b.n	8000cd6 <__aeabi_fmul+0xb6>
 8000e5e:	9501      	str	r5, [sp, #4]
 8000e60:	e787      	b.n	8000d72 <__aeabi_fmul+0x152>
 8000e62:	2200      	movs	r2, #0
 8000e64:	2300      	movs	r3, #0
 8000e66:	e736      	b.n	8000cd6 <__aeabi_fmul+0xb6>
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e733      	b.n	8000cd6 <__aeabi_fmul+0xb6>
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	03db      	lsls	r3, r3, #15
 8000e72:	4323      	orrs	r3, r4
 8000e74:	025b      	lsls	r3, r3, #9
 8000e76:	0a5b      	lsrs	r3, r3, #9
 8000e78:	22ff      	movs	r2, #255	; 0xff
 8000e7a:	e72c      	b.n	8000cd6 <__aeabi_fmul+0xb6>
 8000e7c:	0800c204 	.word	0x0800c204
 8000e80:	f7ffffff 	.word	0xf7ffffff

08000e84 <__aeabi_fsub>:
 8000e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e86:	4647      	mov	r7, r8
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	0044      	lsls	r4, r0, #1
 8000e8c:	0fc2      	lsrs	r2, r0, #31
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	0247      	lsls	r7, r0, #9
 8000e92:	0248      	lsls	r0, r1, #9
 8000e94:	0a40      	lsrs	r0, r0, #9
 8000e96:	4684      	mov	ip, r0
 8000e98:	4666      	mov	r6, ip
 8000e9a:	0048      	lsls	r0, r1, #1
 8000e9c:	0a7f      	lsrs	r7, r7, #9
 8000e9e:	0e24      	lsrs	r4, r4, #24
 8000ea0:	00f6      	lsls	r6, r6, #3
 8000ea2:	0025      	movs	r5, r4
 8000ea4:	4690      	mov	r8, r2
 8000ea6:	00fb      	lsls	r3, r7, #3
 8000ea8:	0e00      	lsrs	r0, r0, #24
 8000eaa:	0fc9      	lsrs	r1, r1, #31
 8000eac:	46b1      	mov	r9, r6
 8000eae:	28ff      	cmp	r0, #255	; 0xff
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_fsub+0x30>
 8000eb2:	e085      	b.n	8000fc0 <__aeabi_fsub+0x13c>
 8000eb4:	2601      	movs	r6, #1
 8000eb6:	4071      	eors	r1, r6
 8000eb8:	1a26      	subs	r6, r4, r0
 8000eba:	4291      	cmp	r1, r2
 8000ebc:	d057      	beq.n	8000f6e <__aeabi_fsub+0xea>
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	dd43      	ble.n	8000f4a <__aeabi_fsub+0xc6>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	d000      	beq.n	8000ec8 <__aeabi_fsub+0x44>
 8000ec6:	e07f      	b.n	8000fc8 <__aeabi_fsub+0x144>
 8000ec8:	4649      	mov	r1, r9
 8000eca:	2900      	cmp	r1, #0
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fsub+0x4c>
 8000ece:	e0aa      	b.n	8001026 <__aeabi_fsub+0x1a2>
 8000ed0:	3e01      	subs	r6, #1
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d000      	beq.n	8000ed8 <__aeabi_fsub+0x54>
 8000ed6:	e0f7      	b.n	80010c8 <__aeabi_fsub+0x244>
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	015a      	lsls	r2, r3, #5
 8000edc:	d400      	bmi.n	8000ee0 <__aeabi_fsub+0x5c>
 8000ede:	e08b      	b.n	8000ff8 <__aeabi_fsub+0x174>
 8000ee0:	019b      	lsls	r3, r3, #6
 8000ee2:	099c      	lsrs	r4, r3, #6
 8000ee4:	0020      	movs	r0, r4
 8000ee6:	f002 f813 	bl	8002f10 <__clzsi2>
 8000eea:	3805      	subs	r0, #5
 8000eec:	4084      	lsls	r4, r0
 8000eee:	4285      	cmp	r5, r0
 8000ef0:	dd00      	ble.n	8000ef4 <__aeabi_fsub+0x70>
 8000ef2:	e0d3      	b.n	800109c <__aeabi_fsub+0x218>
 8000ef4:	1b45      	subs	r5, r0, r5
 8000ef6:	0023      	movs	r3, r4
 8000ef8:	2020      	movs	r0, #32
 8000efa:	3501      	adds	r5, #1
 8000efc:	40eb      	lsrs	r3, r5
 8000efe:	1b45      	subs	r5, r0, r5
 8000f00:	40ac      	lsls	r4, r5
 8000f02:	1e62      	subs	r2, r4, #1
 8000f04:	4194      	sbcs	r4, r2
 8000f06:	4323      	orrs	r3, r4
 8000f08:	2407      	movs	r4, #7
 8000f0a:	2500      	movs	r5, #0
 8000f0c:	401c      	ands	r4, r3
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4641      	mov	r1, r8
 8000f12:	400a      	ands	r2, r1
 8000f14:	2c00      	cmp	r4, #0
 8000f16:	d004      	beq.n	8000f22 <__aeabi_fsub+0x9e>
 8000f18:	210f      	movs	r1, #15
 8000f1a:	4019      	ands	r1, r3
 8000f1c:	2904      	cmp	r1, #4
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_fsub+0x9e>
 8000f20:	3304      	adds	r3, #4
 8000f22:	0159      	lsls	r1, r3, #5
 8000f24:	d400      	bmi.n	8000f28 <__aeabi_fsub+0xa4>
 8000f26:	e080      	b.n	800102a <__aeabi_fsub+0x1a6>
 8000f28:	3501      	adds	r5, #1
 8000f2a:	b2ec      	uxtb	r4, r5
 8000f2c:	2dff      	cmp	r5, #255	; 0xff
 8000f2e:	d000      	beq.n	8000f32 <__aeabi_fsub+0xae>
 8000f30:	e0a3      	b.n	800107a <__aeabi_fsub+0x1f6>
 8000f32:	24ff      	movs	r4, #255	; 0xff
 8000f34:	2300      	movs	r3, #0
 8000f36:	025b      	lsls	r3, r3, #9
 8000f38:	05e4      	lsls	r4, r4, #23
 8000f3a:	0a58      	lsrs	r0, r3, #9
 8000f3c:	07d2      	lsls	r2, r2, #31
 8000f3e:	4320      	orrs	r0, r4
 8000f40:	4310      	orrs	r0, r2
 8000f42:	bc0c      	pop	{r2, r3}
 8000f44:	4690      	mov	r8, r2
 8000f46:	4699      	mov	r9, r3
 8000f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f4a:	2e00      	cmp	r6, #0
 8000f4c:	d174      	bne.n	8001038 <__aeabi_fsub+0x1b4>
 8000f4e:	1c60      	adds	r0, r4, #1
 8000f50:	b2c0      	uxtb	r0, r0
 8000f52:	2801      	cmp	r0, #1
 8000f54:	dc00      	bgt.n	8000f58 <__aeabi_fsub+0xd4>
 8000f56:	e0a7      	b.n	80010a8 <__aeabi_fsub+0x224>
 8000f58:	464a      	mov	r2, r9
 8000f5a:	1a9c      	subs	r4, r3, r2
 8000f5c:	0162      	lsls	r2, r4, #5
 8000f5e:	d500      	bpl.n	8000f62 <__aeabi_fsub+0xde>
 8000f60:	e0b6      	b.n	80010d0 <__aeabi_fsub+0x24c>
 8000f62:	2c00      	cmp	r4, #0
 8000f64:	d1be      	bne.n	8000ee4 <__aeabi_fsub+0x60>
 8000f66:	2200      	movs	r2, #0
 8000f68:	2400      	movs	r4, #0
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e7e3      	b.n	8000f36 <__aeabi_fsub+0xb2>
 8000f6e:	2e00      	cmp	r6, #0
 8000f70:	dc00      	bgt.n	8000f74 <__aeabi_fsub+0xf0>
 8000f72:	e085      	b.n	8001080 <__aeabi_fsub+0x1fc>
 8000f74:	2800      	cmp	r0, #0
 8000f76:	d046      	beq.n	8001006 <__aeabi_fsub+0x182>
 8000f78:	2cff      	cmp	r4, #255	; 0xff
 8000f7a:	d049      	beq.n	8001010 <__aeabi_fsub+0x18c>
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	4648      	mov	r0, r9
 8000f80:	04d2      	lsls	r2, r2, #19
 8000f82:	4310      	orrs	r0, r2
 8000f84:	4681      	mov	r9, r0
 8000f86:	2201      	movs	r2, #1
 8000f88:	2e1b      	cmp	r6, #27
 8000f8a:	dc09      	bgt.n	8000fa0 <__aeabi_fsub+0x11c>
 8000f8c:	2020      	movs	r0, #32
 8000f8e:	464c      	mov	r4, r9
 8000f90:	1b80      	subs	r0, r0, r6
 8000f92:	4084      	lsls	r4, r0
 8000f94:	464a      	mov	r2, r9
 8000f96:	0020      	movs	r0, r4
 8000f98:	40f2      	lsrs	r2, r6
 8000f9a:	1e44      	subs	r4, r0, #1
 8000f9c:	41a0      	sbcs	r0, r4
 8000f9e:	4302      	orrs	r2, r0
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	015a      	lsls	r2, r3, #5
 8000fa4:	d528      	bpl.n	8000ff8 <__aeabi_fsub+0x174>
 8000fa6:	3501      	adds	r5, #1
 8000fa8:	2dff      	cmp	r5, #255	; 0xff
 8000faa:	d100      	bne.n	8000fae <__aeabi_fsub+0x12a>
 8000fac:	e0a8      	b.n	8001100 <__aeabi_fsub+0x27c>
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2407      	movs	r4, #7
 8000fb2:	4994      	ldr	r1, [pc, #592]	; (8001204 <__aeabi_fsub+0x380>)
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	085b      	lsrs	r3, r3, #1
 8000fb8:	400b      	ands	r3, r1
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	401c      	ands	r4, r3
 8000fbe:	e7a6      	b.n	8000f0e <__aeabi_fsub+0x8a>
 8000fc0:	2e00      	cmp	r6, #0
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_fsub+0x142>
 8000fc4:	e778      	b.n	8000eb8 <__aeabi_fsub+0x34>
 8000fc6:	e775      	b.n	8000eb4 <__aeabi_fsub+0x30>
 8000fc8:	2cff      	cmp	r4, #255	; 0xff
 8000fca:	d054      	beq.n	8001076 <__aeabi_fsub+0x1f2>
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	4649      	mov	r1, r9
 8000fd0:	04d2      	lsls	r2, r2, #19
 8000fd2:	4311      	orrs	r1, r2
 8000fd4:	4689      	mov	r9, r1
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2e1b      	cmp	r6, #27
 8000fda:	dc09      	bgt.n	8000ff0 <__aeabi_fsub+0x16c>
 8000fdc:	2120      	movs	r1, #32
 8000fde:	4648      	mov	r0, r9
 8000fe0:	1b89      	subs	r1, r1, r6
 8000fe2:	4088      	lsls	r0, r1
 8000fe4:	464a      	mov	r2, r9
 8000fe6:	0001      	movs	r1, r0
 8000fe8:	40f2      	lsrs	r2, r6
 8000fea:	1e48      	subs	r0, r1, #1
 8000fec:	4181      	sbcs	r1, r0
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	1a9b      	subs	r3, r3, r2
 8000ff2:	015a      	lsls	r2, r3, #5
 8000ff4:	d500      	bpl.n	8000ff8 <__aeabi_fsub+0x174>
 8000ff6:	e773      	b.n	8000ee0 <__aeabi_fsub+0x5c>
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4641      	mov	r1, r8
 8000ffc:	400a      	ands	r2, r1
 8000ffe:	0759      	lsls	r1, r3, #29
 8001000:	d000      	beq.n	8001004 <__aeabi_fsub+0x180>
 8001002:	e789      	b.n	8000f18 <__aeabi_fsub+0x94>
 8001004:	e011      	b.n	800102a <__aeabi_fsub+0x1a6>
 8001006:	4648      	mov	r0, r9
 8001008:	2800      	cmp	r0, #0
 800100a:	d158      	bne.n	80010be <__aeabi_fsub+0x23a>
 800100c:	2cff      	cmp	r4, #255	; 0xff
 800100e:	d10c      	bne.n	800102a <__aeabi_fsub+0x1a6>
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d100      	bne.n	8001018 <__aeabi_fsub+0x194>
 8001016:	e78c      	b.n	8000f32 <__aeabi_fsub+0xae>
 8001018:	2080      	movs	r0, #128	; 0x80
 800101a:	03c0      	lsls	r0, r0, #15
 800101c:	4303      	orrs	r3, r0
 800101e:	025b      	lsls	r3, r3, #9
 8001020:	0a5b      	lsrs	r3, r3, #9
 8001022:	24ff      	movs	r4, #255	; 0xff
 8001024:	e787      	b.n	8000f36 <__aeabi_fsub+0xb2>
 8001026:	2cff      	cmp	r4, #255	; 0xff
 8001028:	d025      	beq.n	8001076 <__aeabi_fsub+0x1f2>
 800102a:	08db      	lsrs	r3, r3, #3
 800102c:	2dff      	cmp	r5, #255	; 0xff
 800102e:	d0f0      	beq.n	8001012 <__aeabi_fsub+0x18e>
 8001030:	025b      	lsls	r3, r3, #9
 8001032:	0a5b      	lsrs	r3, r3, #9
 8001034:	b2ec      	uxtb	r4, r5
 8001036:	e77e      	b.n	8000f36 <__aeabi_fsub+0xb2>
 8001038:	2c00      	cmp	r4, #0
 800103a:	d04d      	beq.n	80010d8 <__aeabi_fsub+0x254>
 800103c:	28ff      	cmp	r0, #255	; 0xff
 800103e:	d018      	beq.n	8001072 <__aeabi_fsub+0x1ee>
 8001040:	2480      	movs	r4, #128	; 0x80
 8001042:	04e4      	lsls	r4, r4, #19
 8001044:	4272      	negs	r2, r6
 8001046:	4323      	orrs	r3, r4
 8001048:	2a1b      	cmp	r2, #27
 800104a:	dd00      	ble.n	800104e <__aeabi_fsub+0x1ca>
 800104c:	e0c4      	b.n	80011d8 <__aeabi_fsub+0x354>
 800104e:	001c      	movs	r4, r3
 8001050:	2520      	movs	r5, #32
 8001052:	40d4      	lsrs	r4, r2
 8001054:	1aaa      	subs	r2, r5, r2
 8001056:	4093      	lsls	r3, r2
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	4193      	sbcs	r3, r2
 800105c:	4323      	orrs	r3, r4
 800105e:	464a      	mov	r2, r9
 8001060:	0005      	movs	r5, r0
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	4688      	mov	r8, r1
 8001066:	e738      	b.n	8000eda <__aeabi_fsub+0x56>
 8001068:	1c72      	adds	r2, r6, #1
 800106a:	d0f8      	beq.n	800105e <__aeabi_fsub+0x1da>
 800106c:	43f2      	mvns	r2, r6
 800106e:	28ff      	cmp	r0, #255	; 0xff
 8001070:	d1ea      	bne.n	8001048 <__aeabi_fsub+0x1c4>
 8001072:	000a      	movs	r2, r1
 8001074:	464b      	mov	r3, r9
 8001076:	25ff      	movs	r5, #255	; 0xff
 8001078:	e7d7      	b.n	800102a <__aeabi_fsub+0x1a6>
 800107a:	019b      	lsls	r3, r3, #6
 800107c:	0a5b      	lsrs	r3, r3, #9
 800107e:	e75a      	b.n	8000f36 <__aeabi_fsub+0xb2>
 8001080:	2e00      	cmp	r6, #0
 8001082:	d141      	bne.n	8001108 <__aeabi_fsub+0x284>
 8001084:	1c65      	adds	r5, r4, #1
 8001086:	b2e9      	uxtb	r1, r5
 8001088:	2901      	cmp	r1, #1
 800108a:	dd45      	ble.n	8001118 <__aeabi_fsub+0x294>
 800108c:	2dff      	cmp	r5, #255	; 0xff
 800108e:	d100      	bne.n	8001092 <__aeabi_fsub+0x20e>
 8001090:	e74f      	b.n	8000f32 <__aeabi_fsub+0xae>
 8001092:	2407      	movs	r4, #7
 8001094:	444b      	add	r3, r9
 8001096:	085b      	lsrs	r3, r3, #1
 8001098:	401c      	ands	r4, r3
 800109a:	e738      	b.n	8000f0e <__aeabi_fsub+0x8a>
 800109c:	2207      	movs	r2, #7
 800109e:	4b5a      	ldr	r3, [pc, #360]	; (8001208 <__aeabi_fsub+0x384>)
 80010a0:	1a2d      	subs	r5, r5, r0
 80010a2:	4023      	ands	r3, r4
 80010a4:	4014      	ands	r4, r2
 80010a6:	e732      	b.n	8000f0e <__aeabi_fsub+0x8a>
 80010a8:	2c00      	cmp	r4, #0
 80010aa:	d11d      	bne.n	80010e8 <__aeabi_fsub+0x264>
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d17a      	bne.n	80011a6 <__aeabi_fsub+0x322>
 80010b0:	464b      	mov	r3, r9
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d100      	bne.n	80010b8 <__aeabi_fsub+0x234>
 80010b6:	e091      	b.n	80011dc <__aeabi_fsub+0x358>
 80010b8:	000a      	movs	r2, r1
 80010ba:	2500      	movs	r5, #0
 80010bc:	e7b5      	b.n	800102a <__aeabi_fsub+0x1a6>
 80010be:	3e01      	subs	r6, #1
 80010c0:	2e00      	cmp	r6, #0
 80010c2:	d119      	bne.n	80010f8 <__aeabi_fsub+0x274>
 80010c4:	444b      	add	r3, r9
 80010c6:	e76c      	b.n	8000fa2 <__aeabi_fsub+0x11e>
 80010c8:	2cff      	cmp	r4, #255	; 0xff
 80010ca:	d184      	bne.n	8000fd6 <__aeabi_fsub+0x152>
 80010cc:	25ff      	movs	r5, #255	; 0xff
 80010ce:	e7ac      	b.n	800102a <__aeabi_fsub+0x1a6>
 80010d0:	464a      	mov	r2, r9
 80010d2:	4688      	mov	r8, r1
 80010d4:	1ad4      	subs	r4, r2, r3
 80010d6:	e705      	b.n	8000ee4 <__aeabi_fsub+0x60>
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1c5      	bne.n	8001068 <__aeabi_fsub+0x1e4>
 80010dc:	000a      	movs	r2, r1
 80010de:	28ff      	cmp	r0, #255	; 0xff
 80010e0:	d0c8      	beq.n	8001074 <__aeabi_fsub+0x1f0>
 80010e2:	0005      	movs	r5, r0
 80010e4:	464b      	mov	r3, r9
 80010e6:	e7a0      	b.n	800102a <__aeabi_fsub+0x1a6>
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d149      	bne.n	8001180 <__aeabi_fsub+0x2fc>
 80010ec:	464b      	mov	r3, r9
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d077      	beq.n	80011e2 <__aeabi_fsub+0x35e>
 80010f2:	000a      	movs	r2, r1
 80010f4:	25ff      	movs	r5, #255	; 0xff
 80010f6:	e798      	b.n	800102a <__aeabi_fsub+0x1a6>
 80010f8:	2cff      	cmp	r4, #255	; 0xff
 80010fa:	d000      	beq.n	80010fe <__aeabi_fsub+0x27a>
 80010fc:	e743      	b.n	8000f86 <__aeabi_fsub+0x102>
 80010fe:	e787      	b.n	8001010 <__aeabi_fsub+0x18c>
 8001100:	000a      	movs	r2, r1
 8001102:	24ff      	movs	r4, #255	; 0xff
 8001104:	2300      	movs	r3, #0
 8001106:	e716      	b.n	8000f36 <__aeabi_fsub+0xb2>
 8001108:	2c00      	cmp	r4, #0
 800110a:	d115      	bne.n	8001138 <__aeabi_fsub+0x2b4>
 800110c:	2b00      	cmp	r3, #0
 800110e:	d157      	bne.n	80011c0 <__aeabi_fsub+0x33c>
 8001110:	28ff      	cmp	r0, #255	; 0xff
 8001112:	d1e6      	bne.n	80010e2 <__aeabi_fsub+0x25e>
 8001114:	464b      	mov	r3, r9
 8001116:	e77b      	b.n	8001010 <__aeabi_fsub+0x18c>
 8001118:	2c00      	cmp	r4, #0
 800111a:	d120      	bne.n	800115e <__aeabi_fsub+0x2da>
 800111c:	2b00      	cmp	r3, #0
 800111e:	d057      	beq.n	80011d0 <__aeabi_fsub+0x34c>
 8001120:	4649      	mov	r1, r9
 8001122:	2900      	cmp	r1, #0
 8001124:	d053      	beq.n	80011ce <__aeabi_fsub+0x34a>
 8001126:	444b      	add	r3, r9
 8001128:	015a      	lsls	r2, r3, #5
 800112a:	d568      	bpl.n	80011fe <__aeabi_fsub+0x37a>
 800112c:	2407      	movs	r4, #7
 800112e:	4a36      	ldr	r2, [pc, #216]	; (8001208 <__aeabi_fsub+0x384>)
 8001130:	401c      	ands	r4, r3
 8001132:	2501      	movs	r5, #1
 8001134:	4013      	ands	r3, r2
 8001136:	e6ea      	b.n	8000f0e <__aeabi_fsub+0x8a>
 8001138:	28ff      	cmp	r0, #255	; 0xff
 800113a:	d0eb      	beq.n	8001114 <__aeabi_fsub+0x290>
 800113c:	2280      	movs	r2, #128	; 0x80
 800113e:	04d2      	lsls	r2, r2, #19
 8001140:	4276      	negs	r6, r6
 8001142:	4313      	orrs	r3, r2
 8001144:	2e1b      	cmp	r6, #27
 8001146:	dc53      	bgt.n	80011f0 <__aeabi_fsub+0x36c>
 8001148:	2520      	movs	r5, #32
 800114a:	1bad      	subs	r5, r5, r6
 800114c:	001a      	movs	r2, r3
 800114e:	40ab      	lsls	r3, r5
 8001150:	40f2      	lsrs	r2, r6
 8001152:	1e5c      	subs	r4, r3, #1
 8001154:	41a3      	sbcs	r3, r4
 8001156:	4313      	orrs	r3, r2
 8001158:	444b      	add	r3, r9
 800115a:	0005      	movs	r5, r0
 800115c:	e721      	b.n	8000fa2 <__aeabi_fsub+0x11e>
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0d8      	beq.n	8001114 <__aeabi_fsub+0x290>
 8001162:	4649      	mov	r1, r9
 8001164:	2900      	cmp	r1, #0
 8001166:	d100      	bne.n	800116a <__aeabi_fsub+0x2e6>
 8001168:	e752      	b.n	8001010 <__aeabi_fsub+0x18c>
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	03c9      	lsls	r1, r1, #15
 800116e:	420f      	tst	r7, r1
 8001170:	d100      	bne.n	8001174 <__aeabi_fsub+0x2f0>
 8001172:	e74d      	b.n	8001010 <__aeabi_fsub+0x18c>
 8001174:	4660      	mov	r0, ip
 8001176:	4208      	tst	r0, r1
 8001178:	d000      	beq.n	800117c <__aeabi_fsub+0x2f8>
 800117a:	e749      	b.n	8001010 <__aeabi_fsub+0x18c>
 800117c:	464b      	mov	r3, r9
 800117e:	e747      	b.n	8001010 <__aeabi_fsub+0x18c>
 8001180:	4648      	mov	r0, r9
 8001182:	25ff      	movs	r5, #255	; 0xff
 8001184:	2800      	cmp	r0, #0
 8001186:	d100      	bne.n	800118a <__aeabi_fsub+0x306>
 8001188:	e74f      	b.n	800102a <__aeabi_fsub+0x1a6>
 800118a:	2280      	movs	r2, #128	; 0x80
 800118c:	03d2      	lsls	r2, r2, #15
 800118e:	4217      	tst	r7, r2
 8001190:	d004      	beq.n	800119c <__aeabi_fsub+0x318>
 8001192:	4660      	mov	r0, ip
 8001194:	4210      	tst	r0, r2
 8001196:	d101      	bne.n	800119c <__aeabi_fsub+0x318>
 8001198:	464b      	mov	r3, r9
 800119a:	4688      	mov	r8, r1
 800119c:	2201      	movs	r2, #1
 800119e:	4641      	mov	r1, r8
 80011a0:	25ff      	movs	r5, #255	; 0xff
 80011a2:	400a      	ands	r2, r1
 80011a4:	e741      	b.n	800102a <__aeabi_fsub+0x1a6>
 80011a6:	4648      	mov	r0, r9
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d01f      	beq.n	80011ec <__aeabi_fsub+0x368>
 80011ac:	1a1a      	subs	r2, r3, r0
 80011ae:	0150      	lsls	r0, r2, #5
 80011b0:	d520      	bpl.n	80011f4 <__aeabi_fsub+0x370>
 80011b2:	464a      	mov	r2, r9
 80011b4:	2407      	movs	r4, #7
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	401c      	ands	r4, r3
 80011ba:	4688      	mov	r8, r1
 80011bc:	2500      	movs	r5, #0
 80011be:	e6a6      	b.n	8000f0e <__aeabi_fsub+0x8a>
 80011c0:	1c74      	adds	r4, r6, #1
 80011c2:	d0c9      	beq.n	8001158 <__aeabi_fsub+0x2d4>
 80011c4:	43f6      	mvns	r6, r6
 80011c6:	28ff      	cmp	r0, #255	; 0xff
 80011c8:	d1bc      	bne.n	8001144 <__aeabi_fsub+0x2c0>
 80011ca:	464b      	mov	r3, r9
 80011cc:	e720      	b.n	8001010 <__aeabi_fsub+0x18c>
 80011ce:	4699      	mov	r9, r3
 80011d0:	464b      	mov	r3, r9
 80011d2:	2500      	movs	r5, #0
 80011d4:	08db      	lsrs	r3, r3, #3
 80011d6:	e72b      	b.n	8001030 <__aeabi_fsub+0x1ac>
 80011d8:	2301      	movs	r3, #1
 80011da:	e740      	b.n	800105e <__aeabi_fsub+0x1da>
 80011dc:	2200      	movs	r2, #0
 80011de:	2300      	movs	r3, #0
 80011e0:	e6a9      	b.n	8000f36 <__aeabi_fsub+0xb2>
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	2200      	movs	r2, #0
 80011e6:	03db      	lsls	r3, r3, #15
 80011e8:	24ff      	movs	r4, #255	; 0xff
 80011ea:	e6a4      	b.n	8000f36 <__aeabi_fsub+0xb2>
 80011ec:	2500      	movs	r5, #0
 80011ee:	e71c      	b.n	800102a <__aeabi_fsub+0x1a6>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e7b1      	b.n	8001158 <__aeabi_fsub+0x2d4>
 80011f4:	2a00      	cmp	r2, #0
 80011f6:	d0f1      	beq.n	80011dc <__aeabi_fsub+0x358>
 80011f8:	0013      	movs	r3, r2
 80011fa:	2500      	movs	r5, #0
 80011fc:	e6fc      	b.n	8000ff8 <__aeabi_fsub+0x174>
 80011fe:	2500      	movs	r5, #0
 8001200:	e6fa      	b.n	8000ff8 <__aeabi_fsub+0x174>
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	7dffffff 	.word	0x7dffffff
 8001208:	fbffffff 	.word	0xfbffffff

0800120c <__aeabi_f2iz>:
 800120c:	0241      	lsls	r1, r0, #9
 800120e:	0042      	lsls	r2, r0, #1
 8001210:	0fc3      	lsrs	r3, r0, #31
 8001212:	0a49      	lsrs	r1, r1, #9
 8001214:	0e12      	lsrs	r2, r2, #24
 8001216:	2000      	movs	r0, #0
 8001218:	2a7e      	cmp	r2, #126	; 0x7e
 800121a:	d90d      	bls.n	8001238 <__aeabi_f2iz+0x2c>
 800121c:	2a9d      	cmp	r2, #157	; 0x9d
 800121e:	d80c      	bhi.n	800123a <__aeabi_f2iz+0x2e>
 8001220:	2080      	movs	r0, #128	; 0x80
 8001222:	0400      	lsls	r0, r0, #16
 8001224:	4301      	orrs	r1, r0
 8001226:	2a95      	cmp	r2, #149	; 0x95
 8001228:	dc0a      	bgt.n	8001240 <__aeabi_f2iz+0x34>
 800122a:	2096      	movs	r0, #150	; 0x96
 800122c:	1a82      	subs	r2, r0, r2
 800122e:	40d1      	lsrs	r1, r2
 8001230:	4248      	negs	r0, r1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d100      	bne.n	8001238 <__aeabi_f2iz+0x2c>
 8001236:	0008      	movs	r0, r1
 8001238:	4770      	bx	lr
 800123a:	4a03      	ldr	r2, [pc, #12]	; (8001248 <__aeabi_f2iz+0x3c>)
 800123c:	1898      	adds	r0, r3, r2
 800123e:	e7fb      	b.n	8001238 <__aeabi_f2iz+0x2c>
 8001240:	3a96      	subs	r2, #150	; 0x96
 8001242:	4091      	lsls	r1, r2
 8001244:	e7f4      	b.n	8001230 <__aeabi_f2iz+0x24>
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	7fffffff 	.word	0x7fffffff

0800124c <__aeabi_ui2f>:
 800124c:	b570      	push	{r4, r5, r6, lr}
 800124e:	1e04      	subs	r4, r0, #0
 8001250:	d034      	beq.n	80012bc <__aeabi_ui2f+0x70>
 8001252:	f001 fe5d 	bl	8002f10 <__clzsi2>
 8001256:	229e      	movs	r2, #158	; 0x9e
 8001258:	1a12      	subs	r2, r2, r0
 800125a:	2a96      	cmp	r2, #150	; 0x96
 800125c:	dc07      	bgt.n	800126e <__aeabi_ui2f+0x22>
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	2808      	cmp	r0, #8
 8001262:	dd2e      	ble.n	80012c2 <__aeabi_ui2f+0x76>
 8001264:	3808      	subs	r0, #8
 8001266:	4084      	lsls	r4, r0
 8001268:	0260      	lsls	r0, r4, #9
 800126a:	0a40      	lsrs	r0, r0, #9
 800126c:	e021      	b.n	80012b2 <__aeabi_ui2f+0x66>
 800126e:	2a99      	cmp	r2, #153	; 0x99
 8001270:	dd09      	ble.n	8001286 <__aeabi_ui2f+0x3a>
 8001272:	0003      	movs	r3, r0
 8001274:	0021      	movs	r1, r4
 8001276:	331b      	adds	r3, #27
 8001278:	4099      	lsls	r1, r3
 800127a:	1e4b      	subs	r3, r1, #1
 800127c:	4199      	sbcs	r1, r3
 800127e:	2305      	movs	r3, #5
 8001280:	1a1b      	subs	r3, r3, r0
 8001282:	40dc      	lsrs	r4, r3
 8001284:	430c      	orrs	r4, r1
 8001286:	2805      	cmp	r0, #5
 8001288:	dd01      	ble.n	800128e <__aeabi_ui2f+0x42>
 800128a:	1f43      	subs	r3, r0, #5
 800128c:	409c      	lsls	r4, r3
 800128e:	0023      	movs	r3, r4
 8001290:	490d      	ldr	r1, [pc, #52]	; (80012c8 <__aeabi_ui2f+0x7c>)
 8001292:	400b      	ands	r3, r1
 8001294:	0765      	lsls	r5, r4, #29
 8001296:	d009      	beq.n	80012ac <__aeabi_ui2f+0x60>
 8001298:	250f      	movs	r5, #15
 800129a:	402c      	ands	r4, r5
 800129c:	2c04      	cmp	r4, #4
 800129e:	d005      	beq.n	80012ac <__aeabi_ui2f+0x60>
 80012a0:	3304      	adds	r3, #4
 80012a2:	015c      	lsls	r4, r3, #5
 80012a4:	d502      	bpl.n	80012ac <__aeabi_ui2f+0x60>
 80012a6:	229f      	movs	r2, #159	; 0x9f
 80012a8:	400b      	ands	r3, r1
 80012aa:	1a12      	subs	r2, r2, r0
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	0a58      	lsrs	r0, r3, #9
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	0240      	lsls	r0, r0, #9
 80012b4:	05d2      	lsls	r2, r2, #23
 80012b6:	0a40      	lsrs	r0, r0, #9
 80012b8:	4310      	orrs	r0, r2
 80012ba:	bd70      	pop	{r4, r5, r6, pc}
 80012bc:	2200      	movs	r2, #0
 80012be:	2000      	movs	r0, #0
 80012c0:	e7f7      	b.n	80012b2 <__aeabi_ui2f+0x66>
 80012c2:	0260      	lsls	r0, r4, #9
 80012c4:	0a40      	lsrs	r0, r0, #9
 80012c6:	e7f4      	b.n	80012b2 <__aeabi_ui2f+0x66>
 80012c8:	fbffffff 	.word	0xfbffffff

080012cc <__aeabi_dadd>:
 80012cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ce:	464f      	mov	r7, r9
 80012d0:	4646      	mov	r6, r8
 80012d2:	46d6      	mov	lr, sl
 80012d4:	000c      	movs	r4, r1
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	b5c0      	push	{r6, r7, lr}
 80012da:	0a49      	lsrs	r1, r1, #9
 80012dc:	0f47      	lsrs	r7, r0, #29
 80012de:	005e      	lsls	r6, r3, #1
 80012e0:	4339      	orrs	r1, r7
 80012e2:	031f      	lsls	r7, r3, #12
 80012e4:	0fdb      	lsrs	r3, r3, #31
 80012e6:	469c      	mov	ip, r3
 80012e8:	0065      	lsls	r5, r4, #1
 80012ea:	0a7b      	lsrs	r3, r7, #9
 80012ec:	0f57      	lsrs	r7, r2, #29
 80012ee:	431f      	orrs	r7, r3
 80012f0:	0d6d      	lsrs	r5, r5, #21
 80012f2:	0fe4      	lsrs	r4, r4, #31
 80012f4:	0d76      	lsrs	r6, r6, #21
 80012f6:	46a1      	mov	r9, r4
 80012f8:	00c0      	lsls	r0, r0, #3
 80012fa:	46b8      	mov	r8, r7
 80012fc:	00d2      	lsls	r2, r2, #3
 80012fe:	1bab      	subs	r3, r5, r6
 8001300:	4564      	cmp	r4, ip
 8001302:	d07b      	beq.n	80013fc <__aeabi_dadd+0x130>
 8001304:	2b00      	cmp	r3, #0
 8001306:	dd5f      	ble.n	80013c8 <__aeabi_dadd+0xfc>
 8001308:	2e00      	cmp	r6, #0
 800130a:	d000      	beq.n	800130e <__aeabi_dadd+0x42>
 800130c:	e0a4      	b.n	8001458 <__aeabi_dadd+0x18c>
 800130e:	003e      	movs	r6, r7
 8001310:	4316      	orrs	r6, r2
 8001312:	d100      	bne.n	8001316 <__aeabi_dadd+0x4a>
 8001314:	e112      	b.n	800153c <__aeabi_dadd+0x270>
 8001316:	1e5e      	subs	r6, r3, #1
 8001318:	2e00      	cmp	r6, #0
 800131a:	d000      	beq.n	800131e <__aeabi_dadd+0x52>
 800131c:	e19e      	b.n	800165c <__aeabi_dadd+0x390>
 800131e:	1a87      	subs	r7, r0, r2
 8001320:	4643      	mov	r3, r8
 8001322:	42b8      	cmp	r0, r7
 8001324:	4180      	sbcs	r0, r0
 8001326:	2501      	movs	r5, #1
 8001328:	1ac9      	subs	r1, r1, r3
 800132a:	4240      	negs	r0, r0
 800132c:	1a09      	subs	r1, r1, r0
 800132e:	020b      	lsls	r3, r1, #8
 8001330:	d400      	bmi.n	8001334 <__aeabi_dadd+0x68>
 8001332:	e131      	b.n	8001598 <__aeabi_dadd+0x2cc>
 8001334:	0249      	lsls	r1, r1, #9
 8001336:	0a4e      	lsrs	r6, r1, #9
 8001338:	2e00      	cmp	r6, #0
 800133a:	d100      	bne.n	800133e <__aeabi_dadd+0x72>
 800133c:	e16e      	b.n	800161c <__aeabi_dadd+0x350>
 800133e:	0030      	movs	r0, r6
 8001340:	f001 fde6 	bl	8002f10 <__clzsi2>
 8001344:	0003      	movs	r3, r0
 8001346:	3b08      	subs	r3, #8
 8001348:	2b1f      	cmp	r3, #31
 800134a:	dd00      	ble.n	800134e <__aeabi_dadd+0x82>
 800134c:	e161      	b.n	8001612 <__aeabi_dadd+0x346>
 800134e:	2220      	movs	r2, #32
 8001350:	0039      	movs	r1, r7
 8001352:	1ad2      	subs	r2, r2, r3
 8001354:	409e      	lsls	r6, r3
 8001356:	40d1      	lsrs	r1, r2
 8001358:	409f      	lsls	r7, r3
 800135a:	430e      	orrs	r6, r1
 800135c:	429d      	cmp	r5, r3
 800135e:	dd00      	ble.n	8001362 <__aeabi_dadd+0x96>
 8001360:	e151      	b.n	8001606 <__aeabi_dadd+0x33a>
 8001362:	1b5d      	subs	r5, r3, r5
 8001364:	1c6b      	adds	r3, r5, #1
 8001366:	2b1f      	cmp	r3, #31
 8001368:	dd00      	ble.n	800136c <__aeabi_dadd+0xa0>
 800136a:	e17c      	b.n	8001666 <__aeabi_dadd+0x39a>
 800136c:	2120      	movs	r1, #32
 800136e:	1ac9      	subs	r1, r1, r3
 8001370:	003d      	movs	r5, r7
 8001372:	0030      	movs	r0, r6
 8001374:	408f      	lsls	r7, r1
 8001376:	4088      	lsls	r0, r1
 8001378:	40dd      	lsrs	r5, r3
 800137a:	1e79      	subs	r1, r7, #1
 800137c:	418f      	sbcs	r7, r1
 800137e:	0031      	movs	r1, r6
 8001380:	2207      	movs	r2, #7
 8001382:	4328      	orrs	r0, r5
 8001384:	40d9      	lsrs	r1, r3
 8001386:	2500      	movs	r5, #0
 8001388:	4307      	orrs	r7, r0
 800138a:	403a      	ands	r2, r7
 800138c:	2a00      	cmp	r2, #0
 800138e:	d009      	beq.n	80013a4 <__aeabi_dadd+0xd8>
 8001390:	230f      	movs	r3, #15
 8001392:	403b      	ands	r3, r7
 8001394:	2b04      	cmp	r3, #4
 8001396:	d005      	beq.n	80013a4 <__aeabi_dadd+0xd8>
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	42bb      	cmp	r3, r7
 800139c:	41bf      	sbcs	r7, r7
 800139e:	427f      	negs	r7, r7
 80013a0:	19c9      	adds	r1, r1, r7
 80013a2:	001f      	movs	r7, r3
 80013a4:	020b      	lsls	r3, r1, #8
 80013a6:	d400      	bmi.n	80013aa <__aeabi_dadd+0xde>
 80013a8:	e226      	b.n	80017f8 <__aeabi_dadd+0x52c>
 80013aa:	1c6a      	adds	r2, r5, #1
 80013ac:	4bc6      	ldr	r3, [pc, #792]	; (80016c8 <__aeabi_dadd+0x3fc>)
 80013ae:	0555      	lsls	r5, r2, #21
 80013b0:	0d6d      	lsrs	r5, r5, #21
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d100      	bne.n	80013b8 <__aeabi_dadd+0xec>
 80013b6:	e106      	b.n	80015c6 <__aeabi_dadd+0x2fa>
 80013b8:	4ac4      	ldr	r2, [pc, #784]	; (80016cc <__aeabi_dadd+0x400>)
 80013ba:	08ff      	lsrs	r7, r7, #3
 80013bc:	400a      	ands	r2, r1
 80013be:	0753      	lsls	r3, r2, #29
 80013c0:	0252      	lsls	r2, r2, #9
 80013c2:	433b      	orrs	r3, r7
 80013c4:	0b12      	lsrs	r2, r2, #12
 80013c6:	e08e      	b.n	80014e6 <__aeabi_dadd+0x21a>
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d000      	beq.n	80013ce <__aeabi_dadd+0x102>
 80013cc:	e0b8      	b.n	8001540 <__aeabi_dadd+0x274>
 80013ce:	1c6b      	adds	r3, r5, #1
 80013d0:	055b      	lsls	r3, r3, #21
 80013d2:	0d5b      	lsrs	r3, r3, #21
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	dc00      	bgt.n	80013da <__aeabi_dadd+0x10e>
 80013d8:	e130      	b.n	800163c <__aeabi_dadd+0x370>
 80013da:	1a87      	subs	r7, r0, r2
 80013dc:	4643      	mov	r3, r8
 80013de:	42b8      	cmp	r0, r7
 80013e0:	41b6      	sbcs	r6, r6
 80013e2:	1acb      	subs	r3, r1, r3
 80013e4:	4276      	negs	r6, r6
 80013e6:	1b9e      	subs	r6, r3, r6
 80013e8:	0233      	lsls	r3, r6, #8
 80013ea:	d500      	bpl.n	80013ee <__aeabi_dadd+0x122>
 80013ec:	e14c      	b.n	8001688 <__aeabi_dadd+0x3bc>
 80013ee:	003b      	movs	r3, r7
 80013f0:	4333      	orrs	r3, r6
 80013f2:	d1a1      	bne.n	8001338 <__aeabi_dadd+0x6c>
 80013f4:	2200      	movs	r2, #0
 80013f6:	2400      	movs	r4, #0
 80013f8:	2500      	movs	r5, #0
 80013fa:	e070      	b.n	80014de <__aeabi_dadd+0x212>
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	dc00      	bgt.n	8001402 <__aeabi_dadd+0x136>
 8001400:	e0e5      	b.n	80015ce <__aeabi_dadd+0x302>
 8001402:	2e00      	cmp	r6, #0
 8001404:	d100      	bne.n	8001408 <__aeabi_dadd+0x13c>
 8001406:	e083      	b.n	8001510 <__aeabi_dadd+0x244>
 8001408:	4eaf      	ldr	r6, [pc, #700]	; (80016c8 <__aeabi_dadd+0x3fc>)
 800140a:	42b5      	cmp	r5, r6
 800140c:	d060      	beq.n	80014d0 <__aeabi_dadd+0x204>
 800140e:	2680      	movs	r6, #128	; 0x80
 8001410:	0436      	lsls	r6, r6, #16
 8001412:	4337      	orrs	r7, r6
 8001414:	46b8      	mov	r8, r7
 8001416:	2b38      	cmp	r3, #56	; 0x38
 8001418:	dc00      	bgt.n	800141c <__aeabi_dadd+0x150>
 800141a:	e13e      	b.n	800169a <__aeabi_dadd+0x3ce>
 800141c:	4643      	mov	r3, r8
 800141e:	4313      	orrs	r3, r2
 8001420:	001f      	movs	r7, r3
 8001422:	1e7a      	subs	r2, r7, #1
 8001424:	4197      	sbcs	r7, r2
 8001426:	183f      	adds	r7, r7, r0
 8001428:	4287      	cmp	r7, r0
 800142a:	4180      	sbcs	r0, r0
 800142c:	4240      	negs	r0, r0
 800142e:	1809      	adds	r1, r1, r0
 8001430:	020b      	lsls	r3, r1, #8
 8001432:	d400      	bmi.n	8001436 <__aeabi_dadd+0x16a>
 8001434:	e0b0      	b.n	8001598 <__aeabi_dadd+0x2cc>
 8001436:	4ba4      	ldr	r3, [pc, #656]	; (80016c8 <__aeabi_dadd+0x3fc>)
 8001438:	3501      	adds	r5, #1
 800143a:	429d      	cmp	r5, r3
 800143c:	d100      	bne.n	8001440 <__aeabi_dadd+0x174>
 800143e:	e0c3      	b.n	80015c8 <__aeabi_dadd+0x2fc>
 8001440:	4aa2      	ldr	r2, [pc, #648]	; (80016cc <__aeabi_dadd+0x400>)
 8001442:	087b      	lsrs	r3, r7, #1
 8001444:	400a      	ands	r2, r1
 8001446:	2101      	movs	r1, #1
 8001448:	400f      	ands	r7, r1
 800144a:	431f      	orrs	r7, r3
 800144c:	0851      	lsrs	r1, r2, #1
 800144e:	07d3      	lsls	r3, r2, #31
 8001450:	2207      	movs	r2, #7
 8001452:	431f      	orrs	r7, r3
 8001454:	403a      	ands	r2, r7
 8001456:	e799      	b.n	800138c <__aeabi_dadd+0xc0>
 8001458:	4e9b      	ldr	r6, [pc, #620]	; (80016c8 <__aeabi_dadd+0x3fc>)
 800145a:	42b5      	cmp	r5, r6
 800145c:	d038      	beq.n	80014d0 <__aeabi_dadd+0x204>
 800145e:	2680      	movs	r6, #128	; 0x80
 8001460:	0436      	lsls	r6, r6, #16
 8001462:	4337      	orrs	r7, r6
 8001464:	46b8      	mov	r8, r7
 8001466:	2b38      	cmp	r3, #56	; 0x38
 8001468:	dd00      	ble.n	800146c <__aeabi_dadd+0x1a0>
 800146a:	e0dc      	b.n	8001626 <__aeabi_dadd+0x35a>
 800146c:	2b1f      	cmp	r3, #31
 800146e:	dc00      	bgt.n	8001472 <__aeabi_dadd+0x1a6>
 8001470:	e130      	b.n	80016d4 <__aeabi_dadd+0x408>
 8001472:	001e      	movs	r6, r3
 8001474:	4647      	mov	r7, r8
 8001476:	3e20      	subs	r6, #32
 8001478:	40f7      	lsrs	r7, r6
 800147a:	46bc      	mov	ip, r7
 800147c:	2b20      	cmp	r3, #32
 800147e:	d004      	beq.n	800148a <__aeabi_dadd+0x1be>
 8001480:	2640      	movs	r6, #64	; 0x40
 8001482:	1af3      	subs	r3, r6, r3
 8001484:	4646      	mov	r6, r8
 8001486:	409e      	lsls	r6, r3
 8001488:	4332      	orrs	r2, r6
 800148a:	0017      	movs	r7, r2
 800148c:	4663      	mov	r3, ip
 800148e:	1e7a      	subs	r2, r7, #1
 8001490:	4197      	sbcs	r7, r2
 8001492:	431f      	orrs	r7, r3
 8001494:	e0cc      	b.n	8001630 <__aeabi_dadd+0x364>
 8001496:	2b00      	cmp	r3, #0
 8001498:	d100      	bne.n	800149c <__aeabi_dadd+0x1d0>
 800149a:	e204      	b.n	80018a6 <__aeabi_dadd+0x5da>
 800149c:	4643      	mov	r3, r8
 800149e:	4313      	orrs	r3, r2
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dadd+0x1d8>
 80014a2:	e159      	b.n	8001758 <__aeabi_dadd+0x48c>
 80014a4:	074b      	lsls	r3, r1, #29
 80014a6:	08c0      	lsrs	r0, r0, #3
 80014a8:	4318      	orrs	r0, r3
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	08c9      	lsrs	r1, r1, #3
 80014ae:	031b      	lsls	r3, r3, #12
 80014b0:	4219      	tst	r1, r3
 80014b2:	d008      	beq.n	80014c6 <__aeabi_dadd+0x1fa>
 80014b4:	4645      	mov	r5, r8
 80014b6:	08ed      	lsrs	r5, r5, #3
 80014b8:	421d      	tst	r5, r3
 80014ba:	d104      	bne.n	80014c6 <__aeabi_dadd+0x1fa>
 80014bc:	4643      	mov	r3, r8
 80014be:	08d0      	lsrs	r0, r2, #3
 80014c0:	0759      	lsls	r1, r3, #29
 80014c2:	4308      	orrs	r0, r1
 80014c4:	0029      	movs	r1, r5
 80014c6:	0f42      	lsrs	r2, r0, #29
 80014c8:	00c9      	lsls	r1, r1, #3
 80014ca:	4d7f      	ldr	r5, [pc, #508]	; (80016c8 <__aeabi_dadd+0x3fc>)
 80014cc:	4311      	orrs	r1, r2
 80014ce:	00c0      	lsls	r0, r0, #3
 80014d0:	074b      	lsls	r3, r1, #29
 80014d2:	08ca      	lsrs	r2, r1, #3
 80014d4:	497c      	ldr	r1, [pc, #496]	; (80016c8 <__aeabi_dadd+0x3fc>)
 80014d6:	08c0      	lsrs	r0, r0, #3
 80014d8:	4303      	orrs	r3, r0
 80014da:	428d      	cmp	r5, r1
 80014dc:	d068      	beq.n	80015b0 <__aeabi_dadd+0x2e4>
 80014de:	0312      	lsls	r2, r2, #12
 80014e0:	056d      	lsls	r5, r5, #21
 80014e2:	0b12      	lsrs	r2, r2, #12
 80014e4:	0d6d      	lsrs	r5, r5, #21
 80014e6:	2100      	movs	r1, #0
 80014e8:	0312      	lsls	r2, r2, #12
 80014ea:	0018      	movs	r0, r3
 80014ec:	0b13      	lsrs	r3, r2, #12
 80014ee:	0d0a      	lsrs	r2, r1, #20
 80014f0:	0512      	lsls	r2, r2, #20
 80014f2:	431a      	orrs	r2, r3
 80014f4:	4b76      	ldr	r3, [pc, #472]	; (80016d0 <__aeabi_dadd+0x404>)
 80014f6:	052d      	lsls	r5, r5, #20
 80014f8:	4013      	ands	r3, r2
 80014fa:	432b      	orrs	r3, r5
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	07e4      	lsls	r4, r4, #31
 8001500:	085b      	lsrs	r3, r3, #1
 8001502:	4323      	orrs	r3, r4
 8001504:	0019      	movs	r1, r3
 8001506:	bc1c      	pop	{r2, r3, r4}
 8001508:	4690      	mov	r8, r2
 800150a:	4699      	mov	r9, r3
 800150c:	46a2      	mov	sl, r4
 800150e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001510:	003e      	movs	r6, r7
 8001512:	4316      	orrs	r6, r2
 8001514:	d012      	beq.n	800153c <__aeabi_dadd+0x270>
 8001516:	1e5e      	subs	r6, r3, #1
 8001518:	2e00      	cmp	r6, #0
 800151a:	d000      	beq.n	800151e <__aeabi_dadd+0x252>
 800151c:	e100      	b.n	8001720 <__aeabi_dadd+0x454>
 800151e:	1887      	adds	r7, r0, r2
 8001520:	4287      	cmp	r7, r0
 8001522:	4180      	sbcs	r0, r0
 8001524:	4441      	add	r1, r8
 8001526:	4240      	negs	r0, r0
 8001528:	1809      	adds	r1, r1, r0
 800152a:	2501      	movs	r5, #1
 800152c:	020b      	lsls	r3, r1, #8
 800152e:	d533      	bpl.n	8001598 <__aeabi_dadd+0x2cc>
 8001530:	2502      	movs	r5, #2
 8001532:	e785      	b.n	8001440 <__aeabi_dadd+0x174>
 8001534:	4664      	mov	r4, ip
 8001536:	0033      	movs	r3, r6
 8001538:	4641      	mov	r1, r8
 800153a:	0010      	movs	r0, r2
 800153c:	001d      	movs	r5, r3
 800153e:	e7c7      	b.n	80014d0 <__aeabi_dadd+0x204>
 8001540:	2d00      	cmp	r5, #0
 8001542:	d000      	beq.n	8001546 <__aeabi_dadd+0x27a>
 8001544:	e0da      	b.n	80016fc <__aeabi_dadd+0x430>
 8001546:	000c      	movs	r4, r1
 8001548:	4304      	orrs	r4, r0
 800154a:	d0f3      	beq.n	8001534 <__aeabi_dadd+0x268>
 800154c:	1c5c      	adds	r4, r3, #1
 800154e:	d100      	bne.n	8001552 <__aeabi_dadd+0x286>
 8001550:	e19f      	b.n	8001892 <__aeabi_dadd+0x5c6>
 8001552:	4c5d      	ldr	r4, [pc, #372]	; (80016c8 <__aeabi_dadd+0x3fc>)
 8001554:	42a6      	cmp	r6, r4
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x28e>
 8001558:	e12f      	b.n	80017ba <__aeabi_dadd+0x4ee>
 800155a:	43db      	mvns	r3, r3
 800155c:	2b38      	cmp	r3, #56	; 0x38
 800155e:	dd00      	ble.n	8001562 <__aeabi_dadd+0x296>
 8001560:	e166      	b.n	8001830 <__aeabi_dadd+0x564>
 8001562:	2b1f      	cmp	r3, #31
 8001564:	dd00      	ble.n	8001568 <__aeabi_dadd+0x29c>
 8001566:	e183      	b.n	8001870 <__aeabi_dadd+0x5a4>
 8001568:	2420      	movs	r4, #32
 800156a:	0005      	movs	r5, r0
 800156c:	1ae4      	subs	r4, r4, r3
 800156e:	000f      	movs	r7, r1
 8001570:	40dd      	lsrs	r5, r3
 8001572:	40d9      	lsrs	r1, r3
 8001574:	40a0      	lsls	r0, r4
 8001576:	4643      	mov	r3, r8
 8001578:	40a7      	lsls	r7, r4
 800157a:	1a5b      	subs	r3, r3, r1
 800157c:	1e44      	subs	r4, r0, #1
 800157e:	41a0      	sbcs	r0, r4
 8001580:	4698      	mov	r8, r3
 8001582:	432f      	orrs	r7, r5
 8001584:	4338      	orrs	r0, r7
 8001586:	1a17      	subs	r7, r2, r0
 8001588:	42ba      	cmp	r2, r7
 800158a:	4192      	sbcs	r2, r2
 800158c:	4643      	mov	r3, r8
 800158e:	4252      	negs	r2, r2
 8001590:	1a99      	subs	r1, r3, r2
 8001592:	4664      	mov	r4, ip
 8001594:	0035      	movs	r5, r6
 8001596:	e6ca      	b.n	800132e <__aeabi_dadd+0x62>
 8001598:	2207      	movs	r2, #7
 800159a:	403a      	ands	r2, r7
 800159c:	2a00      	cmp	r2, #0
 800159e:	d000      	beq.n	80015a2 <__aeabi_dadd+0x2d6>
 80015a0:	e6f6      	b.n	8001390 <__aeabi_dadd+0xc4>
 80015a2:	074b      	lsls	r3, r1, #29
 80015a4:	08ca      	lsrs	r2, r1, #3
 80015a6:	4948      	ldr	r1, [pc, #288]	; (80016c8 <__aeabi_dadd+0x3fc>)
 80015a8:	08ff      	lsrs	r7, r7, #3
 80015aa:	433b      	orrs	r3, r7
 80015ac:	428d      	cmp	r5, r1
 80015ae:	d196      	bne.n	80014de <__aeabi_dadd+0x212>
 80015b0:	0019      	movs	r1, r3
 80015b2:	4311      	orrs	r1, r2
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dadd+0x2ec>
 80015b6:	e19e      	b.n	80018f6 <__aeabi_dadd+0x62a>
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	0309      	lsls	r1, r1, #12
 80015bc:	430a      	orrs	r2, r1
 80015be:	0312      	lsls	r2, r2, #12
 80015c0:	0b12      	lsrs	r2, r2, #12
 80015c2:	4d41      	ldr	r5, [pc, #260]	; (80016c8 <__aeabi_dadd+0x3fc>)
 80015c4:	e78f      	b.n	80014e6 <__aeabi_dadd+0x21a>
 80015c6:	0015      	movs	r5, r2
 80015c8:	2200      	movs	r2, #0
 80015ca:	2300      	movs	r3, #0
 80015cc:	e78b      	b.n	80014e6 <__aeabi_dadd+0x21a>
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d000      	beq.n	80015d4 <__aeabi_dadd+0x308>
 80015d2:	e0c7      	b.n	8001764 <__aeabi_dadd+0x498>
 80015d4:	1c6b      	adds	r3, r5, #1
 80015d6:	055f      	lsls	r7, r3, #21
 80015d8:	0d7f      	lsrs	r7, r7, #21
 80015da:	2f01      	cmp	r7, #1
 80015dc:	dc00      	bgt.n	80015e0 <__aeabi_dadd+0x314>
 80015de:	e0f1      	b.n	80017c4 <__aeabi_dadd+0x4f8>
 80015e0:	4d39      	ldr	r5, [pc, #228]	; (80016c8 <__aeabi_dadd+0x3fc>)
 80015e2:	42ab      	cmp	r3, r5
 80015e4:	d100      	bne.n	80015e8 <__aeabi_dadd+0x31c>
 80015e6:	e0b9      	b.n	800175c <__aeabi_dadd+0x490>
 80015e8:	1885      	adds	r5, r0, r2
 80015ea:	000a      	movs	r2, r1
 80015ec:	4285      	cmp	r5, r0
 80015ee:	4189      	sbcs	r1, r1
 80015f0:	4442      	add	r2, r8
 80015f2:	4249      	negs	r1, r1
 80015f4:	1851      	adds	r1, r2, r1
 80015f6:	2207      	movs	r2, #7
 80015f8:	07cf      	lsls	r7, r1, #31
 80015fa:	086d      	lsrs	r5, r5, #1
 80015fc:	432f      	orrs	r7, r5
 80015fe:	0849      	lsrs	r1, r1, #1
 8001600:	403a      	ands	r2, r7
 8001602:	001d      	movs	r5, r3
 8001604:	e6c2      	b.n	800138c <__aeabi_dadd+0xc0>
 8001606:	2207      	movs	r2, #7
 8001608:	4930      	ldr	r1, [pc, #192]	; (80016cc <__aeabi_dadd+0x400>)
 800160a:	1aed      	subs	r5, r5, r3
 800160c:	4031      	ands	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e6bc      	b.n	800138c <__aeabi_dadd+0xc0>
 8001612:	003e      	movs	r6, r7
 8001614:	3828      	subs	r0, #40	; 0x28
 8001616:	4086      	lsls	r6, r0
 8001618:	2700      	movs	r7, #0
 800161a:	e69f      	b.n	800135c <__aeabi_dadd+0x90>
 800161c:	0038      	movs	r0, r7
 800161e:	f001 fc77 	bl	8002f10 <__clzsi2>
 8001622:	3020      	adds	r0, #32
 8001624:	e68e      	b.n	8001344 <__aeabi_dadd+0x78>
 8001626:	4643      	mov	r3, r8
 8001628:	4313      	orrs	r3, r2
 800162a:	001f      	movs	r7, r3
 800162c:	1e7a      	subs	r2, r7, #1
 800162e:	4197      	sbcs	r7, r2
 8001630:	1bc7      	subs	r7, r0, r7
 8001632:	42b8      	cmp	r0, r7
 8001634:	4180      	sbcs	r0, r0
 8001636:	4240      	negs	r0, r0
 8001638:	1a09      	subs	r1, r1, r0
 800163a:	e678      	b.n	800132e <__aeabi_dadd+0x62>
 800163c:	000e      	movs	r6, r1
 800163e:	003b      	movs	r3, r7
 8001640:	4306      	orrs	r6, r0
 8001642:	4313      	orrs	r3, r2
 8001644:	2d00      	cmp	r5, #0
 8001646:	d161      	bne.n	800170c <__aeabi_dadd+0x440>
 8001648:	2e00      	cmp	r6, #0
 800164a:	d000      	beq.n	800164e <__aeabi_dadd+0x382>
 800164c:	e0f4      	b.n	8001838 <__aeabi_dadd+0x56c>
 800164e:	2b00      	cmp	r3, #0
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x388>
 8001652:	e11b      	b.n	800188c <__aeabi_dadd+0x5c0>
 8001654:	4664      	mov	r4, ip
 8001656:	0039      	movs	r1, r7
 8001658:	0010      	movs	r0, r2
 800165a:	e739      	b.n	80014d0 <__aeabi_dadd+0x204>
 800165c:	4f1a      	ldr	r7, [pc, #104]	; (80016c8 <__aeabi_dadd+0x3fc>)
 800165e:	42bb      	cmp	r3, r7
 8001660:	d07a      	beq.n	8001758 <__aeabi_dadd+0x48c>
 8001662:	0033      	movs	r3, r6
 8001664:	e6ff      	b.n	8001466 <__aeabi_dadd+0x19a>
 8001666:	0030      	movs	r0, r6
 8001668:	3d1f      	subs	r5, #31
 800166a:	40e8      	lsrs	r0, r5
 800166c:	2b20      	cmp	r3, #32
 800166e:	d003      	beq.n	8001678 <__aeabi_dadd+0x3ac>
 8001670:	2140      	movs	r1, #64	; 0x40
 8001672:	1acb      	subs	r3, r1, r3
 8001674:	409e      	lsls	r6, r3
 8001676:	4337      	orrs	r7, r6
 8001678:	1e7b      	subs	r3, r7, #1
 800167a:	419f      	sbcs	r7, r3
 800167c:	2207      	movs	r2, #7
 800167e:	4307      	orrs	r7, r0
 8001680:	403a      	ands	r2, r7
 8001682:	2100      	movs	r1, #0
 8001684:	2500      	movs	r5, #0
 8001686:	e789      	b.n	800159c <__aeabi_dadd+0x2d0>
 8001688:	1a17      	subs	r7, r2, r0
 800168a:	4643      	mov	r3, r8
 800168c:	42ba      	cmp	r2, r7
 800168e:	41b6      	sbcs	r6, r6
 8001690:	1a59      	subs	r1, r3, r1
 8001692:	4276      	negs	r6, r6
 8001694:	1b8e      	subs	r6, r1, r6
 8001696:	4664      	mov	r4, ip
 8001698:	e64e      	b.n	8001338 <__aeabi_dadd+0x6c>
 800169a:	2b1f      	cmp	r3, #31
 800169c:	dd00      	ble.n	80016a0 <__aeabi_dadd+0x3d4>
 800169e:	e0ad      	b.n	80017fc <__aeabi_dadd+0x530>
 80016a0:	2620      	movs	r6, #32
 80016a2:	4647      	mov	r7, r8
 80016a4:	1af6      	subs	r6, r6, r3
 80016a6:	40b7      	lsls	r7, r6
 80016a8:	46b9      	mov	r9, r7
 80016aa:	0017      	movs	r7, r2
 80016ac:	46b2      	mov	sl, r6
 80016ae:	40df      	lsrs	r7, r3
 80016b0:	464e      	mov	r6, r9
 80016b2:	433e      	orrs	r6, r7
 80016b4:	0037      	movs	r7, r6
 80016b6:	4656      	mov	r6, sl
 80016b8:	40b2      	lsls	r2, r6
 80016ba:	1e56      	subs	r6, r2, #1
 80016bc:	41b2      	sbcs	r2, r6
 80016be:	4317      	orrs	r7, r2
 80016c0:	4642      	mov	r2, r8
 80016c2:	40da      	lsrs	r2, r3
 80016c4:	1889      	adds	r1, r1, r2
 80016c6:	e6ae      	b.n	8001426 <__aeabi_dadd+0x15a>
 80016c8:	000007ff 	.word	0x000007ff
 80016cc:	ff7fffff 	.word	0xff7fffff
 80016d0:	800fffff 	.word	0x800fffff
 80016d4:	2620      	movs	r6, #32
 80016d6:	4647      	mov	r7, r8
 80016d8:	1af6      	subs	r6, r6, r3
 80016da:	40b7      	lsls	r7, r6
 80016dc:	46b9      	mov	r9, r7
 80016de:	0017      	movs	r7, r2
 80016e0:	46b2      	mov	sl, r6
 80016e2:	40df      	lsrs	r7, r3
 80016e4:	464e      	mov	r6, r9
 80016e6:	433e      	orrs	r6, r7
 80016e8:	0037      	movs	r7, r6
 80016ea:	4656      	mov	r6, sl
 80016ec:	40b2      	lsls	r2, r6
 80016ee:	1e56      	subs	r6, r2, #1
 80016f0:	41b2      	sbcs	r2, r6
 80016f2:	4317      	orrs	r7, r2
 80016f4:	4642      	mov	r2, r8
 80016f6:	40da      	lsrs	r2, r3
 80016f8:	1a89      	subs	r1, r1, r2
 80016fa:	e799      	b.n	8001630 <__aeabi_dadd+0x364>
 80016fc:	4c7f      	ldr	r4, [pc, #508]	; (80018fc <__aeabi_dadd+0x630>)
 80016fe:	42a6      	cmp	r6, r4
 8001700:	d05b      	beq.n	80017ba <__aeabi_dadd+0x4ee>
 8001702:	2480      	movs	r4, #128	; 0x80
 8001704:	0424      	lsls	r4, r4, #16
 8001706:	425b      	negs	r3, r3
 8001708:	4321      	orrs	r1, r4
 800170a:	e727      	b.n	800155c <__aeabi_dadd+0x290>
 800170c:	2e00      	cmp	r6, #0
 800170e:	d10c      	bne.n	800172a <__aeabi_dadd+0x45e>
 8001710:	2b00      	cmp	r3, #0
 8001712:	d100      	bne.n	8001716 <__aeabi_dadd+0x44a>
 8001714:	e0cb      	b.n	80018ae <__aeabi_dadd+0x5e2>
 8001716:	4664      	mov	r4, ip
 8001718:	0039      	movs	r1, r7
 800171a:	0010      	movs	r0, r2
 800171c:	4d77      	ldr	r5, [pc, #476]	; (80018fc <__aeabi_dadd+0x630>)
 800171e:	e6d7      	b.n	80014d0 <__aeabi_dadd+0x204>
 8001720:	4f76      	ldr	r7, [pc, #472]	; (80018fc <__aeabi_dadd+0x630>)
 8001722:	42bb      	cmp	r3, r7
 8001724:	d018      	beq.n	8001758 <__aeabi_dadd+0x48c>
 8001726:	0033      	movs	r3, r6
 8001728:	e675      	b.n	8001416 <__aeabi_dadd+0x14a>
 800172a:	2b00      	cmp	r3, #0
 800172c:	d014      	beq.n	8001758 <__aeabi_dadd+0x48c>
 800172e:	074b      	lsls	r3, r1, #29
 8001730:	08c0      	lsrs	r0, r0, #3
 8001732:	4318      	orrs	r0, r3
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	08c9      	lsrs	r1, r1, #3
 8001738:	031b      	lsls	r3, r3, #12
 800173a:	4219      	tst	r1, r3
 800173c:	d007      	beq.n	800174e <__aeabi_dadd+0x482>
 800173e:	08fc      	lsrs	r4, r7, #3
 8001740:	421c      	tst	r4, r3
 8001742:	d104      	bne.n	800174e <__aeabi_dadd+0x482>
 8001744:	0779      	lsls	r1, r7, #29
 8001746:	08d0      	lsrs	r0, r2, #3
 8001748:	4308      	orrs	r0, r1
 800174a:	46e1      	mov	r9, ip
 800174c:	0021      	movs	r1, r4
 800174e:	464c      	mov	r4, r9
 8001750:	0f42      	lsrs	r2, r0, #29
 8001752:	00c9      	lsls	r1, r1, #3
 8001754:	4311      	orrs	r1, r2
 8001756:	00c0      	lsls	r0, r0, #3
 8001758:	4d68      	ldr	r5, [pc, #416]	; (80018fc <__aeabi_dadd+0x630>)
 800175a:	e6b9      	b.n	80014d0 <__aeabi_dadd+0x204>
 800175c:	001d      	movs	r5, r3
 800175e:	2200      	movs	r2, #0
 8001760:	2300      	movs	r3, #0
 8001762:	e6c0      	b.n	80014e6 <__aeabi_dadd+0x21a>
 8001764:	2d00      	cmp	r5, #0
 8001766:	d15b      	bne.n	8001820 <__aeabi_dadd+0x554>
 8001768:	000d      	movs	r5, r1
 800176a:	4305      	orrs	r5, r0
 800176c:	d100      	bne.n	8001770 <__aeabi_dadd+0x4a4>
 800176e:	e6e2      	b.n	8001536 <__aeabi_dadd+0x26a>
 8001770:	1c5d      	adds	r5, r3, #1
 8001772:	d100      	bne.n	8001776 <__aeabi_dadd+0x4aa>
 8001774:	e0b0      	b.n	80018d8 <__aeabi_dadd+0x60c>
 8001776:	4d61      	ldr	r5, [pc, #388]	; (80018fc <__aeabi_dadd+0x630>)
 8001778:	42ae      	cmp	r6, r5
 800177a:	d01f      	beq.n	80017bc <__aeabi_dadd+0x4f0>
 800177c:	43db      	mvns	r3, r3
 800177e:	2b38      	cmp	r3, #56	; 0x38
 8001780:	dc71      	bgt.n	8001866 <__aeabi_dadd+0x59a>
 8001782:	2b1f      	cmp	r3, #31
 8001784:	dd00      	ble.n	8001788 <__aeabi_dadd+0x4bc>
 8001786:	e096      	b.n	80018b6 <__aeabi_dadd+0x5ea>
 8001788:	2520      	movs	r5, #32
 800178a:	000f      	movs	r7, r1
 800178c:	1aed      	subs	r5, r5, r3
 800178e:	40af      	lsls	r7, r5
 8001790:	46b9      	mov	r9, r7
 8001792:	0007      	movs	r7, r0
 8001794:	46aa      	mov	sl, r5
 8001796:	40df      	lsrs	r7, r3
 8001798:	464d      	mov	r5, r9
 800179a:	433d      	orrs	r5, r7
 800179c:	002f      	movs	r7, r5
 800179e:	4655      	mov	r5, sl
 80017a0:	40a8      	lsls	r0, r5
 80017a2:	40d9      	lsrs	r1, r3
 80017a4:	1e45      	subs	r5, r0, #1
 80017a6:	41a8      	sbcs	r0, r5
 80017a8:	4488      	add	r8, r1
 80017aa:	4307      	orrs	r7, r0
 80017ac:	18bf      	adds	r7, r7, r2
 80017ae:	4297      	cmp	r7, r2
 80017b0:	4192      	sbcs	r2, r2
 80017b2:	4251      	negs	r1, r2
 80017b4:	4441      	add	r1, r8
 80017b6:	0035      	movs	r5, r6
 80017b8:	e63a      	b.n	8001430 <__aeabi_dadd+0x164>
 80017ba:	4664      	mov	r4, ip
 80017bc:	0035      	movs	r5, r6
 80017be:	4641      	mov	r1, r8
 80017c0:	0010      	movs	r0, r2
 80017c2:	e685      	b.n	80014d0 <__aeabi_dadd+0x204>
 80017c4:	000b      	movs	r3, r1
 80017c6:	4303      	orrs	r3, r0
 80017c8:	2d00      	cmp	r5, #0
 80017ca:	d000      	beq.n	80017ce <__aeabi_dadd+0x502>
 80017cc:	e663      	b.n	8001496 <__aeabi_dadd+0x1ca>
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f5      	beq.n	80017be <__aeabi_dadd+0x4f2>
 80017d2:	4643      	mov	r3, r8
 80017d4:	4313      	orrs	r3, r2
 80017d6:	d100      	bne.n	80017da <__aeabi_dadd+0x50e>
 80017d8:	e67a      	b.n	80014d0 <__aeabi_dadd+0x204>
 80017da:	1887      	adds	r7, r0, r2
 80017dc:	4287      	cmp	r7, r0
 80017de:	4180      	sbcs	r0, r0
 80017e0:	2207      	movs	r2, #7
 80017e2:	4441      	add	r1, r8
 80017e4:	4240      	negs	r0, r0
 80017e6:	1809      	adds	r1, r1, r0
 80017e8:	403a      	ands	r2, r7
 80017ea:	020b      	lsls	r3, r1, #8
 80017ec:	d400      	bmi.n	80017f0 <__aeabi_dadd+0x524>
 80017ee:	e6d5      	b.n	800159c <__aeabi_dadd+0x2d0>
 80017f0:	4b43      	ldr	r3, [pc, #268]	; (8001900 <__aeabi_dadd+0x634>)
 80017f2:	3501      	adds	r5, #1
 80017f4:	4019      	ands	r1, r3
 80017f6:	e5c9      	b.n	800138c <__aeabi_dadd+0xc0>
 80017f8:	0038      	movs	r0, r7
 80017fa:	e669      	b.n	80014d0 <__aeabi_dadd+0x204>
 80017fc:	001e      	movs	r6, r3
 80017fe:	4647      	mov	r7, r8
 8001800:	3e20      	subs	r6, #32
 8001802:	40f7      	lsrs	r7, r6
 8001804:	46bc      	mov	ip, r7
 8001806:	2b20      	cmp	r3, #32
 8001808:	d004      	beq.n	8001814 <__aeabi_dadd+0x548>
 800180a:	2640      	movs	r6, #64	; 0x40
 800180c:	1af3      	subs	r3, r6, r3
 800180e:	4646      	mov	r6, r8
 8001810:	409e      	lsls	r6, r3
 8001812:	4332      	orrs	r2, r6
 8001814:	0017      	movs	r7, r2
 8001816:	4663      	mov	r3, ip
 8001818:	1e7a      	subs	r2, r7, #1
 800181a:	4197      	sbcs	r7, r2
 800181c:	431f      	orrs	r7, r3
 800181e:	e602      	b.n	8001426 <__aeabi_dadd+0x15a>
 8001820:	4d36      	ldr	r5, [pc, #216]	; (80018fc <__aeabi_dadd+0x630>)
 8001822:	42ae      	cmp	r6, r5
 8001824:	d0ca      	beq.n	80017bc <__aeabi_dadd+0x4f0>
 8001826:	2580      	movs	r5, #128	; 0x80
 8001828:	042d      	lsls	r5, r5, #16
 800182a:	425b      	negs	r3, r3
 800182c:	4329      	orrs	r1, r5
 800182e:	e7a6      	b.n	800177e <__aeabi_dadd+0x4b2>
 8001830:	4308      	orrs	r0, r1
 8001832:	1e41      	subs	r1, r0, #1
 8001834:	4188      	sbcs	r0, r1
 8001836:	e6a6      	b.n	8001586 <__aeabi_dadd+0x2ba>
 8001838:	2b00      	cmp	r3, #0
 800183a:	d100      	bne.n	800183e <__aeabi_dadd+0x572>
 800183c:	e648      	b.n	80014d0 <__aeabi_dadd+0x204>
 800183e:	1a87      	subs	r7, r0, r2
 8001840:	4643      	mov	r3, r8
 8001842:	42b8      	cmp	r0, r7
 8001844:	41b6      	sbcs	r6, r6
 8001846:	1acb      	subs	r3, r1, r3
 8001848:	4276      	negs	r6, r6
 800184a:	1b9e      	subs	r6, r3, r6
 800184c:	0233      	lsls	r3, r6, #8
 800184e:	d54b      	bpl.n	80018e8 <__aeabi_dadd+0x61c>
 8001850:	1a17      	subs	r7, r2, r0
 8001852:	4643      	mov	r3, r8
 8001854:	42ba      	cmp	r2, r7
 8001856:	4192      	sbcs	r2, r2
 8001858:	1a59      	subs	r1, r3, r1
 800185a:	4252      	negs	r2, r2
 800185c:	1a89      	subs	r1, r1, r2
 800185e:	2207      	movs	r2, #7
 8001860:	4664      	mov	r4, ip
 8001862:	403a      	ands	r2, r7
 8001864:	e592      	b.n	800138c <__aeabi_dadd+0xc0>
 8001866:	4301      	orrs	r1, r0
 8001868:	000f      	movs	r7, r1
 800186a:	1e79      	subs	r1, r7, #1
 800186c:	418f      	sbcs	r7, r1
 800186e:	e79d      	b.n	80017ac <__aeabi_dadd+0x4e0>
 8001870:	001c      	movs	r4, r3
 8001872:	000f      	movs	r7, r1
 8001874:	3c20      	subs	r4, #32
 8001876:	40e7      	lsrs	r7, r4
 8001878:	2b20      	cmp	r3, #32
 800187a:	d003      	beq.n	8001884 <__aeabi_dadd+0x5b8>
 800187c:	2440      	movs	r4, #64	; 0x40
 800187e:	1ae3      	subs	r3, r4, r3
 8001880:	4099      	lsls	r1, r3
 8001882:	4308      	orrs	r0, r1
 8001884:	1e41      	subs	r1, r0, #1
 8001886:	4188      	sbcs	r0, r1
 8001888:	4338      	orrs	r0, r7
 800188a:	e67c      	b.n	8001586 <__aeabi_dadd+0x2ba>
 800188c:	2200      	movs	r2, #0
 800188e:	2400      	movs	r4, #0
 8001890:	e625      	b.n	80014de <__aeabi_dadd+0x212>
 8001892:	1a17      	subs	r7, r2, r0
 8001894:	4643      	mov	r3, r8
 8001896:	42ba      	cmp	r2, r7
 8001898:	4192      	sbcs	r2, r2
 800189a:	1a59      	subs	r1, r3, r1
 800189c:	4252      	negs	r2, r2
 800189e:	1a89      	subs	r1, r1, r2
 80018a0:	4664      	mov	r4, ip
 80018a2:	0035      	movs	r5, r6
 80018a4:	e543      	b.n	800132e <__aeabi_dadd+0x62>
 80018a6:	4641      	mov	r1, r8
 80018a8:	0010      	movs	r0, r2
 80018aa:	4d14      	ldr	r5, [pc, #80]	; (80018fc <__aeabi_dadd+0x630>)
 80018ac:	e610      	b.n	80014d0 <__aeabi_dadd+0x204>
 80018ae:	2280      	movs	r2, #128	; 0x80
 80018b0:	2400      	movs	r4, #0
 80018b2:	0312      	lsls	r2, r2, #12
 80018b4:	e680      	b.n	80015b8 <__aeabi_dadd+0x2ec>
 80018b6:	001d      	movs	r5, r3
 80018b8:	000f      	movs	r7, r1
 80018ba:	3d20      	subs	r5, #32
 80018bc:	40ef      	lsrs	r7, r5
 80018be:	46bc      	mov	ip, r7
 80018c0:	2b20      	cmp	r3, #32
 80018c2:	d003      	beq.n	80018cc <__aeabi_dadd+0x600>
 80018c4:	2540      	movs	r5, #64	; 0x40
 80018c6:	1aeb      	subs	r3, r5, r3
 80018c8:	4099      	lsls	r1, r3
 80018ca:	4308      	orrs	r0, r1
 80018cc:	0007      	movs	r7, r0
 80018ce:	4663      	mov	r3, ip
 80018d0:	1e78      	subs	r0, r7, #1
 80018d2:	4187      	sbcs	r7, r0
 80018d4:	431f      	orrs	r7, r3
 80018d6:	e769      	b.n	80017ac <__aeabi_dadd+0x4e0>
 80018d8:	1887      	adds	r7, r0, r2
 80018da:	4297      	cmp	r7, r2
 80018dc:	419b      	sbcs	r3, r3
 80018de:	4441      	add	r1, r8
 80018e0:	425b      	negs	r3, r3
 80018e2:	18c9      	adds	r1, r1, r3
 80018e4:	0035      	movs	r5, r6
 80018e6:	e5a3      	b.n	8001430 <__aeabi_dadd+0x164>
 80018e8:	003b      	movs	r3, r7
 80018ea:	4333      	orrs	r3, r6
 80018ec:	d0ce      	beq.n	800188c <__aeabi_dadd+0x5c0>
 80018ee:	2207      	movs	r2, #7
 80018f0:	0031      	movs	r1, r6
 80018f2:	403a      	ands	r2, r7
 80018f4:	e652      	b.n	800159c <__aeabi_dadd+0x2d0>
 80018f6:	2300      	movs	r3, #0
 80018f8:	001a      	movs	r2, r3
 80018fa:	e5f4      	b.n	80014e6 <__aeabi_dadd+0x21a>
 80018fc:	000007ff 	.word	0x000007ff
 8001900:	ff7fffff 	.word	0xff7fffff

08001904 <__aeabi_ddiv>:
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001906:	4657      	mov	r7, sl
 8001908:	46de      	mov	lr, fp
 800190a:	464e      	mov	r6, r9
 800190c:	4645      	mov	r5, r8
 800190e:	b5e0      	push	{r5, r6, r7, lr}
 8001910:	4683      	mov	fp, r0
 8001912:	0007      	movs	r7, r0
 8001914:	030e      	lsls	r6, r1, #12
 8001916:	0048      	lsls	r0, r1, #1
 8001918:	b085      	sub	sp, #20
 800191a:	4692      	mov	sl, r2
 800191c:	001c      	movs	r4, r3
 800191e:	0b36      	lsrs	r6, r6, #12
 8001920:	0d40      	lsrs	r0, r0, #21
 8001922:	0fcd      	lsrs	r5, r1, #31
 8001924:	2800      	cmp	r0, #0
 8001926:	d100      	bne.n	800192a <__aeabi_ddiv+0x26>
 8001928:	e09d      	b.n	8001a66 <__aeabi_ddiv+0x162>
 800192a:	4b95      	ldr	r3, [pc, #596]	; (8001b80 <__aeabi_ddiv+0x27c>)
 800192c:	4298      	cmp	r0, r3
 800192e:	d039      	beq.n	80019a4 <__aeabi_ddiv+0xa0>
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	00f6      	lsls	r6, r6, #3
 8001934:	041b      	lsls	r3, r3, #16
 8001936:	431e      	orrs	r6, r3
 8001938:	4a92      	ldr	r2, [pc, #584]	; (8001b84 <__aeabi_ddiv+0x280>)
 800193a:	0f7b      	lsrs	r3, r7, #29
 800193c:	4333      	orrs	r3, r6
 800193e:	4699      	mov	r9, r3
 8001940:	4694      	mov	ip, r2
 8001942:	0003      	movs	r3, r0
 8001944:	4463      	add	r3, ip
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2300      	movs	r3, #0
 800194a:	2600      	movs	r6, #0
 800194c:	00ff      	lsls	r7, r7, #3
 800194e:	9302      	str	r3, [sp, #8]
 8001950:	0323      	lsls	r3, r4, #12
 8001952:	0b1b      	lsrs	r3, r3, #12
 8001954:	4698      	mov	r8, r3
 8001956:	0063      	lsls	r3, r4, #1
 8001958:	0fe4      	lsrs	r4, r4, #31
 800195a:	4652      	mov	r2, sl
 800195c:	0d5b      	lsrs	r3, r3, #21
 800195e:	9401      	str	r4, [sp, #4]
 8001960:	d100      	bne.n	8001964 <__aeabi_ddiv+0x60>
 8001962:	e0b3      	b.n	8001acc <__aeabi_ddiv+0x1c8>
 8001964:	4986      	ldr	r1, [pc, #536]	; (8001b80 <__aeabi_ddiv+0x27c>)
 8001966:	428b      	cmp	r3, r1
 8001968:	d100      	bne.n	800196c <__aeabi_ddiv+0x68>
 800196a:	e09e      	b.n	8001aaa <__aeabi_ddiv+0x1a6>
 800196c:	4642      	mov	r2, r8
 800196e:	00d1      	lsls	r1, r2, #3
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	0412      	lsls	r2, r2, #16
 8001974:	430a      	orrs	r2, r1
 8001976:	4651      	mov	r1, sl
 8001978:	0f49      	lsrs	r1, r1, #29
 800197a:	4311      	orrs	r1, r2
 800197c:	468b      	mov	fp, r1
 800197e:	4981      	ldr	r1, [pc, #516]	; (8001b84 <__aeabi_ddiv+0x280>)
 8001980:	4652      	mov	r2, sl
 8001982:	468c      	mov	ip, r1
 8001984:	9900      	ldr	r1, [sp, #0]
 8001986:	4463      	add	r3, ip
 8001988:	1acb      	subs	r3, r1, r3
 800198a:	2100      	movs	r1, #0
 800198c:	00d2      	lsls	r2, r2, #3
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	002b      	movs	r3, r5
 8001992:	4063      	eors	r3, r4
 8001994:	469a      	mov	sl, r3
 8001996:	2e0f      	cmp	r6, #15
 8001998:	d900      	bls.n	800199c <__aeabi_ddiv+0x98>
 800199a:	e105      	b.n	8001ba8 <__aeabi_ddiv+0x2a4>
 800199c:	4b7a      	ldr	r3, [pc, #488]	; (8001b88 <__aeabi_ddiv+0x284>)
 800199e:	00b6      	lsls	r6, r6, #2
 80019a0:	599b      	ldr	r3, [r3, r6]
 80019a2:	469f      	mov	pc, r3
 80019a4:	465b      	mov	r3, fp
 80019a6:	4333      	orrs	r3, r6
 80019a8:	4699      	mov	r9, r3
 80019aa:	d000      	beq.n	80019ae <__aeabi_ddiv+0xaa>
 80019ac:	e0b8      	b.n	8001b20 <__aeabi_ddiv+0x21c>
 80019ae:	2302      	movs	r3, #2
 80019b0:	2608      	movs	r6, #8
 80019b2:	2700      	movs	r7, #0
 80019b4:	9000      	str	r0, [sp, #0]
 80019b6:	9302      	str	r3, [sp, #8]
 80019b8:	e7ca      	b.n	8001950 <__aeabi_ddiv+0x4c>
 80019ba:	46cb      	mov	fp, r9
 80019bc:	003a      	movs	r2, r7
 80019be:	9902      	ldr	r1, [sp, #8]
 80019c0:	9501      	str	r5, [sp, #4]
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	469a      	mov	sl, r3
 80019c6:	2902      	cmp	r1, #2
 80019c8:	d027      	beq.n	8001a1a <__aeabi_ddiv+0x116>
 80019ca:	2903      	cmp	r1, #3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_ddiv+0xcc>
 80019ce:	e280      	b.n	8001ed2 <__aeabi_ddiv+0x5ce>
 80019d0:	2901      	cmp	r1, #1
 80019d2:	d044      	beq.n	8001a5e <__aeabi_ddiv+0x15a>
 80019d4:	496d      	ldr	r1, [pc, #436]	; (8001b8c <__aeabi_ddiv+0x288>)
 80019d6:	9b00      	ldr	r3, [sp, #0]
 80019d8:	468c      	mov	ip, r1
 80019da:	4463      	add	r3, ip
 80019dc:	001c      	movs	r4, r3
 80019de:	2c00      	cmp	r4, #0
 80019e0:	dd38      	ble.n	8001a54 <__aeabi_ddiv+0x150>
 80019e2:	0753      	lsls	r3, r2, #29
 80019e4:	d000      	beq.n	80019e8 <__aeabi_ddiv+0xe4>
 80019e6:	e213      	b.n	8001e10 <__aeabi_ddiv+0x50c>
 80019e8:	08d2      	lsrs	r2, r2, #3
 80019ea:	465b      	mov	r3, fp
 80019ec:	01db      	lsls	r3, r3, #7
 80019ee:	d509      	bpl.n	8001a04 <__aeabi_ddiv+0x100>
 80019f0:	4659      	mov	r1, fp
 80019f2:	4b67      	ldr	r3, [pc, #412]	; (8001b90 <__aeabi_ddiv+0x28c>)
 80019f4:	4019      	ands	r1, r3
 80019f6:	468b      	mov	fp, r1
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	00c9      	lsls	r1, r1, #3
 80019fc:	468c      	mov	ip, r1
 80019fe:	9b00      	ldr	r3, [sp, #0]
 8001a00:	4463      	add	r3, ip
 8001a02:	001c      	movs	r4, r3
 8001a04:	4b63      	ldr	r3, [pc, #396]	; (8001b94 <__aeabi_ddiv+0x290>)
 8001a06:	429c      	cmp	r4, r3
 8001a08:	dc07      	bgt.n	8001a1a <__aeabi_ddiv+0x116>
 8001a0a:	465b      	mov	r3, fp
 8001a0c:	0564      	lsls	r4, r4, #21
 8001a0e:	075f      	lsls	r7, r3, #29
 8001a10:	025b      	lsls	r3, r3, #9
 8001a12:	4317      	orrs	r7, r2
 8001a14:	0b1b      	lsrs	r3, r3, #12
 8001a16:	0d62      	lsrs	r2, r4, #21
 8001a18:	e002      	b.n	8001a20 <__aeabi_ddiv+0x11c>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2700      	movs	r7, #0
 8001a1e:	4a58      	ldr	r2, [pc, #352]	; (8001b80 <__aeabi_ddiv+0x27c>)
 8001a20:	2100      	movs	r1, #0
 8001a22:	031b      	lsls	r3, r3, #12
 8001a24:	0b1c      	lsrs	r4, r3, #12
 8001a26:	0d0b      	lsrs	r3, r1, #20
 8001a28:	051b      	lsls	r3, r3, #20
 8001a2a:	4323      	orrs	r3, r4
 8001a2c:	0514      	lsls	r4, r2, #20
 8001a2e:	4a5a      	ldr	r2, [pc, #360]	; (8001b98 <__aeabi_ddiv+0x294>)
 8001a30:	0038      	movs	r0, r7
 8001a32:	4013      	ands	r3, r2
 8001a34:	431c      	orrs	r4, r3
 8001a36:	4653      	mov	r3, sl
 8001a38:	0064      	lsls	r4, r4, #1
 8001a3a:	07db      	lsls	r3, r3, #31
 8001a3c:	0864      	lsrs	r4, r4, #1
 8001a3e:	431c      	orrs	r4, r3
 8001a40:	0021      	movs	r1, r4
 8001a42:	b005      	add	sp, #20
 8001a44:	bc3c      	pop	{r2, r3, r4, r5}
 8001a46:	4690      	mov	r8, r2
 8001a48:	4699      	mov	r9, r3
 8001a4a:	46a2      	mov	sl, r4
 8001a4c:	46ab      	mov	fp, r5
 8001a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a50:	2201      	movs	r2, #1
 8001a52:	4252      	negs	r2, r2
 8001a54:	2301      	movs	r3, #1
 8001a56:	1b1b      	subs	r3, r3, r4
 8001a58:	2b38      	cmp	r3, #56	; 0x38
 8001a5a:	dc00      	bgt.n	8001a5e <__aeabi_ddiv+0x15a>
 8001a5c:	e1ad      	b.n	8001dba <__aeabi_ddiv+0x4b6>
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2300      	movs	r3, #0
 8001a62:	2700      	movs	r7, #0
 8001a64:	e7dc      	b.n	8001a20 <__aeabi_ddiv+0x11c>
 8001a66:	465b      	mov	r3, fp
 8001a68:	4333      	orrs	r3, r6
 8001a6a:	4699      	mov	r9, r3
 8001a6c:	d05e      	beq.n	8001b2c <__aeabi_ddiv+0x228>
 8001a6e:	2e00      	cmp	r6, #0
 8001a70:	d100      	bne.n	8001a74 <__aeabi_ddiv+0x170>
 8001a72:	e18a      	b.n	8001d8a <__aeabi_ddiv+0x486>
 8001a74:	0030      	movs	r0, r6
 8001a76:	f001 fa4b 	bl	8002f10 <__clzsi2>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	3b0b      	subs	r3, #11
 8001a7e:	2b1c      	cmp	r3, #28
 8001a80:	dd00      	ble.n	8001a84 <__aeabi_ddiv+0x180>
 8001a82:	e17b      	b.n	8001d7c <__aeabi_ddiv+0x478>
 8001a84:	221d      	movs	r2, #29
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	465a      	mov	r2, fp
 8001a8a:	0001      	movs	r1, r0
 8001a8c:	40da      	lsrs	r2, r3
 8001a8e:	3908      	subs	r1, #8
 8001a90:	408e      	lsls	r6, r1
 8001a92:	0013      	movs	r3, r2
 8001a94:	465f      	mov	r7, fp
 8001a96:	4333      	orrs	r3, r6
 8001a98:	4699      	mov	r9, r3
 8001a9a:	408f      	lsls	r7, r1
 8001a9c:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <__aeabi_ddiv+0x298>)
 8001a9e:	2600      	movs	r6, #0
 8001aa0:	1a1b      	subs	r3, r3, r0
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	e752      	b.n	8001950 <__aeabi_ddiv+0x4c>
 8001aaa:	4641      	mov	r1, r8
 8001aac:	4653      	mov	r3, sl
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	493b      	ldr	r1, [pc, #236]	; (8001ba0 <__aeabi_ddiv+0x29c>)
 8001ab2:	469b      	mov	fp, r3
 8001ab4:	468c      	mov	ip, r1
 8001ab6:	9b00      	ldr	r3, [sp, #0]
 8001ab8:	4463      	add	r3, ip
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	465b      	mov	r3, fp
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d13b      	bne.n	8001b3a <__aeabi_ddiv+0x236>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	431e      	orrs	r6, r3
 8001ac8:	2102      	movs	r1, #2
 8001aca:	e761      	b.n	8001990 <__aeabi_ddiv+0x8c>
 8001acc:	4643      	mov	r3, r8
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	469b      	mov	fp, r3
 8001ad2:	d037      	beq.n	8001b44 <__aeabi_ddiv+0x240>
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d100      	bne.n	8001adc <__aeabi_ddiv+0x1d8>
 8001ada:	e162      	b.n	8001da2 <__aeabi_ddiv+0x49e>
 8001adc:	4640      	mov	r0, r8
 8001ade:	f001 fa17 	bl	8002f10 <__clzsi2>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	3b0b      	subs	r3, #11
 8001ae6:	2b1c      	cmp	r3, #28
 8001ae8:	dd00      	ble.n	8001aec <__aeabi_ddiv+0x1e8>
 8001aea:	e153      	b.n	8001d94 <__aeabi_ddiv+0x490>
 8001aec:	0002      	movs	r2, r0
 8001aee:	4641      	mov	r1, r8
 8001af0:	3a08      	subs	r2, #8
 8001af2:	4091      	lsls	r1, r2
 8001af4:	4688      	mov	r8, r1
 8001af6:	211d      	movs	r1, #29
 8001af8:	1acb      	subs	r3, r1, r3
 8001afa:	4651      	mov	r1, sl
 8001afc:	40d9      	lsrs	r1, r3
 8001afe:	000b      	movs	r3, r1
 8001b00:	4641      	mov	r1, r8
 8001b02:	430b      	orrs	r3, r1
 8001b04:	469b      	mov	fp, r3
 8001b06:	4653      	mov	r3, sl
 8001b08:	4093      	lsls	r3, r2
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	9b00      	ldr	r3, [sp, #0]
 8001b0e:	4925      	ldr	r1, [pc, #148]	; (8001ba4 <__aeabi_ddiv+0x2a0>)
 8001b10:	469c      	mov	ip, r3
 8001b12:	4460      	add	r0, ip
 8001b14:	0003      	movs	r3, r0
 8001b16:	468c      	mov	ip, r1
 8001b18:	4463      	add	r3, ip
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	e737      	b.n	8001990 <__aeabi_ddiv+0x8c>
 8001b20:	2303      	movs	r3, #3
 8001b22:	46b1      	mov	r9, r6
 8001b24:	9000      	str	r0, [sp, #0]
 8001b26:	260c      	movs	r6, #12
 8001b28:	9302      	str	r3, [sp, #8]
 8001b2a:	e711      	b.n	8001950 <__aeabi_ddiv+0x4c>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	3301      	adds	r3, #1
 8001b32:	2604      	movs	r6, #4
 8001b34:	2700      	movs	r7, #0
 8001b36:	9302      	str	r3, [sp, #8]
 8001b38:	e70a      	b.n	8001950 <__aeabi_ddiv+0x4c>
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	46c3      	mov	fp, r8
 8001b3e:	431e      	orrs	r6, r3
 8001b40:	2103      	movs	r1, #3
 8001b42:	e725      	b.n	8001990 <__aeabi_ddiv+0x8c>
 8001b44:	3301      	adds	r3, #1
 8001b46:	431e      	orrs	r6, r3
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	e720      	b.n	8001990 <__aeabi_ddiv+0x8c>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	469a      	mov	sl, r3
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	2700      	movs	r7, #0
 8001b56:	031b      	lsls	r3, r3, #12
 8001b58:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <__aeabi_ddiv+0x27c>)
 8001b5a:	e761      	b.n	8001a20 <__aeabi_ddiv+0x11c>
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	4649      	mov	r1, r9
 8001b60:	031b      	lsls	r3, r3, #12
 8001b62:	4219      	tst	r1, r3
 8001b64:	d100      	bne.n	8001b68 <__aeabi_ddiv+0x264>
 8001b66:	e0e2      	b.n	8001d2e <__aeabi_ddiv+0x42a>
 8001b68:	4659      	mov	r1, fp
 8001b6a:	4219      	tst	r1, r3
 8001b6c:	d000      	beq.n	8001b70 <__aeabi_ddiv+0x26c>
 8001b6e:	e0de      	b.n	8001d2e <__aeabi_ddiv+0x42a>
 8001b70:	430b      	orrs	r3, r1
 8001b72:	031b      	lsls	r3, r3, #12
 8001b74:	0017      	movs	r7, r2
 8001b76:	0b1b      	lsrs	r3, r3, #12
 8001b78:	46a2      	mov	sl, r4
 8001b7a:	4a01      	ldr	r2, [pc, #4]	; (8001b80 <__aeabi_ddiv+0x27c>)
 8001b7c:	e750      	b.n	8001a20 <__aeabi_ddiv+0x11c>
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	000007ff 	.word	0x000007ff
 8001b84:	fffffc01 	.word	0xfffffc01
 8001b88:	0800c244 	.word	0x0800c244
 8001b8c:	000003ff 	.word	0x000003ff
 8001b90:	feffffff 	.word	0xfeffffff
 8001b94:	000007fe 	.word	0x000007fe
 8001b98:	800fffff 	.word	0x800fffff
 8001b9c:	fffffc0d 	.word	0xfffffc0d
 8001ba0:	fffff801 	.word	0xfffff801
 8001ba4:	000003f3 	.word	0x000003f3
 8001ba8:	45d9      	cmp	r9, fp
 8001baa:	d900      	bls.n	8001bae <__aeabi_ddiv+0x2aa>
 8001bac:	e0cb      	b.n	8001d46 <__aeabi_ddiv+0x442>
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_ddiv+0x2ae>
 8001bb0:	e0c6      	b.n	8001d40 <__aeabi_ddiv+0x43c>
 8001bb2:	003c      	movs	r4, r7
 8001bb4:	4648      	mov	r0, r9
 8001bb6:	2700      	movs	r7, #0
 8001bb8:	9b00      	ldr	r3, [sp, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	0e16      	lsrs	r6, r2, #24
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	431e      	orrs	r6, r3
 8001bc6:	0213      	lsls	r3, r2, #8
 8001bc8:	4698      	mov	r8, r3
 8001bca:	0433      	lsls	r3, r6, #16
 8001bcc:	0c1b      	lsrs	r3, r3, #16
 8001bce:	4699      	mov	r9, r3
 8001bd0:	0c31      	lsrs	r1, r6, #16
 8001bd2:	9101      	str	r1, [sp, #4]
 8001bd4:	f7fe fb3a 	bl	800024c <__aeabi_uidivmod>
 8001bd8:	464a      	mov	r2, r9
 8001bda:	4342      	muls	r2, r0
 8001bdc:	040b      	lsls	r3, r1, #16
 8001bde:	0c21      	lsrs	r1, r4, #16
 8001be0:	0005      	movs	r5, r0
 8001be2:	4319      	orrs	r1, r3
 8001be4:	428a      	cmp	r2, r1
 8001be6:	d907      	bls.n	8001bf8 <__aeabi_ddiv+0x2f4>
 8001be8:	1989      	adds	r1, r1, r6
 8001bea:	3d01      	subs	r5, #1
 8001bec:	428e      	cmp	r6, r1
 8001bee:	d803      	bhi.n	8001bf8 <__aeabi_ddiv+0x2f4>
 8001bf0:	428a      	cmp	r2, r1
 8001bf2:	d901      	bls.n	8001bf8 <__aeabi_ddiv+0x2f4>
 8001bf4:	1e85      	subs	r5, r0, #2
 8001bf6:	1989      	adds	r1, r1, r6
 8001bf8:	1a88      	subs	r0, r1, r2
 8001bfa:	9901      	ldr	r1, [sp, #4]
 8001bfc:	f7fe fb26 	bl	800024c <__aeabi_uidivmod>
 8001c00:	0409      	lsls	r1, r1, #16
 8001c02:	468c      	mov	ip, r1
 8001c04:	464a      	mov	r2, r9
 8001c06:	0421      	lsls	r1, r4, #16
 8001c08:	4664      	mov	r4, ip
 8001c0a:	4342      	muls	r2, r0
 8001c0c:	0c09      	lsrs	r1, r1, #16
 8001c0e:	0003      	movs	r3, r0
 8001c10:	4321      	orrs	r1, r4
 8001c12:	428a      	cmp	r2, r1
 8001c14:	d904      	bls.n	8001c20 <__aeabi_ddiv+0x31c>
 8001c16:	1989      	adds	r1, r1, r6
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	428e      	cmp	r6, r1
 8001c1c:	d800      	bhi.n	8001c20 <__aeabi_ddiv+0x31c>
 8001c1e:	e0f1      	b.n	8001e04 <__aeabi_ddiv+0x500>
 8001c20:	042d      	lsls	r5, r5, #16
 8001c22:	431d      	orrs	r5, r3
 8001c24:	46ab      	mov	fp, r5
 8001c26:	4643      	mov	r3, r8
 8001c28:	1a89      	subs	r1, r1, r2
 8001c2a:	4642      	mov	r2, r8
 8001c2c:	0c28      	lsrs	r0, r5, #16
 8001c2e:	0412      	lsls	r2, r2, #16
 8001c30:	0c1d      	lsrs	r5, r3, #16
 8001c32:	465b      	mov	r3, fp
 8001c34:	0c14      	lsrs	r4, r2, #16
 8001c36:	0022      	movs	r2, r4
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	0c1b      	lsrs	r3, r3, #16
 8001c3c:	435a      	muls	r2, r3
 8001c3e:	9403      	str	r4, [sp, #12]
 8001c40:	436b      	muls	r3, r5
 8001c42:	4344      	muls	r4, r0
 8001c44:	9502      	str	r5, [sp, #8]
 8001c46:	4368      	muls	r0, r5
 8001c48:	191b      	adds	r3, r3, r4
 8001c4a:	0c15      	lsrs	r5, r2, #16
 8001c4c:	18eb      	adds	r3, r5, r3
 8001c4e:	429c      	cmp	r4, r3
 8001c50:	d903      	bls.n	8001c5a <__aeabi_ddiv+0x356>
 8001c52:	2480      	movs	r4, #128	; 0x80
 8001c54:	0264      	lsls	r4, r4, #9
 8001c56:	46a4      	mov	ip, r4
 8001c58:	4460      	add	r0, ip
 8001c5a:	0c1c      	lsrs	r4, r3, #16
 8001c5c:	0415      	lsls	r5, r2, #16
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	0c2d      	lsrs	r5, r5, #16
 8001c62:	1820      	adds	r0, r4, r0
 8001c64:	195d      	adds	r5, r3, r5
 8001c66:	4281      	cmp	r1, r0
 8001c68:	d377      	bcc.n	8001d5a <__aeabi_ddiv+0x456>
 8001c6a:	d073      	beq.n	8001d54 <__aeabi_ddiv+0x450>
 8001c6c:	1a0c      	subs	r4, r1, r0
 8001c6e:	4aa2      	ldr	r2, [pc, #648]	; (8001ef8 <__aeabi_ddiv+0x5f4>)
 8001c70:	1b7d      	subs	r5, r7, r5
 8001c72:	42af      	cmp	r7, r5
 8001c74:	41bf      	sbcs	r7, r7
 8001c76:	4694      	mov	ip, r2
 8001c78:	9b00      	ldr	r3, [sp, #0]
 8001c7a:	427f      	negs	r7, r7
 8001c7c:	4463      	add	r3, ip
 8001c7e:	1be0      	subs	r0, r4, r7
 8001c80:	001c      	movs	r4, r3
 8001c82:	4286      	cmp	r6, r0
 8001c84:	d100      	bne.n	8001c88 <__aeabi_ddiv+0x384>
 8001c86:	e0db      	b.n	8001e40 <__aeabi_ddiv+0x53c>
 8001c88:	9901      	ldr	r1, [sp, #4]
 8001c8a:	f7fe fadf 	bl	800024c <__aeabi_uidivmod>
 8001c8e:	464a      	mov	r2, r9
 8001c90:	4342      	muls	r2, r0
 8001c92:	040b      	lsls	r3, r1, #16
 8001c94:	0c29      	lsrs	r1, r5, #16
 8001c96:	0007      	movs	r7, r0
 8001c98:	4319      	orrs	r1, r3
 8001c9a:	428a      	cmp	r2, r1
 8001c9c:	d907      	bls.n	8001cae <__aeabi_ddiv+0x3aa>
 8001c9e:	1989      	adds	r1, r1, r6
 8001ca0:	3f01      	subs	r7, #1
 8001ca2:	428e      	cmp	r6, r1
 8001ca4:	d803      	bhi.n	8001cae <__aeabi_ddiv+0x3aa>
 8001ca6:	428a      	cmp	r2, r1
 8001ca8:	d901      	bls.n	8001cae <__aeabi_ddiv+0x3aa>
 8001caa:	1e87      	subs	r7, r0, #2
 8001cac:	1989      	adds	r1, r1, r6
 8001cae:	1a88      	subs	r0, r1, r2
 8001cb0:	9901      	ldr	r1, [sp, #4]
 8001cb2:	f7fe facb 	bl	800024c <__aeabi_uidivmod>
 8001cb6:	0409      	lsls	r1, r1, #16
 8001cb8:	464a      	mov	r2, r9
 8001cba:	4689      	mov	r9, r1
 8001cbc:	0429      	lsls	r1, r5, #16
 8001cbe:	464d      	mov	r5, r9
 8001cc0:	4342      	muls	r2, r0
 8001cc2:	0c09      	lsrs	r1, r1, #16
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	4329      	orrs	r1, r5
 8001cc8:	428a      	cmp	r2, r1
 8001cca:	d907      	bls.n	8001cdc <__aeabi_ddiv+0x3d8>
 8001ccc:	1989      	adds	r1, r1, r6
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	428e      	cmp	r6, r1
 8001cd2:	d803      	bhi.n	8001cdc <__aeabi_ddiv+0x3d8>
 8001cd4:	428a      	cmp	r2, r1
 8001cd6:	d901      	bls.n	8001cdc <__aeabi_ddiv+0x3d8>
 8001cd8:	1e83      	subs	r3, r0, #2
 8001cda:	1989      	adds	r1, r1, r6
 8001cdc:	043f      	lsls	r7, r7, #16
 8001cde:	1a89      	subs	r1, r1, r2
 8001ce0:	003a      	movs	r2, r7
 8001ce2:	9f03      	ldr	r7, [sp, #12]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	0038      	movs	r0, r7
 8001ce8:	0413      	lsls	r3, r2, #16
 8001cea:	0c1b      	lsrs	r3, r3, #16
 8001cec:	4358      	muls	r0, r3
 8001cee:	4681      	mov	r9, r0
 8001cf0:	9802      	ldr	r0, [sp, #8]
 8001cf2:	0c15      	lsrs	r5, r2, #16
 8001cf4:	436f      	muls	r7, r5
 8001cf6:	4343      	muls	r3, r0
 8001cf8:	4345      	muls	r5, r0
 8001cfa:	4648      	mov	r0, r9
 8001cfc:	0c00      	lsrs	r0, r0, #16
 8001cfe:	4684      	mov	ip, r0
 8001d00:	19db      	adds	r3, r3, r7
 8001d02:	4463      	add	r3, ip
 8001d04:	429f      	cmp	r7, r3
 8001d06:	d903      	bls.n	8001d10 <__aeabi_ddiv+0x40c>
 8001d08:	2080      	movs	r0, #128	; 0x80
 8001d0a:	0240      	lsls	r0, r0, #9
 8001d0c:	4684      	mov	ip, r0
 8001d0e:	4465      	add	r5, ip
 8001d10:	4648      	mov	r0, r9
 8001d12:	0c1f      	lsrs	r7, r3, #16
 8001d14:	0400      	lsls	r0, r0, #16
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	0c00      	lsrs	r0, r0, #16
 8001d1a:	197d      	adds	r5, r7, r5
 8001d1c:	1818      	adds	r0, r3, r0
 8001d1e:	42a9      	cmp	r1, r5
 8001d20:	d200      	bcs.n	8001d24 <__aeabi_ddiv+0x420>
 8001d22:	e084      	b.n	8001e2e <__aeabi_ddiv+0x52a>
 8001d24:	d100      	bne.n	8001d28 <__aeabi_ddiv+0x424>
 8001d26:	e07f      	b.n	8001e28 <__aeabi_ddiv+0x524>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	e657      	b.n	80019de <__aeabi_ddiv+0xda>
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	464a      	mov	r2, r9
 8001d32:	031b      	lsls	r3, r3, #12
 8001d34:	4313      	orrs	r3, r2
 8001d36:	031b      	lsls	r3, r3, #12
 8001d38:	0b1b      	lsrs	r3, r3, #12
 8001d3a:	46aa      	mov	sl, r5
 8001d3c:	4a6f      	ldr	r2, [pc, #444]	; (8001efc <__aeabi_ddiv+0x5f8>)
 8001d3e:	e66f      	b.n	8001a20 <__aeabi_ddiv+0x11c>
 8001d40:	42ba      	cmp	r2, r7
 8001d42:	d900      	bls.n	8001d46 <__aeabi_ddiv+0x442>
 8001d44:	e735      	b.n	8001bb2 <__aeabi_ddiv+0x2ae>
 8001d46:	464b      	mov	r3, r9
 8001d48:	07dc      	lsls	r4, r3, #31
 8001d4a:	0858      	lsrs	r0, r3, #1
 8001d4c:	087b      	lsrs	r3, r7, #1
 8001d4e:	431c      	orrs	r4, r3
 8001d50:	07ff      	lsls	r7, r7, #31
 8001d52:	e734      	b.n	8001bbe <__aeabi_ddiv+0x2ba>
 8001d54:	2400      	movs	r4, #0
 8001d56:	42af      	cmp	r7, r5
 8001d58:	d289      	bcs.n	8001c6e <__aeabi_ddiv+0x36a>
 8001d5a:	4447      	add	r7, r8
 8001d5c:	4547      	cmp	r7, r8
 8001d5e:	41a4      	sbcs	r4, r4
 8001d60:	465b      	mov	r3, fp
 8001d62:	4264      	negs	r4, r4
 8001d64:	19a4      	adds	r4, r4, r6
 8001d66:	1864      	adds	r4, r4, r1
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	42a6      	cmp	r6, r4
 8001d6c:	d21e      	bcs.n	8001dac <__aeabi_ddiv+0x4a8>
 8001d6e:	42a0      	cmp	r0, r4
 8001d70:	d86d      	bhi.n	8001e4e <__aeabi_ddiv+0x54a>
 8001d72:	d100      	bne.n	8001d76 <__aeabi_ddiv+0x472>
 8001d74:	e0b6      	b.n	8001ee4 <__aeabi_ddiv+0x5e0>
 8001d76:	1a24      	subs	r4, r4, r0
 8001d78:	469b      	mov	fp, r3
 8001d7a:	e778      	b.n	8001c6e <__aeabi_ddiv+0x36a>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	465a      	mov	r2, fp
 8001d80:	3b28      	subs	r3, #40	; 0x28
 8001d82:	409a      	lsls	r2, r3
 8001d84:	2700      	movs	r7, #0
 8001d86:	4691      	mov	r9, r2
 8001d88:	e688      	b.n	8001a9c <__aeabi_ddiv+0x198>
 8001d8a:	4658      	mov	r0, fp
 8001d8c:	f001 f8c0 	bl	8002f10 <__clzsi2>
 8001d90:	3020      	adds	r0, #32
 8001d92:	e672      	b.n	8001a7a <__aeabi_ddiv+0x176>
 8001d94:	0003      	movs	r3, r0
 8001d96:	4652      	mov	r2, sl
 8001d98:	3b28      	subs	r3, #40	; 0x28
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	4693      	mov	fp, r2
 8001d9e:	2200      	movs	r2, #0
 8001da0:	e6b4      	b.n	8001b0c <__aeabi_ddiv+0x208>
 8001da2:	4650      	mov	r0, sl
 8001da4:	f001 f8b4 	bl	8002f10 <__clzsi2>
 8001da8:	3020      	adds	r0, #32
 8001daa:	e69a      	b.n	8001ae2 <__aeabi_ddiv+0x1de>
 8001dac:	42a6      	cmp	r6, r4
 8001dae:	d1e2      	bne.n	8001d76 <__aeabi_ddiv+0x472>
 8001db0:	45b8      	cmp	r8, r7
 8001db2:	d9dc      	bls.n	8001d6e <__aeabi_ddiv+0x46a>
 8001db4:	1a34      	subs	r4, r6, r0
 8001db6:	469b      	mov	fp, r3
 8001db8:	e759      	b.n	8001c6e <__aeabi_ddiv+0x36a>
 8001dba:	2b1f      	cmp	r3, #31
 8001dbc:	dc65      	bgt.n	8001e8a <__aeabi_ddiv+0x586>
 8001dbe:	4c50      	ldr	r4, [pc, #320]	; (8001f00 <__aeabi_ddiv+0x5fc>)
 8001dc0:	9900      	ldr	r1, [sp, #0]
 8001dc2:	46a4      	mov	ip, r4
 8001dc4:	465c      	mov	r4, fp
 8001dc6:	4461      	add	r1, ip
 8001dc8:	0008      	movs	r0, r1
 8001dca:	408c      	lsls	r4, r1
 8001dcc:	0011      	movs	r1, r2
 8001dce:	4082      	lsls	r2, r0
 8001dd0:	40d9      	lsrs	r1, r3
 8001dd2:	1e50      	subs	r0, r2, #1
 8001dd4:	4182      	sbcs	r2, r0
 8001dd6:	430c      	orrs	r4, r1
 8001dd8:	4314      	orrs	r4, r2
 8001dda:	465a      	mov	r2, fp
 8001ddc:	40da      	lsrs	r2, r3
 8001dde:	0013      	movs	r3, r2
 8001de0:	0762      	lsls	r2, r4, #29
 8001de2:	d009      	beq.n	8001df8 <__aeabi_ddiv+0x4f4>
 8001de4:	220f      	movs	r2, #15
 8001de6:	4022      	ands	r2, r4
 8001de8:	2a04      	cmp	r2, #4
 8001dea:	d005      	beq.n	8001df8 <__aeabi_ddiv+0x4f4>
 8001dec:	0022      	movs	r2, r4
 8001dee:	1d14      	adds	r4, r2, #4
 8001df0:	4294      	cmp	r4, r2
 8001df2:	4189      	sbcs	r1, r1
 8001df4:	4249      	negs	r1, r1
 8001df6:	185b      	adds	r3, r3, r1
 8001df8:	021a      	lsls	r2, r3, #8
 8001dfa:	d562      	bpl.n	8001ec2 <__aeabi_ddiv+0x5be>
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2700      	movs	r7, #0
 8001e02:	e60d      	b.n	8001a20 <__aeabi_ddiv+0x11c>
 8001e04:	428a      	cmp	r2, r1
 8001e06:	d800      	bhi.n	8001e0a <__aeabi_ddiv+0x506>
 8001e08:	e70a      	b.n	8001c20 <__aeabi_ddiv+0x31c>
 8001e0a:	1e83      	subs	r3, r0, #2
 8001e0c:	1989      	adds	r1, r1, r6
 8001e0e:	e707      	b.n	8001c20 <__aeabi_ddiv+0x31c>
 8001e10:	230f      	movs	r3, #15
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d100      	bne.n	8001e1a <__aeabi_ddiv+0x516>
 8001e18:	e5e6      	b.n	80019e8 <__aeabi_ddiv+0xe4>
 8001e1a:	1d17      	adds	r7, r2, #4
 8001e1c:	4297      	cmp	r7, r2
 8001e1e:	4192      	sbcs	r2, r2
 8001e20:	4253      	negs	r3, r2
 8001e22:	449b      	add	fp, r3
 8001e24:	08fa      	lsrs	r2, r7, #3
 8001e26:	e5e0      	b.n	80019ea <__aeabi_ddiv+0xe6>
 8001e28:	2800      	cmp	r0, #0
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_ddiv+0x52a>
 8001e2c:	e5d7      	b.n	80019de <__aeabi_ddiv+0xda>
 8001e2e:	1871      	adds	r1, r6, r1
 8001e30:	1e53      	subs	r3, r2, #1
 8001e32:	42b1      	cmp	r1, r6
 8001e34:	d327      	bcc.n	8001e86 <__aeabi_ddiv+0x582>
 8001e36:	42a9      	cmp	r1, r5
 8001e38:	d315      	bcc.n	8001e66 <__aeabi_ddiv+0x562>
 8001e3a:	d058      	beq.n	8001eee <__aeabi_ddiv+0x5ea>
 8001e3c:	001a      	movs	r2, r3
 8001e3e:	e773      	b.n	8001d28 <__aeabi_ddiv+0x424>
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	dc00      	bgt.n	8001e46 <__aeabi_ddiv+0x542>
 8001e44:	e604      	b.n	8001a50 <__aeabi_ddiv+0x14c>
 8001e46:	2301      	movs	r3, #1
 8001e48:	2200      	movs	r2, #0
 8001e4a:	449b      	add	fp, r3
 8001e4c:	e5cd      	b.n	80019ea <__aeabi_ddiv+0xe6>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	4447      	add	r7, r8
 8001e52:	4547      	cmp	r7, r8
 8001e54:	4189      	sbcs	r1, r1
 8001e56:	425b      	negs	r3, r3
 8001e58:	469c      	mov	ip, r3
 8001e5a:	4249      	negs	r1, r1
 8001e5c:	1989      	adds	r1, r1, r6
 8001e5e:	190c      	adds	r4, r1, r4
 8001e60:	44e3      	add	fp, ip
 8001e62:	1a24      	subs	r4, r4, r0
 8001e64:	e703      	b.n	8001c6e <__aeabi_ddiv+0x36a>
 8001e66:	4643      	mov	r3, r8
 8001e68:	005f      	lsls	r7, r3, #1
 8001e6a:	4547      	cmp	r7, r8
 8001e6c:	419b      	sbcs	r3, r3
 8001e6e:	46b8      	mov	r8, r7
 8001e70:	425b      	negs	r3, r3
 8001e72:	199e      	adds	r6, r3, r6
 8001e74:	3a02      	subs	r2, #2
 8001e76:	1989      	adds	r1, r1, r6
 8001e78:	42a9      	cmp	r1, r5
 8001e7a:	d000      	beq.n	8001e7e <__aeabi_ddiv+0x57a>
 8001e7c:	e754      	b.n	8001d28 <__aeabi_ddiv+0x424>
 8001e7e:	4540      	cmp	r0, r8
 8001e80:	d000      	beq.n	8001e84 <__aeabi_ddiv+0x580>
 8001e82:	e751      	b.n	8001d28 <__aeabi_ddiv+0x424>
 8001e84:	e5ab      	b.n	80019de <__aeabi_ddiv+0xda>
 8001e86:	001a      	movs	r2, r3
 8001e88:	e7f6      	b.n	8001e78 <__aeabi_ddiv+0x574>
 8001e8a:	211f      	movs	r1, #31
 8001e8c:	465f      	mov	r7, fp
 8001e8e:	4249      	negs	r1, r1
 8001e90:	1b0c      	subs	r4, r1, r4
 8001e92:	40e7      	lsrs	r7, r4
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d007      	beq.n	8001ea8 <__aeabi_ddiv+0x5a4>
 8001e98:	491a      	ldr	r1, [pc, #104]	; (8001f04 <__aeabi_ddiv+0x600>)
 8001e9a:	9b00      	ldr	r3, [sp, #0]
 8001e9c:	468c      	mov	ip, r1
 8001e9e:	4463      	add	r3, ip
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	465b      	mov	r3, fp
 8001ea4:	4083      	lsls	r3, r0
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	1e50      	subs	r0, r2, #1
 8001eaa:	4182      	sbcs	r2, r0
 8001eac:	433a      	orrs	r2, r7
 8001eae:	2707      	movs	r7, #7
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	4017      	ands	r7, r2
 8001eb4:	d009      	beq.n	8001eca <__aeabi_ddiv+0x5c6>
 8001eb6:	210f      	movs	r1, #15
 8001eb8:	2300      	movs	r3, #0
 8001eba:	4011      	ands	r1, r2
 8001ebc:	0014      	movs	r4, r2
 8001ebe:	2904      	cmp	r1, #4
 8001ec0:	d195      	bne.n	8001dee <__aeabi_ddiv+0x4ea>
 8001ec2:	0022      	movs	r2, r4
 8001ec4:	075f      	lsls	r7, r3, #29
 8001ec6:	025b      	lsls	r3, r3, #9
 8001ec8:	0b1b      	lsrs	r3, r3, #12
 8001eca:	08d2      	lsrs	r2, r2, #3
 8001ecc:	4317      	orrs	r7, r2
 8001ece:	2200      	movs	r2, #0
 8001ed0:	e5a6      	b.n	8001a20 <__aeabi_ddiv+0x11c>
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	4659      	mov	r1, fp
 8001ed6:	031b      	lsls	r3, r3, #12
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	031b      	lsls	r3, r3, #12
 8001edc:	0017      	movs	r7, r2
 8001ede:	0b1b      	lsrs	r3, r3, #12
 8001ee0:	4a06      	ldr	r2, [pc, #24]	; (8001efc <__aeabi_ddiv+0x5f8>)
 8001ee2:	e59d      	b.n	8001a20 <__aeabi_ddiv+0x11c>
 8001ee4:	42bd      	cmp	r5, r7
 8001ee6:	d8b2      	bhi.n	8001e4e <__aeabi_ddiv+0x54a>
 8001ee8:	469b      	mov	fp, r3
 8001eea:	2400      	movs	r4, #0
 8001eec:	e6bf      	b.n	8001c6e <__aeabi_ddiv+0x36a>
 8001eee:	4580      	cmp	r8, r0
 8001ef0:	d3b9      	bcc.n	8001e66 <__aeabi_ddiv+0x562>
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	e7c3      	b.n	8001e7e <__aeabi_ddiv+0x57a>
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	000003ff 	.word	0x000003ff
 8001efc:	000007ff 	.word	0x000007ff
 8001f00:	0000041e 	.word	0x0000041e
 8001f04:	0000043e 	.word	0x0000043e

08001f08 <__eqdf2>:
 8001f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0a:	464f      	mov	r7, r9
 8001f0c:	4646      	mov	r6, r8
 8001f0e:	46d6      	mov	lr, sl
 8001f10:	4684      	mov	ip, r0
 8001f12:	b5c0      	push	{r6, r7, lr}
 8001f14:	4680      	mov	r8, r0
 8001f16:	4e19      	ldr	r6, [pc, #100]	; (8001f7c <__eqdf2+0x74>)
 8001f18:	0318      	lsls	r0, r3, #12
 8001f1a:	030f      	lsls	r7, r1, #12
 8001f1c:	004d      	lsls	r5, r1, #1
 8001f1e:	0b00      	lsrs	r0, r0, #12
 8001f20:	005c      	lsls	r4, r3, #1
 8001f22:	4682      	mov	sl, r0
 8001f24:	0b3f      	lsrs	r7, r7, #12
 8001f26:	0d6d      	lsrs	r5, r5, #21
 8001f28:	0fc9      	lsrs	r1, r1, #31
 8001f2a:	4691      	mov	r9, r2
 8001f2c:	0d64      	lsrs	r4, r4, #21
 8001f2e:	0fdb      	lsrs	r3, r3, #31
 8001f30:	2001      	movs	r0, #1
 8001f32:	42b5      	cmp	r5, r6
 8001f34:	d00a      	beq.n	8001f4c <__eqdf2+0x44>
 8001f36:	42b4      	cmp	r4, r6
 8001f38:	d003      	beq.n	8001f42 <__eqdf2+0x3a>
 8001f3a:	42a5      	cmp	r5, r4
 8001f3c:	d101      	bne.n	8001f42 <__eqdf2+0x3a>
 8001f3e:	4557      	cmp	r7, sl
 8001f40:	d00c      	beq.n	8001f5c <__eqdf2+0x54>
 8001f42:	bc1c      	pop	{r2, r3, r4}
 8001f44:	4690      	mov	r8, r2
 8001f46:	4699      	mov	r9, r3
 8001f48:	46a2      	mov	sl, r4
 8001f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f4c:	4666      	mov	r6, ip
 8001f4e:	433e      	orrs	r6, r7
 8001f50:	d1f7      	bne.n	8001f42 <__eqdf2+0x3a>
 8001f52:	42ac      	cmp	r4, r5
 8001f54:	d1f5      	bne.n	8001f42 <__eqdf2+0x3a>
 8001f56:	4654      	mov	r4, sl
 8001f58:	4314      	orrs	r4, r2
 8001f5a:	d1f2      	bne.n	8001f42 <__eqdf2+0x3a>
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	45c8      	cmp	r8, r9
 8001f60:	d1ef      	bne.n	8001f42 <__eqdf2+0x3a>
 8001f62:	4299      	cmp	r1, r3
 8001f64:	d007      	beq.n	8001f76 <__eqdf2+0x6e>
 8001f66:	2d00      	cmp	r5, #0
 8001f68:	d1eb      	bne.n	8001f42 <__eqdf2+0x3a>
 8001f6a:	4663      	mov	r3, ip
 8001f6c:	431f      	orrs	r7, r3
 8001f6e:	0038      	movs	r0, r7
 8001f70:	1e47      	subs	r7, r0, #1
 8001f72:	41b8      	sbcs	r0, r7
 8001f74:	e7e5      	b.n	8001f42 <__eqdf2+0x3a>
 8001f76:	2000      	movs	r0, #0
 8001f78:	e7e3      	b.n	8001f42 <__eqdf2+0x3a>
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	000007ff 	.word	0x000007ff

08001f80 <__gedf2>:
 8001f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f82:	464f      	mov	r7, r9
 8001f84:	4646      	mov	r6, r8
 8001f86:	46d6      	mov	lr, sl
 8001f88:	004d      	lsls	r5, r1, #1
 8001f8a:	b5c0      	push	{r6, r7, lr}
 8001f8c:	030e      	lsls	r6, r1, #12
 8001f8e:	0fc9      	lsrs	r1, r1, #31
 8001f90:	468a      	mov	sl, r1
 8001f92:	492c      	ldr	r1, [pc, #176]	; (8002044 <__gedf2+0xc4>)
 8001f94:	031f      	lsls	r7, r3, #12
 8001f96:	005c      	lsls	r4, r3, #1
 8001f98:	4680      	mov	r8, r0
 8001f9a:	0b36      	lsrs	r6, r6, #12
 8001f9c:	0d6d      	lsrs	r5, r5, #21
 8001f9e:	4691      	mov	r9, r2
 8001fa0:	0b3f      	lsrs	r7, r7, #12
 8001fa2:	0d64      	lsrs	r4, r4, #21
 8001fa4:	0fdb      	lsrs	r3, r3, #31
 8001fa6:	428d      	cmp	r5, r1
 8001fa8:	d01e      	beq.n	8001fe8 <__gedf2+0x68>
 8001faa:	428c      	cmp	r4, r1
 8001fac:	d016      	beq.n	8001fdc <__gedf2+0x5c>
 8001fae:	2d00      	cmp	r5, #0
 8001fb0:	d11e      	bne.n	8001ff0 <__gedf2+0x70>
 8001fb2:	4330      	orrs	r0, r6
 8001fb4:	4684      	mov	ip, r0
 8001fb6:	2c00      	cmp	r4, #0
 8001fb8:	d101      	bne.n	8001fbe <__gedf2+0x3e>
 8001fba:	433a      	orrs	r2, r7
 8001fbc:	d023      	beq.n	8002006 <__gedf2+0x86>
 8001fbe:	4662      	mov	r2, ip
 8001fc0:	2a00      	cmp	r2, #0
 8001fc2:	d01a      	beq.n	8001ffa <__gedf2+0x7a>
 8001fc4:	459a      	cmp	sl, r3
 8001fc6:	d029      	beq.n	800201c <__gedf2+0x9c>
 8001fc8:	4651      	mov	r1, sl
 8001fca:	2002      	movs	r0, #2
 8001fcc:	3901      	subs	r1, #1
 8001fce:	4008      	ands	r0, r1
 8001fd0:	3801      	subs	r0, #1
 8001fd2:	bc1c      	pop	{r2, r3, r4}
 8001fd4:	4690      	mov	r8, r2
 8001fd6:	4699      	mov	r9, r3
 8001fd8:	46a2      	mov	sl, r4
 8001fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fdc:	0039      	movs	r1, r7
 8001fde:	4311      	orrs	r1, r2
 8001fe0:	d0e5      	beq.n	8001fae <__gedf2+0x2e>
 8001fe2:	2002      	movs	r0, #2
 8001fe4:	4240      	negs	r0, r0
 8001fe6:	e7f4      	b.n	8001fd2 <__gedf2+0x52>
 8001fe8:	4330      	orrs	r0, r6
 8001fea:	d1fa      	bne.n	8001fe2 <__gedf2+0x62>
 8001fec:	42ac      	cmp	r4, r5
 8001fee:	d00f      	beq.n	8002010 <__gedf2+0x90>
 8001ff0:	2c00      	cmp	r4, #0
 8001ff2:	d10f      	bne.n	8002014 <__gedf2+0x94>
 8001ff4:	433a      	orrs	r2, r7
 8001ff6:	d0e7      	beq.n	8001fc8 <__gedf2+0x48>
 8001ff8:	e00c      	b.n	8002014 <__gedf2+0x94>
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	4393      	bics	r3, r2
 8002000:	0018      	movs	r0, r3
 8002002:	3001      	adds	r0, #1
 8002004:	e7e5      	b.n	8001fd2 <__gedf2+0x52>
 8002006:	4663      	mov	r3, ip
 8002008:	2000      	movs	r0, #0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0e1      	beq.n	8001fd2 <__gedf2+0x52>
 800200e:	e7db      	b.n	8001fc8 <__gedf2+0x48>
 8002010:	433a      	orrs	r2, r7
 8002012:	d1e6      	bne.n	8001fe2 <__gedf2+0x62>
 8002014:	459a      	cmp	sl, r3
 8002016:	d1d7      	bne.n	8001fc8 <__gedf2+0x48>
 8002018:	42a5      	cmp	r5, r4
 800201a:	dcd5      	bgt.n	8001fc8 <__gedf2+0x48>
 800201c:	42a5      	cmp	r5, r4
 800201e:	db05      	blt.n	800202c <__gedf2+0xac>
 8002020:	42be      	cmp	r6, r7
 8002022:	d8d1      	bhi.n	8001fc8 <__gedf2+0x48>
 8002024:	d008      	beq.n	8002038 <__gedf2+0xb8>
 8002026:	2000      	movs	r0, #0
 8002028:	42be      	cmp	r6, r7
 800202a:	d2d2      	bcs.n	8001fd2 <__gedf2+0x52>
 800202c:	4650      	mov	r0, sl
 800202e:	2301      	movs	r3, #1
 8002030:	3801      	subs	r0, #1
 8002032:	4398      	bics	r0, r3
 8002034:	3001      	adds	r0, #1
 8002036:	e7cc      	b.n	8001fd2 <__gedf2+0x52>
 8002038:	45c8      	cmp	r8, r9
 800203a:	d8c5      	bhi.n	8001fc8 <__gedf2+0x48>
 800203c:	2000      	movs	r0, #0
 800203e:	45c8      	cmp	r8, r9
 8002040:	d3f4      	bcc.n	800202c <__gedf2+0xac>
 8002042:	e7c6      	b.n	8001fd2 <__gedf2+0x52>
 8002044:	000007ff 	.word	0x000007ff

08002048 <__ledf2>:
 8002048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800204a:	464f      	mov	r7, r9
 800204c:	4646      	mov	r6, r8
 800204e:	46d6      	mov	lr, sl
 8002050:	004d      	lsls	r5, r1, #1
 8002052:	b5c0      	push	{r6, r7, lr}
 8002054:	030e      	lsls	r6, r1, #12
 8002056:	0fc9      	lsrs	r1, r1, #31
 8002058:	468a      	mov	sl, r1
 800205a:	492e      	ldr	r1, [pc, #184]	; (8002114 <__ledf2+0xcc>)
 800205c:	031f      	lsls	r7, r3, #12
 800205e:	005c      	lsls	r4, r3, #1
 8002060:	4680      	mov	r8, r0
 8002062:	0b36      	lsrs	r6, r6, #12
 8002064:	0d6d      	lsrs	r5, r5, #21
 8002066:	4691      	mov	r9, r2
 8002068:	0b3f      	lsrs	r7, r7, #12
 800206a:	0d64      	lsrs	r4, r4, #21
 800206c:	0fdb      	lsrs	r3, r3, #31
 800206e:	428d      	cmp	r5, r1
 8002070:	d018      	beq.n	80020a4 <__ledf2+0x5c>
 8002072:	428c      	cmp	r4, r1
 8002074:	d011      	beq.n	800209a <__ledf2+0x52>
 8002076:	2d00      	cmp	r5, #0
 8002078:	d118      	bne.n	80020ac <__ledf2+0x64>
 800207a:	4330      	orrs	r0, r6
 800207c:	4684      	mov	ip, r0
 800207e:	2c00      	cmp	r4, #0
 8002080:	d11e      	bne.n	80020c0 <__ledf2+0x78>
 8002082:	433a      	orrs	r2, r7
 8002084:	d11c      	bne.n	80020c0 <__ledf2+0x78>
 8002086:	4663      	mov	r3, ip
 8002088:	2000      	movs	r0, #0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d030      	beq.n	80020f0 <__ledf2+0xa8>
 800208e:	4651      	mov	r1, sl
 8002090:	2002      	movs	r0, #2
 8002092:	3901      	subs	r1, #1
 8002094:	4008      	ands	r0, r1
 8002096:	3801      	subs	r0, #1
 8002098:	e02a      	b.n	80020f0 <__ledf2+0xa8>
 800209a:	0039      	movs	r1, r7
 800209c:	4311      	orrs	r1, r2
 800209e:	d0ea      	beq.n	8002076 <__ledf2+0x2e>
 80020a0:	2002      	movs	r0, #2
 80020a2:	e025      	b.n	80020f0 <__ledf2+0xa8>
 80020a4:	4330      	orrs	r0, r6
 80020a6:	d1fb      	bne.n	80020a0 <__ledf2+0x58>
 80020a8:	42ac      	cmp	r4, r5
 80020aa:	d026      	beq.n	80020fa <__ledf2+0xb2>
 80020ac:	2c00      	cmp	r4, #0
 80020ae:	d126      	bne.n	80020fe <__ledf2+0xb6>
 80020b0:	433a      	orrs	r2, r7
 80020b2:	d124      	bne.n	80020fe <__ledf2+0xb6>
 80020b4:	4651      	mov	r1, sl
 80020b6:	2002      	movs	r0, #2
 80020b8:	3901      	subs	r1, #1
 80020ba:	4008      	ands	r0, r1
 80020bc:	3801      	subs	r0, #1
 80020be:	e017      	b.n	80020f0 <__ledf2+0xa8>
 80020c0:	4662      	mov	r2, ip
 80020c2:	2a00      	cmp	r2, #0
 80020c4:	d00f      	beq.n	80020e6 <__ledf2+0x9e>
 80020c6:	459a      	cmp	sl, r3
 80020c8:	d1e1      	bne.n	800208e <__ledf2+0x46>
 80020ca:	42a5      	cmp	r5, r4
 80020cc:	db05      	blt.n	80020da <__ledf2+0x92>
 80020ce:	42be      	cmp	r6, r7
 80020d0:	d8dd      	bhi.n	800208e <__ledf2+0x46>
 80020d2:	d019      	beq.n	8002108 <__ledf2+0xc0>
 80020d4:	2000      	movs	r0, #0
 80020d6:	42be      	cmp	r6, r7
 80020d8:	d20a      	bcs.n	80020f0 <__ledf2+0xa8>
 80020da:	4650      	mov	r0, sl
 80020dc:	2301      	movs	r3, #1
 80020de:	3801      	subs	r0, #1
 80020e0:	4398      	bics	r0, r3
 80020e2:	3001      	adds	r0, #1
 80020e4:	e004      	b.n	80020f0 <__ledf2+0xa8>
 80020e6:	2201      	movs	r2, #1
 80020e8:	3b01      	subs	r3, #1
 80020ea:	4393      	bics	r3, r2
 80020ec:	0018      	movs	r0, r3
 80020ee:	3001      	adds	r0, #1
 80020f0:	bc1c      	pop	{r2, r3, r4}
 80020f2:	4690      	mov	r8, r2
 80020f4:	4699      	mov	r9, r3
 80020f6:	46a2      	mov	sl, r4
 80020f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020fa:	433a      	orrs	r2, r7
 80020fc:	d1d0      	bne.n	80020a0 <__ledf2+0x58>
 80020fe:	459a      	cmp	sl, r3
 8002100:	d1c5      	bne.n	800208e <__ledf2+0x46>
 8002102:	42a5      	cmp	r5, r4
 8002104:	dcc3      	bgt.n	800208e <__ledf2+0x46>
 8002106:	e7e0      	b.n	80020ca <__ledf2+0x82>
 8002108:	45c8      	cmp	r8, r9
 800210a:	d8c0      	bhi.n	800208e <__ledf2+0x46>
 800210c:	2000      	movs	r0, #0
 800210e:	45c8      	cmp	r8, r9
 8002110:	d3e3      	bcc.n	80020da <__ledf2+0x92>
 8002112:	e7ed      	b.n	80020f0 <__ledf2+0xa8>
 8002114:	000007ff 	.word	0x000007ff

08002118 <__aeabi_dmul>:
 8002118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211a:	4657      	mov	r7, sl
 800211c:	46de      	mov	lr, fp
 800211e:	464e      	mov	r6, r9
 8002120:	4645      	mov	r5, r8
 8002122:	b5e0      	push	{r5, r6, r7, lr}
 8002124:	4683      	mov	fp, r0
 8002126:	0006      	movs	r6, r0
 8002128:	030f      	lsls	r7, r1, #12
 800212a:	0048      	lsls	r0, r1, #1
 800212c:	b087      	sub	sp, #28
 800212e:	4692      	mov	sl, r2
 8002130:	001d      	movs	r5, r3
 8002132:	0b3f      	lsrs	r7, r7, #12
 8002134:	0d40      	lsrs	r0, r0, #21
 8002136:	0fcc      	lsrs	r4, r1, #31
 8002138:	2800      	cmp	r0, #0
 800213a:	d100      	bne.n	800213e <__aeabi_dmul+0x26>
 800213c:	e06f      	b.n	800221e <__aeabi_dmul+0x106>
 800213e:	4bde      	ldr	r3, [pc, #888]	; (80024b8 <__aeabi_dmul+0x3a0>)
 8002140:	4298      	cmp	r0, r3
 8002142:	d038      	beq.n	80021b6 <__aeabi_dmul+0x9e>
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	00ff      	lsls	r7, r7, #3
 8002148:	041b      	lsls	r3, r3, #16
 800214a:	431f      	orrs	r7, r3
 800214c:	0f73      	lsrs	r3, r6, #29
 800214e:	433b      	orrs	r3, r7
 8002150:	9301      	str	r3, [sp, #4]
 8002152:	4bda      	ldr	r3, [pc, #872]	; (80024bc <__aeabi_dmul+0x3a4>)
 8002154:	2700      	movs	r7, #0
 8002156:	4699      	mov	r9, r3
 8002158:	2300      	movs	r3, #0
 800215a:	469b      	mov	fp, r3
 800215c:	00f6      	lsls	r6, r6, #3
 800215e:	4481      	add	r9, r0
 8002160:	032b      	lsls	r3, r5, #12
 8002162:	0069      	lsls	r1, r5, #1
 8002164:	0b1b      	lsrs	r3, r3, #12
 8002166:	4652      	mov	r2, sl
 8002168:	4698      	mov	r8, r3
 800216a:	0d49      	lsrs	r1, r1, #21
 800216c:	0fed      	lsrs	r5, r5, #31
 800216e:	2900      	cmp	r1, #0
 8002170:	d100      	bne.n	8002174 <__aeabi_dmul+0x5c>
 8002172:	e085      	b.n	8002280 <__aeabi_dmul+0x168>
 8002174:	4bd0      	ldr	r3, [pc, #832]	; (80024b8 <__aeabi_dmul+0x3a0>)
 8002176:	4299      	cmp	r1, r3
 8002178:	d100      	bne.n	800217c <__aeabi_dmul+0x64>
 800217a:	e073      	b.n	8002264 <__aeabi_dmul+0x14c>
 800217c:	4643      	mov	r3, r8
 800217e:	00da      	lsls	r2, r3, #3
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	041b      	lsls	r3, r3, #16
 8002184:	4313      	orrs	r3, r2
 8002186:	4652      	mov	r2, sl
 8002188:	48cc      	ldr	r0, [pc, #816]	; (80024bc <__aeabi_dmul+0x3a4>)
 800218a:	0f52      	lsrs	r2, r2, #29
 800218c:	4684      	mov	ip, r0
 800218e:	4313      	orrs	r3, r2
 8002190:	4652      	mov	r2, sl
 8002192:	2000      	movs	r0, #0
 8002194:	4461      	add	r1, ip
 8002196:	00d2      	lsls	r2, r2, #3
 8002198:	4489      	add	r9, r1
 800219a:	0021      	movs	r1, r4
 800219c:	4069      	eors	r1, r5
 800219e:	9100      	str	r1, [sp, #0]
 80021a0:	468c      	mov	ip, r1
 80021a2:	2101      	movs	r1, #1
 80021a4:	4449      	add	r1, r9
 80021a6:	468a      	mov	sl, r1
 80021a8:	2f0f      	cmp	r7, #15
 80021aa:	d900      	bls.n	80021ae <__aeabi_dmul+0x96>
 80021ac:	e090      	b.n	80022d0 <__aeabi_dmul+0x1b8>
 80021ae:	49c4      	ldr	r1, [pc, #784]	; (80024c0 <__aeabi_dmul+0x3a8>)
 80021b0:	00bf      	lsls	r7, r7, #2
 80021b2:	59cf      	ldr	r7, [r1, r7]
 80021b4:	46bf      	mov	pc, r7
 80021b6:	465b      	mov	r3, fp
 80021b8:	433b      	orrs	r3, r7
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	d000      	beq.n	80021c0 <__aeabi_dmul+0xa8>
 80021be:	e16a      	b.n	8002496 <__aeabi_dmul+0x37e>
 80021c0:	2302      	movs	r3, #2
 80021c2:	2708      	movs	r7, #8
 80021c4:	2600      	movs	r6, #0
 80021c6:	4681      	mov	r9, r0
 80021c8:	469b      	mov	fp, r3
 80021ca:	e7c9      	b.n	8002160 <__aeabi_dmul+0x48>
 80021cc:	0032      	movs	r2, r6
 80021ce:	4658      	mov	r0, fp
 80021d0:	9b01      	ldr	r3, [sp, #4]
 80021d2:	4661      	mov	r1, ip
 80021d4:	9100      	str	r1, [sp, #0]
 80021d6:	2802      	cmp	r0, #2
 80021d8:	d100      	bne.n	80021dc <__aeabi_dmul+0xc4>
 80021da:	e075      	b.n	80022c8 <__aeabi_dmul+0x1b0>
 80021dc:	2803      	cmp	r0, #3
 80021de:	d100      	bne.n	80021e2 <__aeabi_dmul+0xca>
 80021e0:	e1fe      	b.n	80025e0 <__aeabi_dmul+0x4c8>
 80021e2:	2801      	cmp	r0, #1
 80021e4:	d000      	beq.n	80021e8 <__aeabi_dmul+0xd0>
 80021e6:	e12c      	b.n	8002442 <__aeabi_dmul+0x32a>
 80021e8:	2300      	movs	r3, #0
 80021ea:	2700      	movs	r7, #0
 80021ec:	2600      	movs	r6, #0
 80021ee:	2500      	movs	r5, #0
 80021f0:	033f      	lsls	r7, r7, #12
 80021f2:	0d2a      	lsrs	r2, r5, #20
 80021f4:	0b3f      	lsrs	r7, r7, #12
 80021f6:	48b3      	ldr	r0, [pc, #716]	; (80024c4 <__aeabi_dmul+0x3ac>)
 80021f8:	0512      	lsls	r2, r2, #20
 80021fa:	433a      	orrs	r2, r7
 80021fc:	4002      	ands	r2, r0
 80021fe:	051b      	lsls	r3, r3, #20
 8002200:	4313      	orrs	r3, r2
 8002202:	9a00      	ldr	r2, [sp, #0]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	07d1      	lsls	r1, r2, #31
 8002208:	085b      	lsrs	r3, r3, #1
 800220a:	430b      	orrs	r3, r1
 800220c:	0030      	movs	r0, r6
 800220e:	0019      	movs	r1, r3
 8002210:	b007      	add	sp, #28
 8002212:	bc3c      	pop	{r2, r3, r4, r5}
 8002214:	4690      	mov	r8, r2
 8002216:	4699      	mov	r9, r3
 8002218:	46a2      	mov	sl, r4
 800221a:	46ab      	mov	fp, r5
 800221c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800221e:	465b      	mov	r3, fp
 8002220:	433b      	orrs	r3, r7
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	d100      	bne.n	8002228 <__aeabi_dmul+0x110>
 8002226:	e12f      	b.n	8002488 <__aeabi_dmul+0x370>
 8002228:	2f00      	cmp	r7, #0
 800222a:	d100      	bne.n	800222e <__aeabi_dmul+0x116>
 800222c:	e1a5      	b.n	800257a <__aeabi_dmul+0x462>
 800222e:	0038      	movs	r0, r7
 8002230:	f000 fe6e 	bl	8002f10 <__clzsi2>
 8002234:	0003      	movs	r3, r0
 8002236:	3b0b      	subs	r3, #11
 8002238:	2b1c      	cmp	r3, #28
 800223a:	dd00      	ble.n	800223e <__aeabi_dmul+0x126>
 800223c:	e196      	b.n	800256c <__aeabi_dmul+0x454>
 800223e:	221d      	movs	r2, #29
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	465a      	mov	r2, fp
 8002244:	0001      	movs	r1, r0
 8002246:	40da      	lsrs	r2, r3
 8002248:	465e      	mov	r6, fp
 800224a:	3908      	subs	r1, #8
 800224c:	408f      	lsls	r7, r1
 800224e:	0013      	movs	r3, r2
 8002250:	408e      	lsls	r6, r1
 8002252:	433b      	orrs	r3, r7
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	4b9c      	ldr	r3, [pc, #624]	; (80024c8 <__aeabi_dmul+0x3b0>)
 8002258:	2700      	movs	r7, #0
 800225a:	1a1b      	subs	r3, r3, r0
 800225c:	4699      	mov	r9, r3
 800225e:	2300      	movs	r3, #0
 8002260:	469b      	mov	fp, r3
 8002262:	e77d      	b.n	8002160 <__aeabi_dmul+0x48>
 8002264:	4641      	mov	r1, r8
 8002266:	4653      	mov	r3, sl
 8002268:	430b      	orrs	r3, r1
 800226a:	4993      	ldr	r1, [pc, #588]	; (80024b8 <__aeabi_dmul+0x3a0>)
 800226c:	468c      	mov	ip, r1
 800226e:	44e1      	add	r9, ip
 8002270:	2b00      	cmp	r3, #0
 8002272:	d000      	beq.n	8002276 <__aeabi_dmul+0x15e>
 8002274:	e11a      	b.n	80024ac <__aeabi_dmul+0x394>
 8002276:	2202      	movs	r2, #2
 8002278:	2002      	movs	r0, #2
 800227a:	4317      	orrs	r7, r2
 800227c:	2200      	movs	r2, #0
 800227e:	e78c      	b.n	800219a <__aeabi_dmul+0x82>
 8002280:	4313      	orrs	r3, r2
 8002282:	d100      	bne.n	8002286 <__aeabi_dmul+0x16e>
 8002284:	e10d      	b.n	80024a2 <__aeabi_dmul+0x38a>
 8002286:	4643      	mov	r3, r8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d100      	bne.n	800228e <__aeabi_dmul+0x176>
 800228c:	e181      	b.n	8002592 <__aeabi_dmul+0x47a>
 800228e:	4640      	mov	r0, r8
 8002290:	f000 fe3e 	bl	8002f10 <__clzsi2>
 8002294:	0002      	movs	r2, r0
 8002296:	3a0b      	subs	r2, #11
 8002298:	2a1c      	cmp	r2, #28
 800229a:	dd00      	ble.n	800229e <__aeabi_dmul+0x186>
 800229c:	e172      	b.n	8002584 <__aeabi_dmul+0x46c>
 800229e:	0001      	movs	r1, r0
 80022a0:	4643      	mov	r3, r8
 80022a2:	3908      	subs	r1, #8
 80022a4:	408b      	lsls	r3, r1
 80022a6:	4698      	mov	r8, r3
 80022a8:	231d      	movs	r3, #29
 80022aa:	1a9a      	subs	r2, r3, r2
 80022ac:	4653      	mov	r3, sl
 80022ae:	40d3      	lsrs	r3, r2
 80022b0:	001a      	movs	r2, r3
 80022b2:	4643      	mov	r3, r8
 80022b4:	4313      	orrs	r3, r2
 80022b6:	4652      	mov	r2, sl
 80022b8:	408a      	lsls	r2, r1
 80022ba:	4649      	mov	r1, r9
 80022bc:	1a08      	subs	r0, r1, r0
 80022be:	4982      	ldr	r1, [pc, #520]	; (80024c8 <__aeabi_dmul+0x3b0>)
 80022c0:	4689      	mov	r9, r1
 80022c2:	4481      	add	r9, r0
 80022c4:	2000      	movs	r0, #0
 80022c6:	e768      	b.n	800219a <__aeabi_dmul+0x82>
 80022c8:	4b7b      	ldr	r3, [pc, #492]	; (80024b8 <__aeabi_dmul+0x3a0>)
 80022ca:	2700      	movs	r7, #0
 80022cc:	2600      	movs	r6, #0
 80022ce:	e78e      	b.n	80021ee <__aeabi_dmul+0xd6>
 80022d0:	0c14      	lsrs	r4, r2, #16
 80022d2:	0412      	lsls	r2, r2, #16
 80022d4:	0c12      	lsrs	r2, r2, #16
 80022d6:	0011      	movs	r1, r2
 80022d8:	0c37      	lsrs	r7, r6, #16
 80022da:	0436      	lsls	r6, r6, #16
 80022dc:	0c35      	lsrs	r5, r6, #16
 80022de:	4379      	muls	r1, r7
 80022e0:	0028      	movs	r0, r5
 80022e2:	468c      	mov	ip, r1
 80022e4:	002e      	movs	r6, r5
 80022e6:	4360      	muls	r0, r4
 80022e8:	4460      	add	r0, ip
 80022ea:	4683      	mov	fp, r0
 80022ec:	4356      	muls	r6, r2
 80022ee:	0021      	movs	r1, r4
 80022f0:	0c30      	lsrs	r0, r6, #16
 80022f2:	4680      	mov	r8, r0
 80022f4:	4658      	mov	r0, fp
 80022f6:	4379      	muls	r1, r7
 80022f8:	4440      	add	r0, r8
 80022fa:	9102      	str	r1, [sp, #8]
 80022fc:	4584      	cmp	ip, r0
 80022fe:	d906      	bls.n	800230e <__aeabi_dmul+0x1f6>
 8002300:	4688      	mov	r8, r1
 8002302:	2180      	movs	r1, #128	; 0x80
 8002304:	0249      	lsls	r1, r1, #9
 8002306:	468c      	mov	ip, r1
 8002308:	44e0      	add	r8, ip
 800230a:	4641      	mov	r1, r8
 800230c:	9102      	str	r1, [sp, #8]
 800230e:	0436      	lsls	r6, r6, #16
 8002310:	0c01      	lsrs	r1, r0, #16
 8002312:	0c36      	lsrs	r6, r6, #16
 8002314:	0400      	lsls	r0, r0, #16
 8002316:	468b      	mov	fp, r1
 8002318:	1981      	adds	r1, r0, r6
 800231a:	0c1e      	lsrs	r6, r3, #16
 800231c:	041b      	lsls	r3, r3, #16
 800231e:	0c1b      	lsrs	r3, r3, #16
 8002320:	9103      	str	r1, [sp, #12]
 8002322:	0019      	movs	r1, r3
 8002324:	4379      	muls	r1, r7
 8002326:	468c      	mov	ip, r1
 8002328:	0028      	movs	r0, r5
 800232a:	4375      	muls	r5, r6
 800232c:	4465      	add	r5, ip
 800232e:	46a8      	mov	r8, r5
 8002330:	4358      	muls	r0, r3
 8002332:	0c05      	lsrs	r5, r0, #16
 8002334:	4445      	add	r5, r8
 8002336:	4377      	muls	r7, r6
 8002338:	42a9      	cmp	r1, r5
 800233a:	d903      	bls.n	8002344 <__aeabi_dmul+0x22c>
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	0249      	lsls	r1, r1, #9
 8002340:	468c      	mov	ip, r1
 8002342:	4467      	add	r7, ip
 8002344:	0c29      	lsrs	r1, r5, #16
 8002346:	468c      	mov	ip, r1
 8002348:	0039      	movs	r1, r7
 800234a:	0400      	lsls	r0, r0, #16
 800234c:	0c00      	lsrs	r0, r0, #16
 800234e:	042d      	lsls	r5, r5, #16
 8002350:	182d      	adds	r5, r5, r0
 8002352:	4461      	add	r1, ip
 8002354:	44ab      	add	fp, r5
 8002356:	9105      	str	r1, [sp, #20]
 8002358:	4659      	mov	r1, fp
 800235a:	9104      	str	r1, [sp, #16]
 800235c:	9901      	ldr	r1, [sp, #4]
 800235e:	040f      	lsls	r7, r1, #16
 8002360:	0c3f      	lsrs	r7, r7, #16
 8002362:	0c08      	lsrs	r0, r1, #16
 8002364:	0039      	movs	r1, r7
 8002366:	4351      	muls	r1, r2
 8002368:	4342      	muls	r2, r0
 800236a:	4690      	mov	r8, r2
 800236c:	0002      	movs	r2, r0
 800236e:	468c      	mov	ip, r1
 8002370:	0c09      	lsrs	r1, r1, #16
 8002372:	468b      	mov	fp, r1
 8002374:	4362      	muls	r2, r4
 8002376:	437c      	muls	r4, r7
 8002378:	4444      	add	r4, r8
 800237a:	445c      	add	r4, fp
 800237c:	45a0      	cmp	r8, r4
 800237e:	d903      	bls.n	8002388 <__aeabi_dmul+0x270>
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	0249      	lsls	r1, r1, #9
 8002384:	4688      	mov	r8, r1
 8002386:	4442      	add	r2, r8
 8002388:	0c21      	lsrs	r1, r4, #16
 800238a:	4688      	mov	r8, r1
 800238c:	4661      	mov	r1, ip
 800238e:	0409      	lsls	r1, r1, #16
 8002390:	0c09      	lsrs	r1, r1, #16
 8002392:	468c      	mov	ip, r1
 8002394:	0039      	movs	r1, r7
 8002396:	4359      	muls	r1, r3
 8002398:	4343      	muls	r3, r0
 800239a:	4370      	muls	r0, r6
 800239c:	437e      	muls	r6, r7
 800239e:	0c0f      	lsrs	r7, r1, #16
 80023a0:	18f6      	adds	r6, r6, r3
 80023a2:	0424      	lsls	r4, r4, #16
 80023a4:	19be      	adds	r6, r7, r6
 80023a6:	4464      	add	r4, ip
 80023a8:	4442      	add	r2, r8
 80023aa:	468c      	mov	ip, r1
 80023ac:	42b3      	cmp	r3, r6
 80023ae:	d903      	bls.n	80023b8 <__aeabi_dmul+0x2a0>
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	025b      	lsls	r3, r3, #9
 80023b4:	4698      	mov	r8, r3
 80023b6:	4440      	add	r0, r8
 80023b8:	9b02      	ldr	r3, [sp, #8]
 80023ba:	4661      	mov	r1, ip
 80023bc:	4698      	mov	r8, r3
 80023be:	9b04      	ldr	r3, [sp, #16]
 80023c0:	0437      	lsls	r7, r6, #16
 80023c2:	4443      	add	r3, r8
 80023c4:	469b      	mov	fp, r3
 80023c6:	45ab      	cmp	fp, r5
 80023c8:	41ad      	sbcs	r5, r5
 80023ca:	426b      	negs	r3, r5
 80023cc:	040d      	lsls	r5, r1, #16
 80023ce:	9905      	ldr	r1, [sp, #20]
 80023d0:	0c2d      	lsrs	r5, r5, #16
 80023d2:	468c      	mov	ip, r1
 80023d4:	197f      	adds	r7, r7, r5
 80023d6:	4467      	add	r7, ip
 80023d8:	18fd      	adds	r5, r7, r3
 80023da:	46a8      	mov	r8, r5
 80023dc:	465d      	mov	r5, fp
 80023de:	192d      	adds	r5, r5, r4
 80023e0:	42a5      	cmp	r5, r4
 80023e2:	41a4      	sbcs	r4, r4
 80023e4:	4693      	mov	fp, r2
 80023e6:	4264      	negs	r4, r4
 80023e8:	46a4      	mov	ip, r4
 80023ea:	44c3      	add	fp, r8
 80023ec:	44dc      	add	ip, fp
 80023ee:	428f      	cmp	r7, r1
 80023f0:	41bf      	sbcs	r7, r7
 80023f2:	4598      	cmp	r8, r3
 80023f4:	419b      	sbcs	r3, r3
 80023f6:	4593      	cmp	fp, r2
 80023f8:	4192      	sbcs	r2, r2
 80023fa:	45a4      	cmp	ip, r4
 80023fc:	41a4      	sbcs	r4, r4
 80023fe:	425b      	negs	r3, r3
 8002400:	427f      	negs	r7, r7
 8002402:	431f      	orrs	r7, r3
 8002404:	0c36      	lsrs	r6, r6, #16
 8002406:	4252      	negs	r2, r2
 8002408:	4264      	negs	r4, r4
 800240a:	19bf      	adds	r7, r7, r6
 800240c:	4322      	orrs	r2, r4
 800240e:	18bf      	adds	r7, r7, r2
 8002410:	4662      	mov	r2, ip
 8002412:	1838      	adds	r0, r7, r0
 8002414:	0243      	lsls	r3, r0, #9
 8002416:	0dd2      	lsrs	r2, r2, #23
 8002418:	9903      	ldr	r1, [sp, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	026a      	lsls	r2, r5, #9
 800241e:	430a      	orrs	r2, r1
 8002420:	1e50      	subs	r0, r2, #1
 8002422:	4182      	sbcs	r2, r0
 8002424:	4661      	mov	r1, ip
 8002426:	0ded      	lsrs	r5, r5, #23
 8002428:	432a      	orrs	r2, r5
 800242a:	024e      	lsls	r6, r1, #9
 800242c:	4332      	orrs	r2, r6
 800242e:	01d9      	lsls	r1, r3, #7
 8002430:	d400      	bmi.n	8002434 <__aeabi_dmul+0x31c>
 8002432:	e0b3      	b.n	800259c <__aeabi_dmul+0x484>
 8002434:	2601      	movs	r6, #1
 8002436:	0850      	lsrs	r0, r2, #1
 8002438:	4032      	ands	r2, r6
 800243a:	4302      	orrs	r2, r0
 800243c:	07de      	lsls	r6, r3, #31
 800243e:	4332      	orrs	r2, r6
 8002440:	085b      	lsrs	r3, r3, #1
 8002442:	4c22      	ldr	r4, [pc, #136]	; (80024cc <__aeabi_dmul+0x3b4>)
 8002444:	4454      	add	r4, sl
 8002446:	2c00      	cmp	r4, #0
 8002448:	dd62      	ble.n	8002510 <__aeabi_dmul+0x3f8>
 800244a:	0751      	lsls	r1, r2, #29
 800244c:	d009      	beq.n	8002462 <__aeabi_dmul+0x34a>
 800244e:	200f      	movs	r0, #15
 8002450:	4010      	ands	r0, r2
 8002452:	2804      	cmp	r0, #4
 8002454:	d005      	beq.n	8002462 <__aeabi_dmul+0x34a>
 8002456:	1d10      	adds	r0, r2, #4
 8002458:	4290      	cmp	r0, r2
 800245a:	4192      	sbcs	r2, r2
 800245c:	4252      	negs	r2, r2
 800245e:	189b      	adds	r3, r3, r2
 8002460:	0002      	movs	r2, r0
 8002462:	01d9      	lsls	r1, r3, #7
 8002464:	d504      	bpl.n	8002470 <__aeabi_dmul+0x358>
 8002466:	2480      	movs	r4, #128	; 0x80
 8002468:	4819      	ldr	r0, [pc, #100]	; (80024d0 <__aeabi_dmul+0x3b8>)
 800246a:	00e4      	lsls	r4, r4, #3
 800246c:	4003      	ands	r3, r0
 800246e:	4454      	add	r4, sl
 8002470:	4818      	ldr	r0, [pc, #96]	; (80024d4 <__aeabi_dmul+0x3bc>)
 8002472:	4284      	cmp	r4, r0
 8002474:	dd00      	ble.n	8002478 <__aeabi_dmul+0x360>
 8002476:	e727      	b.n	80022c8 <__aeabi_dmul+0x1b0>
 8002478:	075e      	lsls	r6, r3, #29
 800247a:	025b      	lsls	r3, r3, #9
 800247c:	08d2      	lsrs	r2, r2, #3
 800247e:	0b1f      	lsrs	r7, r3, #12
 8002480:	0563      	lsls	r3, r4, #21
 8002482:	4316      	orrs	r6, r2
 8002484:	0d5b      	lsrs	r3, r3, #21
 8002486:	e6b2      	b.n	80021ee <__aeabi_dmul+0xd6>
 8002488:	2300      	movs	r3, #0
 800248a:	4699      	mov	r9, r3
 800248c:	3301      	adds	r3, #1
 800248e:	2704      	movs	r7, #4
 8002490:	2600      	movs	r6, #0
 8002492:	469b      	mov	fp, r3
 8002494:	e664      	b.n	8002160 <__aeabi_dmul+0x48>
 8002496:	2303      	movs	r3, #3
 8002498:	9701      	str	r7, [sp, #4]
 800249a:	4681      	mov	r9, r0
 800249c:	270c      	movs	r7, #12
 800249e:	469b      	mov	fp, r3
 80024a0:	e65e      	b.n	8002160 <__aeabi_dmul+0x48>
 80024a2:	2201      	movs	r2, #1
 80024a4:	2001      	movs	r0, #1
 80024a6:	4317      	orrs	r7, r2
 80024a8:	2200      	movs	r2, #0
 80024aa:	e676      	b.n	800219a <__aeabi_dmul+0x82>
 80024ac:	2303      	movs	r3, #3
 80024ae:	2003      	movs	r0, #3
 80024b0:	431f      	orrs	r7, r3
 80024b2:	4643      	mov	r3, r8
 80024b4:	e671      	b.n	800219a <__aeabi_dmul+0x82>
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	000007ff 	.word	0x000007ff
 80024bc:	fffffc01 	.word	0xfffffc01
 80024c0:	0800c284 	.word	0x0800c284
 80024c4:	800fffff 	.word	0x800fffff
 80024c8:	fffffc0d 	.word	0xfffffc0d
 80024cc:	000003ff 	.word	0x000003ff
 80024d0:	feffffff 	.word	0xfeffffff
 80024d4:	000007fe 	.word	0x000007fe
 80024d8:	2300      	movs	r3, #0
 80024da:	2780      	movs	r7, #128	; 0x80
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	033f      	lsls	r7, r7, #12
 80024e0:	2600      	movs	r6, #0
 80024e2:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <__aeabi_dmul+0x4d8>)
 80024e4:	e683      	b.n	80021ee <__aeabi_dmul+0xd6>
 80024e6:	9b01      	ldr	r3, [sp, #4]
 80024e8:	0032      	movs	r2, r6
 80024ea:	46a4      	mov	ip, r4
 80024ec:	4658      	mov	r0, fp
 80024ee:	e670      	b.n	80021d2 <__aeabi_dmul+0xba>
 80024f0:	46ac      	mov	ip, r5
 80024f2:	e66e      	b.n	80021d2 <__aeabi_dmul+0xba>
 80024f4:	2780      	movs	r7, #128	; 0x80
 80024f6:	9901      	ldr	r1, [sp, #4]
 80024f8:	033f      	lsls	r7, r7, #12
 80024fa:	4239      	tst	r1, r7
 80024fc:	d02d      	beq.n	800255a <__aeabi_dmul+0x442>
 80024fe:	423b      	tst	r3, r7
 8002500:	d12b      	bne.n	800255a <__aeabi_dmul+0x442>
 8002502:	431f      	orrs	r7, r3
 8002504:	033f      	lsls	r7, r7, #12
 8002506:	0b3f      	lsrs	r7, r7, #12
 8002508:	9500      	str	r5, [sp, #0]
 800250a:	0016      	movs	r6, r2
 800250c:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <__aeabi_dmul+0x4d8>)
 800250e:	e66e      	b.n	80021ee <__aeabi_dmul+0xd6>
 8002510:	2501      	movs	r5, #1
 8002512:	1b2d      	subs	r5, r5, r4
 8002514:	2d38      	cmp	r5, #56	; 0x38
 8002516:	dd00      	ble.n	800251a <__aeabi_dmul+0x402>
 8002518:	e666      	b.n	80021e8 <__aeabi_dmul+0xd0>
 800251a:	2d1f      	cmp	r5, #31
 800251c:	dc40      	bgt.n	80025a0 <__aeabi_dmul+0x488>
 800251e:	4835      	ldr	r0, [pc, #212]	; (80025f4 <__aeabi_dmul+0x4dc>)
 8002520:	001c      	movs	r4, r3
 8002522:	4450      	add	r0, sl
 8002524:	0016      	movs	r6, r2
 8002526:	4082      	lsls	r2, r0
 8002528:	4084      	lsls	r4, r0
 800252a:	40ee      	lsrs	r6, r5
 800252c:	1e50      	subs	r0, r2, #1
 800252e:	4182      	sbcs	r2, r0
 8002530:	4334      	orrs	r4, r6
 8002532:	4314      	orrs	r4, r2
 8002534:	40eb      	lsrs	r3, r5
 8002536:	0762      	lsls	r2, r4, #29
 8002538:	d009      	beq.n	800254e <__aeabi_dmul+0x436>
 800253a:	220f      	movs	r2, #15
 800253c:	4022      	ands	r2, r4
 800253e:	2a04      	cmp	r2, #4
 8002540:	d005      	beq.n	800254e <__aeabi_dmul+0x436>
 8002542:	0022      	movs	r2, r4
 8002544:	1d14      	adds	r4, r2, #4
 8002546:	4294      	cmp	r4, r2
 8002548:	4180      	sbcs	r0, r0
 800254a:	4240      	negs	r0, r0
 800254c:	181b      	adds	r3, r3, r0
 800254e:	021a      	lsls	r2, r3, #8
 8002550:	d53e      	bpl.n	80025d0 <__aeabi_dmul+0x4b8>
 8002552:	2301      	movs	r3, #1
 8002554:	2700      	movs	r7, #0
 8002556:	2600      	movs	r6, #0
 8002558:	e649      	b.n	80021ee <__aeabi_dmul+0xd6>
 800255a:	2780      	movs	r7, #128	; 0x80
 800255c:	9b01      	ldr	r3, [sp, #4]
 800255e:	033f      	lsls	r7, r7, #12
 8002560:	431f      	orrs	r7, r3
 8002562:	033f      	lsls	r7, r7, #12
 8002564:	0b3f      	lsrs	r7, r7, #12
 8002566:	9400      	str	r4, [sp, #0]
 8002568:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <__aeabi_dmul+0x4d8>)
 800256a:	e640      	b.n	80021ee <__aeabi_dmul+0xd6>
 800256c:	0003      	movs	r3, r0
 800256e:	465a      	mov	r2, fp
 8002570:	3b28      	subs	r3, #40	; 0x28
 8002572:	409a      	lsls	r2, r3
 8002574:	2600      	movs	r6, #0
 8002576:	9201      	str	r2, [sp, #4]
 8002578:	e66d      	b.n	8002256 <__aeabi_dmul+0x13e>
 800257a:	4658      	mov	r0, fp
 800257c:	f000 fcc8 	bl	8002f10 <__clzsi2>
 8002580:	3020      	adds	r0, #32
 8002582:	e657      	b.n	8002234 <__aeabi_dmul+0x11c>
 8002584:	0003      	movs	r3, r0
 8002586:	4652      	mov	r2, sl
 8002588:	3b28      	subs	r3, #40	; 0x28
 800258a:	409a      	lsls	r2, r3
 800258c:	0013      	movs	r3, r2
 800258e:	2200      	movs	r2, #0
 8002590:	e693      	b.n	80022ba <__aeabi_dmul+0x1a2>
 8002592:	4650      	mov	r0, sl
 8002594:	f000 fcbc 	bl	8002f10 <__clzsi2>
 8002598:	3020      	adds	r0, #32
 800259a:	e67b      	b.n	8002294 <__aeabi_dmul+0x17c>
 800259c:	46ca      	mov	sl, r9
 800259e:	e750      	b.n	8002442 <__aeabi_dmul+0x32a>
 80025a0:	201f      	movs	r0, #31
 80025a2:	001e      	movs	r6, r3
 80025a4:	4240      	negs	r0, r0
 80025a6:	1b04      	subs	r4, r0, r4
 80025a8:	40e6      	lsrs	r6, r4
 80025aa:	2d20      	cmp	r5, #32
 80025ac:	d003      	beq.n	80025b6 <__aeabi_dmul+0x49e>
 80025ae:	4c12      	ldr	r4, [pc, #72]	; (80025f8 <__aeabi_dmul+0x4e0>)
 80025b0:	4454      	add	r4, sl
 80025b2:	40a3      	lsls	r3, r4
 80025b4:	431a      	orrs	r2, r3
 80025b6:	1e50      	subs	r0, r2, #1
 80025b8:	4182      	sbcs	r2, r0
 80025ba:	4332      	orrs	r2, r6
 80025bc:	2607      	movs	r6, #7
 80025be:	2700      	movs	r7, #0
 80025c0:	4016      	ands	r6, r2
 80025c2:	d009      	beq.n	80025d8 <__aeabi_dmul+0x4c0>
 80025c4:	200f      	movs	r0, #15
 80025c6:	2300      	movs	r3, #0
 80025c8:	4010      	ands	r0, r2
 80025ca:	0014      	movs	r4, r2
 80025cc:	2804      	cmp	r0, #4
 80025ce:	d1b9      	bne.n	8002544 <__aeabi_dmul+0x42c>
 80025d0:	0022      	movs	r2, r4
 80025d2:	075e      	lsls	r6, r3, #29
 80025d4:	025b      	lsls	r3, r3, #9
 80025d6:	0b1f      	lsrs	r7, r3, #12
 80025d8:	08d2      	lsrs	r2, r2, #3
 80025da:	4316      	orrs	r6, r2
 80025dc:	2300      	movs	r3, #0
 80025de:	e606      	b.n	80021ee <__aeabi_dmul+0xd6>
 80025e0:	2780      	movs	r7, #128	; 0x80
 80025e2:	033f      	lsls	r7, r7, #12
 80025e4:	431f      	orrs	r7, r3
 80025e6:	033f      	lsls	r7, r7, #12
 80025e8:	0b3f      	lsrs	r7, r7, #12
 80025ea:	0016      	movs	r6, r2
 80025ec:	4b00      	ldr	r3, [pc, #0]	; (80025f0 <__aeabi_dmul+0x4d8>)
 80025ee:	e5fe      	b.n	80021ee <__aeabi_dmul+0xd6>
 80025f0:	000007ff 	.word	0x000007ff
 80025f4:	0000041e 	.word	0x0000041e
 80025f8:	0000043e 	.word	0x0000043e

080025fc <__aeabi_dsub>:
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	4657      	mov	r7, sl
 8002600:	464e      	mov	r6, r9
 8002602:	4645      	mov	r5, r8
 8002604:	46de      	mov	lr, fp
 8002606:	000c      	movs	r4, r1
 8002608:	0309      	lsls	r1, r1, #12
 800260a:	b5e0      	push	{r5, r6, r7, lr}
 800260c:	0a49      	lsrs	r1, r1, #9
 800260e:	0f46      	lsrs	r6, r0, #29
 8002610:	005f      	lsls	r7, r3, #1
 8002612:	4331      	orrs	r1, r6
 8002614:	031e      	lsls	r6, r3, #12
 8002616:	0fdb      	lsrs	r3, r3, #31
 8002618:	0a76      	lsrs	r6, r6, #9
 800261a:	469b      	mov	fp, r3
 800261c:	0f53      	lsrs	r3, r2, #29
 800261e:	4333      	orrs	r3, r6
 8002620:	4ec8      	ldr	r6, [pc, #800]	; (8002944 <__aeabi_dsub+0x348>)
 8002622:	0065      	lsls	r5, r4, #1
 8002624:	00c0      	lsls	r0, r0, #3
 8002626:	0fe4      	lsrs	r4, r4, #31
 8002628:	00d2      	lsls	r2, r2, #3
 800262a:	0d6d      	lsrs	r5, r5, #21
 800262c:	46a2      	mov	sl, r4
 800262e:	4681      	mov	r9, r0
 8002630:	0d7f      	lsrs	r7, r7, #21
 8002632:	469c      	mov	ip, r3
 8002634:	4690      	mov	r8, r2
 8002636:	42b7      	cmp	r7, r6
 8002638:	d100      	bne.n	800263c <__aeabi_dsub+0x40>
 800263a:	e0b9      	b.n	80027b0 <__aeabi_dsub+0x1b4>
 800263c:	465b      	mov	r3, fp
 800263e:	2601      	movs	r6, #1
 8002640:	4073      	eors	r3, r6
 8002642:	469b      	mov	fp, r3
 8002644:	1bee      	subs	r6, r5, r7
 8002646:	45a3      	cmp	fp, r4
 8002648:	d100      	bne.n	800264c <__aeabi_dsub+0x50>
 800264a:	e083      	b.n	8002754 <__aeabi_dsub+0x158>
 800264c:	2e00      	cmp	r6, #0
 800264e:	dd63      	ble.n	8002718 <__aeabi_dsub+0x11c>
 8002650:	2f00      	cmp	r7, #0
 8002652:	d000      	beq.n	8002656 <__aeabi_dsub+0x5a>
 8002654:	e0b1      	b.n	80027ba <__aeabi_dsub+0x1be>
 8002656:	4663      	mov	r3, ip
 8002658:	4313      	orrs	r3, r2
 800265a:	d100      	bne.n	800265e <__aeabi_dsub+0x62>
 800265c:	e123      	b.n	80028a6 <__aeabi_dsub+0x2aa>
 800265e:	1e73      	subs	r3, r6, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d000      	beq.n	8002666 <__aeabi_dsub+0x6a>
 8002664:	e1ba      	b.n	80029dc <__aeabi_dsub+0x3e0>
 8002666:	1a86      	subs	r6, r0, r2
 8002668:	4663      	mov	r3, ip
 800266a:	42b0      	cmp	r0, r6
 800266c:	4180      	sbcs	r0, r0
 800266e:	2501      	movs	r5, #1
 8002670:	1ac9      	subs	r1, r1, r3
 8002672:	4240      	negs	r0, r0
 8002674:	1a09      	subs	r1, r1, r0
 8002676:	020b      	lsls	r3, r1, #8
 8002678:	d400      	bmi.n	800267c <__aeabi_dsub+0x80>
 800267a:	e147      	b.n	800290c <__aeabi_dsub+0x310>
 800267c:	0249      	lsls	r1, r1, #9
 800267e:	0a4b      	lsrs	r3, r1, #9
 8002680:	4698      	mov	r8, r3
 8002682:	4643      	mov	r3, r8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d100      	bne.n	800268a <__aeabi_dsub+0x8e>
 8002688:	e189      	b.n	800299e <__aeabi_dsub+0x3a2>
 800268a:	4640      	mov	r0, r8
 800268c:	f000 fc40 	bl	8002f10 <__clzsi2>
 8002690:	0003      	movs	r3, r0
 8002692:	3b08      	subs	r3, #8
 8002694:	2b1f      	cmp	r3, #31
 8002696:	dd00      	ble.n	800269a <__aeabi_dsub+0x9e>
 8002698:	e17c      	b.n	8002994 <__aeabi_dsub+0x398>
 800269a:	2220      	movs	r2, #32
 800269c:	0030      	movs	r0, r6
 800269e:	1ad2      	subs	r2, r2, r3
 80026a0:	4641      	mov	r1, r8
 80026a2:	40d0      	lsrs	r0, r2
 80026a4:	4099      	lsls	r1, r3
 80026a6:	0002      	movs	r2, r0
 80026a8:	409e      	lsls	r6, r3
 80026aa:	430a      	orrs	r2, r1
 80026ac:	429d      	cmp	r5, r3
 80026ae:	dd00      	ble.n	80026b2 <__aeabi_dsub+0xb6>
 80026b0:	e16a      	b.n	8002988 <__aeabi_dsub+0x38c>
 80026b2:	1b5d      	subs	r5, r3, r5
 80026b4:	1c6b      	adds	r3, r5, #1
 80026b6:	2b1f      	cmp	r3, #31
 80026b8:	dd00      	ble.n	80026bc <__aeabi_dsub+0xc0>
 80026ba:	e194      	b.n	80029e6 <__aeabi_dsub+0x3ea>
 80026bc:	2120      	movs	r1, #32
 80026be:	0010      	movs	r0, r2
 80026c0:	0035      	movs	r5, r6
 80026c2:	1ac9      	subs	r1, r1, r3
 80026c4:	408e      	lsls	r6, r1
 80026c6:	40da      	lsrs	r2, r3
 80026c8:	4088      	lsls	r0, r1
 80026ca:	40dd      	lsrs	r5, r3
 80026cc:	1e71      	subs	r1, r6, #1
 80026ce:	418e      	sbcs	r6, r1
 80026d0:	0011      	movs	r1, r2
 80026d2:	2207      	movs	r2, #7
 80026d4:	4328      	orrs	r0, r5
 80026d6:	2500      	movs	r5, #0
 80026d8:	4306      	orrs	r6, r0
 80026da:	4032      	ands	r2, r6
 80026dc:	2a00      	cmp	r2, #0
 80026de:	d009      	beq.n	80026f4 <__aeabi_dsub+0xf8>
 80026e0:	230f      	movs	r3, #15
 80026e2:	4033      	ands	r3, r6
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d005      	beq.n	80026f4 <__aeabi_dsub+0xf8>
 80026e8:	1d33      	adds	r3, r6, #4
 80026ea:	42b3      	cmp	r3, r6
 80026ec:	41b6      	sbcs	r6, r6
 80026ee:	4276      	negs	r6, r6
 80026f0:	1989      	adds	r1, r1, r6
 80026f2:	001e      	movs	r6, r3
 80026f4:	020b      	lsls	r3, r1, #8
 80026f6:	d400      	bmi.n	80026fa <__aeabi_dsub+0xfe>
 80026f8:	e23d      	b.n	8002b76 <__aeabi_dsub+0x57a>
 80026fa:	1c6a      	adds	r2, r5, #1
 80026fc:	4b91      	ldr	r3, [pc, #580]	; (8002944 <__aeabi_dsub+0x348>)
 80026fe:	0555      	lsls	r5, r2, #21
 8002700:	0d6d      	lsrs	r5, r5, #21
 8002702:	429a      	cmp	r2, r3
 8002704:	d100      	bne.n	8002708 <__aeabi_dsub+0x10c>
 8002706:	e119      	b.n	800293c <__aeabi_dsub+0x340>
 8002708:	4a8f      	ldr	r2, [pc, #572]	; (8002948 <__aeabi_dsub+0x34c>)
 800270a:	08f6      	lsrs	r6, r6, #3
 800270c:	400a      	ands	r2, r1
 800270e:	0757      	lsls	r7, r2, #29
 8002710:	0252      	lsls	r2, r2, #9
 8002712:	4337      	orrs	r7, r6
 8002714:	0b12      	lsrs	r2, r2, #12
 8002716:	e09b      	b.n	8002850 <__aeabi_dsub+0x254>
 8002718:	2e00      	cmp	r6, #0
 800271a:	d000      	beq.n	800271e <__aeabi_dsub+0x122>
 800271c:	e0c5      	b.n	80028aa <__aeabi_dsub+0x2ae>
 800271e:	1c6e      	adds	r6, r5, #1
 8002720:	0576      	lsls	r6, r6, #21
 8002722:	0d76      	lsrs	r6, r6, #21
 8002724:	2e01      	cmp	r6, #1
 8002726:	dc00      	bgt.n	800272a <__aeabi_dsub+0x12e>
 8002728:	e148      	b.n	80029bc <__aeabi_dsub+0x3c0>
 800272a:	4667      	mov	r7, ip
 800272c:	1a86      	subs	r6, r0, r2
 800272e:	1bcb      	subs	r3, r1, r7
 8002730:	42b0      	cmp	r0, r6
 8002732:	41bf      	sbcs	r7, r7
 8002734:	427f      	negs	r7, r7
 8002736:	46b8      	mov	r8, r7
 8002738:	001f      	movs	r7, r3
 800273a:	4643      	mov	r3, r8
 800273c:	1aff      	subs	r7, r7, r3
 800273e:	003b      	movs	r3, r7
 8002740:	46b8      	mov	r8, r7
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	d500      	bpl.n	8002748 <__aeabi_dsub+0x14c>
 8002746:	e15f      	b.n	8002a08 <__aeabi_dsub+0x40c>
 8002748:	4337      	orrs	r7, r6
 800274a:	d19a      	bne.n	8002682 <__aeabi_dsub+0x86>
 800274c:	2200      	movs	r2, #0
 800274e:	2400      	movs	r4, #0
 8002750:	2500      	movs	r5, #0
 8002752:	e079      	b.n	8002848 <__aeabi_dsub+0x24c>
 8002754:	2e00      	cmp	r6, #0
 8002756:	dc00      	bgt.n	800275a <__aeabi_dsub+0x15e>
 8002758:	e0fa      	b.n	8002950 <__aeabi_dsub+0x354>
 800275a:	2f00      	cmp	r7, #0
 800275c:	d100      	bne.n	8002760 <__aeabi_dsub+0x164>
 800275e:	e08d      	b.n	800287c <__aeabi_dsub+0x280>
 8002760:	4b78      	ldr	r3, [pc, #480]	; (8002944 <__aeabi_dsub+0x348>)
 8002762:	429d      	cmp	r5, r3
 8002764:	d067      	beq.n	8002836 <__aeabi_dsub+0x23a>
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	4667      	mov	r7, ip
 800276a:	041b      	lsls	r3, r3, #16
 800276c:	431f      	orrs	r7, r3
 800276e:	46bc      	mov	ip, r7
 8002770:	2e38      	cmp	r6, #56	; 0x38
 8002772:	dc00      	bgt.n	8002776 <__aeabi_dsub+0x17a>
 8002774:	e152      	b.n	8002a1c <__aeabi_dsub+0x420>
 8002776:	4663      	mov	r3, ip
 8002778:	4313      	orrs	r3, r2
 800277a:	1e5a      	subs	r2, r3, #1
 800277c:	4193      	sbcs	r3, r2
 800277e:	181e      	adds	r6, r3, r0
 8002780:	4286      	cmp	r6, r0
 8002782:	4180      	sbcs	r0, r0
 8002784:	4240      	negs	r0, r0
 8002786:	1809      	adds	r1, r1, r0
 8002788:	020b      	lsls	r3, r1, #8
 800278a:	d400      	bmi.n	800278e <__aeabi_dsub+0x192>
 800278c:	e0be      	b.n	800290c <__aeabi_dsub+0x310>
 800278e:	4b6d      	ldr	r3, [pc, #436]	; (8002944 <__aeabi_dsub+0x348>)
 8002790:	3501      	adds	r5, #1
 8002792:	429d      	cmp	r5, r3
 8002794:	d100      	bne.n	8002798 <__aeabi_dsub+0x19c>
 8002796:	e0d2      	b.n	800293e <__aeabi_dsub+0x342>
 8002798:	4a6b      	ldr	r2, [pc, #428]	; (8002948 <__aeabi_dsub+0x34c>)
 800279a:	0873      	lsrs	r3, r6, #1
 800279c:	400a      	ands	r2, r1
 800279e:	2101      	movs	r1, #1
 80027a0:	400e      	ands	r6, r1
 80027a2:	431e      	orrs	r6, r3
 80027a4:	0851      	lsrs	r1, r2, #1
 80027a6:	07d3      	lsls	r3, r2, #31
 80027a8:	2207      	movs	r2, #7
 80027aa:	431e      	orrs	r6, r3
 80027ac:	4032      	ands	r2, r6
 80027ae:	e795      	b.n	80026dc <__aeabi_dsub+0xe0>
 80027b0:	001e      	movs	r6, r3
 80027b2:	4316      	orrs	r6, r2
 80027b4:	d000      	beq.n	80027b8 <__aeabi_dsub+0x1bc>
 80027b6:	e745      	b.n	8002644 <__aeabi_dsub+0x48>
 80027b8:	e740      	b.n	800263c <__aeabi_dsub+0x40>
 80027ba:	4b62      	ldr	r3, [pc, #392]	; (8002944 <__aeabi_dsub+0x348>)
 80027bc:	429d      	cmp	r5, r3
 80027be:	d03a      	beq.n	8002836 <__aeabi_dsub+0x23a>
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	4667      	mov	r7, ip
 80027c4:	041b      	lsls	r3, r3, #16
 80027c6:	431f      	orrs	r7, r3
 80027c8:	46bc      	mov	ip, r7
 80027ca:	2e38      	cmp	r6, #56	; 0x38
 80027cc:	dd00      	ble.n	80027d0 <__aeabi_dsub+0x1d4>
 80027ce:	e0eb      	b.n	80029a8 <__aeabi_dsub+0x3ac>
 80027d0:	2e1f      	cmp	r6, #31
 80027d2:	dc00      	bgt.n	80027d6 <__aeabi_dsub+0x1da>
 80027d4:	e13a      	b.n	8002a4c <__aeabi_dsub+0x450>
 80027d6:	0033      	movs	r3, r6
 80027d8:	4667      	mov	r7, ip
 80027da:	3b20      	subs	r3, #32
 80027dc:	40df      	lsrs	r7, r3
 80027de:	003b      	movs	r3, r7
 80027e0:	2e20      	cmp	r6, #32
 80027e2:	d005      	beq.n	80027f0 <__aeabi_dsub+0x1f4>
 80027e4:	2740      	movs	r7, #64	; 0x40
 80027e6:	1bbf      	subs	r7, r7, r6
 80027e8:	4666      	mov	r6, ip
 80027ea:	40be      	lsls	r6, r7
 80027ec:	4332      	orrs	r2, r6
 80027ee:	4690      	mov	r8, r2
 80027f0:	4646      	mov	r6, r8
 80027f2:	1e72      	subs	r2, r6, #1
 80027f4:	4196      	sbcs	r6, r2
 80027f6:	4333      	orrs	r3, r6
 80027f8:	e0da      	b.n	80029b0 <__aeabi_dsub+0x3b4>
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d100      	bne.n	8002800 <__aeabi_dsub+0x204>
 80027fe:	e214      	b.n	8002c2a <__aeabi_dsub+0x62e>
 8002800:	4663      	mov	r3, ip
 8002802:	4313      	orrs	r3, r2
 8002804:	d100      	bne.n	8002808 <__aeabi_dsub+0x20c>
 8002806:	e168      	b.n	8002ada <__aeabi_dsub+0x4de>
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	074e      	lsls	r6, r1, #29
 800280c:	08c0      	lsrs	r0, r0, #3
 800280e:	08c9      	lsrs	r1, r1, #3
 8002810:	031b      	lsls	r3, r3, #12
 8002812:	4306      	orrs	r6, r0
 8002814:	4219      	tst	r1, r3
 8002816:	d008      	beq.n	800282a <__aeabi_dsub+0x22e>
 8002818:	4660      	mov	r0, ip
 800281a:	08c0      	lsrs	r0, r0, #3
 800281c:	4218      	tst	r0, r3
 800281e:	d104      	bne.n	800282a <__aeabi_dsub+0x22e>
 8002820:	4663      	mov	r3, ip
 8002822:	0001      	movs	r1, r0
 8002824:	08d2      	lsrs	r2, r2, #3
 8002826:	075e      	lsls	r6, r3, #29
 8002828:	4316      	orrs	r6, r2
 800282a:	00f3      	lsls	r3, r6, #3
 800282c:	4699      	mov	r9, r3
 800282e:	00c9      	lsls	r1, r1, #3
 8002830:	0f72      	lsrs	r2, r6, #29
 8002832:	4d44      	ldr	r5, [pc, #272]	; (8002944 <__aeabi_dsub+0x348>)
 8002834:	4311      	orrs	r1, r2
 8002836:	464b      	mov	r3, r9
 8002838:	08de      	lsrs	r6, r3, #3
 800283a:	4b42      	ldr	r3, [pc, #264]	; (8002944 <__aeabi_dsub+0x348>)
 800283c:	074f      	lsls	r7, r1, #29
 800283e:	4337      	orrs	r7, r6
 8002840:	08ca      	lsrs	r2, r1, #3
 8002842:	429d      	cmp	r5, r3
 8002844:	d100      	bne.n	8002848 <__aeabi_dsub+0x24c>
 8002846:	e06e      	b.n	8002926 <__aeabi_dsub+0x32a>
 8002848:	0312      	lsls	r2, r2, #12
 800284a:	056d      	lsls	r5, r5, #21
 800284c:	0b12      	lsrs	r2, r2, #12
 800284e:	0d6d      	lsrs	r5, r5, #21
 8002850:	2100      	movs	r1, #0
 8002852:	0312      	lsls	r2, r2, #12
 8002854:	0b13      	lsrs	r3, r2, #12
 8002856:	0d0a      	lsrs	r2, r1, #20
 8002858:	0512      	lsls	r2, r2, #20
 800285a:	431a      	orrs	r2, r3
 800285c:	4b3b      	ldr	r3, [pc, #236]	; (800294c <__aeabi_dsub+0x350>)
 800285e:	052d      	lsls	r5, r5, #20
 8002860:	4013      	ands	r3, r2
 8002862:	432b      	orrs	r3, r5
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	07e4      	lsls	r4, r4, #31
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	4323      	orrs	r3, r4
 800286c:	0038      	movs	r0, r7
 800286e:	0019      	movs	r1, r3
 8002870:	bc3c      	pop	{r2, r3, r4, r5}
 8002872:	4690      	mov	r8, r2
 8002874:	4699      	mov	r9, r3
 8002876:	46a2      	mov	sl, r4
 8002878:	46ab      	mov	fp, r5
 800287a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800287c:	4663      	mov	r3, ip
 800287e:	4313      	orrs	r3, r2
 8002880:	d011      	beq.n	80028a6 <__aeabi_dsub+0x2aa>
 8002882:	1e73      	subs	r3, r6, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d000      	beq.n	800288a <__aeabi_dsub+0x28e>
 8002888:	e107      	b.n	8002a9a <__aeabi_dsub+0x49e>
 800288a:	1886      	adds	r6, r0, r2
 800288c:	4286      	cmp	r6, r0
 800288e:	4180      	sbcs	r0, r0
 8002890:	4461      	add	r1, ip
 8002892:	4240      	negs	r0, r0
 8002894:	1809      	adds	r1, r1, r0
 8002896:	2501      	movs	r5, #1
 8002898:	020b      	lsls	r3, r1, #8
 800289a:	d537      	bpl.n	800290c <__aeabi_dsub+0x310>
 800289c:	2502      	movs	r5, #2
 800289e:	e77b      	b.n	8002798 <__aeabi_dsub+0x19c>
 80028a0:	003e      	movs	r6, r7
 80028a2:	4661      	mov	r1, ip
 80028a4:	4691      	mov	r9, r2
 80028a6:	0035      	movs	r5, r6
 80028a8:	e7c5      	b.n	8002836 <__aeabi_dsub+0x23a>
 80028aa:	465c      	mov	r4, fp
 80028ac:	2d00      	cmp	r5, #0
 80028ae:	d000      	beq.n	80028b2 <__aeabi_dsub+0x2b6>
 80028b0:	e0e1      	b.n	8002a76 <__aeabi_dsub+0x47a>
 80028b2:	000b      	movs	r3, r1
 80028b4:	4303      	orrs	r3, r0
 80028b6:	d0f3      	beq.n	80028a0 <__aeabi_dsub+0x2a4>
 80028b8:	1c73      	adds	r3, r6, #1
 80028ba:	d100      	bne.n	80028be <__aeabi_dsub+0x2c2>
 80028bc:	e1ac      	b.n	8002c18 <__aeabi_dsub+0x61c>
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <__aeabi_dsub+0x348>)
 80028c0:	429f      	cmp	r7, r3
 80028c2:	d100      	bne.n	80028c6 <__aeabi_dsub+0x2ca>
 80028c4:	e13a      	b.n	8002b3c <__aeabi_dsub+0x540>
 80028c6:	43f3      	mvns	r3, r6
 80028c8:	2b38      	cmp	r3, #56	; 0x38
 80028ca:	dd00      	ble.n	80028ce <__aeabi_dsub+0x2d2>
 80028cc:	e16f      	b.n	8002bae <__aeabi_dsub+0x5b2>
 80028ce:	2b1f      	cmp	r3, #31
 80028d0:	dd00      	ble.n	80028d4 <__aeabi_dsub+0x2d8>
 80028d2:	e18c      	b.n	8002bee <__aeabi_dsub+0x5f2>
 80028d4:	2520      	movs	r5, #32
 80028d6:	000e      	movs	r6, r1
 80028d8:	1aed      	subs	r5, r5, r3
 80028da:	40ae      	lsls	r6, r5
 80028dc:	46b0      	mov	r8, r6
 80028de:	0006      	movs	r6, r0
 80028e0:	46aa      	mov	sl, r5
 80028e2:	40de      	lsrs	r6, r3
 80028e4:	4645      	mov	r5, r8
 80028e6:	4335      	orrs	r5, r6
 80028e8:	002e      	movs	r6, r5
 80028ea:	4655      	mov	r5, sl
 80028ec:	40d9      	lsrs	r1, r3
 80028ee:	40a8      	lsls	r0, r5
 80028f0:	4663      	mov	r3, ip
 80028f2:	1e45      	subs	r5, r0, #1
 80028f4:	41a8      	sbcs	r0, r5
 80028f6:	1a5b      	subs	r3, r3, r1
 80028f8:	469c      	mov	ip, r3
 80028fa:	4330      	orrs	r0, r6
 80028fc:	1a16      	subs	r6, r2, r0
 80028fe:	42b2      	cmp	r2, r6
 8002900:	4192      	sbcs	r2, r2
 8002902:	4663      	mov	r3, ip
 8002904:	4252      	negs	r2, r2
 8002906:	1a99      	subs	r1, r3, r2
 8002908:	003d      	movs	r5, r7
 800290a:	e6b4      	b.n	8002676 <__aeabi_dsub+0x7a>
 800290c:	2207      	movs	r2, #7
 800290e:	4032      	ands	r2, r6
 8002910:	2a00      	cmp	r2, #0
 8002912:	d000      	beq.n	8002916 <__aeabi_dsub+0x31a>
 8002914:	e6e4      	b.n	80026e0 <__aeabi_dsub+0xe4>
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <__aeabi_dsub+0x348>)
 8002918:	08f6      	lsrs	r6, r6, #3
 800291a:	074f      	lsls	r7, r1, #29
 800291c:	4337      	orrs	r7, r6
 800291e:	08ca      	lsrs	r2, r1, #3
 8002920:	429d      	cmp	r5, r3
 8002922:	d000      	beq.n	8002926 <__aeabi_dsub+0x32a>
 8002924:	e790      	b.n	8002848 <__aeabi_dsub+0x24c>
 8002926:	003b      	movs	r3, r7
 8002928:	4313      	orrs	r3, r2
 800292a:	d100      	bne.n	800292e <__aeabi_dsub+0x332>
 800292c:	e1a6      	b.n	8002c7c <__aeabi_dsub+0x680>
 800292e:	2380      	movs	r3, #128	; 0x80
 8002930:	031b      	lsls	r3, r3, #12
 8002932:	431a      	orrs	r2, r3
 8002934:	0312      	lsls	r2, r2, #12
 8002936:	0b12      	lsrs	r2, r2, #12
 8002938:	4d02      	ldr	r5, [pc, #8]	; (8002944 <__aeabi_dsub+0x348>)
 800293a:	e789      	b.n	8002850 <__aeabi_dsub+0x254>
 800293c:	0015      	movs	r5, r2
 800293e:	2200      	movs	r2, #0
 8002940:	2700      	movs	r7, #0
 8002942:	e785      	b.n	8002850 <__aeabi_dsub+0x254>
 8002944:	000007ff 	.word	0x000007ff
 8002948:	ff7fffff 	.word	0xff7fffff
 800294c:	800fffff 	.word	0x800fffff
 8002950:	2e00      	cmp	r6, #0
 8002952:	d000      	beq.n	8002956 <__aeabi_dsub+0x35a>
 8002954:	e0c7      	b.n	8002ae6 <__aeabi_dsub+0x4ea>
 8002956:	1c6b      	adds	r3, r5, #1
 8002958:	055e      	lsls	r6, r3, #21
 800295a:	0d76      	lsrs	r6, r6, #21
 800295c:	2e01      	cmp	r6, #1
 800295e:	dc00      	bgt.n	8002962 <__aeabi_dsub+0x366>
 8002960:	e0f0      	b.n	8002b44 <__aeabi_dsub+0x548>
 8002962:	4dc8      	ldr	r5, [pc, #800]	; (8002c84 <__aeabi_dsub+0x688>)
 8002964:	42ab      	cmp	r3, r5
 8002966:	d100      	bne.n	800296a <__aeabi_dsub+0x36e>
 8002968:	e0b9      	b.n	8002ade <__aeabi_dsub+0x4e2>
 800296a:	1885      	adds	r5, r0, r2
 800296c:	000a      	movs	r2, r1
 800296e:	4285      	cmp	r5, r0
 8002970:	4189      	sbcs	r1, r1
 8002972:	4462      	add	r2, ip
 8002974:	4249      	negs	r1, r1
 8002976:	1851      	adds	r1, r2, r1
 8002978:	2207      	movs	r2, #7
 800297a:	07ce      	lsls	r6, r1, #31
 800297c:	086d      	lsrs	r5, r5, #1
 800297e:	432e      	orrs	r6, r5
 8002980:	0849      	lsrs	r1, r1, #1
 8002982:	4032      	ands	r2, r6
 8002984:	001d      	movs	r5, r3
 8002986:	e6a9      	b.n	80026dc <__aeabi_dsub+0xe0>
 8002988:	49bf      	ldr	r1, [pc, #764]	; (8002c88 <__aeabi_dsub+0x68c>)
 800298a:	1aed      	subs	r5, r5, r3
 800298c:	4011      	ands	r1, r2
 800298e:	2207      	movs	r2, #7
 8002990:	4032      	ands	r2, r6
 8002992:	e6a3      	b.n	80026dc <__aeabi_dsub+0xe0>
 8002994:	0032      	movs	r2, r6
 8002996:	3828      	subs	r0, #40	; 0x28
 8002998:	4082      	lsls	r2, r0
 800299a:	2600      	movs	r6, #0
 800299c:	e686      	b.n	80026ac <__aeabi_dsub+0xb0>
 800299e:	0030      	movs	r0, r6
 80029a0:	f000 fab6 	bl	8002f10 <__clzsi2>
 80029a4:	3020      	adds	r0, #32
 80029a6:	e673      	b.n	8002690 <__aeabi_dsub+0x94>
 80029a8:	4663      	mov	r3, ip
 80029aa:	4313      	orrs	r3, r2
 80029ac:	1e5a      	subs	r2, r3, #1
 80029ae:	4193      	sbcs	r3, r2
 80029b0:	1ac6      	subs	r6, r0, r3
 80029b2:	42b0      	cmp	r0, r6
 80029b4:	4180      	sbcs	r0, r0
 80029b6:	4240      	negs	r0, r0
 80029b8:	1a09      	subs	r1, r1, r0
 80029ba:	e65c      	b.n	8002676 <__aeabi_dsub+0x7a>
 80029bc:	000e      	movs	r6, r1
 80029be:	4667      	mov	r7, ip
 80029c0:	4306      	orrs	r6, r0
 80029c2:	4317      	orrs	r7, r2
 80029c4:	2d00      	cmp	r5, #0
 80029c6:	d15e      	bne.n	8002a86 <__aeabi_dsub+0x48a>
 80029c8:	2e00      	cmp	r6, #0
 80029ca:	d000      	beq.n	80029ce <__aeabi_dsub+0x3d2>
 80029cc:	e0f3      	b.n	8002bb6 <__aeabi_dsub+0x5ba>
 80029ce:	2f00      	cmp	r7, #0
 80029d0:	d100      	bne.n	80029d4 <__aeabi_dsub+0x3d8>
 80029d2:	e11e      	b.n	8002c12 <__aeabi_dsub+0x616>
 80029d4:	465c      	mov	r4, fp
 80029d6:	4661      	mov	r1, ip
 80029d8:	4691      	mov	r9, r2
 80029da:	e72c      	b.n	8002836 <__aeabi_dsub+0x23a>
 80029dc:	4fa9      	ldr	r7, [pc, #676]	; (8002c84 <__aeabi_dsub+0x688>)
 80029de:	42be      	cmp	r6, r7
 80029e0:	d07b      	beq.n	8002ada <__aeabi_dsub+0x4de>
 80029e2:	001e      	movs	r6, r3
 80029e4:	e6f1      	b.n	80027ca <__aeabi_dsub+0x1ce>
 80029e6:	0010      	movs	r0, r2
 80029e8:	3d1f      	subs	r5, #31
 80029ea:	40e8      	lsrs	r0, r5
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d003      	beq.n	80029f8 <__aeabi_dsub+0x3fc>
 80029f0:	2140      	movs	r1, #64	; 0x40
 80029f2:	1acb      	subs	r3, r1, r3
 80029f4:	409a      	lsls	r2, r3
 80029f6:	4316      	orrs	r6, r2
 80029f8:	1e73      	subs	r3, r6, #1
 80029fa:	419e      	sbcs	r6, r3
 80029fc:	2207      	movs	r2, #7
 80029fe:	4306      	orrs	r6, r0
 8002a00:	4032      	ands	r2, r6
 8002a02:	2100      	movs	r1, #0
 8002a04:	2500      	movs	r5, #0
 8002a06:	e783      	b.n	8002910 <__aeabi_dsub+0x314>
 8002a08:	1a16      	subs	r6, r2, r0
 8002a0a:	4663      	mov	r3, ip
 8002a0c:	42b2      	cmp	r2, r6
 8002a0e:	4180      	sbcs	r0, r0
 8002a10:	1a59      	subs	r1, r3, r1
 8002a12:	4240      	negs	r0, r0
 8002a14:	1a0b      	subs	r3, r1, r0
 8002a16:	4698      	mov	r8, r3
 8002a18:	465c      	mov	r4, fp
 8002a1a:	e632      	b.n	8002682 <__aeabi_dsub+0x86>
 8002a1c:	2e1f      	cmp	r6, #31
 8002a1e:	dd00      	ble.n	8002a22 <__aeabi_dsub+0x426>
 8002a20:	e0ab      	b.n	8002b7a <__aeabi_dsub+0x57e>
 8002a22:	2720      	movs	r7, #32
 8002a24:	1bbb      	subs	r3, r7, r6
 8002a26:	469a      	mov	sl, r3
 8002a28:	4663      	mov	r3, ip
 8002a2a:	4657      	mov	r7, sl
 8002a2c:	40bb      	lsls	r3, r7
 8002a2e:	4699      	mov	r9, r3
 8002a30:	0013      	movs	r3, r2
 8002a32:	464f      	mov	r7, r9
 8002a34:	40f3      	lsrs	r3, r6
 8002a36:	431f      	orrs	r7, r3
 8002a38:	003b      	movs	r3, r7
 8002a3a:	4657      	mov	r7, sl
 8002a3c:	40ba      	lsls	r2, r7
 8002a3e:	1e57      	subs	r7, r2, #1
 8002a40:	41ba      	sbcs	r2, r7
 8002a42:	4313      	orrs	r3, r2
 8002a44:	4662      	mov	r2, ip
 8002a46:	40f2      	lsrs	r2, r6
 8002a48:	1889      	adds	r1, r1, r2
 8002a4a:	e698      	b.n	800277e <__aeabi_dsub+0x182>
 8002a4c:	2720      	movs	r7, #32
 8002a4e:	1bbb      	subs	r3, r7, r6
 8002a50:	469a      	mov	sl, r3
 8002a52:	4663      	mov	r3, ip
 8002a54:	4657      	mov	r7, sl
 8002a56:	40bb      	lsls	r3, r7
 8002a58:	4699      	mov	r9, r3
 8002a5a:	0013      	movs	r3, r2
 8002a5c:	464f      	mov	r7, r9
 8002a5e:	40f3      	lsrs	r3, r6
 8002a60:	431f      	orrs	r7, r3
 8002a62:	003b      	movs	r3, r7
 8002a64:	4657      	mov	r7, sl
 8002a66:	40ba      	lsls	r2, r7
 8002a68:	1e57      	subs	r7, r2, #1
 8002a6a:	41ba      	sbcs	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4662      	mov	r2, ip
 8002a70:	40f2      	lsrs	r2, r6
 8002a72:	1a89      	subs	r1, r1, r2
 8002a74:	e79c      	b.n	80029b0 <__aeabi_dsub+0x3b4>
 8002a76:	4b83      	ldr	r3, [pc, #524]	; (8002c84 <__aeabi_dsub+0x688>)
 8002a78:	429f      	cmp	r7, r3
 8002a7a:	d05f      	beq.n	8002b3c <__aeabi_dsub+0x540>
 8002a7c:	2580      	movs	r5, #128	; 0x80
 8002a7e:	042d      	lsls	r5, r5, #16
 8002a80:	4273      	negs	r3, r6
 8002a82:	4329      	orrs	r1, r5
 8002a84:	e720      	b.n	80028c8 <__aeabi_dsub+0x2cc>
 8002a86:	2e00      	cmp	r6, #0
 8002a88:	d10c      	bne.n	8002aa4 <__aeabi_dsub+0x4a8>
 8002a8a:	2f00      	cmp	r7, #0
 8002a8c:	d100      	bne.n	8002a90 <__aeabi_dsub+0x494>
 8002a8e:	e0d0      	b.n	8002c32 <__aeabi_dsub+0x636>
 8002a90:	465c      	mov	r4, fp
 8002a92:	4661      	mov	r1, ip
 8002a94:	4691      	mov	r9, r2
 8002a96:	4d7b      	ldr	r5, [pc, #492]	; (8002c84 <__aeabi_dsub+0x688>)
 8002a98:	e6cd      	b.n	8002836 <__aeabi_dsub+0x23a>
 8002a9a:	4f7a      	ldr	r7, [pc, #488]	; (8002c84 <__aeabi_dsub+0x688>)
 8002a9c:	42be      	cmp	r6, r7
 8002a9e:	d01c      	beq.n	8002ada <__aeabi_dsub+0x4de>
 8002aa0:	001e      	movs	r6, r3
 8002aa2:	e665      	b.n	8002770 <__aeabi_dsub+0x174>
 8002aa4:	2f00      	cmp	r7, #0
 8002aa6:	d018      	beq.n	8002ada <__aeabi_dsub+0x4de>
 8002aa8:	08c0      	lsrs	r0, r0, #3
 8002aaa:	074e      	lsls	r6, r1, #29
 8002aac:	4306      	orrs	r6, r0
 8002aae:	2080      	movs	r0, #128	; 0x80
 8002ab0:	08c9      	lsrs	r1, r1, #3
 8002ab2:	0300      	lsls	r0, r0, #12
 8002ab4:	4201      	tst	r1, r0
 8002ab6:	d008      	beq.n	8002aca <__aeabi_dsub+0x4ce>
 8002ab8:	4663      	mov	r3, ip
 8002aba:	08dc      	lsrs	r4, r3, #3
 8002abc:	4204      	tst	r4, r0
 8002abe:	d104      	bne.n	8002aca <__aeabi_dsub+0x4ce>
 8002ac0:	0021      	movs	r1, r4
 8002ac2:	46da      	mov	sl, fp
 8002ac4:	08d2      	lsrs	r2, r2, #3
 8002ac6:	075e      	lsls	r6, r3, #29
 8002ac8:	4316      	orrs	r6, r2
 8002aca:	00f3      	lsls	r3, r6, #3
 8002acc:	4699      	mov	r9, r3
 8002ace:	2401      	movs	r4, #1
 8002ad0:	4653      	mov	r3, sl
 8002ad2:	00c9      	lsls	r1, r1, #3
 8002ad4:	0f72      	lsrs	r2, r6, #29
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	401c      	ands	r4, r3
 8002ada:	4d6a      	ldr	r5, [pc, #424]	; (8002c84 <__aeabi_dsub+0x688>)
 8002adc:	e6ab      	b.n	8002836 <__aeabi_dsub+0x23a>
 8002ade:	001d      	movs	r5, r3
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2700      	movs	r7, #0
 8002ae4:	e6b4      	b.n	8002850 <__aeabi_dsub+0x254>
 8002ae6:	2d00      	cmp	r5, #0
 8002ae8:	d159      	bne.n	8002b9e <__aeabi_dsub+0x5a2>
 8002aea:	000b      	movs	r3, r1
 8002aec:	4303      	orrs	r3, r0
 8002aee:	d100      	bne.n	8002af2 <__aeabi_dsub+0x4f6>
 8002af0:	e6d6      	b.n	80028a0 <__aeabi_dsub+0x2a4>
 8002af2:	1c73      	adds	r3, r6, #1
 8002af4:	d100      	bne.n	8002af8 <__aeabi_dsub+0x4fc>
 8002af6:	e0b2      	b.n	8002c5e <__aeabi_dsub+0x662>
 8002af8:	4b62      	ldr	r3, [pc, #392]	; (8002c84 <__aeabi_dsub+0x688>)
 8002afa:	429f      	cmp	r7, r3
 8002afc:	d01e      	beq.n	8002b3c <__aeabi_dsub+0x540>
 8002afe:	43f3      	mvns	r3, r6
 8002b00:	2b38      	cmp	r3, #56	; 0x38
 8002b02:	dc6f      	bgt.n	8002be4 <__aeabi_dsub+0x5e8>
 8002b04:	2b1f      	cmp	r3, #31
 8002b06:	dd00      	ble.n	8002b0a <__aeabi_dsub+0x50e>
 8002b08:	e097      	b.n	8002c3a <__aeabi_dsub+0x63e>
 8002b0a:	2520      	movs	r5, #32
 8002b0c:	000e      	movs	r6, r1
 8002b0e:	1aed      	subs	r5, r5, r3
 8002b10:	40ae      	lsls	r6, r5
 8002b12:	46b0      	mov	r8, r6
 8002b14:	0006      	movs	r6, r0
 8002b16:	46aa      	mov	sl, r5
 8002b18:	40de      	lsrs	r6, r3
 8002b1a:	4645      	mov	r5, r8
 8002b1c:	4335      	orrs	r5, r6
 8002b1e:	002e      	movs	r6, r5
 8002b20:	4655      	mov	r5, sl
 8002b22:	40a8      	lsls	r0, r5
 8002b24:	40d9      	lsrs	r1, r3
 8002b26:	1e45      	subs	r5, r0, #1
 8002b28:	41a8      	sbcs	r0, r5
 8002b2a:	448c      	add	ip, r1
 8002b2c:	4306      	orrs	r6, r0
 8002b2e:	18b6      	adds	r6, r6, r2
 8002b30:	4296      	cmp	r6, r2
 8002b32:	4192      	sbcs	r2, r2
 8002b34:	4251      	negs	r1, r2
 8002b36:	4461      	add	r1, ip
 8002b38:	003d      	movs	r5, r7
 8002b3a:	e625      	b.n	8002788 <__aeabi_dsub+0x18c>
 8002b3c:	003d      	movs	r5, r7
 8002b3e:	4661      	mov	r1, ip
 8002b40:	4691      	mov	r9, r2
 8002b42:	e678      	b.n	8002836 <__aeabi_dsub+0x23a>
 8002b44:	000b      	movs	r3, r1
 8002b46:	4303      	orrs	r3, r0
 8002b48:	2d00      	cmp	r5, #0
 8002b4a:	d000      	beq.n	8002b4e <__aeabi_dsub+0x552>
 8002b4c:	e655      	b.n	80027fa <__aeabi_dsub+0x1fe>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f5      	beq.n	8002b3e <__aeabi_dsub+0x542>
 8002b52:	4663      	mov	r3, ip
 8002b54:	4313      	orrs	r3, r2
 8002b56:	d100      	bne.n	8002b5a <__aeabi_dsub+0x55e>
 8002b58:	e66d      	b.n	8002836 <__aeabi_dsub+0x23a>
 8002b5a:	1886      	adds	r6, r0, r2
 8002b5c:	4286      	cmp	r6, r0
 8002b5e:	4180      	sbcs	r0, r0
 8002b60:	4461      	add	r1, ip
 8002b62:	4240      	negs	r0, r0
 8002b64:	1809      	adds	r1, r1, r0
 8002b66:	2200      	movs	r2, #0
 8002b68:	020b      	lsls	r3, r1, #8
 8002b6a:	d400      	bmi.n	8002b6e <__aeabi_dsub+0x572>
 8002b6c:	e6d0      	b.n	8002910 <__aeabi_dsub+0x314>
 8002b6e:	4b46      	ldr	r3, [pc, #280]	; (8002c88 <__aeabi_dsub+0x68c>)
 8002b70:	3501      	adds	r5, #1
 8002b72:	4019      	ands	r1, r3
 8002b74:	e5b2      	b.n	80026dc <__aeabi_dsub+0xe0>
 8002b76:	46b1      	mov	r9, r6
 8002b78:	e65d      	b.n	8002836 <__aeabi_dsub+0x23a>
 8002b7a:	0033      	movs	r3, r6
 8002b7c:	4667      	mov	r7, ip
 8002b7e:	3b20      	subs	r3, #32
 8002b80:	40df      	lsrs	r7, r3
 8002b82:	003b      	movs	r3, r7
 8002b84:	2e20      	cmp	r6, #32
 8002b86:	d005      	beq.n	8002b94 <__aeabi_dsub+0x598>
 8002b88:	2740      	movs	r7, #64	; 0x40
 8002b8a:	1bbf      	subs	r7, r7, r6
 8002b8c:	4666      	mov	r6, ip
 8002b8e:	40be      	lsls	r6, r7
 8002b90:	4332      	orrs	r2, r6
 8002b92:	4690      	mov	r8, r2
 8002b94:	4646      	mov	r6, r8
 8002b96:	1e72      	subs	r2, r6, #1
 8002b98:	4196      	sbcs	r6, r2
 8002b9a:	4333      	orrs	r3, r6
 8002b9c:	e5ef      	b.n	800277e <__aeabi_dsub+0x182>
 8002b9e:	4b39      	ldr	r3, [pc, #228]	; (8002c84 <__aeabi_dsub+0x688>)
 8002ba0:	429f      	cmp	r7, r3
 8002ba2:	d0cb      	beq.n	8002b3c <__aeabi_dsub+0x540>
 8002ba4:	2580      	movs	r5, #128	; 0x80
 8002ba6:	042d      	lsls	r5, r5, #16
 8002ba8:	4273      	negs	r3, r6
 8002baa:	4329      	orrs	r1, r5
 8002bac:	e7a8      	b.n	8002b00 <__aeabi_dsub+0x504>
 8002bae:	4308      	orrs	r0, r1
 8002bb0:	1e41      	subs	r1, r0, #1
 8002bb2:	4188      	sbcs	r0, r1
 8002bb4:	e6a2      	b.n	80028fc <__aeabi_dsub+0x300>
 8002bb6:	2f00      	cmp	r7, #0
 8002bb8:	d100      	bne.n	8002bbc <__aeabi_dsub+0x5c0>
 8002bba:	e63c      	b.n	8002836 <__aeabi_dsub+0x23a>
 8002bbc:	4663      	mov	r3, ip
 8002bbe:	1a86      	subs	r6, r0, r2
 8002bc0:	1acf      	subs	r7, r1, r3
 8002bc2:	42b0      	cmp	r0, r6
 8002bc4:	419b      	sbcs	r3, r3
 8002bc6:	425b      	negs	r3, r3
 8002bc8:	1afb      	subs	r3, r7, r3
 8002bca:	4698      	mov	r8, r3
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	d54e      	bpl.n	8002c6e <__aeabi_dsub+0x672>
 8002bd0:	1a16      	subs	r6, r2, r0
 8002bd2:	4663      	mov	r3, ip
 8002bd4:	42b2      	cmp	r2, r6
 8002bd6:	4192      	sbcs	r2, r2
 8002bd8:	1a59      	subs	r1, r3, r1
 8002bda:	4252      	negs	r2, r2
 8002bdc:	1a89      	subs	r1, r1, r2
 8002bde:	465c      	mov	r4, fp
 8002be0:	2200      	movs	r2, #0
 8002be2:	e57b      	b.n	80026dc <__aeabi_dsub+0xe0>
 8002be4:	4301      	orrs	r1, r0
 8002be6:	000e      	movs	r6, r1
 8002be8:	1e71      	subs	r1, r6, #1
 8002bea:	418e      	sbcs	r6, r1
 8002bec:	e79f      	b.n	8002b2e <__aeabi_dsub+0x532>
 8002bee:	001d      	movs	r5, r3
 8002bf0:	000e      	movs	r6, r1
 8002bf2:	3d20      	subs	r5, #32
 8002bf4:	40ee      	lsrs	r6, r5
 8002bf6:	46b0      	mov	r8, r6
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d004      	beq.n	8002c06 <__aeabi_dsub+0x60a>
 8002bfc:	2540      	movs	r5, #64	; 0x40
 8002bfe:	1aeb      	subs	r3, r5, r3
 8002c00:	4099      	lsls	r1, r3
 8002c02:	4308      	orrs	r0, r1
 8002c04:	4681      	mov	r9, r0
 8002c06:	4648      	mov	r0, r9
 8002c08:	4643      	mov	r3, r8
 8002c0a:	1e41      	subs	r1, r0, #1
 8002c0c:	4188      	sbcs	r0, r1
 8002c0e:	4318      	orrs	r0, r3
 8002c10:	e674      	b.n	80028fc <__aeabi_dsub+0x300>
 8002c12:	2200      	movs	r2, #0
 8002c14:	2400      	movs	r4, #0
 8002c16:	e617      	b.n	8002848 <__aeabi_dsub+0x24c>
 8002c18:	1a16      	subs	r6, r2, r0
 8002c1a:	4663      	mov	r3, ip
 8002c1c:	42b2      	cmp	r2, r6
 8002c1e:	4192      	sbcs	r2, r2
 8002c20:	1a59      	subs	r1, r3, r1
 8002c22:	4252      	negs	r2, r2
 8002c24:	1a89      	subs	r1, r1, r2
 8002c26:	003d      	movs	r5, r7
 8002c28:	e525      	b.n	8002676 <__aeabi_dsub+0x7a>
 8002c2a:	4661      	mov	r1, ip
 8002c2c:	4691      	mov	r9, r2
 8002c2e:	4d15      	ldr	r5, [pc, #84]	; (8002c84 <__aeabi_dsub+0x688>)
 8002c30:	e601      	b.n	8002836 <__aeabi_dsub+0x23a>
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	2400      	movs	r4, #0
 8002c36:	0312      	lsls	r2, r2, #12
 8002c38:	e679      	b.n	800292e <__aeabi_dsub+0x332>
 8002c3a:	001d      	movs	r5, r3
 8002c3c:	000e      	movs	r6, r1
 8002c3e:	3d20      	subs	r5, #32
 8002c40:	40ee      	lsrs	r6, r5
 8002c42:	46b0      	mov	r8, r6
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d004      	beq.n	8002c52 <__aeabi_dsub+0x656>
 8002c48:	2540      	movs	r5, #64	; 0x40
 8002c4a:	1aeb      	subs	r3, r5, r3
 8002c4c:	4099      	lsls	r1, r3
 8002c4e:	4308      	orrs	r0, r1
 8002c50:	4681      	mov	r9, r0
 8002c52:	464e      	mov	r6, r9
 8002c54:	4643      	mov	r3, r8
 8002c56:	1e71      	subs	r1, r6, #1
 8002c58:	418e      	sbcs	r6, r1
 8002c5a:	431e      	orrs	r6, r3
 8002c5c:	e767      	b.n	8002b2e <__aeabi_dsub+0x532>
 8002c5e:	1886      	adds	r6, r0, r2
 8002c60:	4296      	cmp	r6, r2
 8002c62:	419b      	sbcs	r3, r3
 8002c64:	4461      	add	r1, ip
 8002c66:	425b      	negs	r3, r3
 8002c68:	18c9      	adds	r1, r1, r3
 8002c6a:	003d      	movs	r5, r7
 8002c6c:	e58c      	b.n	8002788 <__aeabi_dsub+0x18c>
 8002c6e:	4647      	mov	r7, r8
 8002c70:	4337      	orrs	r7, r6
 8002c72:	d0ce      	beq.n	8002c12 <__aeabi_dsub+0x616>
 8002c74:	2207      	movs	r2, #7
 8002c76:	4641      	mov	r1, r8
 8002c78:	4032      	ands	r2, r6
 8002c7a:	e649      	b.n	8002910 <__aeabi_dsub+0x314>
 8002c7c:	2700      	movs	r7, #0
 8002c7e:	003a      	movs	r2, r7
 8002c80:	e5e6      	b.n	8002850 <__aeabi_dsub+0x254>
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	000007ff 	.word	0x000007ff
 8002c88:	ff7fffff 	.word	0xff7fffff

08002c8c <__aeabi_i2d>:
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	d02d      	beq.n	8002cee <__aeabi_i2d+0x62>
 8002c92:	17c3      	asrs	r3, r0, #31
 8002c94:	18c5      	adds	r5, r0, r3
 8002c96:	405d      	eors	r5, r3
 8002c98:	0fc4      	lsrs	r4, r0, #31
 8002c9a:	0028      	movs	r0, r5
 8002c9c:	f000 f938 	bl	8002f10 <__clzsi2>
 8002ca0:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <__aeabi_i2d+0x6c>)
 8002ca2:	1a1b      	subs	r3, r3, r0
 8002ca4:	055b      	lsls	r3, r3, #21
 8002ca6:	0d5b      	lsrs	r3, r3, #21
 8002ca8:	280a      	cmp	r0, #10
 8002caa:	dd15      	ble.n	8002cd8 <__aeabi_i2d+0x4c>
 8002cac:	380b      	subs	r0, #11
 8002cae:	4085      	lsls	r5, r0
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	032d      	lsls	r5, r5, #12
 8002cb4:	0b2d      	lsrs	r5, r5, #12
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	0010      	movs	r0, r2
 8002cba:	032d      	lsls	r5, r5, #12
 8002cbc:	0d0a      	lsrs	r2, r1, #20
 8002cbe:	0b2d      	lsrs	r5, r5, #12
 8002cc0:	0512      	lsls	r2, r2, #20
 8002cc2:	432a      	orrs	r2, r5
 8002cc4:	4d0d      	ldr	r5, [pc, #52]	; (8002cfc <__aeabi_i2d+0x70>)
 8002cc6:	051b      	lsls	r3, r3, #20
 8002cc8:	402a      	ands	r2, r5
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	07e4      	lsls	r4, r4, #31
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	4323      	orrs	r3, r4
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
 8002cd8:	0002      	movs	r2, r0
 8002cda:	0029      	movs	r1, r5
 8002cdc:	3215      	adds	r2, #21
 8002cde:	4091      	lsls	r1, r2
 8002ce0:	000a      	movs	r2, r1
 8002ce2:	210b      	movs	r1, #11
 8002ce4:	1a08      	subs	r0, r1, r0
 8002ce6:	40c5      	lsrs	r5, r0
 8002ce8:	032d      	lsls	r5, r5, #12
 8002cea:	0b2d      	lsrs	r5, r5, #12
 8002cec:	e7e3      	b.n	8002cb6 <__aeabi_i2d+0x2a>
 8002cee:	2400      	movs	r4, #0
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2500      	movs	r5, #0
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	e7de      	b.n	8002cb6 <__aeabi_i2d+0x2a>
 8002cf8:	0000041e 	.word	0x0000041e
 8002cfc:	800fffff 	.word	0x800fffff

08002d00 <__aeabi_ui2d>:
 8002d00:	b510      	push	{r4, lr}
 8002d02:	1e04      	subs	r4, r0, #0
 8002d04:	d025      	beq.n	8002d52 <__aeabi_ui2d+0x52>
 8002d06:	f000 f903 	bl	8002f10 <__clzsi2>
 8002d0a:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <__aeabi_ui2d+0x5c>)
 8002d0c:	1a1b      	subs	r3, r3, r0
 8002d0e:	055b      	lsls	r3, r3, #21
 8002d10:	0d5b      	lsrs	r3, r3, #21
 8002d12:	280a      	cmp	r0, #10
 8002d14:	dd12      	ble.n	8002d3c <__aeabi_ui2d+0x3c>
 8002d16:	380b      	subs	r0, #11
 8002d18:	4084      	lsls	r4, r0
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	0324      	lsls	r4, r4, #12
 8002d1e:	0b24      	lsrs	r4, r4, #12
 8002d20:	2100      	movs	r1, #0
 8002d22:	0010      	movs	r0, r2
 8002d24:	0324      	lsls	r4, r4, #12
 8002d26:	0d0a      	lsrs	r2, r1, #20
 8002d28:	0b24      	lsrs	r4, r4, #12
 8002d2a:	0512      	lsls	r2, r2, #20
 8002d2c:	4322      	orrs	r2, r4
 8002d2e:	4c0c      	ldr	r4, [pc, #48]	; (8002d60 <__aeabi_ui2d+0x60>)
 8002d30:	051b      	lsls	r3, r3, #20
 8002d32:	4022      	ands	r2, r4
 8002d34:	4313      	orrs	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	0859      	lsrs	r1, r3, #1
 8002d3a:	bd10      	pop	{r4, pc}
 8002d3c:	0002      	movs	r2, r0
 8002d3e:	0021      	movs	r1, r4
 8002d40:	3215      	adds	r2, #21
 8002d42:	4091      	lsls	r1, r2
 8002d44:	000a      	movs	r2, r1
 8002d46:	210b      	movs	r1, #11
 8002d48:	1a08      	subs	r0, r1, r0
 8002d4a:	40c4      	lsrs	r4, r0
 8002d4c:	0324      	lsls	r4, r4, #12
 8002d4e:	0b24      	lsrs	r4, r4, #12
 8002d50:	e7e6      	b.n	8002d20 <__aeabi_ui2d+0x20>
 8002d52:	2300      	movs	r3, #0
 8002d54:	2400      	movs	r4, #0
 8002d56:	2200      	movs	r2, #0
 8002d58:	e7e2      	b.n	8002d20 <__aeabi_ui2d+0x20>
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	0000041e 	.word	0x0000041e
 8002d60:	800fffff 	.word	0x800fffff

08002d64 <__aeabi_f2d>:
 8002d64:	0041      	lsls	r1, r0, #1
 8002d66:	0e09      	lsrs	r1, r1, #24
 8002d68:	1c4b      	adds	r3, r1, #1
 8002d6a:	b570      	push	{r4, r5, r6, lr}
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	0246      	lsls	r6, r0, #9
 8002d70:	0a75      	lsrs	r5, r6, #9
 8002d72:	0fc4      	lsrs	r4, r0, #31
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	dd14      	ble.n	8002da2 <__aeabi_f2d+0x3e>
 8002d78:	23e0      	movs	r3, #224	; 0xe0
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	076d      	lsls	r5, r5, #29
 8002d7e:	0b36      	lsrs	r6, r6, #12
 8002d80:	18cb      	adds	r3, r1, r3
 8002d82:	2100      	movs	r1, #0
 8002d84:	0d0a      	lsrs	r2, r1, #20
 8002d86:	0028      	movs	r0, r5
 8002d88:	0512      	lsls	r2, r2, #20
 8002d8a:	4d1c      	ldr	r5, [pc, #112]	; (8002dfc <__aeabi_f2d+0x98>)
 8002d8c:	4332      	orrs	r2, r6
 8002d8e:	055b      	lsls	r3, r3, #21
 8002d90:	402a      	ands	r2, r5
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	4313      	orrs	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	07e4      	lsls	r4, r4, #31
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	4323      	orrs	r3, r4
 8002d9e:	0019      	movs	r1, r3
 8002da0:	bd70      	pop	{r4, r5, r6, pc}
 8002da2:	2900      	cmp	r1, #0
 8002da4:	d114      	bne.n	8002dd0 <__aeabi_f2d+0x6c>
 8002da6:	2d00      	cmp	r5, #0
 8002da8:	d01e      	beq.n	8002de8 <__aeabi_f2d+0x84>
 8002daa:	0028      	movs	r0, r5
 8002dac:	f000 f8b0 	bl	8002f10 <__clzsi2>
 8002db0:	280a      	cmp	r0, #10
 8002db2:	dc1c      	bgt.n	8002dee <__aeabi_f2d+0x8a>
 8002db4:	230b      	movs	r3, #11
 8002db6:	002a      	movs	r2, r5
 8002db8:	1a1b      	subs	r3, r3, r0
 8002dba:	40da      	lsrs	r2, r3
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	3315      	adds	r3, #21
 8002dc0:	409d      	lsls	r5, r3
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <__aeabi_f2d+0x9c>)
 8002dc4:	0312      	lsls	r2, r2, #12
 8002dc6:	1a1b      	subs	r3, r3, r0
 8002dc8:	055b      	lsls	r3, r3, #21
 8002dca:	0b16      	lsrs	r6, r2, #12
 8002dcc:	0d5b      	lsrs	r3, r3, #21
 8002dce:	e7d8      	b.n	8002d82 <__aeabi_f2d+0x1e>
 8002dd0:	2d00      	cmp	r5, #0
 8002dd2:	d006      	beq.n	8002de2 <__aeabi_f2d+0x7e>
 8002dd4:	0b32      	lsrs	r2, r6, #12
 8002dd6:	2680      	movs	r6, #128	; 0x80
 8002dd8:	0336      	lsls	r6, r6, #12
 8002dda:	076d      	lsls	r5, r5, #29
 8002ddc:	4316      	orrs	r6, r2
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <__aeabi_f2d+0xa0>)
 8002de0:	e7cf      	b.n	8002d82 <__aeabi_f2d+0x1e>
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <__aeabi_f2d+0xa0>)
 8002de4:	2600      	movs	r6, #0
 8002de6:	e7cc      	b.n	8002d82 <__aeabi_f2d+0x1e>
 8002de8:	2300      	movs	r3, #0
 8002dea:	2600      	movs	r6, #0
 8002dec:	e7c9      	b.n	8002d82 <__aeabi_f2d+0x1e>
 8002dee:	0003      	movs	r3, r0
 8002df0:	002a      	movs	r2, r5
 8002df2:	3b0b      	subs	r3, #11
 8002df4:	409a      	lsls	r2, r3
 8002df6:	2500      	movs	r5, #0
 8002df8:	e7e3      	b.n	8002dc2 <__aeabi_f2d+0x5e>
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	800fffff 	.word	0x800fffff
 8002e00:	00000389 	.word	0x00000389
 8002e04:	000007ff 	.word	0x000007ff

08002e08 <__aeabi_d2f>:
 8002e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e0a:	004c      	lsls	r4, r1, #1
 8002e0c:	0d64      	lsrs	r4, r4, #21
 8002e0e:	030b      	lsls	r3, r1, #12
 8002e10:	1c62      	adds	r2, r4, #1
 8002e12:	0a5b      	lsrs	r3, r3, #9
 8002e14:	0f46      	lsrs	r6, r0, #29
 8002e16:	0552      	lsls	r2, r2, #21
 8002e18:	0fc9      	lsrs	r1, r1, #31
 8002e1a:	431e      	orrs	r6, r3
 8002e1c:	00c5      	lsls	r5, r0, #3
 8002e1e:	0d52      	lsrs	r2, r2, #21
 8002e20:	2a01      	cmp	r2, #1
 8002e22:	dd29      	ble.n	8002e78 <__aeabi_d2f+0x70>
 8002e24:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <__aeabi_d2f+0xfc>)
 8002e26:	18e7      	adds	r7, r4, r3
 8002e28:	2ffe      	cmp	r7, #254	; 0xfe
 8002e2a:	dc1c      	bgt.n	8002e66 <__aeabi_d2f+0x5e>
 8002e2c:	2f00      	cmp	r7, #0
 8002e2e:	dd3b      	ble.n	8002ea8 <__aeabi_d2f+0xa0>
 8002e30:	0180      	lsls	r0, r0, #6
 8002e32:	1e43      	subs	r3, r0, #1
 8002e34:	4198      	sbcs	r0, r3
 8002e36:	2207      	movs	r2, #7
 8002e38:	00f3      	lsls	r3, r6, #3
 8002e3a:	0f6d      	lsrs	r5, r5, #29
 8002e3c:	4303      	orrs	r3, r0
 8002e3e:	432b      	orrs	r3, r5
 8002e40:	401a      	ands	r2, r3
 8002e42:	2a00      	cmp	r2, #0
 8002e44:	d004      	beq.n	8002e50 <__aeabi_d2f+0x48>
 8002e46:	220f      	movs	r2, #15
 8002e48:	401a      	ands	r2, r3
 8002e4a:	2a04      	cmp	r2, #4
 8002e4c:	d000      	beq.n	8002e50 <__aeabi_d2f+0x48>
 8002e4e:	3304      	adds	r3, #4
 8002e50:	2280      	movs	r2, #128	; 0x80
 8002e52:	04d2      	lsls	r2, r2, #19
 8002e54:	401a      	ands	r2, r3
 8002e56:	d024      	beq.n	8002ea2 <__aeabi_d2f+0x9a>
 8002e58:	3701      	adds	r7, #1
 8002e5a:	b2fa      	uxtb	r2, r7
 8002e5c:	2fff      	cmp	r7, #255	; 0xff
 8002e5e:	d002      	beq.n	8002e66 <__aeabi_d2f+0x5e>
 8002e60:	019b      	lsls	r3, r3, #6
 8002e62:	0a58      	lsrs	r0, r3, #9
 8002e64:	e001      	b.n	8002e6a <__aeabi_d2f+0x62>
 8002e66:	22ff      	movs	r2, #255	; 0xff
 8002e68:	2000      	movs	r0, #0
 8002e6a:	0240      	lsls	r0, r0, #9
 8002e6c:	05d2      	lsls	r2, r2, #23
 8002e6e:	0a40      	lsrs	r0, r0, #9
 8002e70:	07c9      	lsls	r1, r1, #31
 8002e72:	4310      	orrs	r0, r2
 8002e74:	4308      	orrs	r0, r1
 8002e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e78:	4335      	orrs	r5, r6
 8002e7a:	2c00      	cmp	r4, #0
 8002e7c:	d104      	bne.n	8002e88 <__aeabi_d2f+0x80>
 8002e7e:	2d00      	cmp	r5, #0
 8002e80:	d10a      	bne.n	8002e98 <__aeabi_d2f+0x90>
 8002e82:	2200      	movs	r2, #0
 8002e84:	2000      	movs	r0, #0
 8002e86:	e7f0      	b.n	8002e6a <__aeabi_d2f+0x62>
 8002e88:	2d00      	cmp	r5, #0
 8002e8a:	d0ec      	beq.n	8002e66 <__aeabi_d2f+0x5e>
 8002e8c:	2080      	movs	r0, #128	; 0x80
 8002e8e:	03c0      	lsls	r0, r0, #15
 8002e90:	4330      	orrs	r0, r6
 8002e92:	22ff      	movs	r2, #255	; 0xff
 8002e94:	e7e9      	b.n	8002e6a <__aeabi_d2f+0x62>
 8002e96:	2400      	movs	r4, #0
 8002e98:	2300      	movs	r3, #0
 8002e9a:	025b      	lsls	r3, r3, #9
 8002e9c:	0a58      	lsrs	r0, r3, #9
 8002e9e:	b2e2      	uxtb	r2, r4
 8002ea0:	e7e3      	b.n	8002e6a <__aeabi_d2f+0x62>
 8002ea2:	08db      	lsrs	r3, r3, #3
 8002ea4:	003c      	movs	r4, r7
 8002ea6:	e7f8      	b.n	8002e9a <__aeabi_d2f+0x92>
 8002ea8:	003b      	movs	r3, r7
 8002eaa:	3317      	adds	r3, #23
 8002eac:	dbf3      	blt.n	8002e96 <__aeabi_d2f+0x8e>
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	041b      	lsls	r3, r3, #16
 8002eb2:	4333      	orrs	r3, r6
 8002eb4:	261e      	movs	r6, #30
 8002eb6:	1bf6      	subs	r6, r6, r7
 8002eb8:	2e1f      	cmp	r6, #31
 8002eba:	dd14      	ble.n	8002ee6 <__aeabi_d2f+0xde>
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	4252      	negs	r2, r2
 8002ec0:	1bd7      	subs	r7, r2, r7
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	40fa      	lsrs	r2, r7
 8002ec6:	0017      	movs	r7, r2
 8002ec8:	2e20      	cmp	r6, #32
 8002eca:	d004      	beq.n	8002ed6 <__aeabi_d2f+0xce>
 8002ecc:	4a0e      	ldr	r2, [pc, #56]	; (8002f08 <__aeabi_d2f+0x100>)
 8002ece:	4694      	mov	ip, r2
 8002ed0:	4464      	add	r4, ip
 8002ed2:	40a3      	lsls	r3, r4
 8002ed4:	431d      	orrs	r5, r3
 8002ed6:	002b      	movs	r3, r5
 8002ed8:	1e5d      	subs	r5, r3, #1
 8002eda:	41ab      	sbcs	r3, r5
 8002edc:	2207      	movs	r2, #7
 8002ede:	433b      	orrs	r3, r7
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	2700      	movs	r7, #0
 8002ee4:	e7ad      	b.n	8002e42 <__aeabi_d2f+0x3a>
 8002ee6:	4a09      	ldr	r2, [pc, #36]	; (8002f0c <__aeabi_d2f+0x104>)
 8002ee8:	0028      	movs	r0, r5
 8002eea:	18a2      	adds	r2, r4, r2
 8002eec:	4095      	lsls	r5, r2
 8002eee:	4093      	lsls	r3, r2
 8002ef0:	1e6c      	subs	r4, r5, #1
 8002ef2:	41a5      	sbcs	r5, r4
 8002ef4:	40f0      	lsrs	r0, r6
 8002ef6:	2207      	movs	r2, #7
 8002ef8:	432b      	orrs	r3, r5
 8002efa:	4303      	orrs	r3, r0
 8002efc:	401a      	ands	r2, r3
 8002efe:	2700      	movs	r7, #0
 8002f00:	e79f      	b.n	8002e42 <__aeabi_d2f+0x3a>
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	fffffc80 	.word	0xfffffc80
 8002f08:	fffffca2 	.word	0xfffffca2
 8002f0c:	fffffc82 	.word	0xfffffc82

08002f10 <__clzsi2>:
 8002f10:	211c      	movs	r1, #28
 8002f12:	2301      	movs	r3, #1
 8002f14:	041b      	lsls	r3, r3, #16
 8002f16:	4298      	cmp	r0, r3
 8002f18:	d301      	bcc.n	8002f1e <__clzsi2+0xe>
 8002f1a:	0c00      	lsrs	r0, r0, #16
 8002f1c:	3910      	subs	r1, #16
 8002f1e:	0a1b      	lsrs	r3, r3, #8
 8002f20:	4298      	cmp	r0, r3
 8002f22:	d301      	bcc.n	8002f28 <__clzsi2+0x18>
 8002f24:	0a00      	lsrs	r0, r0, #8
 8002f26:	3908      	subs	r1, #8
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	4298      	cmp	r0, r3
 8002f2c:	d301      	bcc.n	8002f32 <__clzsi2+0x22>
 8002f2e:	0900      	lsrs	r0, r0, #4
 8002f30:	3904      	subs	r1, #4
 8002f32:	a202      	add	r2, pc, #8	; (adr r2, 8002f3c <__clzsi2+0x2c>)
 8002f34:	5c10      	ldrb	r0, [r2, r0]
 8002f36:	1840      	adds	r0, r0, r1
 8002f38:	4770      	bx	lr
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	02020304 	.word	0x02020304
 8002f40:	01010101 	.word	0x01010101
	...

08002f4c <__clzdi2>:
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	2900      	cmp	r1, #0
 8002f50:	d103      	bne.n	8002f5a <__clzdi2+0xe>
 8002f52:	f7ff ffdd 	bl	8002f10 <__clzsi2>
 8002f56:	3020      	adds	r0, #32
 8002f58:	e002      	b.n	8002f60 <__clzdi2+0x14>
 8002f5a:	1c08      	adds	r0, r1, #0
 8002f5c:	f7ff ffd8 	bl	8002f10 <__clzsi2>
 8002f60:	bd10      	pop	{r4, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)

08002f64 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002f64:	21fa      	movs	r1, #250	; 0xfa
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_InitTick+0x2c>)
{
 8002f68:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002f6a:	0089      	lsls	r1, r1, #2
{
 8002f6c:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	f7fd f8e6 	bl	8000140 <__udivsi3>
 8002f74:	f000 f874 	bl	8003060 <HAL_SYSTICK_Config>
 8002f78:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8002f7a:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002f7c:	2c00      	cmp	r4, #0
 8002f7e:	d105      	bne.n	8002f8c <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002f80:	3802      	subs	r0, #2
 8002f82:	0022      	movs	r2, r4
 8002f84:	0029      	movs	r1, r5
 8002f86:	f000 f837 	bl	8002ff8 <HAL_NVIC_SetPriority>
 8002f8a:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8002f8c:	bd70      	pop	{r4, r5, r6, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	20000000 	.word	0x20000000

08002f94 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f94:	2340      	movs	r3, #64	; 0x40
 8002f96:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <HAL_Init+0x24>)
{
 8002f98:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f9a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f9c:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fa2:	f7ff ffdf 	bl	8002f64 <HAL_InitTick>
 8002fa6:	1e04      	subs	r4, r0, #0
 8002fa8:	d103      	bne.n	8002fb2 <HAL_Init+0x1e>
    HAL_MspInit();
 8002faa:	f000 f95f 	bl	800326c <HAL_MspInit>
}
 8002fae:	0020      	movs	r0, r4
 8002fb0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002fb2:	2401      	movs	r4, #1
 8002fb4:	e7fb      	b.n	8002fae <HAL_Init+0x1a>
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	40022000 	.word	0x40022000

08002fbc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002fbc:	4a02      	ldr	r2, [pc, #8]	; (8002fc8 <HAL_IncTick+0xc>)
 8002fbe:	6813      	ldr	r3, [r2, #0]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	6013      	str	r3, [r2, #0]
}
 8002fc4:	4770      	bx	lr
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	20001018 	.word	0x20001018

08002fcc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002fcc:	4b01      	ldr	r3, [pc, #4]	; (8002fd4 <HAL_GetTick+0x8>)
 8002fce:	6818      	ldr	r0, [r3, #0]
}
 8002fd0:	4770      	bx	lr
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	20001018 	.word	0x20001018

08002fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002fdc:	f7ff fff6 	bl	8002fcc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8002fe0:	1c63      	adds	r3, r4, #1
 8002fe2:	1e5a      	subs	r2, r3, #1
 8002fe4:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 8002fe6:	0005      	movs	r5, r0
    wait++;
 8002fe8:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fea:	f7ff ffef 	bl	8002fcc <HAL_GetTick>
 8002fee:	1b40      	subs	r0, r0, r5
 8002ff0:	42a0      	cmp	r0, r4
 8002ff2:	d3fa      	bcc.n	8002fea <HAL_Delay+0x12>
  {
  }
}
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ff8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ff8:	b530      	push	{r4, r5, lr}
 8002ffa:	25ff      	movs	r5, #255	; 0xff
 8002ffc:	2403      	movs	r4, #3
 8002ffe:	002a      	movs	r2, r5
 8003000:	b2c3      	uxtb	r3, r0
 8003002:	401c      	ands	r4, r3
 8003004:	00e4      	lsls	r4, r4, #3
 8003006:	40a2      	lsls	r2, r4
 8003008:	0189      	lsls	r1, r1, #6
 800300a:	4029      	ands	r1, r5
 800300c:	43d2      	mvns	r2, r2
 800300e:	40a1      	lsls	r1, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8003010:	2800      	cmp	r0, #0
 8003012:	da0b      	bge.n	800302c <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003014:	200f      	movs	r0, #15
 8003016:	4003      	ands	r3, r0
 8003018:	3b08      	subs	r3, #8
 800301a:	480a      	ldr	r0, [pc, #40]	; (8003044 <HAL_NVIC_SetPriority+0x4c>)
 800301c:	089b      	lsrs	r3, r3, #2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	181b      	adds	r3, r3, r0
 8003022:	69d8      	ldr	r0, [r3, #28]
 8003024:	4002      	ands	r2, r0
 8003026:	4311      	orrs	r1, r2
 8003028:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800302a:	bd30      	pop	{r4, r5, pc}
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_NVIC_SetPriority+0x50>)
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800302e:	0880      	lsrs	r0, r0, #2
 8003030:	0080      	lsls	r0, r0, #2
 8003032:	18c0      	adds	r0, r0, r3
 8003034:	23c0      	movs	r3, #192	; 0xc0
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	58c4      	ldr	r4, [r0, r3]
 800303a:	4022      	ands	r2, r4
 800303c:	4311      	orrs	r1, r2
 800303e:	50c1      	str	r1, [r0, r3]
 8003040:	e7f3      	b.n	800302a <HAL_NVIC_SetPriority+0x32>
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	e000ed00 	.word	0xe000ed00
 8003048:	e000e100 	.word	0xe000e100

0800304c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800304c:	231f      	movs	r3, #31
 800304e:	4018      	ands	r0, r3
 8003050:	3b1e      	subs	r3, #30
 8003052:	4083      	lsls	r3, r0
 8003054:	4a01      	ldr	r2, [pc, #4]	; (800305c <HAL_NVIC_EnableIRQ+0x10>)
 8003056:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003058:	4770      	bx	lr
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	e000e100 	.word	0xe000e100

08003060 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003060:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_SYSTICK_Config+0x28>)
 8003062:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8003064:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003066:	4293      	cmp	r3, r2
 8003068:	d80d      	bhi.n	8003086 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800306a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800306c:	4a07      	ldr	r2, [pc, #28]	; (800308c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800306e:	4808      	ldr	r0, [pc, #32]	; (8003090 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003070:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003072:	6a03      	ldr	r3, [r0, #32]
 8003074:	0609      	lsls	r1, r1, #24
 8003076:	021b      	lsls	r3, r3, #8
 8003078:	0a1b      	lsrs	r3, r3, #8
 800307a:	430b      	orrs	r3, r1
 800307c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800307e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003080:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003082:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003084:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003086:	4770      	bx	lr
 8003088:	00ffffff 	.word	0x00ffffff
 800308c:	e000e010 	.word	0xe000e010
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	4a27      	ldr	r2, [pc, #156]	; (8003134 <FLASH_SetErrorCode+0xa0>)
 8003098:	0049      	lsls	r1, r1, #1
 800309a:	6990      	ldr	r0, [r2, #24]
{
 800309c:	b530      	push	{r4, r5, lr}
  uint32_t flags = 0;
 800309e:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80030a0:	4208      	tst	r0, r1
 80030a2:	d005      	beq.n	80030b0 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80030a4:	4824      	ldr	r0, [pc, #144]	; (8003138 <FLASH_SetErrorCode+0xa4>)
 80030a6:	3302      	adds	r3, #2
 80030a8:	6944      	ldr	r4, [r0, #20]
 80030aa:	4323      	orrs	r3, r4
 80030ac:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 80030ae:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80030b0:	2080      	movs	r0, #128	; 0x80
 80030b2:	6991      	ldr	r1, [r2, #24]
 80030b4:	0080      	lsls	r0, r0, #2
 80030b6:	4201      	tst	r1, r0
 80030b8:	d005      	beq.n	80030c6 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80030ba:	2101      	movs	r1, #1
 80030bc:	4c1e      	ldr	r4, [pc, #120]	; (8003138 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_PGAERR;
 80030be:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80030c0:	6965      	ldr	r5, [r4, #20]
 80030c2:	4329      	orrs	r1, r5
 80030c4:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80030c6:	2080      	movs	r0, #128	; 0x80
 80030c8:	6991      	ldr	r1, [r2, #24]
 80030ca:	00c0      	lsls	r0, r0, #3
 80030cc:	4201      	tst	r1, r0
 80030ce:	d005      	beq.n	80030dc <FLASH_SetErrorCode+0x48>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80030d0:	2108      	movs	r1, #8
 80030d2:	4c19      	ldr	r4, [pc, #100]	; (8003138 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_SIZERR;
 80030d4:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80030d6:	6965      	ldr	r5, [r4, #20]
 80030d8:	4329      	orrs	r1, r5
 80030da:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80030dc:	2080      	movs	r0, #128	; 0x80
 80030de:	6991      	ldr	r1, [r2, #24]
 80030e0:	0100      	lsls	r0, r0, #4
 80030e2:	4201      	tst	r1, r0
 80030e4:	d005      	beq.n	80030f2 <FLASH_SetErrorCode+0x5e>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80030e6:	2104      	movs	r1, #4
 80030e8:	4c13      	ldr	r4, [pc, #76]	; (8003138 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_OPTVERR;
 80030ea:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80030ec:	6965      	ldr	r5, [r4, #20]
 80030ee:	4329      	orrs	r1, r5
 80030f0:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80030f2:	2080      	movs	r0, #128	; 0x80
 80030f4:	6991      	ldr	r1, [r2, #24]
 80030f6:	0180      	lsls	r0, r0, #6
 80030f8:	4201      	tst	r1, r0
 80030fa:	d005      	beq.n	8003108 <FLASH_SetErrorCode+0x74>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80030fc:	2110      	movs	r1, #16
 80030fe:	4c0e      	ldr	r4, [pc, #56]	; (8003138 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_RDERR;
 8003100:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003102:	6965      	ldr	r5, [r4, #20]
 8003104:	4329      	orrs	r1, r5
 8003106:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8003108:	6991      	ldr	r1, [r2, #24]
 800310a:	0389      	lsls	r1, r1, #14
 800310c:	d505      	bpl.n	800311a <FLASH_SetErrorCode+0x86>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800310e:	2020      	movs	r0, #32
 8003110:	4c09      	ldr	r4, [pc, #36]	; (8003138 <FLASH_SetErrorCode+0xa4>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 8003112:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8003114:	6961      	ldr	r1, [r4, #20]
 8003116:	4301      	orrs	r1, r0
 8003118:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800311a:	2080      	movs	r0, #128	; 0x80
 800311c:	6991      	ldr	r1, [r2, #24]
 800311e:	0240      	lsls	r0, r0, #9
 8003120:	4201      	tst	r1, r0
 8003122:	d005      	beq.n	8003130 <FLASH_SetErrorCode+0x9c>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8003124:	2140      	movs	r1, #64	; 0x40
 8003126:	4c04      	ldr	r4, [pc, #16]	; (8003138 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_NOTZEROERR;
 8003128:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800312a:	6965      	ldr	r5, [r4, #20]
 800312c:	4329      	orrs	r1, r5
 800312e:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003130:	6193      	str	r3, [r2, #24]
}  
 8003132:	bd30      	pop	{r4, r5, pc}
 8003134:	40022000 	.word	0x40022000
 8003138:	2000101c 	.word	0x2000101c

0800313c <FLASH_WaitForLastOperation>:
{
 800313c:	b570      	push	{r4, r5, r6, lr}
 800313e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7ff ff44 	bl	8002fcc <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003144:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 8003146:	0006      	movs	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003148:	4a18      	ldr	r2, [pc, #96]	; (80031ac <FLASH_WaitForLastOperation+0x70>)
 800314a:	0013      	movs	r3, r2
 800314c:	6991      	ldr	r1, [r2, #24]
 800314e:	4229      	tst	r1, r5
 8003150:	d11f      	bne.n	8003192 <FLASH_WaitForLastOperation+0x56>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003152:	2102      	movs	r1, #2
 8003154:	6990      	ldr	r0, [r2, #24]
 8003156:	4208      	tst	r0, r1
 8003158:	d000      	beq.n	800315c <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800315a:	6191      	str	r1, [r2, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	05d2      	lsls	r2, r2, #23
 8003160:	d413      	bmi.n	800318a <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003162:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003164:	0592      	lsls	r2, r2, #22
 8003166:	d410      	bmi.n	800318a <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003168:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800316a:	0552      	lsls	r2, r2, #21
 800316c:	d40d      	bmi.n	800318a <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800316e:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003170:	0512      	lsls	r2, r2, #20
 8003172:	d40a      	bmi.n	800318a <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003174:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8003176:	0492      	lsls	r2, r2, #18
 8003178:	d407      	bmi.n	800318a <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800317a:	2280      	movs	r2, #128	; 0x80
 800317c:	6998      	ldr	r0, [r3, #24]
 800317e:	0292      	lsls	r2, r2, #10
 8003180:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8003182:	d102      	bne.n	800318a <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8003184:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8003186:	03db      	lsls	r3, r3, #15
 8003188:	d508      	bpl.n	800319c <FLASH_WaitForLastOperation+0x60>
    FLASH_SetErrorCode();
 800318a:	f7ff ff83 	bl	8003094 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800318e:	2001      	movs	r0, #1
 8003190:	e004      	b.n	800319c <FLASH_WaitForLastOperation+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8003192:	1c61      	adds	r1, r4, #1
 8003194:	d0da      	beq.n	800314c <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003196:	2c00      	cmp	r4, #0
 8003198:	d101      	bne.n	800319e <FLASH_WaitForLastOperation+0x62>
        return HAL_TIMEOUT;
 800319a:	2003      	movs	r0, #3
}
 800319c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800319e:	f7ff ff15 	bl	8002fcc <HAL_GetTick>
 80031a2:	1b80      	subs	r0, r0, r6
 80031a4:	42a0      	cmp	r0, r4
 80031a6:	d9cf      	bls.n	8003148 <FLASH_WaitForLastOperation+0xc>
 80031a8:	e7f7      	b.n	800319a <FLASH_WaitForLastOperation+0x5e>
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	40022000 	.word	0x40022000

080031b0 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80031b0:	2201      	movs	r2, #1
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 80031b4:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	4211      	tst	r1, r2
 80031ba:	d00a      	beq.n	80031d2 <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031bc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80031c0:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 80031c2:	4805      	ldr	r0, [pc, #20]	; (80031d8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 80031c4:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80031c6:	4805      	ldr	r0, [pc, #20]	; (80031dc <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80031c8:	60d8      	str	r0, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ca:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80031ce:	6858      	ldr	r0, [r3, #4]
      return HAL_ERROR;
 80031d0:	4010      	ands	r0, r2
}
 80031d2:	4770      	bx	lr
 80031d4:	40022000 	.word	0x40022000
 80031d8:	89abcdef 	.word	0x89abcdef
 80031dc:	02030405 	.word	0x02030405

080031e0 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80031e0:	2301      	movs	r3, #1
 80031e2:	4a03      	ldr	r2, [pc, #12]	; (80031f0 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 80031e4:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80031e6:	6851      	ldr	r1, [r2, #4]
 80031e8:	430b      	orrs	r3, r1
 80031ea:	6053      	str	r3, [r2, #4]
}
 80031ec:	4770      	bx	lr
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	40022000 	.word	0x40022000

080031f4 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 80031f4:	b510      	push	{r4, lr}
 80031f6:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031f8:	4805      	ldr	r0, [pc, #20]	; (8003210 <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 80031fa:	f7ff ff9f 	bl	800313c <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 80031fe:	2800      	cmp	r0, #0
 8003200:	d105      	bne.n	800320e <HAL_FLASHEx_DATAEEPROM_Erase+0x1a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003202:	4b04      	ldr	r3, [pc, #16]	; (8003214 <HAL_FLASHEx_DATAEEPROM_Erase+0x20>)
 8003204:	6158      	str	r0, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8003206:	6020      	str	r0, [r4, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003208:	4801      	ldr	r0, [pc, #4]	; (8003210 <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 800320a:	f7ff ff97 	bl	800313c <FLASH_WaitForLastOperation>
  }
   
  /* Return the erase status */
  return status;
}  
 800320e:	bd10      	pop	{r4, pc}
 8003210:	0000c350 	.word	0x0000c350
 8003214:	2000101c 	.word	0x2000101c

08003218 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800321a:	4d12      	ldr	r5, [pc, #72]	; (8003264 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 800321c:	0007      	movs	r7, r0
  __HAL_LOCK(&pFlash);
 800321e:	7c2b      	ldrb	r3, [r5, #16]
{
 8003220:	000e      	movs	r6, r1
 8003222:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 8003224:	2002      	movs	r0, #2
 8003226:	2b01      	cmp	r3, #1
 8003228:	d00c      	beq.n	8003244 <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 800322a:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800322c:	480e      	ldr	r0, [pc, #56]	; (8003268 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 800322e:	742b      	strb	r3, [r5, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003230:	f7ff ff84 	bl	800313c <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8003234:	2800      	cmp	r0, #0
 8003236:	d103      	bne.n	8003240 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003238:	6168      	str	r0, [r5, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800323a:	2f02      	cmp	r7, #2
 800323c:	d103      	bne.n	8003246 <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800323e:	6034      	str	r4, [r6, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003240:	2300      	movs	r3, #0
 8003242:	742b      	strb	r3, [r5, #16]

  return status;
}
 8003244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8003246:	2f01      	cmp	r7, #1
 8003248:	d102      	bne.n	8003250 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800324a:	b2a4      	uxth	r4, r4
 800324c:	8034      	strh	r4, [r6, #0]
 800324e:	e7f7      	b.n	8003240 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8003250:	2f00      	cmp	r7, #0
 8003252:	d003      	beq.n	800325c <HAL_FLASHEx_DATAEEPROM_Program+0x44>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003254:	4804      	ldr	r0, [pc, #16]	; (8003268 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 8003256:	f7ff ff71 	bl	800313c <FLASH_WaitForLastOperation>
 800325a:	e7f1      	b.n	8003240 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800325c:	b2e4      	uxtb	r4, r4
 800325e:	7034      	strb	r4, [r6, #0]
 8003260:	e7ee      	b.n	8003240 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	2000101c 	.word	0x2000101c
 8003268:	0000c350 	.word	0x0000c350

0800326c <HAL_MspInit>:
  * @retval None
  */
void HAL_MspInit(void)
{
  /* NOTE : This function is eventually modified by the user */ 
}
 800326c:	4770      	bx	lr
	...

08003270 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003272:	0004      	movs	r4, r0
 8003274:	b087      	sub	sp, #28
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8003276:	2601      	movs	r6, #1
  if (hpcd == NULL)
 8003278:	2800      	cmp	r0, #0
 800327a:	d02b      	beq.n	80032d4 <HAL_PCD_Init+0x64>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800327c:	4d31      	ldr	r5, [pc, #196]	; (8003344 <HAL_PCD_Init+0xd4>)
 800327e:	5d43      	ldrb	r3, [r0, r5]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d104      	bne.n	8003290 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003286:	228a      	movs	r2, #138	; 0x8a
 8003288:	0092      	lsls	r2, r2, #2
 800328a:	5483      	strb	r3, [r0, r2]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800328c:	f002 fec8 	bl	8006020 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003290:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003292:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003294:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_DISABLE(hpcd);
 8003296:	f001 fc63 	bl	8004b60 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800329a:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800329c:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800329e:	0018      	movs	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a0:	6861      	ldr	r1, [r4, #4]
 80032a2:	428b      	cmp	r3, r1
 80032a4:	d319      	bcc.n	80032da <HAL_PCD_Init+0x6a>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a6:	2300      	movs	r3, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032a8:	0018      	movs	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032aa:	4299      	cmp	r1, r3
 80032ac:	d826      	bhi.n	80032fc <HAL_PCD_Init+0x8c>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032ae:	0023      	movs	r3, r4
 80032b0:	466a      	mov	r2, sp
 80032b2:	3310      	adds	r3, #16
 80032b4:	cb43      	ldmia	r3!, {r0, r1, r6}
 80032b6:	c243      	stmia	r2!, {r0, r1, r6}
 80032b8:	cb03      	ldmia	r3!, {r0, r1}
 80032ba:	c203      	stmia	r2!, {r0, r1}
 80032bc:	68e3      	ldr	r3, [r4, #12]
 80032be:	6861      	ldr	r1, [r4, #4]
 80032c0:	68a2      	ldr	r2, [r4, #8]
 80032c2:	6820      	ldr	r0, [r4, #0]
 80032c4:	f001 fc56 	bl	8004b74 <USB_DevInit>
 80032c8:	2301      	movs	r3, #1
 80032ca:	1e06      	subs	r6, r0, #0
 80032cc:	d029      	beq.n	8003322 <HAL_PCD_Init+0xb2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032ce:	2202      	movs	r2, #2
    return HAL_ERROR;
 80032d0:	001e      	movs	r6, r3
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032d2:	5562      	strb	r2, [r4, r5]
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
  }

  return HAL_OK;
}
 80032d4:	0030      	movs	r0, r6
 80032d6:	b007      	add	sp, #28
 80032d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	18a2      	adds	r2, r4, r2
 80032de:	0017      	movs	r7, r2
 80032e0:	3729      	adds	r7, #41	; 0x29
 80032e2:	703e      	strb	r6, [r7, #0]
    hpcd->IN_ep[i].num = i;
 80032e4:	3f01      	subs	r7, #1
 80032e6:	703b      	strb	r3, [r7, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032e8:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032ea:	70f8      	strb	r0, [r7, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032ec:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032ee:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80032f0:	1c9a      	adds	r2, r3, #2
 80032f2:	0152      	lsls	r2, r2, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f4:	3301      	adds	r3, #1
    hpcd->IN_ep[i].xfer_len = 0U;
 80032f6:	5110      	str	r0, [r2, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e7d2      	b.n	80032a2 <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	18a2      	adds	r2, r4, r2
 8003300:	0016      	movs	r6, r2
 8003302:	362a      	adds	r6, #42	; 0x2a
 8003304:	36ff      	adds	r6, #255	; 0xff
 8003306:	7030      	strb	r0, [r6, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003308:	32fc      	adds	r2, #252	; 0xfc
    hpcd->OUT_ep[i].num = i;
 800330a:	3e01      	subs	r6, #1
 800330c:	7033      	strb	r3, [r6, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800330e:	70f0      	strb	r0, [r6, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003310:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003312:	6410      	str	r0, [r2, #64]	; 0x40
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003314:	001a      	movs	r2, r3
 8003316:	320a      	adds	r2, #10
 8003318:	0152      	lsls	r2, r2, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800331a:	3301      	adds	r3, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 800331c:	5110      	str	r0, [r2, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800331e:	b2db      	uxtb	r3, r3
 8003320:	e7c3      	b.n	80032aa <HAL_PCD_Init+0x3a>
  hpcd->USB_Address = 0U;
 8003322:	1d62      	adds	r2, r4, #5
 8003324:	77d0      	strb	r0, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 8003326:	5563      	strb	r3, [r4, r5]
  if (hpcd->Init.lpm_enable == 1U)
 8003328:	69e3      	ldr	r3, [r4, #28]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d102      	bne.n	8003334 <HAL_PCD_Init+0xc4>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800332e:	0020      	movs	r0, r4
 8003330:	f000 fb87 	bl	8003a42 <HAL_PCDEx_ActivateLPM>
  if (hpcd->Init.battery_charging_enable == 1U)
 8003334:	6a23      	ldr	r3, [r4, #32]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d1cc      	bne.n	80032d4 <HAL_PCD_Init+0x64>
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 800333a:	0020      	movs	r0, r4
 800333c:	f000 fb72 	bl	8003a24 <HAL_PCDEx_ActivateBCD>
 8003340:	e7c8      	b.n	80032d4 <HAL_PCD_Init+0x64>
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	00000229 	.word	0x00000229

08003348 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003348:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 800334a:	258a      	movs	r5, #138	; 0x8a
 800334c:	00ad      	lsls	r5, r5, #2
 800334e:	5d43      	ldrb	r3, [r0, r5]
{
 8003350:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8003352:	2002      	movs	r0, #2
 8003354:	2b01      	cmp	r3, #1
 8003356:	d009      	beq.n	800336c <HAL_PCD_Start+0x24>
 8003358:	2301      	movs	r3, #1
  (void)USB_DevConnect(hpcd->Instance);
 800335a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800335c:	5563      	strb	r3, [r4, r5]
  (void)USB_DevConnect(hpcd->Instance);
 800335e:	f001 fe52 	bl	8005006 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003362:	6820      	ldr	r0, [r4, #0]
 8003364:	f001 fbf2 	bl	8004b4c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003368:	2000      	movs	r0, #0
 800336a:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 800336c:	bd70      	pop	{r4, r5, r6, pc}

0800336e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800336e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8003370:	258a      	movs	r5, #138	; 0x8a
 8003372:	00ad      	lsls	r5, r5, #2
 8003374:	5d43      	ldrb	r3, [r0, r5]
{
 8003376:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8003378:	2002      	movs	r0, #2
 800337a:	2b01      	cmp	r3, #1
 800337c:	d008      	beq.n	8003390 <HAL_PCD_SetAddress+0x22>
 800337e:	2301      	movs	r3, #1
 8003380:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
 8003382:	1d63      	adds	r3, r4, #5
 8003384:	77d9      	strb	r1, [r3, #31]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003386:	6820      	ldr	r0, [r4, #0]
 8003388:	f001 fe36 	bl	8004ff8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800338c:	2000      	movs	r0, #0
 800338e:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 8003390:	bd70      	pop	{r4, r5, r6, pc}

08003392 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003392:	b570      	push	{r4, r5, r6, lr}
 8003394:	2607      	movs	r6, #7
 8003396:	0004      	movs	r4, r0
 8003398:	400e      	ands	r6, r1
 800339a:	0170      	lsls	r0, r6, #5
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800339c:	b249      	sxtb	r1, r1
 800339e:	1825      	adds	r5, r4, r0
 80033a0:	2900      	cmp	r1, #0
 80033a2:	da1e      	bge.n	80033e2 <HAL_PCD_EP_Open+0x50>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a4:	0001      	movs	r1, r0
    ep->is_in = 1U;
 80033a6:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a8:	3128      	adds	r1, #40	; 0x28
 80033aa:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80033ac:	3529      	adds	r5, #41	; 0x29
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 80033ae:	7028      	strb	r0, [r5, #0]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 80033b0:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80033b2:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033b4:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 80033b6:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80033b8:	2a00      	cmp	r2, #0
 80033ba:	d000      	beq.n	80033be <HAL_PCD_EP_Open+0x2c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80033bc:	81ce      	strh	r6, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d101      	bne.n	80033c6 <HAL_PCD_EP_Open+0x34>
  {
    ep->data_pid_start = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	710b      	strb	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 80033c6:	258a      	movs	r5, #138	; 0x8a
 80033c8:	00ad      	lsls	r5, r5, #2
 80033ca:	5d63      	ldrb	r3, [r4, r5]
 80033cc:	2002      	movs	r0, #2
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d006      	beq.n	80033e0 <HAL_PCD_EP_Open+0x4e>
 80033d2:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033d4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80033d6:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033d8:	f001 fbe2 	bl	8004ba0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033dc:	2000      	movs	r0, #0
 80033de:	5560      	strb	r0, [r4, r5]

  return ret;
}
 80033e0:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e2:	0001      	movs	r1, r0
 80033e4:	3129      	adds	r1, #41	; 0x29
 80033e6:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 80033e8:	352a      	adds	r5, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ea:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80033ec:	35ff      	adds	r5, #255	; 0xff
 80033ee:	2000      	movs	r0, #0
 80033f0:	e7dd      	b.n	80033ae <HAL_PCD_EP_Open+0x1c>

080033f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033f2:	b570      	push	{r4, r5, r6, lr}
 80033f4:	0004      	movs	r4, r0
 80033f6:	2007      	movs	r0, #7
 80033f8:	4008      	ands	r0, r1
 80033fa:	0143      	lsls	r3, r0, #5
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033fc:	b249      	sxtb	r1, r1
 80033fe:	18e2      	adds	r2, r4, r3
 8003400:	2900      	cmp	r1, #0
 8003402:	da13      	bge.n	800342c <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003404:	3328      	adds	r3, #40	; 0x28
 8003406:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 8003408:	2301      	movs	r3, #1
 800340a:	3229      	adds	r2, #41	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;

  __HAL_LOCK(hpcd);
 800340c:	258a      	movs	r5, #138	; 0x8a
    ep->is_in = 0U;
 800340e:	7013      	strb	r3, [r2, #0]
  __HAL_LOCK(hpcd);
 8003410:	00ad      	lsls	r5, r5, #2
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003412:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8003414:	5d63      	ldrb	r3, [r4, r5]
 8003416:	2002      	movs	r0, #2
 8003418:	2b01      	cmp	r3, #1
 800341a:	d006      	beq.n	800342a <HAL_PCD_EP_Close+0x38>
 800341c:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800341e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003420:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003422:	f001 fcf9 	bl	8004e18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003426:	2000      	movs	r0, #0
 8003428:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 800342a:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800342c:	3329      	adds	r3, #41	; 0x29
 800342e:	33ff      	adds	r3, #255	; 0xff
    ep->is_in = 0U;
 8003430:	322a      	adds	r2, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003432:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 8003434:	32ff      	adds	r2, #255	; 0xff
 8003436:	2300      	movs	r3, #0
 8003438:	e7e8      	b.n	800340c <HAL_PCD_EP_Close+0x1a>

0800343a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800343a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343c:	2407      	movs	r4, #7
 800343e:	4021      	ands	r1, r4
 8003440:	014c      	lsls	r4, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003442:	1906      	adds	r6, r0, r4
 8003444:	0037      	movs	r7, r6
 8003446:	37fc      	adds	r7, #252	; 0xfc
  ep->xfer_len = len;
 8003448:	647b      	str	r3, [r7, #68]	; 0x44
  ep->xfer_count = 0U;
  ep->is_in = 0U;
 800344a:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 800344c:	2500      	movs	r5, #0
  ep->is_in = 0U;
 800344e:	332a      	adds	r3, #42	; 0x2a
  ep->num = ep_addr & EP_ADDR_MSK;
 8003450:	3629      	adds	r6, #41	; 0x29
  ep->is_in = 0U;
 8003452:	33ff      	adds	r3, #255	; 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 8003454:	36ff      	adds	r6, #255	; 0xff
  ep->xfer_count = 0U;
 8003456:	64bd      	str	r5, [r7, #72]	; 0x48
  ep->xfer_buff = pBuf;
 8003458:	643a      	str	r2, [r7, #64]	; 0x40
  ep->is_in = 0U;
 800345a:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 800345c:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800345e:	0021      	movs	r1, r4
 8003460:	3129      	adds	r1, #41	; 0x29
 8003462:	31ff      	adds	r1, #255	; 0xff
 8003464:	1841      	adds	r1, r0, r1
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003466:	6800      	ldr	r0, [r0, #0]
 8003468:	f001 fdf0 	bl	800504c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800346c:	0028      	movs	r0, r5
 800346e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003470 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003470:	2307      	movs	r3, #7
 8003472:	4019      	ands	r1, r3
 8003474:	310a      	adds	r1, #10
 8003476:	0149      	lsls	r1, r1, #5
 8003478:	1840      	adds	r0, r0, r1
 800347a:	6840      	ldr	r0, [r0, #4]
}
 800347c:	4770      	bx	lr

0800347e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800347e:	b570      	push	{r4, r5, r6, lr}
 8003480:	2407      	movs	r4, #7
 8003482:	4021      	ands	r1, r4
 8003484:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003486:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8003488:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 800348a:	2600      	movs	r6, #0
  ep->is_in = 1U;
 800348c:	0023      	movs	r3, r4
  ep->xfer_buff = pBuf;
 800348e:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 8003490:	2201      	movs	r2, #1
  ep->xfer_count = 0U;
 8003492:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8003494:	3329      	adds	r3, #41	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8003496:	3428      	adds	r4, #40	; 0x28
  ep->is_in = 1U;
 8003498:	701a      	strb	r2, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 800349a:	7021      	strb	r1, [r4, #0]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349c:	0029      	movs	r1, r5
 800349e:	3128      	adds	r1, #40	; 0x28
 80034a0:	1841      	adds	r1, r0, r1
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034a2:	6800      	ldr	r0, [r0, #0]
 80034a4:	f001 fdd2 	bl	800504c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80034a8:	0030      	movs	r0, r6
 80034aa:	bd70      	pop	{r4, r5, r6, pc}

080034ac <HAL_PCD_IRQHandler>:
{
 80034ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034ae:	0004      	movs	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80034b0:	6800      	ldr	r0, [r0, #0]
 80034b2:	f001 fdb0 	bl	8005016 <USB_ReadInterrupts>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80034b6:	2780      	movs	r7, #128	; 0x80
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80034b8:	0403      	lsls	r3, r0, #16
 80034ba:	d500      	bpl.n	80034be <HAL_PCD_IRQHandler+0x12>
 80034bc:	e0d9      	b.n	8003672 <HAL_PCD_IRQHandler+0x1c6>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80034be:	6820      	ldr	r0, [r4, #0]
 80034c0:	f001 fda9 	bl	8005016 <USB_ReadInterrupts>
 80034c4:	0543      	lsls	r3, r0, #21
 80034c6:	d50c      	bpl.n	80034e2 <HAL_PCD_IRQHandler+0x36>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80034c8:	6823      	ldr	r3, [r4, #0]
 80034ca:	49a7      	ldr	r1, [pc, #668]	; (8003768 <HAL_PCD_IRQHandler+0x2bc>)
 80034cc:	3306      	adds	r3, #6
 80034ce:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 80034d0:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80034d2:	400a      	ands	r2, r1
 80034d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 80034d6:	f002 fde0 	bl	800609a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80034da:	2100      	movs	r1, #0
 80034dc:	0020      	movs	r0, r4
 80034de:	f7ff ff46 	bl	800336e <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80034e2:	6820      	ldr	r0, [r4, #0]
 80034e4:	f001 fd97 	bl	8005016 <USB_ReadInterrupts>
 80034e8:	0443      	lsls	r3, r0, #17
 80034ea:	d505      	bpl.n	80034f8 <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	499f      	ldr	r1, [pc, #636]	; (800376c <HAL_PCD_IRQHandler+0x2c0>)
 80034f0:	3306      	adds	r3, #6
 80034f2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80034f4:	400a      	ands	r2, r1
 80034f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80034f8:	6820      	ldr	r0, [r4, #0]
 80034fa:	f001 fd8c 	bl	8005016 <USB_ReadInterrupts>
 80034fe:	0483      	lsls	r3, r0, #18
 8003500:	d505      	bpl.n	800350e <HAL_PCD_IRQHandler+0x62>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	499a      	ldr	r1, [pc, #616]	; (8003770 <HAL_PCD_IRQHandler+0x2c4>)
 8003506:	3306      	adds	r3, #6
 8003508:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800350a:	400a      	ands	r2, r1
 800350c:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800350e:	6820      	ldr	r0, [r4, #0]
 8003510:	f001 fd81 	bl	8005016 <USB_ReadInterrupts>
 8003514:	04c3      	lsls	r3, r0, #19
 8003516:	d51c      	bpl.n	8003552 <HAL_PCD_IRQHandler+0xa6>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003518:	2104      	movs	r1, #4
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	3302      	adds	r3, #2
 800351e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003520:	438a      	bics	r2, r1
 8003522:	87da      	strh	r2, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003524:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003526:	1849      	adds	r1, r1, r1
 8003528:	438a      	bics	r2, r1
 800352a:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L1)
 800352c:	2398      	movs	r3, #152	; 0x98
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	5ce2      	ldrb	r2, [r4, r3]
 8003532:	2a01      	cmp	r2, #1
 8003534:	d104      	bne.n	8003540 <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 8003536:	2100      	movs	r1, #0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003538:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 800353a:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800353c:	f000 fa95 	bl	8003a6a <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8003540:	0020      	movs	r0, r4
 8003542:	f002 fdcd 	bl	80060e0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	498a      	ldr	r1, [pc, #552]	; (8003774 <HAL_PCD_IRQHandler+0x2c8>)
 800354a:	3306      	adds	r3, #6
 800354c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800354e:	400a      	ands	r2, r1
 8003550:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003552:	6820      	ldr	r0, [r4, #0]
 8003554:	f001 fd5f 	bl	8005016 <USB_ReadInterrupts>
 8003558:	0503      	lsls	r3, r0, #20
 800355a:	d515      	bpl.n	8003588 <HAL_PCD_IRQHandler+0xdc>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800355c:	2208      	movs	r2, #8
 800355e:	6820      	ldr	r0, [r4, #0]
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003560:	4d85      	ldr	r5, [pc, #532]	; (8003778 <HAL_PCD_IRQHandler+0x2cc>)
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003562:	1c83      	adds	r3, r0, #2
 8003564:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8003566:	430a      	orrs	r2, r1
 8003568:	87da      	strh	r2, [r3, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800356a:	1d81      	adds	r1, r0, #6
 800356c:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 800356e:	402a      	ands	r2, r5
 8003570:	87ca      	strh	r2, [r1, #62]	; 0x3e
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8003572:	2204      	movs	r2, #4
 8003574:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8003576:	430a      	orrs	r2, r1
 8003578:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 800357a:	f001 fd4c 	bl	8005016 <USB_ReadInterrupts>
 800357e:	04c3      	lsls	r3, r0, #19
 8003580:	d402      	bmi.n	8003588 <HAL_PCD_IRQHandler+0xdc>
      HAL_PCD_SuspendCallback(hpcd);
 8003582:	0020      	movs	r0, r4
 8003584:	f002 fd9a 	bl	80060bc <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003588:	6820      	ldr	r0, [r4, #0]
 800358a:	f001 fd44 	bl	8005016 <USB_ReadInterrupts>
 800358e:	2580      	movs	r5, #128	; 0x80
 8003590:	4228      	tst	r0, r5
 8003592:	d020      	beq.n	80035d6 <HAL_PCD_IRQHandler+0x12a>
    if (hpcd->LPM_State == LPM_L0)
 8003594:	2098      	movs	r0, #152	; 0x98
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003596:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 8003598:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800359a:	1d99      	adds	r1, r3, #6
 800359c:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 800359e:	43aa      	bics	r2, r5
 80035a0:	87ca      	strh	r2, [r1, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L0)
 80035a2:	5c22      	ldrb	r2, [r4, r0]
 80035a4:	2a00      	cmp	r2, #0
 80035a6:	d000      	beq.n	80035aa <HAL_PCD_IRQHandler+0xfe>
 80035a8:	e1b1      	b.n	800390e <HAL_PCD_IRQHandler+0x462>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80035aa:	2104      	movs	r1, #4
 80035ac:	1c9a      	adds	r2, r3, #2
 80035ae:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80035b0:	3354      	adds	r3, #84	; 0x54
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80035b2:	4329      	orrs	r1, r5
 80035b4:	87d1      	strh	r1, [r2, #62]	; 0x3e
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80035b6:	2108      	movs	r1, #8
 80035b8:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
 80035ba:	4329      	orrs	r1, r5
 80035bc:	87d1      	strh	r1, [r2, #62]	; 0x3e
      hpcd->LPM_State = LPM_L1;
 80035be:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80035c0:	223c      	movs	r2, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 80035c2:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80035c4:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80035c6:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80035c8:	089b      	lsrs	r3, r3, #2
 80035ca:	4013      	ands	r3, r2
 80035cc:	2299      	movs	r2, #153	; 0x99
 80035ce:	0092      	lsls	r2, r2, #2
 80035d0:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80035d2:	f000 fa4a 	bl	8003a6a <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80035d6:	6820      	ldr	r0, [r4, #0]
 80035d8:	f001 fd1d 	bl	8005016 <USB_ReadInterrupts>
 80035dc:	0583      	lsls	r3, r0, #22
 80035de:	d508      	bpl.n	80035f2 <HAL_PCD_IRQHandler+0x146>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	4966      	ldr	r1, [pc, #408]	; (800377c <HAL_PCD_IRQHandler+0x2d0>)
 80035e4:	3306      	adds	r3, #6
 80035e6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 80035e8:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80035ea:	400a      	ands	r2, r1
 80035ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 80035ee:	f002 fd4d 	bl	800608c <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80035f2:	6820      	ldr	r0, [r4, #0]
 80035f4:	f001 fd0f 	bl	8005016 <USB_ReadInterrupts>
 80035f8:	05c3      	lsls	r3, r0, #23
 80035fa:	d505      	bpl.n	8003608 <HAL_PCD_IRQHandler+0x15c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	4960      	ldr	r1, [pc, #384]	; (8003780 <HAL_PCD_IRQHandler+0x2d4>)
 8003600:	3306      	adds	r3, #6
 8003602:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003604:	400a      	ands	r2, r1
 8003606:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 8003608:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800360a:	260f      	movs	r6, #15
    wIstr = hpcd->Instance->ISTR;
 800360c:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
 800360e:	b289      	uxth	r1, r1
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003610:	400e      	ands	r6, r1
    if (epindex == 0U)
 8003612:	d000      	beq.n	8003616 <HAL_PCD_IRQHandler+0x16a>
 8003614:	e0c6      	b.n	80037a4 <HAL_PCD_IRQHandler+0x2f8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003616:	2310      	movs	r3, #16
 8003618:	4019      	ands	r1, r3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800361a:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800361c:	2900      	cmp	r1, #0
 800361e:	d12f      	bne.n	8003680 <HAL_PCD_IRQHandler+0x1d4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003620:	4a58      	ldr	r2, [pc, #352]	; (8003784 <HAL_PCD_IRQHandler+0x2d8>)
 8003622:	4013      	ands	r3, r2
 8003624:	2280      	movs	r2, #128	; 0x80
 8003626:	0212      	lsls	r2, r2, #8
 8003628:	4313      	orrs	r3, r2
 800362a:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800362c:	0003      	movs	r3, r0
 800362e:	3350      	adds	r3, #80	; 0x50
 8003630:	881a      	ldrh	r2, [r3, #0]
 8003632:	0023      	movs	r3, r4
 8003634:	3328      	adds	r3, #40	; 0x28
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	18c0      	adds	r0, r0, r3
 800363c:	4b52      	ldr	r3, [pc, #328]	; (8003788 <HAL_PCD_IRQHandler+0x2dc>)
 800363e:	1880      	adds	r0, r0, r2
 8003640:	18c0      	adds	r0, r0, r3
 8003642:	8803      	ldrh	r3, [r0, #0]
        ep->xfer_buff += ep->xfer_count;
 8003644:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003646:	059b      	lsls	r3, r3, #22
 8003648:	0d9b      	lsrs	r3, r3, #22
 800364a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800364c:	18d3      	adds	r3, r2, r3
 800364e:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003650:	0020      	movs	r0, r4
 8003652:	f002 fd11 	bl	8006078 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003656:	1d63      	adds	r3, r4, #5
 8003658:	7fda      	ldrb	r2, [r3, #31]
 800365a:	2a00      	cmp	r2, #0
 800365c:	d009      	beq.n	8003672 <HAL_PCD_IRQHandler+0x1c6>
 800365e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003660:	2800      	cmp	r0, #0
 8003662:	d106      	bne.n	8003672 <HAL_PCD_IRQHandler+0x1c6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	7fd9      	ldrb	r1, [r3, #31]
 8003668:	4311      	orrs	r1, r2
 800366a:	6822      	ldr	r2, [r4, #0]
 800366c:	324c      	adds	r2, #76	; 0x4c
 800366e:	8011      	strh	r1, [r2, #0]
          hpcd->USB_Address = 0U;
 8003670:	77d8      	strb	r0, [r3, #31]
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003672:	6820      	ldr	r0, [r4, #0]
 8003674:	1d82      	adds	r2, r0, #6
 8003676:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8003678:	b21b      	sxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	dbc5      	blt.n	800360a <HAL_PCD_IRQHandler+0x15e>
 800367e:	e71e      	b.n	80034be <HAL_PCD_IRQHandler+0x12>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003680:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003682:	051a      	lsls	r2, r3, #20
 8003684:	d521      	bpl.n	80036ca <HAL_PCD_IRQHandler+0x21e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003686:	0003      	movs	r3, r0
 8003688:	3350      	adds	r3, #80	; 0x50
 800368a:	881a      	ldrh	r2, [r3, #0]
 800368c:	2394      	movs	r3, #148	; 0x94
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	5ce3      	ldrb	r3, [r4, r3]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8003692:	218c      	movs	r1, #140	; 0x8c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	18c3      	adds	r3, r0, r3
 8003698:	189b      	adds	r3, r3, r2
 800369a:	4a3c      	ldr	r2, [pc, #240]	; (800378c <HAL_PCD_IRQHandler+0x2e0>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 800369c:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800369e:	189b      	adds	r3, r3, r2
 80036a0:	0022      	movs	r2, r4
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	3229      	adds	r2, #41	; 0x29
 80036a6:	059b      	lsls	r3, r3, #22
 80036a8:	0d9b      	lsrs	r3, r3, #22
 80036aa:	32ff      	adds	r2, #255	; 0xff
 80036ac:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 80036ae:	1861      	adds	r1, r4, r1
 80036b0:	88d2      	ldrh	r2, [r2, #6]
 80036b2:	f001 fda9 	bl	8005208 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036b6:	6822      	ldr	r2, [r4, #0]
 80036b8:	4935      	ldr	r1, [pc, #212]	; (8003790 <HAL_PCD_IRQHandler+0x2e4>)
 80036ba:	8813      	ldrh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80036bc:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036be:	400b      	ands	r3, r1
 80036c0:	433b      	orrs	r3, r7
 80036c2:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80036c4:	f002 fcc4 	bl	8006050 <HAL_PCD_SetupStageCallback>
 80036c8:	e7d3      	b.n	8003672 <HAL_PCD_IRQHandler+0x1c6>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036ca:	b21b      	sxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	dad0      	bge.n	8003672 <HAL_PCD_IRQHandler+0x1c6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036d0:	8803      	ldrh	r3, [r0, #0]
 80036d2:	4a2f      	ldr	r2, [pc, #188]	; (8003790 <HAL_PCD_IRQHandler+0x2e4>)
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036d4:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036d6:	4013      	ands	r3, r2
 80036d8:	433b      	orrs	r3, r7
 80036da:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036dc:	0003      	movs	r3, r0
 80036de:	3350      	adds	r3, #80	; 0x50
 80036e0:	881a      	ldrh	r2, [r3, #0]
 80036e2:	2394      	movs	r3, #148	; 0x94
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	5ce3      	ldrb	r3, [r4, r3]
 80036e8:	3529      	adds	r5, #41	; 0x29
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	18c3      	adds	r3, r0, r3
 80036ee:	189b      	adds	r3, r3, r2
 80036f0:	4a26      	ldr	r2, [pc, #152]	; (800378c <HAL_PCD_IRQHandler+0x2e0>)
 80036f2:	35ff      	adds	r5, #255	; 0xff
 80036f4:	189b      	adds	r3, r3, r2
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	059b      	lsls	r3, r3, #22
 80036fa:	0d9b      	lsrs	r3, r3, #22
 80036fc:	61eb      	str	r3, [r5, #28]
          if (ep->xfer_count != 0U)
 80036fe:	d007      	beq.n	8003710 <HAL_PCD_IRQHandler+0x264>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 8003700:	88ea      	ldrh	r2, [r5, #6]
 8003702:	6969      	ldr	r1, [r5, #20]
 8003704:	f001 fd80 	bl	8005208 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003708:	696b      	ldr	r3, [r5, #20]
 800370a:	69ea      	ldr	r2, [r5, #28]
 800370c:	189b      	adds	r3, r3, r2
 800370e:	616b      	str	r3, [r5, #20]
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003710:	2100      	movs	r1, #0
 8003712:	0020      	movs	r0, r4
 8003714:	f002 fca5 	bl	8006062 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003718:	6821      	ldr	r1, [r4, #0]
 800371a:	4a1c      	ldr	r2, [pc, #112]	; (800378c <HAL_PCD_IRQHandler+0x2e0>)
 800371c:	000b      	movs	r3, r1
 800371e:	3350      	adds	r3, #80	; 0x50
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	188a      	adds	r2, r1, r2
 8003724:	18d2      	adds	r2, r2, r3
 8003726:	692b      	ldr	r3, [r5, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d106      	bne.n	800373a <HAL_PCD_IRQHandler+0x28e>
 800372c:	8813      	ldrh	r3, [r2, #0]
 800372e:	4819      	ldr	r0, [pc, #100]	; (8003794 <HAL_PCD_IRQHandler+0x2e8>)
 8003730:	4018      	ands	r0, r3
 8003732:	4b19      	ldr	r3, [pc, #100]	; (8003798 <HAL_PCD_IRQHandler+0x2ec>)
 8003734:	4303      	orrs	r3, r0
 8003736:	8013      	strh	r3, [r2, #0]
 8003738:	e007      	b.n	800374a <HAL_PCD_IRQHandler+0x29e>
 800373a:	2b3d      	cmp	r3, #61	; 0x3d
 800373c:	d80f      	bhi.n	800375e <HAL_PCD_IRQHandler+0x2b2>
 800373e:	2501      	movs	r5, #1
 8003740:	0858      	lsrs	r0, r3, #1
 8003742:	402b      	ands	r3, r5
 8003744:	18c0      	adds	r0, r0, r3
 8003746:	0280      	lsls	r0, r0, #10
 8003748:	8010      	strh	r0, [r2, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800374a:	880b      	ldrh	r3, [r1, #0]
 800374c:	4a13      	ldr	r2, [pc, #76]	; (800379c <HAL_PCD_IRQHandler+0x2f0>)
 800374e:	401a      	ands	r2, r3
 8003750:	23c0      	movs	r3, #192	; 0xc0
 8003752:	019b      	lsls	r3, r3, #6
 8003754:	4053      	eors	r3, r2
 8003756:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <HAL_PCD_IRQHandler+0x2f4>)
 8003758:	4313      	orrs	r3, r2
 800375a:	800b      	strh	r3, [r1, #0]
 800375c:	e789      	b.n	8003672 <HAL_PCD_IRQHandler+0x1c6>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	029b      	lsls	r3, r3, #10
 8003762:	480d      	ldr	r0, [pc, #52]	; (8003798 <HAL_PCD_IRQHandler+0x2ec>)
 8003764:	e7e6      	b.n	8003734 <HAL_PCD_IRQHandler+0x288>
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	fffffbff 	.word	0xfffffbff
 800376c:	ffffbfff 	.word	0xffffbfff
 8003770:	ffffdfff 	.word	0xffffdfff
 8003774:	ffffefff 	.word	0xffffefff
 8003778:	fffff7ff 	.word	0xfffff7ff
 800377c:	fffffdff 	.word	0xfffffdff
 8003780:	fffffeff 	.word	0xfffffeff
 8003784:	ffff8f0f 	.word	0xffff8f0f
 8003788:	00000402 	.word	0x00000402
 800378c:	00000406 	.word	0x00000406
 8003790:	00000f8f 	.word	0x00000f8f
 8003794:	ffff83ff 	.word	0xffff83ff
 8003798:	ffff8000 	.word	0xffff8000
 800379c:	ffffbf8f 	.word	0xffffbf8f
 80037a0:	00008080 	.word	0x00008080
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80037a4:	00b3      	lsls	r3, r6, #2
 80037a6:	18c2      	adds	r2, r0, r3
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	8813      	ldrh	r3, [r2, #0]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	9300      	str	r3, [sp, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037b0:	466b      	mov	r3, sp
 80037b2:	2100      	movs	r1, #0
 80037b4:	5e5b      	ldrsh	r3, [r3, r1]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	da3c      	bge.n	8003834 <HAL_PCD_IRQHandler+0x388>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80037ba:	8813      	ldrh	r3, [r2, #0]
 80037bc:	4956      	ldr	r1, [pc, #344]	; (8003918 <HAL_PCD_IRQHandler+0x46c>)
 80037be:	0005      	movs	r5, r0
 80037c0:	400b      	ands	r3, r1
 80037c2:	433b      	orrs	r3, r7
 80037c4:	8013      	strh	r3, [r2, #0]
        if (ep->doublebuffer == 0U)
 80037c6:	0173      	lsls	r3, r6, #5
 80037c8:	18e3      	adds	r3, r4, r3
 80037ca:	001a      	movs	r2, r3
 80037cc:	3235      	adds	r2, #53	; 0x35
 80037ce:	32ff      	adds	r2, #255	; 0xff
 80037d0:	7811      	ldrb	r1, [r2, #0]
 80037d2:	3550      	adds	r5, #80	; 0x50
 80037d4:	3a0c      	subs	r2, #12
 80037d6:	2900      	cmp	r1, #0
 80037d8:	d156      	bne.n	8003888 <HAL_PCD_IRQHandler+0x3dc>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037da:	7812      	ldrb	r2, [r2, #0]
 80037dc:	8829      	ldrh	r1, [r5, #0]
 80037de:	00d2      	lsls	r2, r2, #3
 80037e0:	1852      	adds	r2, r2, r1
 80037e2:	494e      	ldr	r1, [pc, #312]	; (800391c <HAL_PCD_IRQHandler+0x470>)
 80037e4:	1812      	adds	r2, r2, r0
 80037e6:	1852      	adds	r2, r2, r1
 80037e8:	8815      	ldrh	r5, [r2, #0]
 80037ea:	05ad      	lsls	r5, r5, #22
 80037ec:	0dad      	lsrs	r5, r5, #22
          if (count != 0U)
 80037ee:	d008      	beq.n	8003802 <HAL_PCD_IRQHandler+0x356>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80037f0:	001a      	movs	r2, r3
 80037f2:	33fc      	adds	r3, #252	; 0xfc
 80037f4:	0019      	movs	r1, r3
 80037f6:	32fe      	adds	r2, #254	; 0xfe
 80037f8:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80037fa:	002b      	movs	r3, r5
 80037fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037fe:	f001 fd03 	bl	8005208 <USB_ReadPMA>
 8003802:	0171      	lsls	r1, r6, #5
 8003804:	1863      	adds	r3, r4, r1
        ep->xfer_count += count;
 8003806:	0018      	movs	r0, r3
 8003808:	30fc      	adds	r0, #252	; 0xfc
 800380a:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	1952      	adds	r2, r2, r5
 8003810:	6482      	str	r2, [r0, #72]	; 0x48
        ep->xfer_buff += count;
 8003812:	6c02      	ldr	r2, [r0, #64]	; 0x40
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003814:	6c43      	ldr	r3, [r0, #68]	; 0x44
        ep->xfer_buff += count;
 8003816:	1952      	adds	r2, r2, r5
 8003818:	6402      	str	r2, [r0, #64]	; 0x40
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800381a:	469c      	mov	ip, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_PCD_IRQHandler+0x37a>
 8003820:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8003822:	4285      	cmp	r5, r0
 8003824:	d267      	bcs.n	80038f6 <HAL_PCD_IRQHandler+0x44a>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003826:	1861      	adds	r1, r4, r1
 8003828:	3129      	adds	r1, #41	; 0x29
 800382a:	31ff      	adds	r1, #255	; 0xff
 800382c:	7809      	ldrb	r1, [r1, #0]
 800382e:	0020      	movs	r0, r4
 8003830:	f002 fc17 	bl	8006062 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003834:	9b00      	ldr	r3, [sp, #0]
 8003836:	423b      	tst	r3, r7
 8003838:	d100      	bne.n	800383c <HAL_PCD_IRQHandler+0x390>
 800383a:	e71a      	b.n	8003672 <HAL_PCD_IRQHandler+0x1c6>
 800383c:	6823      	ldr	r3, [r4, #0]
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800383e:	00b2      	lsls	r2, r6, #2
 8003840:	1899      	adds	r1, r3, r2
 8003842:	880a      	ldrh	r2, [r1, #0]
 8003844:	4836      	ldr	r0, [pc, #216]	; (8003920 <HAL_PCD_IRQHandler+0x474>)

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003846:	0176      	lsls	r6, r6, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003848:	4002      	ands	r2, r0
 800384a:	2080      	movs	r0, #128	; 0x80
 800384c:	0200      	lsls	r0, r0, #8
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800384e:	19a6      	adds	r6, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003850:	4302      	orrs	r2, r0
 8003852:	800a      	strh	r2, [r1, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003854:	0031      	movs	r1, r6
 8003856:	001a      	movs	r2, r3
 8003858:	3128      	adds	r1, #40	; 0x28
 800385a:	7808      	ldrb	r0, [r1, #0]
 800385c:	3250      	adds	r2, #80	; 0x50
 800385e:	8812      	ldrh	r2, [r2, #0]
 8003860:	00c0      	lsls	r0, r0, #3
 8003862:	181b      	adds	r3, r3, r0
 8003864:	189b      	adds	r3, r3, r2
 8003866:	4a2f      	ldr	r2, [pc, #188]	; (8003924 <HAL_PCD_IRQHandler+0x478>)
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003868:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800386a:	189b      	adds	r3, r3, r2
 800386c:	881a      	ldrh	r2, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 800386e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003870:	0592      	lsls	r2, r2, #22
 8003872:	0d92      	lsrs	r2, r2, #22
 8003874:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8003876:	189a      	adds	r2, r3, r2
        if (ep->xfer_len == 0U)
 8003878:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 800387a:	63f2      	str	r2, [r6, #60]	; 0x3c
 800387c:	7809      	ldrb	r1, [r1, #0]
        if (ep->xfer_len == 0U)
 800387e:	2b00      	cmp	r3, #0
 8003880:	d142      	bne.n	8003908 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003882:	f002 fbf9 	bl	8006078 <HAL_PCD_DataInStageCallback>
 8003886:	e6f4      	b.n	8003672 <HAL_PCD_IRQHandler+0x1c6>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003888:	7812      	ldrb	r2, [r2, #0]
 800388a:	0091      	lsls	r1, r2, #2
 800388c:	1841      	adds	r1, r0, r1
 800388e:	8809      	ldrh	r1, [r1, #0]
 8003890:	468c      	mov	ip, r1
 8003892:	00d1      	lsls	r1, r2, #3
 8003894:	4662      	mov	r2, ip
 8003896:	0452      	lsls	r2, r2, #17
 8003898:	d520      	bpl.n	80038dc <HAL_PCD_IRQHandler+0x430>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800389a:	882a      	ldrh	r2, [r5, #0]
 800389c:	1882      	adds	r2, r0, r2
 800389e:	1852      	adds	r2, r2, r1
 80038a0:	4920      	ldr	r1, [pc, #128]	; (8003924 <HAL_PCD_IRQHandler+0x478>)
 80038a2:	1852      	adds	r2, r2, r1
 80038a4:	8815      	ldrh	r5, [r2, #0]
 80038a6:	05ad      	lsls	r5, r5, #22
 80038a8:	0dad      	lsrs	r5, r5, #22
            if (count != 0U)
 80038aa:	d008      	beq.n	80038be <HAL_PCD_IRQHandler+0x412>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038ac:	001a      	movs	r2, r3
 80038ae:	32fe      	adds	r2, #254	; 0xfe
 80038b0:	8e52      	ldrh	r2, [r2, #50]	; 0x32
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038b2:	33fc      	adds	r3, #252	; 0xfc
 80038b4:	0019      	movs	r1, r3
 80038b6:	002b      	movs	r3, r5
 80038b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038ba:	f001 fca5 	bl	8005208 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80038be:	0173      	lsls	r3, r6, #5
 80038c0:	18e3      	adds	r3, r4, r3
 80038c2:	3329      	adds	r3, #41	; 0x29
 80038c4:	33ff      	adds	r3, #255	; 0xff
 80038c6:	781a      	ldrb	r2, [r3, #0]
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	0092      	lsls	r2, r2, #2
 80038cc:	189a      	adds	r2, r3, r2
 80038ce:	8813      	ldrh	r3, [r2, #0]
 80038d0:	4915      	ldr	r1, [pc, #84]	; (8003928 <HAL_PCD_IRQHandler+0x47c>)
 80038d2:	400b      	ands	r3, r1
 80038d4:	4915      	ldr	r1, [pc, #84]	; (800392c <HAL_PCD_IRQHandler+0x480>)
 80038d6:	430b      	orrs	r3, r1
 80038d8:	8013      	strh	r3, [r2, #0]
 80038da:	e792      	b.n	8003802 <HAL_PCD_IRQHandler+0x356>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038dc:	882a      	ldrh	r2, [r5, #0]
 80038de:	1882      	adds	r2, r0, r2
 80038e0:	1852      	adds	r2, r2, r1
 80038e2:	490e      	ldr	r1, [pc, #56]	; (800391c <HAL_PCD_IRQHandler+0x470>)
 80038e4:	1852      	adds	r2, r2, r1
 80038e6:	8815      	ldrh	r5, [r2, #0]
 80038e8:	05ad      	lsls	r5, r5, #22
 80038ea:	0dad      	lsrs	r5, r5, #22
            if (count != 0U)
 80038ec:	d0e7      	beq.n	80038be <HAL_PCD_IRQHandler+0x412>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038ee:	001a      	movs	r2, r3
 80038f0:	32fe      	adds	r2, #254	; 0xfe
 80038f2:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 80038f4:	e7dd      	b.n	80038b2 <HAL_PCD_IRQHandler+0x406>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80038f6:	9b01      	ldr	r3, [sp, #4]
 80038f8:	0020      	movs	r0, r4
 80038fa:	3329      	adds	r3, #41	; 0x29
 80038fc:	33ff      	adds	r3, #255	; 0xff
 80038fe:	7819      	ldrb	r1, [r3, #0]
 8003900:	4663      	mov	r3, ip
 8003902:	f7ff fd9a 	bl	800343a <HAL_PCD_EP_Receive>
 8003906:	e795      	b.n	8003834 <HAL_PCD_IRQHandler+0x388>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003908:	f7ff fdb9 	bl	800347e <HAL_PCD_EP_Transmit>
 800390c:	e6b1      	b.n	8003672 <HAL_PCD_IRQHandler+0x1c6>
      HAL_PCD_SuspendCallback(hpcd);
 800390e:	0020      	movs	r0, r4
 8003910:	f002 fbd4 	bl	80060bc <HAL_PCD_SuspendCallback>
 8003914:	e65f      	b.n	80035d6 <HAL_PCD_IRQHandler+0x12a>
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	00000f8f 	.word	0x00000f8f
 800391c:	00000406 	.word	0x00000406
 8003920:	ffff8f0f 	.word	0xffff8f0f
 8003924:	00000402 	.word	0x00000402
 8003928:	ffff8f8f 	.word	0xffff8f8f
 800392c:	000080c0 	.word	0x000080c0

08003930 <HAL_PCD_EP_SetStall>:
{
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	0004      	movs	r4, r0
 8003934:	2507      	movs	r5, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003936:	6863      	ldr	r3, [r4, #4]
 8003938:	400d      	ands	r5, r1
    return HAL_ERROR;
 800393a:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800393c:	429d      	cmp	r5, r3
 800393e:	d820      	bhi.n	8003982 <HAL_PCD_EP_SetStall+0x52>
  if ((0x80U & ep_addr) == 0x80U)
 8003940:	b24b      	sxtb	r3, r1
 8003942:	2b00      	cmp	r3, #0
 8003944:	da1e      	bge.n	8003984 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003946:	016b      	lsls	r3, r5, #5
 8003948:	0019      	movs	r1, r3
    ep->is_in = 1U;
 800394a:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800394c:	3128      	adds	r1, #40	; 0x28
    ep->is_in = 1U;
 800394e:	3329      	adds	r3, #41	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003950:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8003952:	7018      	strb	r0, [r3, #0]
  ep->is_stall = 1U;
 8003954:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8003956:	268a      	movs	r6, #138	; 0x8a
  ep->is_stall = 1U;
 8003958:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800395a:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800395c:	00b6      	lsls	r6, r6, #2
 800395e:	5da2      	ldrb	r2, [r4, r6]
 8003960:	2002      	movs	r0, #2
 8003962:	429a      	cmp	r2, r3
 8003964:	d00d      	beq.n	8003982 <HAL_PCD_EP_SetStall+0x52>
 8003966:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003968:	6820      	ldr	r0, [r4, #0]
 800396a:	f001 faeb 	bl	8004f44 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800396e:	2d00      	cmp	r5, #0
 8003970:	d105      	bne.n	800397e <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003972:	238c      	movs	r3, #140	; 0x8c
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	18e1      	adds	r1, r4, r3
 8003978:	6820      	ldr	r0, [r4, #0]
 800397a:	f001 fb50 	bl	800501e <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800397e:	2000      	movs	r0, #0
 8003980:	55a0      	strb	r0, [r4, r6]
}
 8003982:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003984:	014b      	lsls	r3, r1, #5
 8003986:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8003988:	2200      	movs	r2, #0
 800398a:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 800398c:	3129      	adds	r1, #41	; 0x29
    ep->is_in = 0U;
 800398e:	332a      	adds	r3, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr];
 8003990:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 8003992:	33ff      	adds	r3, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8003994:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003996:	701a      	strb	r2, [r3, #0]
 8003998:	e7dc      	b.n	8003954 <HAL_PCD_EP_SetStall+0x24>

0800399a <HAL_PCD_EP_ClrStall>:
{
 800399a:	b570      	push	{r4, r5, r6, lr}
 800399c:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800399e:	230f      	movs	r3, #15
 80039a0:	6862      	ldr	r2, [r4, #4]
 80039a2:	400b      	ands	r3, r1
    return HAL_ERROR;
 80039a4:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d81a      	bhi.n	80039e0 <HAL_PCD_EP_ClrStall+0x46>
 80039aa:	2507      	movs	r5, #7
 80039ac:	400d      	ands	r5, r1
 80039ae:	016b      	lsls	r3, r5, #5
  if ((0x80U & ep_addr) == 0x80U)
 80039b0:	b249      	sxtb	r1, r1
 80039b2:	18e2      	adds	r2, r4, r3
 80039b4:	2900      	cmp	r1, #0
 80039b6:	da14      	bge.n	80039e2 <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039b8:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 80039ba:	3229      	adds	r2, #41	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039bc:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 80039be:	7010      	strb	r0, [r2, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039c0:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 0U;
 80039c2:	2600      	movs	r6, #0
  __HAL_LOCK(hpcd);
 80039c4:	258a      	movs	r5, #138	; 0x8a
  ep->is_stall = 0U;
 80039c6:	708e      	strb	r6, [r1, #2]
  __HAL_LOCK(hpcd);
 80039c8:	00ad      	lsls	r5, r5, #2
 80039ca:	5d63      	ldrb	r3, [r4, r5]
 80039cc:	2002      	movs	r0, #2
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d006      	beq.n	80039e0 <HAL_PCD_EP_ClrStall+0x46>
 80039d2:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039d4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80039d6:	5563      	strb	r3, [r4, r5]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039d8:	f001 fad2 	bl	8004f80 <USB_EPClearStall>
  return HAL_OK;
 80039dc:	0030      	movs	r0, r6
  __HAL_UNLOCK(hpcd);
 80039de:	5566      	strb	r6, [r4, r5]
}
 80039e0:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039e2:	3329      	adds	r3, #41	; 0x29
 80039e4:	33ff      	adds	r3, #255	; 0xff
 80039e6:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	322a      	adds	r2, #42	; 0x2a
 80039ec:	32ff      	adds	r2, #255	; 0xff
 80039ee:	7013      	strb	r3, [r2, #0]
 80039f0:	e7e6      	b.n	80039c0 <HAL_PCD_EP_ClrStall+0x26>

080039f2 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80039f2:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80039f4:	060c      	lsls	r4, r1, #24
 80039f6:	d50b      	bpl.n	8003a10 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f8:	2407      	movs	r4, #7
 80039fa:	4021      	ands	r1, r4
 80039fc:	0149      	lsls	r1, r1, #5
 80039fe:	3128      	adds	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a00:	1841      	adds	r1, r0, r1
 8003a02:	b298      	uxth	r0, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003a04:	2a00      	cmp	r2, #0
 8003a06:	d107      	bne.n	8003a18 <HAL_PCDEx_PMAConfig+0x26>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003a08:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003a0a:	80c8      	strh	r0, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003a10:	0149      	lsls	r1, r1, #5
 8003a12:	3129      	adds	r1, #41	; 0x29
 8003a14:	31ff      	adds	r1, #255	; 0xff
 8003a16:	e7f3      	b.n	8003a00 <HAL_PCDEx_PMAConfig+0xe>
    ep->doublebuffer = 1U;
 8003a18:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a1a:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8003a1c:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a1e:	8108      	strh	r0, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a20:	814b      	strh	r3, [r1, #10]
 8003a22:	e7f3      	b.n	8003a0c <HAL_PCDEx_PMAConfig+0x1a>

08003a24 <HAL_PCDEx_ActivateBCD>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_TypeDef *USBx = hpcd->Instance;
  hpcd->battery_charging_active = 1U;
 8003a24:	219b      	movs	r1, #155	; 0x9b
 8003a26:	2201      	movs	r2, #1
  USB_TypeDef *USBx = hpcd->Instance;
 8003a28:	6803      	ldr	r3, [r0, #0]
  hpcd->battery_charging_active = 1U;
 8003a2a:	0089      	lsls	r1, r1, #2
 8003a2c:	5042      	str	r2, [r0, r1]

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8003a2e:	3358      	adds	r3, #88	; 0x58
 8003a30:	8819      	ldrh	r1, [r3, #0]
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);

  return HAL_OK;
}
 8003a32:	2000      	movs	r0, #0
  USBx->BCDR |= (USB_BCDR_BCDEN);
 8003a34:	430a      	orrs	r2, r1
 8003a36:	801a      	strh	r2, [r3, #0]
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8003a38:	2202      	movs	r2, #2
 8003a3a:	8819      	ldrh	r1, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	801a      	strh	r2, [r3, #0]
}
 8003a40:	4770      	bx	lr

08003a42 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8003a42:	6803      	ldr	r3, [r0, #0]
{
 8003a44:	0001      	movs	r1, r0
  hpcd->lpm_active = 1U;
 8003a46:	209a      	movs	r0, #154	; 0x9a
 8003a48:	2201      	movs	r2, #1
{
 8003a4a:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8003a4c:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8003a4e:	2498      	movs	r4, #152	; 0x98
  hpcd->lpm_active = 1U;
 8003a50:	500a      	str	r2, [r1, r0]
  hpcd->LPM_State = LPM_L0;
 8003a52:	2000      	movs	r0, #0
 8003a54:	00a4      	lsls	r4, r4, #2
 8003a56:	5508      	strb	r0, [r1, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003a58:	3354      	adds	r3, #84	; 0x54
 8003a5a:	8819      	ldrh	r1, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	801a      	strh	r2, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003a60:	2202      	movs	r2, #2
 8003a62:	8819      	ldrh	r1, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8003a68:	bd10      	pop	{r4, pc}

08003a6a <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a6a:	4770      	bx	lr

08003a6c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a6c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003a6e:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8003a70:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8003a72:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8003a74:	400a      	ands	r2, r1
 8003a76:	2a08      	cmp	r2, #8
 8003a78:	d029      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x62>
 8003a7a:	2a0c      	cmp	r2, #12
 8003a7c:	d009      	beq.n	8003a92 <HAL_RCC_GetSysClockFreq+0x26>
 8003a7e:	2a04      	cmp	r2, #4
 8003a80:	d11d      	bne.n	8003abe <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a82:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8003a84:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a86:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8003a88:	17c0      	asrs	r0, r0, #31
 8003a8a:	4018      	ands	r0, r3
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <HAL_RCC_GetSysClockFreq+0x70>)
 8003a8e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003a90:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003a92:	028a      	lsls	r2, r1, #10
 8003a94:	4812      	ldr	r0, [pc, #72]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x74>)
 8003a96:	0f12      	lsrs	r2, r2, #28
 8003a98:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003a9a:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a9c:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003a9e:	0f89      	lsrs	r1, r1, #30
 8003aa0:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aa2:	03c0      	lsls	r0, r0, #15
 8003aa4:	d504      	bpl.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 8003aa6:	480f      	ldr	r0, [pc, #60]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 8003aa8:	4350      	muls	r0, r2
 8003aaa:	f7fc fb49 	bl	8000140 <__udivsi3>
 8003aae:	e7ef      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	06db      	lsls	r3, r3, #27
 8003ab4:	d501      	bpl.n	8003aba <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8003ab6:	480c      	ldr	r0, [pc, #48]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003ab8:	e7f6      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 8003aba:	4808      	ldr	r0, [pc, #32]	; (8003adc <HAL_RCC_GetSysClockFreq+0x70>)
 8003abc:	e7f4      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003abe:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003ac0:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003ac2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003ac4:	041b      	lsls	r3, r3, #16
 8003ac6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003ac8:	3301      	adds	r3, #1
 8003aca:	4098      	lsls	r0, r3
 8003acc:	e7e0      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 8003ace:	4805      	ldr	r0, [pc, #20]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x78>)
 8003ad0:	e7de      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x24>
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	ff48e500 	.word	0xff48e500
 8003adc:	00f42400 	.word	0x00f42400
 8003ae0:	0800c2dc 	.word	0x0800c2dc
 8003ae4:	007a1200 	.word	0x007a1200
 8003ae8:	003d0900 	.word	0x003d0900

08003aec <HAL_RCC_OscConfig>:
{
 8003aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aee:	0005      	movs	r5, r0
 8003af0:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d102      	bne.n	8003afc <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003af6:	2001      	movs	r0, #1
}
 8003af8:	b007      	add	sp, #28
 8003afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003afc:	230c      	movs	r3, #12
 8003afe:	4cc2      	ldr	r4, [pc, #776]	; (8003e08 <HAL_RCC_OscConfig+0x31c>)
 8003b00:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b02:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b04:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	025b      	lsls	r3, r3, #9
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0e:	6802      	ldr	r2, [r0, #0]
 8003b10:	07d2      	lsls	r2, r2, #31
 8003b12:	d441      	bmi.n	8003b98 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b14:	682b      	ldr	r3, [r5, #0]
 8003b16:	079b      	lsls	r3, r3, #30
 8003b18:	d500      	bpl.n	8003b1c <HAL_RCC_OscConfig+0x30>
 8003b1a:	e087      	b.n	8003c2c <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	06db      	lsls	r3, r3, #27
 8003b20:	d528      	bpl.n	8003b74 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003b22:	2e00      	cmp	r6, #0
 8003b24:	d000      	beq.n	8003b28 <HAL_RCC_OscConfig+0x3c>
 8003b26:	e0e1      	b.n	8003cec <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	059b      	lsls	r3, r3, #22
 8003b2c:	d502      	bpl.n	8003b34 <HAL_RCC_OscConfig+0x48>
 8003b2e:	69eb      	ldr	r3, [r5, #28]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0e0      	beq.n	8003af6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b34:	6862      	ldr	r2, [r4, #4]
 8003b36:	49b5      	ldr	r1, [pc, #724]	; (8003e0c <HAL_RCC_OscConfig+0x320>)
 8003b38:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b3a:	400a      	ands	r2, r1
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b40:	6861      	ldr	r1, [r4, #4]
 8003b42:	6a2a      	ldr	r2, [r5, #32]
 8003b44:	0209      	lsls	r1, r1, #8
 8003b46:	0a09      	lsrs	r1, r1, #8
 8003b48:	0612      	lsls	r2, r2, #24
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003b4e:	2280      	movs	r2, #128	; 0x80
 8003b50:	0b5b      	lsrs	r3, r3, #13
 8003b52:	3301      	adds	r3, #1
 8003b54:	0212      	lsls	r2, r2, #8
 8003b56:	409a      	lsls	r2, r3
 8003b58:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003b5a:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003b5c:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003b5e:	060a      	lsls	r2, r1, #24
 8003b60:	49ab      	ldr	r1, [pc, #684]	; (8003e10 <HAL_RCC_OscConfig+0x324>)
 8003b62:	0f12      	lsrs	r2, r2, #28
 8003b64:	5c8a      	ldrb	r2, [r1, r2]
 8003b66:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003b68:	4aaa      	ldr	r2, [pc, #680]	; (8003e14 <HAL_RCC_OscConfig+0x328>)
 8003b6a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003b6c:	f7ff f9fa 	bl	8002f64 <HAL_InitTick>
        if(status != HAL_OK)
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d1c1      	bne.n	8003af8 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b74:	682b      	ldr	r3, [r5, #0]
 8003b76:	071b      	lsls	r3, r3, #28
 8003b78:	d500      	bpl.n	8003b7c <HAL_RCC_OscConfig+0x90>
 8003b7a:	e0ee      	b.n	8003d5a <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	075b      	lsls	r3, r3, #29
 8003b80:	d500      	bpl.n	8003b84 <HAL_RCC_OscConfig+0x98>
 8003b82:	e110      	b.n	8003da6 <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	069b      	lsls	r3, r3, #26
 8003b88:	d500      	bpl.n	8003b8c <HAL_RCC_OscConfig+0xa0>
 8003b8a:	e195      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3cc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d000      	beq.n	8003b94 <HAL_RCC_OscConfig+0xa8>
 8003b92:	e1c4      	b.n	8003f1e <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8003b94:	2000      	movs	r0, #0
 8003b96:	e7af      	b.n	8003af8 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b98:	2e08      	cmp	r6, #8
 8003b9a:	d004      	beq.n	8003ba6 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b9c:	2e0c      	cmp	r6, #12
 8003b9e:	d109      	bne.n	8003bb4 <HAL_RCC_OscConfig+0xc8>
 8003ba0:	9a01      	ldr	r2, [sp, #4]
 8003ba2:	2a00      	cmp	r2, #0
 8003ba4:	d006      	beq.n	8003bb4 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	039b      	lsls	r3, r3, #14
 8003baa:	d5b3      	bpl.n	8003b14 <HAL_RCC_OscConfig+0x28>
 8003bac:	686b      	ldr	r3, [r5, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1b0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x28>
 8003bb2:	e7a0      	b.n	8003af6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb4:	686a      	ldr	r2, [r5, #4]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d111      	bne.n	8003bde <HAL_RCC_OscConfig+0xf2>
 8003bba:	6822      	ldr	r2, [r4, #0]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003bc0:	f7ff fa04 	bl	8002fcc <HAL_GetTick>
 8003bc4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bc6:	2280      	movs	r2, #128	; 0x80
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	0292      	lsls	r2, r2, #10
 8003bcc:	4213      	tst	r3, r2
 8003bce:	d1a1      	bne.n	8003b14 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd0:	f7ff f9fc 	bl	8002fcc <HAL_GetTick>
 8003bd4:	1bc0      	subs	r0, r0, r7
 8003bd6:	2864      	cmp	r0, #100	; 0x64
 8003bd8:	d9f5      	bls.n	8003bc6 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8003bda:	2003      	movs	r0, #3
 8003bdc:	e78c      	b.n	8003af8 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bde:	21a0      	movs	r1, #160	; 0xa0
 8003be0:	02c9      	lsls	r1, r1, #11
 8003be2:	428a      	cmp	r2, r1
 8003be4:	d105      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x106>
 8003be6:	2280      	movs	r2, #128	; 0x80
 8003be8:	6821      	ldr	r1, [r4, #0]
 8003bea:	02d2      	lsls	r2, r2, #11
 8003bec:	430a      	orrs	r2, r1
 8003bee:	6022      	str	r2, [r4, #0]
 8003bf0:	e7e3      	b.n	8003bba <HAL_RCC_OscConfig+0xce>
 8003bf2:	6821      	ldr	r1, [r4, #0]
 8003bf4:	4888      	ldr	r0, [pc, #544]	; (8003e18 <HAL_RCC_OscConfig+0x32c>)
 8003bf6:	4001      	ands	r1, r0
 8003bf8:	6021      	str	r1, [r4, #0]
 8003bfa:	6821      	ldr	r1, [r4, #0]
 8003bfc:	400b      	ands	r3, r1
 8003bfe:	9305      	str	r3, [sp, #20]
 8003c00:	9b05      	ldr	r3, [sp, #20]
 8003c02:	4986      	ldr	r1, [pc, #536]	; (8003e1c <HAL_RCC_OscConfig+0x330>)
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	400b      	ands	r3, r1
 8003c08:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c0a:	2a00      	cmp	r2, #0
 8003c0c:	d1d8      	bne.n	8003bc0 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8003c0e:	f7ff f9dd 	bl	8002fcc <HAL_GetTick>
 8003c12:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c14:	2280      	movs	r2, #128	; 0x80
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	0292      	lsls	r2, r2, #10
 8003c1a:	4213      	tst	r3, r2
 8003c1c:	d100      	bne.n	8003c20 <HAL_RCC_OscConfig+0x134>
 8003c1e:	e779      	b.n	8003b14 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c20:	f7ff f9d4 	bl	8002fcc <HAL_GetTick>
 8003c24:	1bc0      	subs	r0, r0, r7
 8003c26:	2864      	cmp	r0, #100	; 0x64
 8003c28:	d9f4      	bls.n	8003c14 <HAL_RCC_OscConfig+0x128>
 8003c2a:	e7d6      	b.n	8003bda <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003c2c:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8003c2e:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003c30:	4213      	tst	r3, r2
 8003c32:	d003      	beq.n	8003c3c <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003c34:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003c36:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003c38:	4311      	orrs	r1, r2
 8003c3a:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c3c:	2e04      	cmp	r6, #4
 8003c3e:	d004      	beq.n	8003c4a <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c40:	2e0c      	cmp	r6, #12
 8003c42:	d125      	bne.n	8003c90 <HAL_RCC_OscConfig+0x1a4>
 8003c44:	9a01      	ldr	r2, [sp, #4]
 8003c46:	2a00      	cmp	r2, #0
 8003c48:	d122      	bne.n	8003c90 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003c4a:	6822      	ldr	r2, [r4, #0]
 8003c4c:	0752      	lsls	r2, r2, #29
 8003c4e:	d502      	bpl.n	8003c56 <HAL_RCC_OscConfig+0x16a>
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d100      	bne.n	8003c56 <HAL_RCC_OscConfig+0x16a>
 8003c54:	e74f      	b.n	8003af6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c56:	6861      	ldr	r1, [r4, #4]
 8003c58:	692a      	ldr	r2, [r5, #16]
 8003c5a:	4871      	ldr	r0, [pc, #452]	; (8003e20 <HAL_RCC_OscConfig+0x334>)
 8003c5c:	0212      	lsls	r2, r2, #8
 8003c5e:	4001      	ands	r1, r0
 8003c60:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003c62:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c64:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003c66:	6822      	ldr	r2, [r4, #0]
 8003c68:	438a      	bics	r2, r1
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c6e:	f7ff fefd 	bl	8003a6c <HAL_RCC_GetSysClockFreq>
 8003c72:	68e3      	ldr	r3, [r4, #12]
 8003c74:	4a66      	ldr	r2, [pc, #408]	; (8003e10 <HAL_RCC_OscConfig+0x324>)
 8003c76:	061b      	lsls	r3, r3, #24
 8003c78:	0f1b      	lsrs	r3, r3, #28
 8003c7a:	5cd3      	ldrb	r3, [r2, r3]
 8003c7c:	40d8      	lsrs	r0, r3
 8003c7e:	4b65      	ldr	r3, [pc, #404]	; (8003e14 <HAL_RCC_OscConfig+0x328>)
 8003c80:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003c82:	2000      	movs	r0, #0
 8003c84:	f7ff f96e 	bl	8002f64 <HAL_InitTick>
      if(status != HAL_OK)
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	d100      	bne.n	8003c8e <HAL_RCC_OscConfig+0x1a2>
 8003c8c:	e746      	b.n	8003b1c <HAL_RCC_OscConfig+0x30>
 8003c8e:	e733      	b.n	8003af8 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d019      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003c94:	2109      	movs	r1, #9
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	438a      	bics	r2, r1
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003c9e:	f7ff f995 	bl	8002fcc <HAL_GetTick>
 8003ca2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	4213      	tst	r3, r2
 8003caa:	d007      	beq.n	8003cbc <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cac:	6862      	ldr	r2, [r4, #4]
 8003cae:	692b      	ldr	r3, [r5, #16]
 8003cb0:	495b      	ldr	r1, [pc, #364]	; (8003e20 <HAL_RCC_OscConfig+0x334>)
 8003cb2:	021b      	lsls	r3, r3, #8
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	6063      	str	r3, [r4, #4]
 8003cba:	e72f      	b.n	8003b1c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cbc:	f7ff f986 	bl	8002fcc <HAL_GetTick>
 8003cc0:	1bc0      	subs	r0, r0, r7
 8003cc2:	2802      	cmp	r0, #2
 8003cc4:	d9ee      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x1b8>
 8003cc6:	e788      	b.n	8003bda <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8003cc8:	2201      	movs	r2, #1
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	4393      	bics	r3, r2
 8003cce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003cd0:	f7ff f97c 	bl	8002fcc <HAL_GetTick>
 8003cd4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	4213      	tst	r3, r2
 8003cdc:	d100      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x1f4>
 8003cde:	e71d      	b.n	8003b1c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ce0:	f7ff f974 	bl	8002fcc <HAL_GetTick>
 8003ce4:	1bc0      	subs	r0, r0, r7
 8003ce6:	2802      	cmp	r0, #2
 8003ce8:	d9f5      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x1ea>
 8003cea:	e776      	b.n	8003bda <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cec:	69eb      	ldr	r3, [r5, #28]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d020      	beq.n	8003d34 <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003cfc:	f7ff f966 	bl	8002fcc <HAL_GetTick>
 8003d00:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d02:	2280      	movs	r2, #128	; 0x80
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	0092      	lsls	r2, r2, #2
 8003d08:	4213      	tst	r3, r2
 8003d0a:	d00d      	beq.n	8003d28 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d0c:	6863      	ldr	r3, [r4, #4]
 8003d0e:	4a3f      	ldr	r2, [pc, #252]	; (8003e0c <HAL_RCC_OscConfig+0x320>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003d14:	4313      	orrs	r3, r2
 8003d16:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d18:	6862      	ldr	r2, [r4, #4]
 8003d1a:	6a2b      	ldr	r3, [r5, #32]
 8003d1c:	0212      	lsls	r2, r2, #8
 8003d1e:	061b      	lsls	r3, r3, #24
 8003d20:	0a12      	lsrs	r2, r2, #8
 8003d22:	4313      	orrs	r3, r2
 8003d24:	6063      	str	r3, [r4, #4]
 8003d26:	e725      	b.n	8003b74 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d28:	f7ff f950 	bl	8002fcc <HAL_GetTick>
 8003d2c:	1bc0      	subs	r0, r0, r7
 8003d2e:	2802      	cmp	r0, #2
 8003d30:	d9e7      	bls.n	8003d02 <HAL_RCC_OscConfig+0x216>
 8003d32:	e752      	b.n	8003bda <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	4a3b      	ldr	r2, [pc, #236]	; (8003e24 <HAL_RCC_OscConfig+0x338>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003d3c:	f7ff f946 	bl	8002fcc <HAL_GetTick>
 8003d40:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d42:	2280      	movs	r2, #128	; 0x80
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	0092      	lsls	r2, r2, #2
 8003d48:	4213      	tst	r3, r2
 8003d4a:	d100      	bne.n	8003d4e <HAL_RCC_OscConfig+0x262>
 8003d4c:	e712      	b.n	8003b74 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d4e:	f7ff f93d 	bl	8002fcc <HAL_GetTick>
 8003d52:	1bc0      	subs	r0, r0, r7
 8003d54:	2802      	cmp	r0, #2
 8003d56:	d9f4      	bls.n	8003d42 <HAL_RCC_OscConfig+0x256>
 8003d58:	e73f      	b.n	8003bda <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d5a:	696a      	ldr	r2, [r5, #20]
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	2a00      	cmp	r2, #0
 8003d60:	d010      	beq.n	8003d84 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8003d62:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003d64:	4313      	orrs	r3, r2
 8003d66:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003d68:	f7ff f930 	bl	8002fcc <HAL_GetTick>
 8003d6c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d6e:	2202      	movs	r2, #2
 8003d70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d72:	4213      	tst	r3, r2
 8003d74:	d000      	beq.n	8003d78 <HAL_RCC_OscConfig+0x28c>
 8003d76:	e701      	b.n	8003b7c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d78:	f7ff f928 	bl	8002fcc <HAL_GetTick>
 8003d7c:	1bc0      	subs	r0, r0, r7
 8003d7e:	2802      	cmp	r0, #2
 8003d80:	d9f5      	bls.n	8003d6e <HAL_RCC_OscConfig+0x282>
 8003d82:	e72a      	b.n	8003bda <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8003d84:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003d86:	439a      	bics	r2, r3
 8003d88:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003d8a:	f7ff f91f 	bl	8002fcc <HAL_GetTick>
 8003d8e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d90:	2202      	movs	r2, #2
 8003d92:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d94:	4213      	tst	r3, r2
 8003d96:	d100      	bne.n	8003d9a <HAL_RCC_OscConfig+0x2ae>
 8003d98:	e6f0      	b.n	8003b7c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9a:	f7ff f917 	bl	8002fcc <HAL_GetTick>
 8003d9e:	1bc0      	subs	r0, r0, r7
 8003da0:	2802      	cmp	r0, #2
 8003da2:	d9f5      	bls.n	8003d90 <HAL_RCC_OscConfig+0x2a4>
 8003da4:	e719      	b.n	8003bda <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003da8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003daa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003dac:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8003dae:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db0:	421a      	tst	r2, r3
 8003db2:	d104      	bne.n	8003dbe <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003db6:	4313      	orrs	r3, r2
 8003db8:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbe:	2280      	movs	r2, #128	; 0x80
 8003dc0:	4f19      	ldr	r7, [pc, #100]	; (8003e28 <HAL_RCC_OscConfig+0x33c>)
 8003dc2:	0052      	lsls	r2, r2, #1
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	4213      	tst	r3, r2
 8003dc8:	d008      	beq.n	8003ddc <HAL_RCC_OscConfig+0x2f0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dca:	2280      	movs	r2, #128	; 0x80
 8003dcc:	68ab      	ldr	r3, [r5, #8]
 8003dce:	0052      	lsls	r2, r2, #1
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d12b      	bne.n	8003e2c <HAL_RCC_OscConfig+0x340>
 8003dd4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	6523      	str	r3, [r4, #80]	; 0x50
 8003dda:	e04c      	b.n	8003e76 <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ddc:	2280      	movs	r2, #128	; 0x80
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	0052      	lsls	r2, r2, #1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003de6:	f7ff f8f1 	bl	8002fcc <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dea:	2380      	movs	r3, #128	; 0x80
 8003dec:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8003dee:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	9303      	str	r3, [sp, #12]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	9a03      	ldr	r2, [sp, #12]
 8003df6:	4213      	tst	r3, r2
 8003df8:	d1e7      	bne.n	8003dca <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfa:	f7ff f8e7 	bl	8002fcc <HAL_GetTick>
 8003dfe:	9b02      	ldr	r3, [sp, #8]
 8003e00:	1ac0      	subs	r0, r0, r3
 8003e02:	2864      	cmp	r0, #100	; 0x64
 8003e04:	d9f5      	bls.n	8003df2 <HAL_RCC_OscConfig+0x306>
 8003e06:	e6e8      	b.n	8003bda <HAL_RCC_OscConfig+0xee>
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	ffff1fff 	.word	0xffff1fff
 8003e10:	0800c2c4 	.word	0x0800c2c4
 8003e14:	20000000 	.word	0x20000000
 8003e18:	fffeffff 	.word	0xfffeffff
 8003e1c:	fffbffff 	.word	0xfffbffff
 8003e20:	ffffe0ff 	.word	0xffffe0ff
 8003e24:	fffffeff 	.word	0xfffffeff
 8003e28:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d116      	bne.n	8003e5e <HAL_RCC_OscConfig+0x372>
 8003e30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e32:	4a6c      	ldr	r2, [pc, #432]	; (8003fe4 <HAL_RCC_OscConfig+0x4f8>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	6523      	str	r3, [r4, #80]	; 0x50
 8003e38:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e3a:	4a6b      	ldr	r2, [pc, #428]	; (8003fe8 <HAL_RCC_OscConfig+0x4fc>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003e40:	f7ff f8c4 	bl	8002fcc <HAL_GetTick>
 8003e44:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e46:	2280      	movs	r2, #128	; 0x80
 8003e48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e4a:	0092      	lsls	r2, r2, #2
 8003e4c:	4213      	tst	r3, r2
 8003e4e:	d02a      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e50:	f7ff f8bc 	bl	8002fcc <HAL_GetTick>
 8003e54:	4b65      	ldr	r3, [pc, #404]	; (8003fec <HAL_RCC_OscConfig+0x500>)
 8003e56:	1bc0      	subs	r0, r0, r7
 8003e58:	4298      	cmp	r0, r3
 8003e5a:	d9f4      	bls.n	8003e46 <HAL_RCC_OscConfig+0x35a>
 8003e5c:	e6bd      	b.n	8003bda <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e5e:	21a0      	movs	r1, #160	; 0xa0
 8003e60:	00c9      	lsls	r1, r1, #3
 8003e62:	428b      	cmp	r3, r1
 8003e64:	d10b      	bne.n	8003e7e <HAL_RCC_OscConfig+0x392>
 8003e66:	2380      	movs	r3, #128	; 0x80
 8003e68:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6523      	str	r3, [r4, #80]	; 0x50
 8003e70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e72:	431a      	orrs	r2, r3
 8003e74:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003e76:	f7ff f8a9 	bl	8002fcc <HAL_GetTick>
 8003e7a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e7c:	e00e      	b.n	8003e9c <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e7e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e80:	4a58      	ldr	r2, [pc, #352]	; (8003fe4 <HAL_RCC_OscConfig+0x4f8>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	6523      	str	r3, [r4, #80]	; 0x50
 8003e86:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003e88:	4a57      	ldr	r2, [pc, #348]	; (8003fe8 <HAL_RCC_OscConfig+0x4fc>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	e7a4      	b.n	8003dd8 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7ff f89d 	bl	8002fcc <HAL_GetTick>
 8003e92:	4b56      	ldr	r3, [pc, #344]	; (8003fec <HAL_RCC_OscConfig+0x500>)
 8003e94:	1bc0      	subs	r0, r0, r7
 8003e96:	4298      	cmp	r0, r3
 8003e98:	d900      	bls.n	8003e9c <HAL_RCC_OscConfig+0x3b0>
 8003e9a:	e69e      	b.n	8003bda <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e9c:	2280      	movs	r2, #128	; 0x80
 8003e9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003ea0:	0092      	lsls	r2, r2, #2
 8003ea2:	4213      	tst	r3, r2
 8003ea4:	d0f3      	beq.n	8003e8e <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8003ea6:	9b01      	ldr	r3, [sp, #4]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d000      	beq.n	8003eae <HAL_RCC_OscConfig+0x3c2>
 8003eac:	e66a      	b.n	8003b84 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003eb0:	4a4f      	ldr	r2, [pc, #316]	; (8003ff0 <HAL_RCC_OscConfig+0x504>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	63a3      	str	r3, [r4, #56]	; 0x38
 8003eb6:	e665      	b.n	8003b84 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003eb8:	69a9      	ldr	r1, [r5, #24]
 8003eba:	2301      	movs	r3, #1
 8003ebc:	4a4d      	ldr	r2, [pc, #308]	; (8003ff4 <HAL_RCC_OscConfig+0x508>)
 8003ebe:	2900      	cmp	r1, #0
 8003ec0:	d018      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI48_ENABLE();
 8003ec2:	68a1      	ldr	r1, [r4, #8]
 8003ec4:	4319      	orrs	r1, r3
 8003ec6:	60a1      	str	r1, [r4, #8]
 8003ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	6363      	str	r3, [r4, #52]	; 0x34
 8003ece:	2380      	movs	r3, #128	; 0x80
 8003ed0:	6a11      	ldr	r1, [r2, #32]
 8003ed2:	019b      	lsls	r3, r3, #6
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003ed8:	f7ff f878 	bl	8002fcc <HAL_GetTick>
 8003edc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ede:	2202      	movs	r2, #2
 8003ee0:	68a3      	ldr	r3, [r4, #8]
 8003ee2:	4213      	tst	r3, r2
 8003ee4:	d000      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x3fc>
 8003ee6:	e651      	b.n	8003b8c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ee8:	f7ff f870 	bl	8002fcc <HAL_GetTick>
 8003eec:	1bc0      	subs	r0, r0, r7
 8003eee:	2802      	cmp	r0, #2
 8003ef0:	d9f5      	bls.n	8003ede <HAL_RCC_OscConfig+0x3f2>
 8003ef2:	e672      	b.n	8003bda <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8003ef4:	68a1      	ldr	r1, [r4, #8]
 8003ef6:	4399      	bics	r1, r3
 8003ef8:	60a1      	str	r1, [r4, #8]
 8003efa:	6a13      	ldr	r3, [r2, #32]
 8003efc:	493e      	ldr	r1, [pc, #248]	; (8003ff8 <HAL_RCC_OscConfig+0x50c>)
 8003efe:	400b      	ands	r3, r1
 8003f00:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003f02:	f7ff f863 	bl	8002fcc <HAL_GetTick>
 8003f06:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f08:	2202      	movs	r2, #2
 8003f0a:	68a3      	ldr	r3, [r4, #8]
 8003f0c:	4213      	tst	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <HAL_RCC_OscConfig+0x426>
 8003f10:	e63c      	b.n	8003b8c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f12:	f7ff f85b 	bl	8002fcc <HAL_GetTick>
 8003f16:	1bc0      	subs	r0, r0, r7
 8003f18:	2802      	cmp	r0, #2
 8003f1a:	d9f5      	bls.n	8003f08 <HAL_RCC_OscConfig+0x41c>
 8003f1c:	e65d      	b.n	8003bda <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f1e:	2e0c      	cmp	r6, #12
 8003f20:	d043      	beq.n	8003faa <HAL_RCC_OscConfig+0x4be>
 8003f22:	4a36      	ldr	r2, [pc, #216]	; (8003ffc <HAL_RCC_OscConfig+0x510>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d12e      	bne.n	8003f86 <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_DISABLE();
 8003f28:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f2a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f30:	f7ff f84c 	bl	8002fcc <HAL_GetTick>
 8003f34:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f36:	04b6      	lsls	r6, r6, #18
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	4233      	tst	r3, r6
 8003f3c:	d11d      	bne.n	8003f7a <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f3e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8003f40:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003f42:	68e2      	ldr	r2, [r4, #12]
 8003f44:	430b      	orrs	r3, r1
 8003f46:	492e      	ldr	r1, [pc, #184]	; (8004000 <HAL_RCC_OscConfig+0x514>)
 8003f48:	400a      	ands	r2, r1
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003f4e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003f54:	2380      	movs	r3, #128	; 0x80
 8003f56:	6822      	ldr	r2, [r4, #0]
 8003f58:	045b      	lsls	r3, r3, #17
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f5e:	f7ff f835 	bl	8002fcc <HAL_GetTick>
 8003f62:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003f64:	04ad      	lsls	r5, r5, #18
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	422b      	tst	r3, r5
 8003f6a:	d000      	beq.n	8003f6e <HAL_RCC_OscConfig+0x482>
 8003f6c:	e612      	b.n	8003b94 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f6e:	f7ff f82d 	bl	8002fcc <HAL_GetTick>
 8003f72:	1b80      	subs	r0, r0, r6
 8003f74:	2802      	cmp	r0, #2
 8003f76:	d9f6      	bls.n	8003f66 <HAL_RCC_OscConfig+0x47a>
 8003f78:	e62f      	b.n	8003bda <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7a:	f7ff f827 	bl	8002fcc <HAL_GetTick>
 8003f7e:	1bc0      	subs	r0, r0, r7
 8003f80:	2802      	cmp	r0, #2
 8003f82:	d9d9      	bls.n	8003f38 <HAL_RCC_OscConfig+0x44c>
 8003f84:	e629      	b.n	8003bda <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8003f86:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f88:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f8e:	f7ff f81d 	bl	8002fcc <HAL_GetTick>
 8003f92:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f94:	04ad      	lsls	r5, r5, #18
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	422b      	tst	r3, r5
 8003f9a:	d100      	bne.n	8003f9e <HAL_RCC_OscConfig+0x4b2>
 8003f9c:	e5fa      	b.n	8003b94 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9e:	f7ff f815 	bl	8002fcc <HAL_GetTick>
 8003fa2:	1b80      	subs	r0, r0, r6
 8003fa4:	2802      	cmp	r0, #2
 8003fa6:	d9f6      	bls.n	8003f96 <HAL_RCC_OscConfig+0x4aa>
 8003fa8:	e617      	b.n	8003bda <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 8003faa:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d100      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x4c6>
 8003fb0:	e5a2      	b.n	8003af8 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb2:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8003fb4:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003fb8:	0252      	lsls	r2, r2, #9
 8003fba:	401a      	ands	r2, r3
        return HAL_ERROR;
 8003fbc:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbe:	428a      	cmp	r2, r1
 8003fc0:	d000      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x4d8>
 8003fc2:	e599      	b.n	8003af8 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003fc4:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc6:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003fc8:	0392      	lsls	r2, r2, #14
 8003fca:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fcc:	428a      	cmp	r2, r1
 8003fce:	d000      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x4e6>
 8003fd0:	e592      	b.n	8003af8 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003fd2:	20c0      	movs	r0, #192	; 0xc0
 8003fd4:	0400      	lsls	r0, r0, #16
 8003fd6:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003fd8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8003fda:	1a18      	subs	r0, r3, r0
 8003fdc:	1e43      	subs	r3, r0, #1
 8003fde:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8003fe0:	b2c0      	uxtb	r0, r0
 8003fe2:	e589      	b.n	8003af8 <HAL_RCC_OscConfig+0xc>
 8003fe4:	fffffeff 	.word	0xfffffeff
 8003fe8:	fffffbff 	.word	0xfffffbff
 8003fec:	00001388 	.word	0x00001388
 8003ff0:	efffffff 	.word	0xefffffff
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	ffffdfff 	.word	0xffffdfff
 8003ffc:	feffffff 	.word	0xfeffffff
 8004000:	ff02ffff 	.word	0xff02ffff

08004004 <HAL_RCC_ClockConfig>:
{
 8004004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004006:	1e06      	subs	r6, r0, #0
 8004008:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800400a:	d101      	bne.n	8004010 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800400c:	2001      	movs	r0, #1
}
 800400e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004010:	2201      	movs	r2, #1
 8004012:	4c51      	ldr	r4, [pc, #324]	; (8004158 <HAL_RCC_ClockConfig+0x154>)
 8004014:	9901      	ldr	r1, [sp, #4]
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	4013      	ands	r3, r2
 800401a:	428b      	cmp	r3, r1
 800401c:	d327      	bcc.n	800406e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800401e:	6832      	ldr	r2, [r6, #0]
 8004020:	0793      	lsls	r3, r2, #30
 8004022:	d42f      	bmi.n	8004084 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004024:	07d3      	lsls	r3, r2, #31
 8004026:	d435      	bmi.n	8004094 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004028:	2301      	movs	r3, #1
 800402a:	6822      	ldr	r2, [r4, #0]
 800402c:	9901      	ldr	r1, [sp, #4]
 800402e:	401a      	ands	r2, r3
 8004030:	428a      	cmp	r2, r1
 8004032:	d900      	bls.n	8004036 <HAL_RCC_ClockConfig+0x32>
 8004034:	e081      	b.n	800413a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004036:	6832      	ldr	r2, [r6, #0]
 8004038:	4c48      	ldr	r4, [pc, #288]	; (800415c <HAL_RCC_ClockConfig+0x158>)
 800403a:	0753      	lsls	r3, r2, #29
 800403c:	d500      	bpl.n	8004040 <HAL_RCC_ClockConfig+0x3c>
 800403e:	e084      	b.n	800414a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004040:	0713      	lsls	r3, r2, #28
 8004042:	d506      	bpl.n	8004052 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004044:	68e2      	ldr	r2, [r4, #12]
 8004046:	6933      	ldr	r3, [r6, #16]
 8004048:	4945      	ldr	r1, [pc, #276]	; (8004160 <HAL_RCC_ClockConfig+0x15c>)
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	400a      	ands	r2, r1
 800404e:	4313      	orrs	r3, r2
 8004050:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004052:	f7ff fd0b 	bl	8003a6c <HAL_RCC_GetSysClockFreq>
 8004056:	68e3      	ldr	r3, [r4, #12]
 8004058:	4a42      	ldr	r2, [pc, #264]	; (8004164 <HAL_RCC_ClockConfig+0x160>)
 800405a:	061b      	lsls	r3, r3, #24
 800405c:	0f1b      	lsrs	r3, r3, #28
 800405e:	5cd3      	ldrb	r3, [r2, r3]
 8004060:	40d8      	lsrs	r0, r3
 8004062:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_RCC_ClockConfig+0x164>)
 8004064:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8004066:	2000      	movs	r0, #0
 8004068:	f7fe ff7c 	bl	8002f64 <HAL_InitTick>
 800406c:	e7cf      	b.n	800400e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	9901      	ldr	r1, [sp, #4]
 8004072:	4393      	bics	r3, r2
 8004074:	430b      	orrs	r3, r1
 8004076:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	4013      	ands	r3, r2
 800407c:	9a01      	ldr	r2, [sp, #4]
 800407e:	4293      	cmp	r3, r2
 8004080:	d1c4      	bne.n	800400c <HAL_RCC_ClockConfig+0x8>
 8004082:	e7cc      	b.n	800401e <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004084:	20f0      	movs	r0, #240	; 0xf0
 8004086:	4935      	ldr	r1, [pc, #212]	; (800415c <HAL_RCC_ClockConfig+0x158>)
 8004088:	68cb      	ldr	r3, [r1, #12]
 800408a:	4383      	bics	r3, r0
 800408c:	68b0      	ldr	r0, [r6, #8]
 800408e:	4303      	orrs	r3, r0
 8004090:	60cb      	str	r3, [r1, #12]
 8004092:	e7c7      	b.n	8004024 <HAL_RCC_ClockConfig+0x20>
 8004094:	4d31      	ldr	r5, [pc, #196]	; (800415c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004096:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004098:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800409a:	2a02      	cmp	r2, #2
 800409c:	d119      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800409e:	039b      	lsls	r3, r3, #14
 80040a0:	d5b4      	bpl.n	800400c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040a2:	2103      	movs	r1, #3
 80040a4:	68eb      	ldr	r3, [r5, #12]
 80040a6:	438b      	bics	r3, r1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80040ac:	f7fe ff8e 	bl	8002fcc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b0:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80040b2:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d119      	bne.n	80040ec <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040b8:	220c      	movs	r2, #12
 80040ba:	68eb      	ldr	r3, [r5, #12]
 80040bc:	4013      	ands	r3, r2
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d0b2      	beq.n	8004028 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c2:	f7fe ff83 	bl	8002fcc <HAL_GetTick>
 80040c6:	4b29      	ldr	r3, [pc, #164]	; (800416c <HAL_RCC_ClockConfig+0x168>)
 80040c8:	1bc0      	subs	r0, r0, r7
 80040ca:	4298      	cmp	r0, r3
 80040cc:	d9f4      	bls.n	80040b8 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 80040ce:	2003      	movs	r0, #3
 80040d0:	e79d      	b.n	800400e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040d2:	2a03      	cmp	r2, #3
 80040d4:	d102      	bne.n	80040dc <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040d6:	019b      	lsls	r3, r3, #6
 80040d8:	d4e3      	bmi.n	80040a2 <HAL_RCC_ClockConfig+0x9e>
 80040da:	e797      	b.n	800400c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040dc:	2a01      	cmp	r2, #1
 80040de:	d102      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040e0:	075b      	lsls	r3, r3, #29
 80040e2:	d4de      	bmi.n	80040a2 <HAL_RCC_ClockConfig+0x9e>
 80040e4:	e792      	b.n	800400c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040e6:	059b      	lsls	r3, r3, #22
 80040e8:	d4db      	bmi.n	80040a2 <HAL_RCC_ClockConfig+0x9e>
 80040ea:	e78f      	b.n	800400c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d10b      	bne.n	8004108 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f0:	220c      	movs	r2, #12
 80040f2:	68eb      	ldr	r3, [r5, #12]
 80040f4:	4013      	ands	r3, r2
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d096      	beq.n	8004028 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040fa:	f7fe ff67 	bl	8002fcc <HAL_GetTick>
 80040fe:	4b1b      	ldr	r3, [pc, #108]	; (800416c <HAL_RCC_ClockConfig+0x168>)
 8004100:	1bc0      	subs	r0, r0, r7
 8004102:	4298      	cmp	r0, r3
 8004104:	d9f4      	bls.n	80040f0 <HAL_RCC_ClockConfig+0xec>
 8004106:	e7e2      	b.n	80040ce <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004108:	2b01      	cmp	r3, #1
 800410a:	d010      	beq.n	800412e <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800410c:	220c      	movs	r2, #12
 800410e:	68eb      	ldr	r3, [r5, #12]
 8004110:	4213      	tst	r3, r2
 8004112:	d089      	beq.n	8004028 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004114:	f7fe ff5a 	bl	8002fcc <HAL_GetTick>
 8004118:	4b14      	ldr	r3, [pc, #80]	; (800416c <HAL_RCC_ClockConfig+0x168>)
 800411a:	1bc0      	subs	r0, r0, r7
 800411c:	4298      	cmp	r0, r3
 800411e:	d9f5      	bls.n	800410c <HAL_RCC_ClockConfig+0x108>
 8004120:	e7d5      	b.n	80040ce <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004122:	f7fe ff53 	bl	8002fcc <HAL_GetTick>
 8004126:	4b11      	ldr	r3, [pc, #68]	; (800416c <HAL_RCC_ClockConfig+0x168>)
 8004128:	1bc0      	subs	r0, r0, r7
 800412a:	4298      	cmp	r0, r3
 800412c:	d8cf      	bhi.n	80040ce <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800412e:	220c      	movs	r2, #12
 8004130:	68eb      	ldr	r3, [r5, #12]
 8004132:	4013      	ands	r3, r2
 8004134:	2b04      	cmp	r3, #4
 8004136:	d1f4      	bne.n	8004122 <HAL_RCC_ClockConfig+0x11e>
 8004138:	e776      	b.n	8004028 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	6822      	ldr	r2, [r4, #0]
 800413c:	439a      	bics	r2, r3
 800413e:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004140:	6822      	ldr	r2, [r4, #0]
 8004142:	421a      	tst	r2, r3
 8004144:	d100      	bne.n	8004148 <HAL_RCC_ClockConfig+0x144>
 8004146:	e776      	b.n	8004036 <HAL_RCC_ClockConfig+0x32>
 8004148:	e760      	b.n	800400c <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800414a:	68e3      	ldr	r3, [r4, #12]
 800414c:	4908      	ldr	r1, [pc, #32]	; (8004170 <HAL_RCC_ClockConfig+0x16c>)
 800414e:	400b      	ands	r3, r1
 8004150:	68f1      	ldr	r1, [r6, #12]
 8004152:	430b      	orrs	r3, r1
 8004154:	60e3      	str	r3, [r4, #12]
 8004156:	e773      	b.n	8004040 <HAL_RCC_ClockConfig+0x3c>
 8004158:	40022000 	.word	0x40022000
 800415c:	40021000 	.word	0x40021000
 8004160:	ffffc7ff 	.word	0xffffc7ff
 8004164:	0800c2c4 	.word	0x0800c2c4
 8004168:	20000000 	.word	0x20000000
 800416c:	00001388 	.word	0x00001388
 8004170:	fffff8ff 	.word	0xfffff8ff

08004174 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004174:	6803      	ldr	r3, [r0, #0]
{
 8004176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004178:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800417a:	069b      	lsls	r3, r3, #26
 800417c:	d53d      	bpl.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004180:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004182:	4c5f      	ldr	r4, [pc, #380]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004184:	055b      	lsls	r3, r3, #21
 8004186:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8004188:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800418a:	421a      	tst	r2, r3
 800418c:	d104      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004190:	4313      	orrs	r3, r2
 8004192:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004194:	2301      	movs	r3, #1
 8004196:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004198:	2780      	movs	r7, #128	; 0x80
 800419a:	4e5a      	ldr	r6, [pc, #360]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800419c:	007f      	lsls	r7, r7, #1
 800419e:	6833      	ldr	r3, [r6, #0]
 80041a0:	423b      	tst	r3, r7
 80041a2:	d06c      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x10a>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80041a4:	6868      	ldr	r0, [r5, #4]
 80041a6:	23c0      	movs	r3, #192	; 0xc0
 80041a8:	26c0      	movs	r6, #192	; 0xc0
 80041aa:	0001      	movs	r1, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80041ac:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80041ae:	03b6      	lsls	r6, r6, #14
 80041b0:	029b      	lsls	r3, r3, #10
 80041b2:	4030      	ands	r0, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80041b4:	4032      	ands	r2, r6
 80041b6:	4019      	ands	r1, r3
 80041b8:	001e      	movs	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80041ba:	4290      	cmp	r0, r2
 80041bc:	d000      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80041be:	e06f      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80041c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80041c2:	4033      	ands	r3, r6

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80041c4:	d000      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80041c6:	e074      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041c8:	6869      	ldr	r1, [r5, #4]
 80041ca:	23c0      	movs	r3, #192	; 0xc0
 80041cc:	000a      	movs	r2, r1
 80041ce:	029b      	lsls	r3, r3, #10
 80041d0:	401a      	ands	r2, r3
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d107      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	484b      	ldr	r0, [pc, #300]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80041da:	4003      	ands	r3, r0
 80041dc:	20c0      	movs	r0, #192	; 0xc0
 80041de:	0380      	lsls	r0, r0, #14
 80041e0:	4001      	ands	r1, r0
 80041e2:	430b      	orrs	r3, r1
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80041e8:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041ea:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ec:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d103      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041f4:	4a45      	ldr	r2, [pc, #276]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041fa:	682b      	ldr	r3, [r5, #0]
 80041fc:	07da      	lsls	r2, r3, #31
 80041fe:	d506      	bpl.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004200:	2003      	movs	r0, #3
 8004202:	493f      	ldr	r1, [pc, #252]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004204:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004206:	4382      	bics	r2, r0
 8004208:	68a8      	ldr	r0, [r5, #8]
 800420a:	4302      	orrs	r2, r0
 800420c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800420e:	079a      	lsls	r2, r3, #30
 8004210:	d506      	bpl.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004212:	200c      	movs	r0, #12
 8004214:	493a      	ldr	r1, [pc, #232]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004216:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004218:	4382      	bics	r2, r0
 800421a:	68e8      	ldr	r0, [r5, #12]
 800421c:	4302      	orrs	r2, r0
 800421e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004220:	075a      	lsls	r2, r3, #29
 8004222:	d506      	bpl.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004224:	4936      	ldr	r1, [pc, #216]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004226:	483a      	ldr	r0, [pc, #232]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004228:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800422a:	4002      	ands	r2, r0
 800422c:	6928      	ldr	r0, [r5, #16]
 800422e:	4302      	orrs	r2, r0
 8004230:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004232:	071a      	lsls	r2, r3, #28
 8004234:	d506      	bpl.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004236:	4932      	ldr	r1, [pc, #200]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004238:	4836      	ldr	r0, [pc, #216]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800423a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800423c:	4002      	ands	r2, r0
 800423e:	6968      	ldr	r0, [r5, #20]
 8004240:	4302      	orrs	r2, r0
 8004242:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004244:	05da      	lsls	r2, r3, #23
 8004246:	d506      	bpl.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004248:	492d      	ldr	r1, [pc, #180]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800424a:	4833      	ldr	r0, [pc, #204]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800424c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800424e:	4002      	ands	r2, r0
 8004250:	69a8      	ldr	r0, [r5, #24]
 8004252:	4302      	orrs	r2, r0
 8004254:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004256:	065a      	lsls	r2, r3, #25
 8004258:	d506      	bpl.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800425a:	4929      	ldr	r1, [pc, #164]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800425c:	482f      	ldr	r0, [pc, #188]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800425e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004260:	4002      	ands	r2, r0
 8004262:	6a28      	ldr	r0, [r5, #32]
 8004264:	4302      	orrs	r2, r0
 8004266:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8004268:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800426a:	061b      	lsls	r3, r3, #24
 800426c:	d517      	bpl.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800426e:	4a24      	ldr	r2, [pc, #144]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004270:	492b      	ldr	r1, [pc, #172]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004272:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004274:	400b      	ands	r3, r1
 8004276:	69e9      	ldr	r1, [r5, #28]
 8004278:	430b      	orrs	r3, r1
 800427a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800427c:	e00f      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800427e:	6833      	ldr	r3, [r6, #0]
 8004280:	433b      	orrs	r3, r7
 8004282:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004284:	f7fe fea2 	bl	8002fcc <HAL_GetTick>
 8004288:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428a:	6833      	ldr	r3, [r6, #0]
 800428c:	423b      	tst	r3, r7
 800428e:	d189      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004290:	f7fe fe9c 	bl	8002fcc <HAL_GetTick>
 8004294:	9b01      	ldr	r3, [sp, #4]
 8004296:	1ac0      	subs	r0, r0, r3
 8004298:	2864      	cmp	r0, #100	; 0x64
 800429a:	d9f6      	bls.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x116>
          return HAL_TIMEOUT;
 800429c:	2003      	movs	r0, #3
}
 800429e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80042a0:	4299      	cmp	r1, r3
 80042a2:	d000      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x132>
 80042a4:	e78c      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80042a6:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 80042a8:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80042aa:	039b      	lsls	r3, r3, #14
 80042ac:	d400      	bmi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042ae:	e787      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80042b0:	e7f5      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80042b2:	428b      	cmp	r3, r1
 80042b4:	d100      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80042b6:	e787      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	069b      	lsls	r3, r3, #26
 80042bc:	d400      	bmi.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80042be:	e783      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 80042c0:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80042c2:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80042c4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80042c6:	0312      	lsls	r2, r2, #12
 80042c8:	4302      	orrs	r2, r0
 80042ca:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80042ce:	4b12      	ldr	r3, [pc, #72]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042d0:	4814      	ldr	r0, [pc, #80]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80042d2:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042d4:	4002      	ands	r2, r0
 80042d6:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 80042d8:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80042da:	05cb      	lsls	r3, r1, #23
 80042dc:	d400      	bmi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80042de:	e773      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 80042e0:	f7fe fe74 	bl	8002fcc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042e4:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80042e6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042e8:	00bf      	lsls	r7, r7, #2
 80042ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80042ec:	423b      	tst	r3, r7
 80042ee:	d000      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 80042f0:	e76a      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f7fe fe6b 	bl	8002fcc <HAL_GetTick>
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042f8:	1b80      	subs	r0, r0, r6
 80042fa:	4298      	cmp	r0, r3
 80042fc:	d9f5      	bls.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x176>
 80042fe:	e7cd      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004300:	40021000 	.word	0x40021000
 8004304:	40007000 	.word	0x40007000
 8004308:	ffcfffff 	.word	0xffcfffff
 800430c:	efffffff 	.word	0xefffffff
 8004310:	fffff3ff 	.word	0xfffff3ff
 8004314:	ffffcfff 	.word	0xffffcfff
 8004318:	fffcffff 	.word	0xfffcffff
 800431c:	fbffffff 	.word	0xfbffffff
 8004320:	fff3ffff 	.word	0xfff3ffff
 8004324:	fff7ffff 	.word	0xfff7ffff
 8004328:	00001388 	.word	0x00001388

0800432c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800432c:	b530      	push	{r4, r5, lr}
 800432e:	0002      	movs	r2, r0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8004330:	6884      	ldr	r4, [r0, #8]
 8004332:	2001      	movs	r0, #1
 8004334:	4004      	ands	r4, r0
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004336:	d110      	bne.n	800435a <LL_ADC_Init+0x2e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8004338:	688d      	ldr	r5, [r1, #8]
 800433a:	684b      	ldr	r3, [r1, #4]
 800433c:	68d0      	ldr	r0, [r2, #12]
 800433e:	432b      	orrs	r3, r5
 8004340:	68cd      	ldr	r5, [r1, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8004342:	6809      	ldr	r1, [r1, #0]
    MODIFY_REG(ADCx->CFGR1,
 8004344:	432b      	orrs	r3, r5
 8004346:	4d05      	ldr	r5, [pc, #20]	; (800435c <LL_ADC_Init+0x30>)
 8004348:	4028      	ands	r0, r5
 800434a:	4303      	orrs	r3, r0
  ErrorStatus status = SUCCESS;
 800434c:	0020      	movs	r0, r4
    MODIFY_REG(ADCx->CFGR1,
 800434e:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(ADCx->CFGR2,
 8004350:	6913      	ldr	r3, [r2, #16]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	089b      	lsrs	r3, r3, #2
 8004356:	430b      	orrs	r3, r1
 8004358:	6113      	str	r3, [r2, #16]
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 800435a:	bd30      	pop	{r4, r5, pc}
 800435c:	ffff3fc7 	.word	0xffff3fc7

08004360 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8004360:	b530      	push	{r4, r5, lr}
 8004362:	0002      	movs	r2, r0
 8004364:	6884      	ldr	r4, [r0, #8]
 8004366:	2001      	movs	r0, #1
 8004368:	4004      	ands	r4, r0
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800436a:	d10e      	bne.n	800438a <LL_ADC_REG_Init+0x2a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 800436c:	684d      	ldr	r5, [r1, #4]
 800436e:	680b      	ldr	r3, [r1, #0]
 8004370:	68d0      	ldr	r0, [r2, #12]
 8004372:	432b      	orrs	r3, r5
 8004374:	688d      	ldr	r5, [r1, #8]
 8004376:	432b      	orrs	r3, r5
 8004378:	68cd      	ldr	r5, [r1, #12]
 800437a:	6909      	ldr	r1, [r1, #16]
 800437c:	432b      	orrs	r3, r5
 800437e:	430b      	orrs	r3, r1
 8004380:	4902      	ldr	r1, [pc, #8]	; (800438c <LL_ADC_REG_Init+0x2c>)
 8004382:	4001      	ands	r1, r0
  ErrorStatus status = SUCCESS;
 8004384:	0020      	movs	r0, r4
    MODIFY_REG(ADCx->CFGR1,
 8004386:	430b      	orrs	r3, r1
 8004388:	60d3      	str	r3, [r2, #12]
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 800438a:	bd30      	pop	{r4, r5, pc}
 800438c:	fffec23c 	.word	0xfffec23c

08004390 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004390:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pinpos     = 0x00000000U;
 8004392:	2700      	movs	r7, #0
 8004394:	684b      	ldr	r3, [r1, #4]
{
 8004396:	b085      	sub	sp, #20
 8004398:	9301      	str	r3, [sp, #4]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800439a:	680e      	ldr	r6, [r1, #0]
 800439c:	3b01      	subs	r3, #1
 800439e:	9302      	str	r3, [sp, #8]
 80043a0:	0033      	movs	r3, r6
 80043a2:	40fb      	lsrs	r3, r7
 80043a4:	d10b      	bne.n	80043be <LL_GPIO_Init+0x2e>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80043a6:	9b02      	ldr	r3, [sp, #8]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d805      	bhi.n	80043b8 <LL_GPIO_Init+0x28>
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80043ac:	6843      	ldr	r3, [r0, #4]
 80043ae:	68ca      	ldr	r2, [r1, #12]
 80043b0:	43b3      	bics	r3, r6
 80043b2:	4356      	muls	r6, r2
 80043b4:	431e      	orrs	r6, r3
 80043b6:	6046      	str	r6, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 80043b8:	2000      	movs	r0, #0
 80043ba:	b005      	add	sp, #20
 80043bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80043be:	2301      	movs	r3, #1
 80043c0:	40bb      	lsls	r3, r7
 80043c2:	4033      	ands	r3, r6
    if (currentpin)
 80043c4:	d033      	beq.n	800442e <LL_GPIO_Init+0x9e>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80043c6:	001a      	movs	r2, r3
 80043c8:	2503      	movs	r5, #3
 80043ca:	435a      	muls	r2, r3
 80043cc:	4355      	muls	r5, r2
 80043ce:	43ed      	mvns	r5, r5
 80043d0:	6804      	ldr	r4, [r0, #0]
 80043d2:	9500      	str	r5, [sp, #0]
 80043d4:	402c      	ands	r4, r5
 80043d6:	9d01      	ldr	r5, [sp, #4]
 80043d8:	4355      	muls	r5, r2
 80043da:	432c      	orrs	r4, r5
 80043dc:	6004      	str	r4, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80043de:	9c02      	ldr	r4, [sp, #8]
 80043e0:	2c01      	cmp	r4, #1
 80043e2:	d80a      	bhi.n	80043fa <LL_GPIO_Init+0x6a>
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 80043e4:	6884      	ldr	r4, [r0, #8]
 80043e6:	46a4      	mov	ip, r4
 80043e8:	4665      	mov	r5, ip
 80043ea:	688c      	ldr	r4, [r1, #8]
 80043ec:	4354      	muls	r4, r2
 80043ee:	9403      	str	r4, [sp, #12]
 80043f0:	9c00      	ldr	r4, [sp, #0]
 80043f2:	4025      	ands	r5, r4
 80043f4:	9c03      	ldr	r4, [sp, #12]
 80043f6:	432c      	orrs	r4, r5
 80043f8:	6084      	str	r4, [r0, #8]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80043fa:	68c4      	ldr	r4, [r0, #12]
 80043fc:	46a4      	mov	ip, r4
 80043fe:	4665      	mov	r5, ip
 8004400:	690c      	ldr	r4, [r1, #16]
 8004402:	4354      	muls	r4, r2
 8004404:	9403      	str	r4, [sp, #12]
 8004406:	9c00      	ldr	r4, [sp, #0]
 8004408:	402c      	ands	r4, r5
 800440a:	0025      	movs	r5, r4
 800440c:	9c03      	ldr	r4, [sp, #12]
 800440e:	4325      	orrs	r5, r4
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004410:	9c01      	ldr	r4, [sp, #4]
 8004412:	60c5      	str	r5, [r0, #12]
 8004414:	2c02      	cmp	r4, #2
 8004416:	d10a      	bne.n	800442e <LL_GPIO_Init+0x9e>
 8004418:	694c      	ldr	r4, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 800441a:	2bff      	cmp	r3, #255	; 0xff
 800441c:	d809      	bhi.n	8004432 <LL_GPIO_Init+0xa2>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800441e:	250f      	movs	r5, #15
 8004420:	4352      	muls	r2, r2
 8004422:	4355      	muls	r5, r2
 8004424:	4362      	muls	r2, r4
 8004426:	6a03      	ldr	r3, [r0, #32]
 8004428:	43ab      	bics	r3, r5
 800442a:	4313      	orrs	r3, r2
 800442c:	6203      	str	r3, [r0, #32]
    pinpos++;
 800442e:	3701      	adds	r7, #1
 8004430:	e7b6      	b.n	80043a0 <LL_GPIO_Init+0x10>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8004432:	220f      	movs	r2, #15
 8004434:	0a1b      	lsrs	r3, r3, #8
 8004436:	435b      	muls	r3, r3
 8004438:	435b      	muls	r3, r3
 800443a:	435a      	muls	r2, r3
 800443c:	4363      	muls	r3, r4
 800443e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004440:	4395      	bics	r5, r2
 8004442:	431d      	orrs	r5, r3
 8004444:	6245      	str	r5, [r0, #36]	; 0x24
 8004446:	e7f2      	b.n	800442e <LL_GPIO_Init+0x9e>

08004448 <LL_I2C_Init>:
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004448:	2201      	movs	r2, #1
 800444a:	6803      	ldr	r3, [r0, #0]
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800444c:	b530      	push	{r4, r5, lr}
 800444e:	4393      	bics	r3, r2
 8004450:	6003      	str	r3, [r0, #0]
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8004452:	68cb      	ldr	r3, [r1, #12]
 8004454:	688d      	ldr	r5, [r1, #8]
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	6804      	ldr	r4, [r0, #0]
 800445a:	432b      	orrs	r3, r5
 800445c:	4d14      	ldr	r5, [pc, #80]	; (80044b0 <LL_I2C_Init+0x68>)
 800445e:	402c      	ands	r4, r5
 8004460:	4323      	orrs	r3, r4
 8004462:	6003      	str	r3, [r0, #0]
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8004464:	684b      	ldr	r3, [r1, #4]
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8004466:	690d      	ldr	r5, [r1, #16]
 8004468:	6103      	str	r3, [r0, #16]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800446a:	6803      	ldr	r3, [r0, #0]
 800446c:	431a      	orrs	r2, r3
 800446e:	6002      	str	r2, [r0, #0]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8004470:	6882      	ldr	r2, [r0, #8]
 8004472:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <LL_I2C_Init+0x6c>)
 8004474:	401a      	ands	r2, r3
 8004476:	6082      	str	r2, [r0, #8]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8004478:	6884      	ldr	r4, [r0, #8]
 800447a:	698a      	ldr	r2, [r1, #24]
 800447c:	0ae4      	lsrs	r4, r4, #11
 800447e:	02e4      	lsls	r4, r4, #11
 8004480:	432a      	orrs	r2, r5
 8004482:	4322      	orrs	r2, r4
 8004484:	6082      	str	r2, [r0, #8]
 8004486:	001c      	movs	r4, r3

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8004488:	2d00      	cmp	r5, #0
 800448a:	d004      	beq.n	8004496 <LL_I2C_Init+0x4e>
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	6882      	ldr	r2, [r0, #8]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	4313      	orrs	r3, r2
 8004494:	6083      	str	r3, [r0, #8]
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8004496:	6802      	ldr	r2, [r0, #0]
 8004498:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <LL_I2C_Init+0x70>)
 800449a:	401a      	ands	r2, r3
 800449c:	680b      	ldr	r3, [r1, #0]
 800449e:	431a      	orrs	r2, r3
 80044a0:	6002      	str	r2, [r0, #0]
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80044a2:	6843      	ldr	r3, [r0, #4]
 80044a4:	694a      	ldr	r2, [r1, #20]
 80044a6:	4023      	ands	r3, r4
 80044a8:	4313      	orrs	r3, r2
 80044aa:	6043      	str	r3, [r0, #4]
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);

  return SUCCESS;
}
 80044ac:	2000      	movs	r0, #0
 80044ae:	bd30      	pop	{r4, r5, pc}
 80044b0:	ffffe0ff 	.word	0xffffe0ff
 80044b4:	ffff7fff 	.word	0xffff7fff
 80044b8:	ffcfffff 	.word	0xffcfffff

080044bc <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabled(USART_TypeDef *LPUARTx)
{
  return (READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80044be:	2501      	movs	r5, #1
 80044c0:	0004      	movs	r4, r0
 80044c2:	6800      	ldr	r0, [r0, #0]
 80044c4:	000e      	movs	r6, r1
 80044c6:	4005      	ands	r5, r0
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 80044c8:	d001      	beq.n	80044ce <LL_LPUART_Init+0x12>
  ErrorStatus status = ERROR;
 80044ca:	2001      	movs	r0, #1
    }

  }

  return (status);
}
 80044cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 80044ce:	20c0      	movs	r0, #192	; 0xc0
    MODIFY_REG(LPUARTx->CR1,
 80044d0:	684b      	ldr	r3, [r1, #4]
 80044d2:	68c9      	ldr	r1, [r1, #12]
 80044d4:	6822      	ldr	r2, [r4, #0]
 80044d6:	430b      	orrs	r3, r1
 80044d8:	6931      	ldr	r1, [r6, #16]
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 80044da:	0100      	lsls	r0, r0, #4
    MODIFY_REG(LPUARTx->CR1,
 80044dc:	430b      	orrs	r3, r1
 80044de:	4912      	ldr	r1, [pc, #72]	; (8004528 <LL_LPUART_Init+0x6c>)
 80044e0:	400a      	ands	r2, r1
 80044e2:	4313      	orrs	r3, r2
 80044e4:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_LPUART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetStopBitsLength(USART_TypeDef *LPUARTx, uint32_t StopBits)
{
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 80044e6:	6863      	ldr	r3, [r4, #4]
 80044e8:	4a10      	ldr	r2, [pc, #64]	; (800452c <LL_LPUART_Init+0x70>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	68b2      	ldr	r2, [r6, #8]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	6063      	str	r3, [r4, #4]
  *         @arg @ref LL_LPUART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetHWFlowCtrl(USART_TypeDef *LPUARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80044f2:	68a3      	ldr	r3, [r4, #8]
 80044f4:	4a0e      	ldr	r2, [pc, #56]	; (8004530 <LL_LPUART_Init+0x74>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	6972      	ldr	r2, [r6, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60a3      	str	r3, [r4, #8]
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 80044fe:	f000 f917 	bl	8004730 <LL_RCC_GetLPUARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004502:	2800      	cmp	r0, #0
 8004504:	d0e1      	beq.n	80044ca <LL_LPUART_Init+0xe>
        && (LPUART_InitStruct->BaudRate != 0U))
 8004506:	6832      	ldr	r2, [r6, #0]
 8004508:	2a00      	cmp	r2, #0
 800450a:	d0de      	beq.n	80044ca <LL_LPUART_Init+0xe>
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetBaudRate(USART_TypeDef *LPUARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
  LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, BaudRate);
 800450c:	0029      	movs	r1, r5
 800450e:	0e07      	lsrs	r7, r0, #24
 8004510:	0206      	lsls	r6, r0, #8
 8004512:	0850      	lsrs	r0, r2, #1
 8004514:	1980      	adds	r0, r0, r6
 8004516:	4179      	adcs	r1, r7
 8004518:	002b      	movs	r3, r5
 800451a:	f7fb ff15 	bl	8000348 <__aeabi_uldivmod>
 800451e:	0300      	lsls	r0, r0, #12
 8004520:	0b00      	lsrs	r0, r0, #12
 8004522:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 8004524:	0028      	movs	r0, r5
 8004526:	e7d1      	b.n	80044cc <LL_LPUART_Init+0x10>
 8004528:	efffe9f3 	.word	0xefffe9f3
 800452c:	ffffcfff 	.word	0xffffcfff
 8004530:	fffffcff 	.word	0xfffffcff

08004534 <LL_RCC_HSI_IsReady>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004534:	4b02      	ldr	r3, [pc, #8]	; (8004540 <LL_RCC_HSI_IsReady+0xc>)
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	0740      	lsls	r0, r0, #29
 800453a:	0fc0      	lsrs	r0, r0, #31
}
 800453c:	4770      	bx	lr
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	40021000 	.word	0x40021000

08004544 <LL_RCC_LSE_IsReady>:
  * @rmtoll CSR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8004544:	4b02      	ldr	r3, [pc, #8]	; (8004550 <LL_RCC_LSE_IsReady+0xc>)
 8004546:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004548:	0580      	lsls	r0, r0, #22
 800454a:	0fc0      	lsrs	r0, r0, #31
}
 800454c:	4770      	bx	lr
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	40021000 	.word	0x40021000

08004554 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8004554:	4b02      	ldr	r3, [pc, #8]	; (8004560 <LL_RCC_IsActiveFlag_HSIDIV+0xc>)
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	06c0      	lsls	r0, r0, #27
 800455a:	0fc0      	lsrs	r0, r0, #31
}
 800455c:	4770      	bx	lr
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	40021000 	.word	0x40021000

08004564 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004566:	4a04      	ldr	r2, [pc, #16]	; (8004578 <RCC_GetHCLKClockFreq+0x14>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	061b      	lsls	r3, r3, #24
 800456c:	0f1b      	lsrs	r3, r3, #28
 800456e:	5cd3      	ldrb	r3, [r2, r3]
 8004570:	40d8      	lsrs	r0, r3
}
 8004572:	4770      	bx	lr
 8004574:	40021000 	.word	0x40021000
 8004578:	0800c2c4 	.word	0x0800c2c4

0800457c <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800457e:	4a04      	ldr	r2, [pc, #16]	; (8004590 <RCC_GetPCLK1ClockFreq+0x14>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	055b      	lsls	r3, r3, #21
 8004584:	0f5b      	lsrs	r3, r3, #29
 8004586:	5cd3      	ldrb	r3, [r2, r3]
 8004588:	40d8      	lsrs	r0, r3
}
 800458a:	4770      	bx	lr
 800458c:	40021000 	.word	0x40021000
 8004590:	0800c2d4 	.word	0x0800c2d4

08004594 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004594:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004596:	4a04      	ldr	r2, [pc, #16]	; (80045a8 <RCC_GetPCLK2ClockFreq+0x14>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	049b      	lsls	r3, r3, #18
 800459c:	0f5b      	lsrs	r3, r3, #29
 800459e:	5cd3      	ldrb	r3, [r2, r3]
 80045a0:	40d8      	lsrs	r0, r3
}
 80045a2:	4770      	bx	lr
 80045a4:	40021000 	.word	0x40021000
 80045a8:	0800c2d4 	.word	0x0800c2d4

080045ac <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80045ac:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80045ae:	4c0e      	ldr	r4, [pc, #56]	; (80045e8 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 80045b0:	68e3      	ldr	r3, [r4, #12]
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 80045b2:	03db      	lsls	r3, r3, #15
 80045b4:	d415      	bmi.n	80045e2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80045b6:	f7ff ffcd 	bl	8004554 <LL_RCC_IsActiveFlag_HSIDIV>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
      }
      else
      {
        pllinputfreq = HSI_VALUE;
 80045ba:	1e43      	subs	r3, r0, #1
 80045bc:	4198      	sbcs	r0, r3
 80045be:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <RCC_PLL_GetFreqDomain_SYS+0x40>)
 80045c0:	4240      	negs	r0, r0
 80045c2:	4018      	ands	r0, r3
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 80045c6:	18c0      	adds	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80045c8:	68e3      	ldr	r3, [r4, #12]

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 80045ca:	4a0a      	ldr	r2, [pc, #40]	; (80045f4 <RCC_PLL_GetFreqDomain_SYS+0x48>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 80045cc:	68e1      	ldr	r1, [r4, #12]
 80045ce:	029b      	lsls	r3, r3, #10
 80045d0:	0f1b      	lsrs	r3, r3, #28
 80045d2:	5cd3      	ldrb	r3, [r2, r3]
 80045d4:	0209      	lsls	r1, r1, #8
 80045d6:	0f89      	lsrs	r1, r1, #30
 80045d8:	4358      	muls	r0, r3
 80045da:	3101      	adds	r1, #1
 80045dc:	f7fb fdb0 	bl	8000140 <__udivsi3>
}
 80045e0:	bd10      	pop	{r4, pc}
      pllinputfreq = HSE_VALUE;
 80045e2:	4805      	ldr	r0, [pc, #20]	; (80045f8 <RCC_PLL_GetFreqDomain_SYS+0x4c>)
 80045e4:	e7f0      	b.n	80045c8 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	40021000 	.word	0x40021000
 80045ec:	ff48e500 	.word	0xff48e500
 80045f0:	00f42400 	.word	0x00f42400
 80045f4:	0800c2dc 	.word	0x0800c2dc
 80045f8:	007a1200 	.word	0x007a1200

080045fc <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80045fc:	220c      	movs	r2, #12
 80045fe:	4b12      	ldr	r3, [pc, #72]	; (8004648 <RCC_GetSystemClockFreq+0x4c>)
{
 8004600:	b510      	push	{r4, lr}
 8004602:	68d8      	ldr	r0, [r3, #12]
 8004604:	4010      	ands	r0, r2
  switch (LL_RCC_GetSysClkSource())
 8004606:	f7fb fd87 	bl	8000118 <__gnu_thumb1_case_uqi>
 800460a:	1414      	.short	0x1414
 800460c:	14071414 	.word	0x14071414
 8004610:	141c1414 	.word	0x141c1414
 8004614:	1414      	.short	0x1414
 8004616:	11          	.byte	0x11
 8004617:	00          	.byte	0x00
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8004618:	f7ff ff9c 	bl	8004554 <LL_RCC_IsActiveFlag_HSIDIV>
        frequency = HSI_VALUE;
 800461c:	1e43      	subs	r3, r0, #1
 800461e:	4198      	sbcs	r0, r3
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <RCC_GetSystemClockFreq+0x50>)
 8004622:	4240      	negs	r0, r0
 8004624:	4018      	ands	r0, r3
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <RCC_GetSystemClockFreq+0x54>)
 8004628:	18c0      	adds	r0, r0, r3
}
 800462a:	bd10      	pop	{r4, pc}
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800462c:	f7ff ffbe 	bl	80045ac <RCC_PLL_GetFreqDomain_SYS>
      break;
 8004630:	e7fb      	b.n	800462a <RCC_GetSystemClockFreq+0x2e>
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004632:	2080      	movs	r0, #128	; 0x80
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	0200      	lsls	r0, r0, #8
 8004638:	041b      	lsls	r3, r3, #16
 800463a:	0f5b      	lsrs	r3, r3, #29
 800463c:	3301      	adds	r3, #1
 800463e:	4098      	lsls	r0, r3
 8004640:	e7f3      	b.n	800462a <RCC_GetSystemClockFreq+0x2e>
      frequency = HSE_VALUE;
 8004642:	4804      	ldr	r0, [pc, #16]	; (8004654 <RCC_GetSystemClockFreq+0x58>)
 8004644:	e7f1      	b.n	800462a <RCC_GetSystemClockFreq+0x2e>
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	40021000 	.word	0x40021000
 800464c:	ff48e500 	.word	0xff48e500
 8004650:	00f42400 	.word	0x00f42400
 8004654:	007a1200 	.word	0x007a1200

08004658 <LL_RCC_GetSystemClocksFreq>:
{
 8004658:	b510      	push	{r4, lr}
 800465a:	0004      	movs	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800465c:	f7ff ffce 	bl	80045fc <RCC_GetSystemClockFreq>
 8004660:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004662:	f7ff ff7f 	bl	8004564 <RCC_GetHCLKClockFreq>
 8004666:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004668:	f7ff ff88 	bl	800457c <RCC_GetPCLK1ClockFreq>
 800466c:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800466e:	6860      	ldr	r0, [r4, #4]
 8004670:	f7ff ff90 	bl	8004594 <RCC_GetPCLK2ClockFreq>
 8004674:	60e0      	str	r0, [r4, #12]
}
 8004676:	bd10      	pop	{r4, pc}

08004678 <LL_RCC_GetUSARTClockFreq>:
{
 8004678:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800467a:	2803      	cmp	r0, #3
 800467c:	d123      	bne.n	80046c6 <LL_RCC_GetUSARTClockFreq+0x4e>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800467e:	4b23      	ldr	r3, [pc, #140]	; (800470c <LL_RCC_GetUSARTClockFreq+0x94>)
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	4003      	ands	r3, r0
 8004684:	20c0      	movs	r0, #192	; 0xc0
 8004686:	0280      	lsls	r0, r0, #10
 8004688:	4318      	orrs	r0, r3
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800468a:	4b21      	ldr	r3, [pc, #132]	; (8004710 <LL_RCC_GetUSARTClockFreq+0x98>)
 800468c:	4298      	cmp	r0, r3
 800468e:	d032      	beq.n	80046f6 <LL_RCC_GetUSARTClockFreq+0x7e>
 8004690:	4b20      	ldr	r3, [pc, #128]	; (8004714 <LL_RCC_GetUSARTClockFreq+0x9c>)
 8004692:	4298      	cmp	r0, r3
 8004694:	d007      	beq.n	80046a6 <LL_RCC_GetUSARTClockFreq+0x2e>
 8004696:	4b20      	ldr	r3, [pc, #128]	; (8004718 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8004698:	4298      	cmp	r0, r3
 800469a:	d10d      	bne.n	80046b8 <LL_RCC_GetUSARTClockFreq+0x40>
        usart_frequency = RCC_GetSystemClockFreq();
 800469c:	f7ff ffae 	bl	80045fc <RCC_GetSystemClockFreq>
}
 80046a0:	bd10      	pop	{r4, pc}
            usart_frequency = HSI_VALUE;
 80046a2:	481e      	ldr	r0, [pc, #120]	; (800471c <LL_RCC_GetUSARTClockFreq+0xa4>)
 80046a4:	e7fc      	b.n	80046a0 <LL_RCC_GetUSARTClockFreq+0x28>
        if (LL_RCC_LSE_IsReady() != 0U)
 80046a6:	f7ff ff4d 	bl	8004544 <LL_RCC_LSE_IsReady>
 80046aa:	0003      	movs	r3, r0
          usart_frequency = LSE_VALUE;
 80046ac:	2080      	movs	r0, #128	; 0x80
 80046ae:	0200      	lsls	r0, r0, #8
        if (LL_RCC_LSE_IsReady() != 0U)
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f5      	bne.n	80046a0 <LL_RCC_GetUSARTClockFreq+0x28>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80046b4:	2000      	movs	r0, #0
 80046b6:	e7f3      	b.n	80046a0 <LL_RCC_GetUSARTClockFreq+0x28>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80046b8:	f7ff ffa0 	bl	80045fc <RCC_GetSystemClockFreq>
 80046bc:	f7ff ff52 	bl	8004564 <RCC_GetHCLKClockFreq>
 80046c0:	f7ff ff68 	bl	8004594 <RCC_GetPCLK2ClockFreq>
        break;
 80046c4:	e7ec      	b.n	80046a0 <LL_RCC_GetUSARTClockFreq+0x28>
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80046c6:	280c      	cmp	r0, #12
 80046c8:	d1f4      	bne.n	80046b4 <LL_RCC_GetUSARTClockFreq+0x3c>
 80046ca:	4b10      	ldr	r3, [pc, #64]	; (800470c <LL_RCC_GetUSARTClockFreq+0x94>)
 80046cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ce:	4003      	ands	r3, r0
 80046d0:	20c0      	movs	r0, #192	; 0xc0
 80046d2:	0300      	lsls	r0, r0, #12
 80046d4:	4318      	orrs	r0, r3
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80046d6:	4b12      	ldr	r3, [pc, #72]	; (8004720 <LL_RCC_GetUSARTClockFreq+0xa8>)
 80046d8:	4298      	cmp	r0, r3
 80046da:	d00c      	beq.n	80046f6 <LL_RCC_GetUSARTClockFreq+0x7e>
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <LL_RCC_GetUSARTClockFreq+0xac>)
 80046de:	4298      	cmp	r0, r3
 80046e0:	d0e1      	beq.n	80046a6 <LL_RCC_GetUSARTClockFreq+0x2e>
 80046e2:	4b11      	ldr	r3, [pc, #68]	; (8004728 <LL_RCC_GetUSARTClockFreq+0xb0>)
 80046e4:	4298      	cmp	r0, r3
 80046e6:	d0d9      	beq.n	800469c <LL_RCC_GetUSARTClockFreq+0x24>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80046e8:	f7ff ff88 	bl	80045fc <RCC_GetSystemClockFreq>
 80046ec:	f7ff ff3a 	bl	8004564 <RCC_GetHCLKClockFreq>
 80046f0:	f7ff ff44 	bl	800457c <RCC_GetPCLK1ClockFreq>
        break;
 80046f4:	e7d4      	b.n	80046a0 <LL_RCC_GetUSARTClockFreq+0x28>
        if (LL_RCC_HSI_IsReady() != 0U)
 80046f6:	f7ff ff1d 	bl	8004534 <LL_RCC_HSI_IsReady>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	d0da      	beq.n	80046b4 <LL_RCC_GetUSARTClockFreq+0x3c>
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80046fe:	f7ff ff29 	bl	8004554 <LL_RCC_IsActiveFlag_HSIDIV>
 8004702:	2800      	cmp	r0, #0
 8004704:	d0cd      	beq.n	80046a2 <LL_RCC_GetUSARTClockFreq+0x2a>
            usart_frequency = (HSI_VALUE >> 2U);
 8004706:	4809      	ldr	r0, [pc, #36]	; (800472c <LL_RCC_GetUSARTClockFreq+0xb4>)
 8004708:	e7ca      	b.n	80046a0 <LL_RCC_GetUSARTClockFreq+0x28>
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	40021000 	.word	0x40021000
 8004710:	00030002 	.word	0x00030002
 8004714:	00030003 	.word	0x00030003
 8004718:	00030001 	.word	0x00030001
 800471c:	00f42400 	.word	0x00f42400
 8004720:	000c0008 	.word	0x000c0008
 8004724:	000c000c 	.word	0x000c000c
 8004728:	000c0004 	.word	0x000c0004
 800472c:	003d0900 	.word	0x003d0900

08004730 <LL_RCC_GetLPUARTClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004730:	4b18      	ldr	r3, [pc, #96]	; (8004794 <LL_RCC_GetLPUARTClockFreq+0x64>)
{
 8004732:	b510      	push	{r4, lr}
 8004734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004736:	4018      	ands	r0, r3
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	4298      	cmp	r0, r3
 800473e:	d00a      	beq.n	8004756 <LL_RCC_GetLPUARTClockFreq+0x26>
 8004740:	23c0      	movs	r3, #192	; 0xc0
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	4298      	cmp	r0, r3
 8004746:	d016      	beq.n	8004776 <LL_RCC_GetLPUARTClockFreq+0x46>
 8004748:	2380      	movs	r3, #128	; 0x80
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4298      	cmp	r0, r3
 800474e:	d119      	bne.n	8004784 <LL_RCC_GetLPUARTClockFreq+0x54>
      lpuart_frequency = RCC_GetSystemClockFreq();
 8004750:	f7ff ff54 	bl	80045fc <RCC_GetSystemClockFreq>
}
 8004754:	bd10      	pop	{r4, pc}
      if (LL_RCC_HSI_IsReady() != 0U)
 8004756:	f7ff feed 	bl	8004534 <LL_RCC_HSI_IsReady>
 800475a:	2800      	cmp	r0, #0
 800475c:	d101      	bne.n	8004762 <LL_RCC_GetLPUARTClockFreq+0x32>
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800475e:	2000      	movs	r0, #0
 8004760:	e7f8      	b.n	8004754 <LL_RCC_GetLPUARTClockFreq+0x24>
        if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8004762:	f7ff fef7 	bl	8004554 <LL_RCC_IsActiveFlag_HSIDIV>
          lpuart_frequency = HSI_VALUE;
 8004766:	1e43      	subs	r3, r0, #1
 8004768:	4198      	sbcs	r0, r3
 800476a:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <LL_RCC_GetLPUARTClockFreq+0x68>)
 800476c:	4240      	negs	r0, r0
 800476e:	4018      	ands	r0, r3
 8004770:	4b0a      	ldr	r3, [pc, #40]	; (800479c <LL_RCC_GetLPUARTClockFreq+0x6c>)
 8004772:	18c0      	adds	r0, r0, r3
 8004774:	e7ee      	b.n	8004754 <LL_RCC_GetLPUARTClockFreq+0x24>
      if (LL_RCC_LSE_IsReady() != 0U)
 8004776:	f7ff fee5 	bl	8004544 <LL_RCC_LSE_IsReady>
 800477a:	2800      	cmp	r0, #0
 800477c:	d0ef      	beq.n	800475e <LL_RCC_GetLPUARTClockFreq+0x2e>
        lpuart_frequency = LSE_VALUE;
 800477e:	2080      	movs	r0, #128	; 0x80
 8004780:	0200      	lsls	r0, r0, #8
  return lpuart_frequency;
 8004782:	e7e7      	b.n	8004754 <LL_RCC_GetLPUARTClockFreq+0x24>
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004784:	f7ff ff3a 	bl	80045fc <RCC_GetSystemClockFreq>
 8004788:	f7ff feec 	bl	8004564 <RCC_GetHCLKClockFreq>
 800478c:	f7ff fef6 	bl	800457c <RCC_GetPCLK1ClockFreq>
      break;
 8004790:	e7e0      	b.n	8004754 <LL_RCC_GetLPUARTClockFreq+0x24>
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	40021000 	.word	0x40021000
 8004798:	ff48e500 	.word	0xff48e500
 800479c:	00f42400 	.word	0x00f42400

080047a0 <LL_RTC_EnterInitMode>:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80047a0:	23fa      	movs	r3, #250	; 0xfa
{
 80047a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return ((READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF)) ? 1UL : 0UL);
 80047a8:	68c3      	ldr	r3, [r0, #12]
{
 80047aa:	0001      	movs	r1, r0
  ErrorStatus status = SUCCESS;
 80047ac:	2000      	movs	r0, #0
 80047ae:	065b      	lsls	r3, r3, #25
 80047b0:	d40e      	bmi.n	80047d0 <LL_RTC_EnterInitMode+0x30>
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 80047b2:	2301      	movs	r3, #1
  return ((READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF)) ? 1UL : 0UL);
 80047b4:	2201      	movs	r2, #1
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80047b6:	2580      	movs	r5, #128	; 0x80
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 80047b8:	425b      	negs	r3, r3
 80047ba:	60cb      	str	r3, [r1, #12]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF)) ? 1UL : 0UL);
 80047bc:	68cb      	ldr	r3, [r1, #12]
 80047be:	4c0c      	ldr	r4, [pc, #48]	; (80047f0 <LL_RTC_EnterInitMode+0x50>)
 80047c0:	099b      	lsrs	r3, r3, #6
 80047c2:	4013      	ands	r3, r2
 80047c4:	026d      	lsls	r5, r5, #9
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 80047c6:	9e01      	ldr	r6, [sp, #4]
 80047c8:	2e00      	cmp	r6, #0
 80047ca:	d001      	beq.n	80047d0 <LL_RTC_EnterInitMode+0x30>
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d100      	bne.n	80047d2 <LL_RTC_EnterInitMode+0x32>
        status = ERROR;
      }
    }
  }
  return status;
}
 80047d0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80047d2:	6823      	ldr	r3, [r4, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80047d4:	422b      	tst	r3, r5
 80047d6:	d002      	beq.n	80047de <LL_RTC_EnterInitMode+0x3e>
        timeout --;
 80047d8:	9b01      	ldr	r3, [sp, #4]
 80047da:	3b01      	subs	r3, #1
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	68cb      	ldr	r3, [r1, #12]
      if (timeout == 0U)
 80047e0:	9e01      	ldr	r6, [sp, #4]
 80047e2:	099b      	lsrs	r3, r3, #6
 80047e4:	4013      	ands	r3, r2
 80047e6:	2e00      	cmp	r6, #0
 80047e8:	d1ed      	bne.n	80047c6 <LL_RTC_EnterInitMode+0x26>
        status = ERROR;
 80047ea:	0010      	movs	r0, r2
 80047ec:	e7eb      	b.n	80047c6 <LL_RTC_EnterInitMode+0x26>
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	e000e010 	.word	0xe000e010

080047f4 <LL_RTC_Init>:
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80047f4:	23ca      	movs	r3, #202	; 0xca
{
 80047f6:	b570      	push	{r4, r5, r6, lr}
 80047f8:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80047fa:	3b77      	subs	r3, #119	; 0x77
 80047fc:	6243      	str	r3, [r0, #36]	; 0x24
 80047fe:	0004      	movs	r4, r0
 8004800:	000d      	movs	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8004802:	f7ff ffcd 	bl	80047a0 <LL_RTC_EnterInitMode>
 8004806:	2801      	cmp	r0, #1
 8004808:	d016      	beq.n	8004838 <LL_RTC_Init+0x44>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 800480a:	2240      	movs	r2, #64	; 0x40
 800480c:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 800480e:	490c      	ldr	r1, [pc, #48]	; (8004840 <LL_RTC_Init+0x4c>)
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8004810:	4393      	bics	r3, r2
 8004812:	682a      	ldr	r2, [r5, #0]
    status = SUCCESS;
 8004814:	2000      	movs	r0, #0
 8004816:	4313      	orrs	r3, r2
 8004818:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800481a:	6923      	ldr	r3, [r4, #16]
 800481c:	68aa      	ldr	r2, [r5, #8]
 800481e:	0bdb      	lsrs	r3, r3, #15
 8004820:	03db      	lsls	r3, r3, #15
 8004822:	4313      	orrs	r3, r2
 8004824:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8004826:	6922      	ldr	r2, [r4, #16]
 8004828:	686b      	ldr	r3, [r5, #4]
 800482a:	400a      	ands	r2, r1
 800482c:	041b      	lsls	r3, r3, #16
 800482e:	4313      	orrs	r3, r2
 8004830:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8004832:	2381      	movs	r3, #129	; 0x81
 8004834:	425b      	negs	r3, r3
 8004836:	60e3      	str	r3, [r4, #12]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8004838:	23ff      	movs	r3, #255	; 0xff
 800483a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800483c:	bd70      	pop	{r4, r5, r6, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	ff80ffff 	.word	0xff80ffff

08004844 <LL_RTC_WaitForSynchro>:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8004844:	23fa      	movs	r3, #250	; 0xfa
{
 8004846:	b573      	push	{r0, r1, r4, r5, r6, lr}
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8004848:	2180      	movs	r1, #128	; 0x80
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	9301      	str	r3, [sp, #4]
 800484e:	68c3      	ldr	r3, [r0, #12]
 8004850:	2580      	movs	r5, #128	; 0x80
 8004852:	4019      	ands	r1, r3
 8004854:	23a1      	movs	r3, #161	; 0xa1
 8004856:	425b      	negs	r3, r3
 8004858:	430b      	orrs	r3, r1
 800485a:	60c3      	str	r3, [r0, #12]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF)) ? 1UL : 0UL);
 800485c:	2101      	movs	r1, #1
 800485e:	68c3      	ldr	r3, [r0, #12]
{
 8004860:	0002      	movs	r2, r0
 8004862:	2000      	movs	r0, #0
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	4c1b      	ldr	r4, [pc, #108]	; (80048d4 <LL_RTC_WaitForSynchro+0x90>)
 8004868:	400b      	ands	r3, r1
 800486a:	026d      	lsls	r5, r5, #9
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 800486c:	9e01      	ldr	r6, [sp, #4]
 800486e:	2e00      	cmp	r6, #0
 8004870:	d102      	bne.n	8004878 <LL_RTC_WaitForSynchro+0x34>
    {
      status = ERROR;
    }
  }

  if (status != ERROR)
 8004872:	2801      	cmp	r0, #1
 8004874:	d110      	bne.n	8004898 <LL_RTC_WaitForSynchro+0x54>
      }
    }
  }

  return (status);
}
 8004876:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  while ((timeout != 0U) && (tmp != 0U))
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0fa      	beq.n	8004872 <LL_RTC_WaitForSynchro+0x2e>
 800487c:	6823      	ldr	r3, [r4, #0]
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800487e:	422b      	tst	r3, r5
 8004880:	d002      	beq.n	8004888 <LL_RTC_WaitForSynchro+0x44>
      timeout--;
 8004882:	9b01      	ldr	r3, [sp, #4]
 8004884:	3b01      	subs	r3, #1
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	68d3      	ldr	r3, [r2, #12]
    if (timeout == 0U)
 800488a:	9e01      	ldr	r6, [sp, #4]
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	400b      	ands	r3, r1
 8004890:	2e00      	cmp	r6, #0
 8004892:	d1eb      	bne.n	800486c <LL_RTC_WaitForSynchro+0x28>
      status = ERROR;
 8004894:	0008      	movs	r0, r1
 8004896:	e7e9      	b.n	800486c <LL_RTC_WaitForSynchro+0x28>
    timeout = RTC_SYNCHRO_TIMEOUT;
 8004898:	23fa      	movs	r3, #250	; 0xfa
 800489a:	2101      	movs	r1, #1
 800489c:	2580      	movs	r5, #128	; 0x80
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	68d3      	ldr	r3, [r2, #12]
 80048a4:	4c0b      	ldr	r4, [pc, #44]	; (80048d4 <LL_RTC_WaitForSynchro+0x90>)
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	400b      	ands	r3, r1
 80048aa:	026d      	lsls	r5, r5, #9
    while ((timeout != 0U) && (tmp != 1U))
 80048ac:	9e01      	ldr	r6, [sp, #4]
 80048ae:	2e00      	cmp	r6, #0
 80048b0:	d0e1      	beq.n	8004876 <LL_RTC_WaitForSynchro+0x32>
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d0df      	beq.n	8004876 <LL_RTC_WaitForSynchro+0x32>
 80048b6:	6823      	ldr	r3, [r4, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80048b8:	422b      	tst	r3, r5
 80048ba:	d002      	beq.n	80048c2 <LL_RTC_WaitForSynchro+0x7e>
        timeout--;
 80048bc:	9b01      	ldr	r3, [sp, #4]
 80048be:	3b01      	subs	r3, #1
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	68d3      	ldr	r3, [r2, #12]
      if (timeout == 0U)
 80048c4:	9e01      	ldr	r6, [sp, #4]
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	400b      	ands	r3, r1
 80048ca:	2e00      	cmp	r6, #0
 80048cc:	d1ee      	bne.n	80048ac <LL_RTC_WaitForSynchro+0x68>
        status = ERROR;
 80048ce:	0008      	movs	r0, r1
 80048d0:	e7ec      	b.n	80048ac <LL_RTC_WaitForSynchro+0x68>
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	e000e010 	.word	0xe000e010

080048d8 <LL_RTC_TIME_Init>:
{
 80048d8:	2340      	movs	r3, #64	; 0x40
 80048da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048dc:	0014      	movs	r4, r2
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 80048de:	6882      	ldr	r2, [r0, #8]
 80048e0:	b085      	sub	sp, #20
 80048e2:	0005      	movs	r5, r0
 80048e4:	000f      	movs	r7, r1
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 80048e6:	421a      	tst	r2, r3
 80048e8:	d101      	bne.n	80048ee <LL_RTC_TIME_Init+0x16>
      RTC_TimeStruct->TimeFormat = 0x00U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	6023      	str	r3, [r4, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80048ee:	23ca      	movs	r3, #202	; 0xca
 80048f0:	626b      	str	r3, [r5, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80048f2:	3b77      	subs	r3, #119	; 0x77
 80048f4:	626b      	str	r3, [r5, #36]	; 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80048f6:	0028      	movs	r0, r5
 80048f8:	f7ff ff52 	bl	80047a0 <LL_RTC_EnterInitMode>
 80048fc:	2801      	cmp	r0, #1
 80048fe:	d01e      	beq.n	800493e <LL_RTC_TIME_Init+0x66>
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	9302      	str	r3, [sp, #8]
 8004904:	7963      	ldrb	r3, [r4, #5]
 8004906:	7926      	ldrb	r6, [r4, #4]
 8004908:	9301      	str	r3, [sp, #4]
 800490a:	79a4      	ldrb	r4, [r4, #6]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 800490c:	2f00      	cmp	r7, #0
 800490e:	d01a      	beq.n	8004946 <LL_RTC_TIME_Init+0x6e>
  temp = Format12_24                                                                                    | \
 8004910:	9b02      	ldr	r3, [sp, #8]
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8004912:	0436      	lsls	r6, r6, #16
  temp = Format12_24                                                                                    | \
 8004914:	431c      	orrs	r4, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8004916:	9b01      	ldr	r3, [sp, #4]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8004918:	682f      	ldr	r7, [r5, #0]
  temp = Format12_24                                                                                    | \
 800491a:	4334      	orrs	r4, r6
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 800491c:	021e      	lsls	r6, r3, #8
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800491e:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <LL_RTC_TIME_Init+0xcc>)
  temp = Format12_24                                                                                    | \
 8004920:	4334      	orrs	r4, r6
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8004922:	401f      	ands	r7, r3
 8004924:	433c      	orrs	r4, r7
 8004926:	602c      	str	r4, [r5, #0]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8004928:	2281      	movs	r2, #129	; 0x81
 800492a:	4b1f      	ldr	r3, [pc, #124]	; (80049a8 <LL_RTC_TIME_Init+0xd0>)
 800492c:	4252      	negs	r2, r2
 800492e:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD)) ? 1UL : 0UL);
 8004930:	68ab      	ldr	r3, [r5, #8]
      status = SUCCESS;
 8004932:	2000      	movs	r0, #0
 8004934:	069b      	lsls	r3, r3, #26
 8004936:	d402      	bmi.n	800493e <LL_RTC_TIME_Init+0x66>
      status = LL_RTC_WaitForSynchro(RTCx);
 8004938:	0028      	movs	r0, r5
 800493a:	f7ff ff83 	bl	8004844 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800493e:	23ff      	movs	r3, #255	; 0xff
 8004940:	626b      	str	r3, [r5, #36]	; 0x24
}
 8004942:	b005      	add	sp, #20
 8004944:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8004946:	682b      	ldr	r3, [r5, #0]
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8004948:	210a      	movs	r1, #10
 800494a:	0020      	movs	r0, r4
 800494c:	9303      	str	r3, [sp, #12]
 800494e:	f7fb fbf7 	bl	8000140 <__udivsi3>
 8004952:	210a      	movs	r1, #10
 8004954:	0107      	lsls	r7, r0, #4
 8004956:	0020      	movs	r0, r4
 8004958:	f7fb fc78 	bl	800024c <__aeabi_uidivmod>
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <LL_RTC_TIME_Init+0xcc>)
 800495e:	9c03      	ldr	r4, [sp, #12]
 8004960:	430f      	orrs	r7, r1
 8004962:	401c      	ands	r4, r3
 8004964:	9b02      	ldr	r3, [sp, #8]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8004966:	210a      	movs	r1, #10
 8004968:	0030      	movs	r0, r6
 800496a:	431c      	orrs	r4, r3
 800496c:	f7fb fbe8 	bl	8000140 <__udivsi3>
 8004970:	b2ff      	uxtb	r7, r7
 8004972:	4327      	orrs	r7, r4
 8004974:	210a      	movs	r1, #10
 8004976:	0104      	lsls	r4, r0, #4
 8004978:	0030      	movs	r0, r6
 800497a:	f7fb fc67 	bl	800024c <__aeabi_uidivmod>
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 800497e:	9801      	ldr	r0, [sp, #4]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8004980:	430c      	orrs	r4, r1
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8004982:	210a      	movs	r1, #10
 8004984:	f7fb fbdc 	bl	8000140 <__udivsi3>
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8004988:	b2e4      	uxtb	r4, r4
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 800498a:	0424      	lsls	r4, r4, #16
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800498c:	4327      	orrs	r7, r4
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 800498e:	210a      	movs	r1, #10
 8004990:	0104      	lsls	r4, r0, #4
 8004992:	9801      	ldr	r0, [sp, #4]
 8004994:	f7fb fc5a 	bl	800024c <__aeabi_uidivmod>
 8004998:	430c      	orrs	r4, r1
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 800499a:	b2e4      	uxtb	r4, r4
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 800499c:	0224      	lsls	r4, r4, #8
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800499e:	4327      	orrs	r7, r4
 80049a0:	602f      	str	r7, [r5, #0]
 80049a2:	e7c1      	b.n	8004928 <LL_RTC_TIME_Init+0x50>
 80049a4:	ff808080 	.word	0xff808080
 80049a8:	40002800 	.word	0x40002800

080049ac <LL_RTC_DATE_Init>:
{
 80049ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ae:	0004      	movs	r4, r0
 80049b0:	b085      	sub	sp, #20
 80049b2:	000f      	movs	r7, r1
 80049b4:	0015      	movs	r5, r2
  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 80049b6:	2900      	cmp	r1, #0
 80049b8:	d106      	bne.n	80049c8 <LL_RTC_DATE_Init+0x1c>
 80049ba:	7853      	ldrb	r3, [r2, #1]
 80049bc:	2210      	movs	r2, #16
 80049be:	4213      	tst	r3, r2
 80049c0:	d002      	beq.n	80049c8 <LL_RTC_DATE_Init+0x1c>
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint8_t)~(0x10U)) + 0x0AU;
 80049c2:	4393      	bics	r3, r2
 80049c4:	330a      	adds	r3, #10
 80049c6:	706b      	strb	r3, [r5, #1]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80049c8:	23ca      	movs	r3, #202	; 0xca
 80049ca:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80049cc:	3b77      	subs	r3, #119	; 0x77
 80049ce:	6263      	str	r3, [r4, #36]	; 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80049d0:	0020      	movs	r0, r4
 80049d2:	f7ff fee5 	bl	80047a0 <LL_RTC_EnterInitMode>
 80049d6:	2801      	cmp	r0, #1
 80049d8:	d021      	beq.n	8004a1e <LL_RTC_DATE_Init+0x72>
 80049da:	786b      	ldrb	r3, [r5, #1]
 80049dc:	78ae      	ldrb	r6, [r5, #2]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	78eb      	ldrb	r3, [r5, #3]
 80049e2:	782d      	ldrb	r5, [r5, #0]
 80049e4:	9301      	str	r3, [sp, #4]
 80049e6:	036b      	lsls	r3, r5, #13
 80049e8:	9302      	str	r3, [sp, #8]
 80049ea:	4d24      	ldr	r5, [pc, #144]	; (8004a7c <LL_RTC_DATE_Init+0xd0>)
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80049ec:	6863      	ldr	r3, [r4, #4]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 80049ee:	2f00      	cmp	r7, #0
 80049f0:	d019      	beq.n	8004a26 <LL_RTC_DATE_Init+0x7a>
 80049f2:	401d      	ands	r5, r3
 80049f4:	9b02      	ldr	r3, [sp, #8]
 80049f6:	432e      	orrs	r6, r5
 80049f8:	431e      	orrs	r6, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 80049fa:	9b01      	ldr	r3, [sp, #4]
 80049fc:	041d      	lsls	r5, r3, #16
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 80049fe:	9b00      	ldr	r3, [sp, #0]
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8004a00:	432e      	orrs	r6, r5
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8004a02:	021d      	lsls	r5, r3, #8
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8004a04:	2281      	movs	r2, #129	; 0x81
 8004a06:	4b1e      	ldr	r3, [pc, #120]	; (8004a80 <LL_RTC_DATE_Init+0xd4>)
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8004a08:	432e      	orrs	r6, r5
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8004a0a:	4252      	negs	r2, r2
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8004a0c:	6066      	str	r6, [r4, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8004a0e:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD)) ? 1UL : 0UL);
 8004a10:	68a3      	ldr	r3, [r4, #8]
      status = SUCCESS;
 8004a12:	2000      	movs	r0, #0
 8004a14:	069b      	lsls	r3, r3, #26
 8004a16:	d402      	bmi.n	8004a1e <LL_RTC_DATE_Init+0x72>
      status = LL_RTC_WaitForSynchro(RTCx);
 8004a18:	0020      	movs	r0, r4
 8004a1a:	f7ff ff13 	bl	8004844 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8004a1e:	23ff      	movs	r3, #255	; 0xff
 8004a20:	6263      	str	r3, [r4, #36]	; 0x24
}
 8004a22:	b005      	add	sp, #20
 8004a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8004a26:	210a      	movs	r1, #10
 8004a28:	0030      	movs	r0, r6
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8004a2a:	9303      	str	r3, [sp, #12]
 8004a2c:	f7fb fb88 	bl	8000140 <__udivsi3>
 8004a30:	210a      	movs	r1, #10
 8004a32:	0107      	lsls	r7, r0, #4
 8004a34:	0030      	movs	r0, r6
 8004a36:	f7fb fc09 	bl	800024c <__aeabi_uidivmod>
 8004a3a:	9b03      	ldr	r3, [sp, #12]
 8004a3c:	430f      	orrs	r7, r1
 8004a3e:	401d      	ands	r5, r3
 8004a40:	9b02      	ldr	r3, [sp, #8]
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8004a42:	210a      	movs	r1, #10
 8004a44:	9801      	ldr	r0, [sp, #4]
 8004a46:	431d      	orrs	r5, r3
 8004a48:	f7fb fb7a 	bl	8000140 <__udivsi3>
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8004a4c:	b2fe      	uxtb	r6, r7
 8004a4e:	432e      	orrs	r6, r5
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8004a50:	210a      	movs	r1, #10
 8004a52:	0105      	lsls	r5, r0, #4
 8004a54:	9801      	ldr	r0, [sp, #4]
 8004a56:	f7fb fbf9 	bl	800024c <__aeabi_uidivmod>
 8004a5a:	9800      	ldr	r0, [sp, #0]
 8004a5c:	430d      	orrs	r5, r1
 8004a5e:	210a      	movs	r1, #10
 8004a60:	f7fb fb6e 	bl	8000140 <__udivsi3>
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8004a64:	b2ed      	uxtb	r5, r5
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8004a66:	042d      	lsls	r5, r5, #16
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8004a68:	432e      	orrs	r6, r5
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8004a6a:	210a      	movs	r1, #10
 8004a6c:	0105      	lsls	r5, r0, #4
 8004a6e:	9800      	ldr	r0, [sp, #0]
 8004a70:	f7fb fbec 	bl	800024c <__aeabi_uidivmod>
 8004a74:	430d      	orrs	r5, r1
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8004a76:	b2ed      	uxtb	r5, r5
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8004a78:	022d      	lsls	r5, r5, #8
 8004a7a:	e7c3      	b.n	8004a04 <LL_RTC_DATE_Init+0x58>
 8004a7c:	ff0000c0 	.word	0xff0000c0
 8004a80:	40002800 	.word	0x40002800

08004a84 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004a84:	b530      	push	{r4, r5, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004a86:	6803      	ldr	r3, [r0, #0]
 8004a88:	b085      	sub	sp, #20
 8004a8a:	0004      	movs	r4, r0
 8004a8c:	000d      	movs	r5, r1
 8004a8e:	07db      	lsls	r3, r3, #31
 8004a90:	d502      	bpl.n	8004a98 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 8004a92:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8004a94:	b005      	add	sp, #20
 8004a96:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 8004a98:	684b      	ldr	r3, [r1, #4]
 8004a9a:	68c9      	ldr	r1, [r1, #12]
 8004a9c:	6802      	ldr	r2, [r0, #0]
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	6929      	ldr	r1, [r5, #16]
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	69a9      	ldr	r1, [r5, #24]
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	4920      	ldr	r1, [pc, #128]	; (8004b2c <LL_USART_Init+0xa8>)
 8004aaa:	400a      	ands	r2, r1
 8004aac:	4313      	orrs	r3, r2
 8004aae:	6003      	str	r3, [r0, #0]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004ab0:	6843      	ldr	r3, [r0, #4]
 8004ab2:	4a1f      	ldr	r2, [pc, #124]	; (8004b30 <LL_USART_Init+0xac>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	68aa      	ldr	r2, [r5, #8]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	6043      	str	r3, [r0, #4]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004abc:	6883      	ldr	r3, [r0, #8]
 8004abe:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <LL_USART_Init+0xb0>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	696a      	ldr	r2, [r5, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	6083      	str	r3, [r0, #8]
    if (USARTx == USART1)
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	; (8004b38 <LL_USART_Init+0xb4>)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004aca:	2003      	movs	r0, #3
    if (USARTx == USART1)
 8004acc:	429c      	cmp	r4, r3
 8004ace:	d003      	beq.n	8004ad8 <LL_USART_Init+0x54>
    else if (USARTx == USART2)
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <LL_USART_Init+0xb8>)
 8004ad2:	429c      	cmp	r4, r3
 8004ad4:	d119      	bne.n	8004b0a <LL_USART_Init+0x86>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004ad6:	200c      	movs	r0, #12
 8004ad8:	f7ff fdce 	bl	8004678 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d0d8      	beq.n	8004a92 <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 8004ae0:	6829      	ldr	r1, [r5, #0]
 8004ae2:	2900      	cmp	r1, #0
 8004ae4:	d0d5      	beq.n	8004a92 <LL_USART_Init+0xe>
                                          uint32_t BaudRate)
{
  register uint32_t usartdiv;
  register uint32_t brrtemp;

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004ae6:	2280      	movs	r2, #128	; 0x80
 8004ae8:	69ad      	ldr	r5, [r5, #24]
 8004aea:	084b      	lsrs	r3, r1, #1
 8004aec:	0212      	lsls	r2, r2, #8
 8004aee:	4295      	cmp	r5, r2
 8004af0:	d117      	bne.n	8004b22 <LL_USART_Init+0x9e>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004af2:	0040      	lsls	r0, r0, #1
 8004af4:	18c0      	adds	r0, r0, r3
 8004af6:	f7fb fb23 	bl	8000140 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 8004afa:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <LL_USART_Init+0xbc>)
 8004afc:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004afe:	0700      	lsls	r0, r0, #28
 8004b00:	0f40      	lsrs	r0, r0, #29
 8004b02:	4318      	orrs	r0, r3
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004b04:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 8004b06:	2000      	movs	r0, #0
 8004b08:	e7c4      	b.n	8004a94 <LL_USART_Init+0x10>
    else if (USARTx == USART4)
 8004b0a:	4b0e      	ldr	r3, [pc, #56]	; (8004b44 <LL_USART_Init+0xc0>)
 8004b0c:	429c      	cmp	r4, r3
 8004b0e:	d104      	bne.n	8004b1a <LL_USART_Init+0x96>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8004b10:	4668      	mov	r0, sp
 8004b12:	f7ff fda1 	bl	8004658 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8004b16:	9802      	ldr	r0, [sp, #8]
 8004b18:	e7e0      	b.n	8004adc <LL_USART_Init+0x58>
    else if (USARTx == USART5)
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <LL_USART_Init+0xc4>)
 8004b1c:	429c      	cmp	r4, r3
 8004b1e:	d1b8      	bne.n	8004a92 <LL_USART_Init+0xe>
 8004b20:	e7f6      	b.n	8004b10 <LL_USART_Init+0x8c>
 8004b22:	18c0      	adds	r0, r0, r3
 8004b24:	f7fb fb0c 	bl	8000140 <__udivsi3>
 8004b28:	b280      	uxth	r0, r0
 8004b2a:	e7eb      	b.n	8004b04 <LL_USART_Init+0x80>
 8004b2c:	efff69f3 	.word	0xefff69f3
 8004b30:	ffffcfff 	.word	0xffffcfff
 8004b34:	fffffcff 	.word	0xfffffcff
 8004b38:	40013800 	.word	0x40013800
 8004b3c:	40004400 	.word	0x40004400
 8004b40:	0000fff0 	.word	0x0000fff0
 8004b44:	40004c00 	.word	0x40004c00
 8004b48:	40005000 	.word	0x40005000

08004b4c <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004b4c:	3002      	adds	r0, #2
 8004b4e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004b50:	4a02      	ldr	r2, [pc, #8]	; (8004b5c <USB_EnableGlobalInt+0x10>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 8004b56:	2000      	movs	r0, #0
 8004b58:	4770      	bx	lr
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	0000bf80 	.word	0x0000bf80

08004b60 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004b60:	3002      	adds	r0, #2
 8004b62:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004b64:	4a02      	ldr	r2, [pc, #8]	; (8004b70 <USB_DisableGlobalInt+0x10>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	4770      	bx	lr
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	0000407f 	.word	0x0000407f

08004b74 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b74:	b084      	sub	sp, #16
 8004b76:	9303      	str	r3, [sp, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004b78:	2301      	movs	r3, #1
{
 8004b7a:	9202      	str	r2, [sp, #8]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004b7c:	2200      	movs	r2, #0
{
 8004b7e:	9101      	str	r1, [sp, #4]
  USBx->CNTR = USB_CNTR_FRES;
 8004b80:	1c81      	adds	r1, r0, #2
 8004b82:	87cb      	strh	r3, [r1, #62]	; 0x3e

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004b84:	1d83      	adds	r3, r0, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b86:	3050      	adds	r0, #80	; 0x50
  USBx->CNTR = 0;
 8004b88:	87ca      	strh	r2, [r1, #62]	; 0x3e
  USBx->ISTR = 0;
 8004b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b8c:	8002      	strh	r2, [r0, #0]
  USBx->CNTR |= winterruptmask;
 8004b8e:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8004b90:	4802      	ldr	r0, [pc, #8]	; (8004b9c <USB_DevInit+0x28>)
 8004b92:	4303      	orrs	r3, r0
 8004b94:	87cb      	strh	r3, [r1, #62]	; 0x3e

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8004b96:	0010      	movs	r0, r2
 8004b98:	b004      	add	sp, #16
 8004b9a:	4770      	bx	lr
 8004b9c:	0000bf80 	.word	0x0000bf80

08004ba0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ba2:	780d      	ldrb	r5, [r1, #0]
 8004ba4:	4a8e      	ldr	r2, [pc, #568]	; (8004de0 <USB_ActivateEndpoint+0x240>)
 8004ba6:	00ad      	lsls	r5, r5, #2
 8004ba8:	1945      	adds	r5, r0, r5
 8004baa:	882c      	ldrh	r4, [r5, #0]
{
 8004bac:	0003      	movs	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004bae:	4014      	ands	r4, r2
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8004bb0:	2201      	movs	r2, #1
  switch (ep->type)
 8004bb2:	78c8      	ldrb	r0, [r1, #3]
      ret = HAL_ERROR;
 8004bb4:	9200      	str	r2, [sp, #0]
  switch (ep->type)
 8004bb6:	2803      	cmp	r0, #3
 8004bb8:	d808      	bhi.n	8004bcc <USB_ActivateEndpoint+0x2c>
 8004bba:	f7fb faad 	bl	8000118 <__gnu_thumb1_case_uqi>
 8004bbe:	4b02      	.short	0x4b02
 8004bc0:	4805      	.short	0x4805
      wEpRegVal |= USB_EP_CONTROL;
 8004bc2:	2280      	movs	r2, #128	; 0x80
 8004bc4:	0092      	lsls	r2, r2, #2
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004bc6:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8004bc8:	2200      	movs	r2, #0
 8004bca:	9200      	str	r2, [sp, #0]
 8004bcc:	001e      	movs	r6, r3
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004bce:	4a85      	ldr	r2, [pc, #532]	; (8004de4 <USB_ActivateEndpoint+0x244>)

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004bd0:	4f85      	ldr	r7, [pc, #532]	; (8004de8 <USB_ActivateEndpoint+0x248>)
  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004bd2:	4314      	orrs	r4, r2
 8004bd4:	b2a4      	uxth	r4, r4
 8004bd6:	802c      	strh	r4, [r5, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004bd8:	780d      	ldrb	r5, [r1, #0]
 8004bda:	3650      	adds	r6, #80	; 0x50
 8004bdc:	00ac      	lsls	r4, r5, #2
 8004bde:	191c      	adds	r4, r3, r4
 8004be0:	8820      	ldrh	r0, [r4, #0]
 8004be2:	4038      	ands	r0, r7
 8004be4:	4328      	orrs	r0, r5
 8004be6:	4310      	orrs	r0, r2
 8004be8:	b280      	uxth	r0, r0
 8004bea:	8020      	strh	r0, [r4, #0]

  if (ep->doublebuffer == 0U)
 8004bec:	7b0d      	ldrb	r5, [r1, #12]
 8004bee:	7808      	ldrb	r0, [r1, #0]
 8004bf0:	003c      	movs	r4, r7
 8004bf2:	2d00      	cmp	r5, #0
 8004bf4:	d000      	beq.n	8004bf8 <USB_ActivateEndpoint+0x58>
 8004bf6:	e069      	b.n	8004ccc <USB_ActivateEndpoint+0x12c>
 8004bf8:	00c0      	lsls	r0, r0, #3
 8004bfa:	18c0      	adds	r0, r0, r3
 8004bfc:	88cd      	ldrh	r5, [r1, #6]
 8004bfe:	9001      	str	r0, [sp, #4]
  {
    if (ep->is_in != 0U)
 8004c00:	7848      	ldrb	r0, [r1, #1]
 8004c02:	086d      	lsrs	r5, r5, #1
 8004c04:	006d      	lsls	r5, r5, #1
 8004c06:	2800      	cmp	r0, #0
 8004c08:	d029      	beq.n	8004c5e <USB_ActivateEndpoint+0xbe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c0a:	8834      	ldrh	r4, [r6, #0]
 8004c0c:	9801      	ldr	r0, [sp, #4]
 8004c0e:	1820      	adds	r0, r4, r0
 8004c10:	2480      	movs	r4, #128	; 0x80
 8004c12:	00e4      	lsls	r4, r4, #3
 8004c14:	1900      	adds	r0, r0, r4
 8004c16:	8005      	strh	r5, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c18:	7808      	ldrb	r0, [r1, #0]
 8004c1a:	0080      	lsls	r0, r0, #2
 8004c1c:	1818      	adds	r0, r3, r0
 8004c1e:	8804      	ldrh	r4, [r0, #0]
 8004c20:	0664      	lsls	r4, r4, #25
 8004c22:	d504      	bpl.n	8004c2e <USB_ActivateEndpoint+0x8e>
 8004c24:	8804      	ldrh	r4, [r0, #0]
 8004c26:	4027      	ands	r7, r4
 8004c28:	4c70      	ldr	r4, [pc, #448]	; (8004dec <USB_ActivateEndpoint+0x24c>)
 8004c2a:	4327      	orrs	r7, r4
 8004c2c:	8007      	strh	r7, [r0, #0]
 8004c2e:	7808      	ldrb	r0, [r1, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c30:	78c9      	ldrb	r1, [r1, #3]
 8004c32:	0080      	lsls	r0, r0, #2
 8004c34:	181b      	adds	r3, r3, r0
 8004c36:	486e      	ldr	r0, [pc, #440]	; (8004df0 <USB_ActivateEndpoint+0x250>)
 8004c38:	2901      	cmp	r1, #1
 8004c3a:	d00d      	beq.n	8004c58 <USB_ActivateEndpoint+0xb8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c3c:	8819      	ldrh	r1, [r3, #0]
 8004c3e:	4008      	ands	r0, r1
 8004c40:	2120      	movs	r1, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c42:	4041      	eors	r1, r0
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c44:	430a      	orrs	r2, r1
 8004c46:	b292      	uxth	r2, r2
    }
  }

  return ret;
}
 8004c48:	9800      	ldr	r0, [sp, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c4a:	801a      	strh	r2, [r3, #0]
}
 8004c4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 8004c4e:	22c0      	movs	r2, #192	; 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004c50:	00d2      	lsls	r2, r2, #3
 8004c52:	e7b8      	b.n	8004bc6 <USB_ActivateEndpoint+0x26>
 8004c54:	2280      	movs	r2, #128	; 0x80
 8004c56:	e7fb      	b.n	8004c50 <USB_ActivateEndpoint+0xb0>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c58:	8819      	ldrh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c5a:	4001      	ands	r1, r0
 8004c5c:	e7f2      	b.n	8004c44 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c5e:	8837      	ldrh	r7, [r6, #0]
 8004c60:	9801      	ldr	r0, [sp, #4]
 8004c62:	1838      	adds	r0, r7, r0
 8004c64:	4f63      	ldr	r7, [pc, #396]	; (8004df4 <USB_ActivateEndpoint+0x254>)
 8004c66:	19c0      	adds	r0, r0, r7
 8004c68:	8005      	strh	r5, [r0, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c6a:	7808      	ldrb	r0, [r1, #0]
 8004c6c:	8835      	ldrh	r5, [r6, #0]
 8004c6e:	00c0      	lsls	r0, r0, #3
 8004c70:	4e61      	ldr	r6, [pc, #388]	; (8004df8 <USB_ActivateEndpoint+0x258>)
 8004c72:	18c0      	adds	r0, r0, r3
 8004c74:	1980      	adds	r0, r0, r6
 8004c76:	1940      	adds	r0, r0, r5
 8004c78:	690d      	ldr	r5, [r1, #16]
 8004c7a:	2d00      	cmp	r5, #0
 8004c7c:	d106      	bne.n	8004c8c <USB_ActivateEndpoint+0xec>
 8004c7e:	8805      	ldrh	r5, [r0, #0]
 8004c80:	4e5e      	ldr	r6, [pc, #376]	; (8004dfc <USB_ActivateEndpoint+0x25c>)
 8004c82:	402e      	ands	r6, r5
 8004c84:	4d5e      	ldr	r5, [pc, #376]	; (8004e00 <USB_ActivateEndpoint+0x260>)
 8004c86:	4335      	orrs	r5, r6
 8004c88:	8005      	strh	r5, [r0, #0]
 8004c8a:	e007      	b.n	8004c9c <USB_ActivateEndpoint+0xfc>
 8004c8c:	2d3d      	cmp	r5, #61	; 0x3d
 8004c8e:	d819      	bhi.n	8004cc4 <USB_ActivateEndpoint+0x124>
 8004c90:	2701      	movs	r7, #1
 8004c92:	086e      	lsrs	r6, r5, #1
 8004c94:	403d      	ands	r5, r7
 8004c96:	1976      	adds	r6, r6, r5
 8004c98:	02b6      	lsls	r6, r6, #10
 8004c9a:	8006      	strh	r6, [r0, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c9c:	7808      	ldrb	r0, [r1, #0]
 8004c9e:	0080      	lsls	r0, r0, #2
 8004ca0:	1818      	adds	r0, r3, r0
 8004ca2:	8805      	ldrh	r5, [r0, #0]
 8004ca4:	046d      	lsls	r5, r5, #17
 8004ca6:	d504      	bpl.n	8004cb2 <USB_ActivateEndpoint+0x112>
 8004ca8:	8805      	ldrh	r5, [r0, #0]
 8004caa:	402c      	ands	r4, r5
 8004cac:	4d55      	ldr	r5, [pc, #340]	; (8004e04 <USB_ActivateEndpoint+0x264>)
 8004cae:	432c      	orrs	r4, r5
 8004cb0:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cb2:	7809      	ldrb	r1, [r1, #0]
 8004cb4:	4854      	ldr	r0, [pc, #336]	; (8004e08 <USB_ActivateEndpoint+0x268>)
 8004cb6:	0089      	lsls	r1, r1, #2
 8004cb8:	185b      	adds	r3, r3, r1
 8004cba:	8819      	ldrh	r1, [r3, #0]
 8004cbc:	4008      	ands	r0, r1
 8004cbe:	21c0      	movs	r1, #192	; 0xc0
 8004cc0:	0189      	lsls	r1, r1, #6
 8004cc2:	e7be      	b.n	8004c42 <USB_ActivateEndpoint+0xa2>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004cc4:	096d      	lsrs	r5, r5, #5
 8004cc6:	02ad      	lsls	r5, r5, #10
 8004cc8:	4e4d      	ldr	r6, [pc, #308]	; (8004e00 <USB_ActivateEndpoint+0x260>)
 8004cca:	e7dc      	b.n	8004c86 <USB_ActivateEndpoint+0xe6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004ccc:	0080      	lsls	r0, r0, #2
 8004cce:	1818      	adds	r0, r3, r0
 8004cd0:	8805      	ldrh	r5, [r0, #0]
 8004cd2:	403d      	ands	r5, r7
 8004cd4:	4f4d      	ldr	r7, [pc, #308]	; (8004e0c <USB_ActivateEndpoint+0x26c>)
 8004cd6:	433d      	orrs	r5, r7
 8004cd8:	8005      	strh	r5, [r0, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004cda:	7808      	ldrb	r0, [r1, #0]
 8004cdc:	8835      	ldrh	r5, [r6, #0]
 8004cde:	00c0      	lsls	r0, r0, #3
 8004ce0:	1940      	adds	r0, r0, r5
 8004ce2:	2580      	movs	r5, #128	; 0x80
 8004ce4:	18c0      	adds	r0, r0, r3
 8004ce6:	00ed      	lsls	r5, r5, #3
 8004ce8:	1940      	adds	r0, r0, r5
 8004cea:	890d      	ldrh	r5, [r1, #8]
 8004cec:	086d      	lsrs	r5, r5, #1
 8004cee:	006d      	lsls	r5, r5, #1
 8004cf0:	8005      	strh	r5, [r0, #0]
 8004cf2:	8835      	ldrh	r5, [r6, #0]
 8004cf4:	4e3e      	ldr	r6, [pc, #248]	; (8004df0 <USB_ActivateEndpoint+0x250>)
 8004cf6:	7808      	ldrb	r0, [r1, #0]
 8004cf8:	46b4      	mov	ip, r6
 8004cfa:	2680      	movs	r6, #128	; 0x80
 8004cfc:	00c0      	lsls	r0, r0, #3
 8004cfe:	1940      	adds	r0, r0, r5
 8004d00:	4d3c      	ldr	r5, [pc, #240]	; (8004df4 <USB_ActivateEndpoint+0x254>)
 8004d02:	18c0      	adds	r0, r0, r3
 8004d04:	1940      	adds	r0, r0, r5
 8004d06:	894d      	ldrh	r5, [r1, #10]
 8004d08:	01f6      	lsls	r6, r6, #7
 8004d0a:	086d      	lsrs	r5, r5, #1
 8004d0c:	006d      	lsls	r5, r5, #1
 8004d0e:	8005      	strh	r5, [r0, #0]
 8004d10:	7808      	ldrb	r0, [r1, #0]
    if (ep->is_in == 0U)
 8004d12:	784d      	ldrb	r5, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d14:	0080      	lsls	r0, r0, #2
 8004d16:	1818      	adds	r0, r3, r0
    if (ep->is_in == 0U)
 8004d18:	2d00      	cmp	r5, #0
 8004d1a:	d12d      	bne.n	8004d78 <USB_ActivateEndpoint+0x1d8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d1c:	8805      	ldrh	r5, [r0, #0]
 8004d1e:	4235      	tst	r5, r6
 8004d20:	d004      	beq.n	8004d2c <USB_ActivateEndpoint+0x18c>
 8004d22:	8805      	ldrh	r5, [r0, #0]
 8004d24:	4e37      	ldr	r6, [pc, #220]	; (8004e04 <USB_ActivateEndpoint+0x264>)
 8004d26:	4025      	ands	r5, r4
 8004d28:	4335      	orrs	r5, r6
 8004d2a:	8005      	strh	r5, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d2c:	7808      	ldrb	r0, [r1, #0]
 8004d2e:	4e38      	ldr	r6, [pc, #224]	; (8004e10 <USB_ActivateEndpoint+0x270>)
 8004d30:	0080      	lsls	r0, r0, #2
 8004d32:	1818      	adds	r0, r3, r0
 8004d34:	8805      	ldrh	r5, [r0, #0]
 8004d36:	066d      	lsls	r5, r5, #25
 8004d38:	d504      	bpl.n	8004d44 <USB_ActivateEndpoint+0x1a4>
 8004d3a:	8805      	ldrh	r5, [r0, #0]
 8004d3c:	4025      	ands	r5, r4
 8004d3e:	4335      	orrs	r5, r6
 8004d40:	b2ad      	uxth	r5, r5
 8004d42:	8005      	strh	r5, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8004d44:	7808      	ldrb	r0, [r1, #0]
 8004d46:	0080      	lsls	r0, r0, #2
 8004d48:	1818      	adds	r0, r3, r0
 8004d4a:	8805      	ldrh	r5, [r0, #0]
 8004d4c:	402c      	ands	r4, r5
 8004d4e:	4326      	orrs	r6, r4
 8004d50:	b2b6      	uxth	r6, r6
 8004d52:	8006      	strh	r6, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d54:	780c      	ldrb	r4, [r1, #0]
 8004d56:	482c      	ldr	r0, [pc, #176]	; (8004e08 <USB_ActivateEndpoint+0x268>)
 8004d58:	00a4      	lsls	r4, r4, #2
 8004d5a:	191c      	adds	r4, r3, r4
 8004d5c:	8825      	ldrh	r5, [r4, #0]
 8004d5e:	4005      	ands	r5, r0
 8004d60:	20c0      	movs	r0, #192	; 0xc0
 8004d62:	0180      	lsls	r0, r0, #6
 8004d64:	4068      	eors	r0, r5
 8004d66:	4310      	orrs	r0, r2
 8004d68:	b280      	uxth	r0, r0
 8004d6a:	8020      	strh	r0, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d6c:	7809      	ldrb	r1, [r1, #0]
 8004d6e:	4660      	mov	r0, ip
 8004d70:	0089      	lsls	r1, r1, #2
 8004d72:	185b      	adds	r3, r3, r1
 8004d74:	8819      	ldrh	r1, [r3, #0]
 8004d76:	e770      	b.n	8004c5a <USB_ActivateEndpoint+0xba>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d78:	8807      	ldrh	r7, [r0, #0]
 8004d7a:	4d26      	ldr	r5, [pc, #152]	; (8004e14 <USB_ActivateEndpoint+0x274>)
 8004d7c:	4237      	tst	r7, r6
 8004d7e:	d004      	beq.n	8004d8a <USB_ActivateEndpoint+0x1ea>
 8004d80:	8806      	ldrh	r6, [r0, #0]
 8004d82:	4026      	ands	r6, r4
 8004d84:	432e      	orrs	r6, r5
 8004d86:	b2b6      	uxth	r6, r6
 8004d88:	8006      	strh	r6, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d8a:	7808      	ldrb	r0, [r1, #0]
 8004d8c:	0080      	lsls	r0, r0, #2
 8004d8e:	1818      	adds	r0, r3, r0
 8004d90:	8806      	ldrh	r6, [r0, #0]
 8004d92:	0676      	lsls	r6, r6, #25
 8004d94:	d504      	bpl.n	8004da0 <USB_ActivateEndpoint+0x200>
 8004d96:	8806      	ldrh	r6, [r0, #0]
 8004d98:	4f14      	ldr	r7, [pc, #80]	; (8004dec <USB_ActivateEndpoint+0x24c>)
 8004d9a:	4026      	ands	r6, r4
 8004d9c:	433e      	orrs	r6, r7
 8004d9e:	8006      	strh	r6, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004da0:	7808      	ldrb	r0, [r1, #0]
 8004da2:	0080      	lsls	r0, r0, #2
 8004da4:	1818      	adds	r0, r3, r0
 8004da6:	8806      	ldrh	r6, [r0, #0]
 8004da8:	4034      	ands	r4, r6
 8004daa:	4325      	orrs	r5, r4
 8004dac:	b2ad      	uxth	r5, r5
 8004dae:	8005      	strh	r5, [r0, #0]
 8004db0:	7808      	ldrb	r0, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8004db2:	78cc      	ldrb	r4, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004db4:	0080      	lsls	r0, r0, #2
 8004db6:	1818      	adds	r0, r3, r0
      if (ep->type != EP_TYPE_ISOC)
 8004db8:	2c01      	cmp	r4, #1
 8004dba:	d00d      	beq.n	8004dd8 <USB_ActivateEndpoint+0x238>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004dbc:	4664      	mov	r4, ip
 8004dbe:	8805      	ldrh	r5, [r0, #0]
 8004dc0:	4025      	ands	r5, r4
 8004dc2:	2420      	movs	r4, #32
 8004dc4:	406c      	eors	r4, r5
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dc6:	4314      	orrs	r4, r2
 8004dc8:	b2a4      	uxth	r4, r4
 8004dca:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dcc:	7809      	ldrb	r1, [r1, #0]
 8004dce:	480e      	ldr	r0, [pc, #56]	; (8004e08 <USB_ActivateEndpoint+0x268>)
 8004dd0:	0089      	lsls	r1, r1, #2
 8004dd2:	185b      	adds	r3, r3, r1
 8004dd4:	8819      	ldrh	r1, [r3, #0]
 8004dd6:	e740      	b.n	8004c5a <USB_ActivateEndpoint+0xba>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dd8:	4665      	mov	r5, ip
 8004dda:	8804      	ldrh	r4, [r0, #0]
 8004ddc:	402c      	ands	r4, r5
 8004dde:	e7f2      	b.n	8004dc6 <USB_ActivateEndpoint+0x226>
 8004de0:	ffff898f 	.word	0xffff898f
 8004de4:	ffff8080 	.word	0xffff8080
 8004de8:	ffff8f8f 	.word	0xffff8f8f
 8004dec:	000080c0 	.word	0x000080c0
 8004df0:	ffff8fbf 	.word	0xffff8fbf
 8004df4:	00000404 	.word	0x00000404
 8004df8:	00000406 	.word	0x00000406
 8004dfc:	ffff83ff 	.word	0xffff83ff
 8004e00:	ffff8000 	.word	0xffff8000
 8004e04:	0000c080 	.word	0x0000c080
 8004e08:	ffffbf8f 	.word	0xffffbf8f
 8004e0c:	00008180 	.word	0x00008180
 8004e10:	ffff80c0 	.word	0xffff80c0
 8004e14:	ffffc080 	.word	0xffffc080

08004e18 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e1a:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8004e1c:	7b0d      	ldrb	r5, [r1, #12]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	784c      	ldrb	r4, [r1, #1]
 8004e22:	18c3      	adds	r3, r0, r3
 8004e24:	4a3f      	ldr	r2, [pc, #252]	; (8004f24 <USB_DeactivateEndpoint+0x10c>)
 8004e26:	2d00      	cmp	r5, #0
 8004e28:	d121      	bne.n	8004e6e <USB_DeactivateEndpoint+0x56>
  {
    if (ep->is_in != 0U)
 8004e2a:	2c00      	cmp	r4, #0
 8004e2c:	d010      	beq.n	8004e50 <USB_DeactivateEndpoint+0x38>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e2e:	881c      	ldrh	r4, [r3, #0]
 8004e30:	0664      	lsls	r4, r4, #25
 8004e32:	d505      	bpl.n	8004e40 <USB_DeactivateEndpoint+0x28>
 8004e34:	881c      	ldrh	r4, [r3, #0]
 8004e36:	4d3c      	ldr	r5, [pc, #240]	; (8004f28 <USB_DeactivateEndpoint+0x110>)
 8004e38:	402c      	ands	r4, r5
 8004e3a:	4d3c      	ldr	r5, [pc, #240]	; (8004f2c <USB_DeactivateEndpoint+0x114>)
 8004e3c:	432c      	orrs	r4, r5
 8004e3e:	801c      	strh	r4, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e40:	780b      	ldrb	r3, [r1, #0]
 8004e42:	493b      	ldr	r1, [pc, #236]	; (8004f30 <USB_DeactivateEndpoint+0x118>)
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	18c0      	adds	r0, r0, r3
 8004e48:	8803      	ldrh	r3, [r0, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e4a:	400b      	ands	r3, r1
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	e03f      	b.n	8004ed0 <USB_DeactivateEndpoint+0xb8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e50:	881c      	ldrh	r4, [r3, #0]
 8004e52:	0464      	lsls	r4, r4, #17
 8004e54:	d505      	bpl.n	8004e62 <USB_DeactivateEndpoint+0x4a>
 8004e56:	881c      	ldrh	r4, [r3, #0]
 8004e58:	4d33      	ldr	r5, [pc, #204]	; (8004f28 <USB_DeactivateEndpoint+0x110>)
 8004e5a:	402c      	ands	r4, r5
 8004e5c:	4d35      	ldr	r5, [pc, #212]	; (8004f34 <USB_DeactivateEndpoint+0x11c>)
 8004e5e:	432c      	orrs	r4, r5
 8004e60:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e62:	780b      	ldrb	r3, [r1, #0]
 8004e64:	4934      	ldr	r1, [pc, #208]	; (8004f38 <USB_DeactivateEndpoint+0x120>)
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	18c0      	adds	r0, r0, r3
 8004e6a:	8803      	ldrh	r3, [r0, #0]
 8004e6c:	e7ed      	b.n	8004e4a <USB_DeactivateEndpoint+0x32>
 8004e6e:	2680      	movs	r6, #128	; 0x80
 8004e70:	4d2d      	ldr	r5, [pc, #180]	; (8004f28 <USB_DeactivateEndpoint+0x110>)
 8004e72:	4f2f      	ldr	r7, [pc, #188]	; (8004f30 <USB_DeactivateEndpoint+0x118>)
 8004e74:	01f6      	lsls	r6, r6, #7
    if (ep->is_in == 0U)
 8004e76:	2c00      	cmp	r4, #0
 8004e78:	d12e      	bne.n	8004ed8 <USB_DeactivateEndpoint+0xc0>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e7a:	881c      	ldrh	r4, [r3, #0]
 8004e7c:	4234      	tst	r4, r6
 8004e7e:	d004      	beq.n	8004e8a <USB_DeactivateEndpoint+0x72>
 8004e80:	881c      	ldrh	r4, [r3, #0]
 8004e82:	4e2c      	ldr	r6, [pc, #176]	; (8004f34 <USB_DeactivateEndpoint+0x11c>)
 8004e84:	402c      	ands	r4, r5
 8004e86:	4334      	orrs	r4, r6
 8004e88:	801c      	strh	r4, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e8a:	780b      	ldrb	r3, [r1, #0]
 8004e8c:	4c2b      	ldr	r4, [pc, #172]	; (8004f3c <USB_DeactivateEndpoint+0x124>)
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	18c3      	adds	r3, r0, r3
 8004e92:	881e      	ldrh	r6, [r3, #0]
 8004e94:	0676      	lsls	r6, r6, #25
 8004e96:	d504      	bpl.n	8004ea2 <USB_DeactivateEndpoint+0x8a>
 8004e98:	881e      	ldrh	r6, [r3, #0]
 8004e9a:	402e      	ands	r6, r5
 8004e9c:	4326      	orrs	r6, r4
 8004e9e:	b2b6      	uxth	r6, r6
 8004ea0:	801e      	strh	r6, [r3, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8004ea2:	780b      	ldrb	r3, [r1, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	18c3      	adds	r3, r0, r3
 8004ea8:	881e      	ldrh	r6, [r3, #0]
 8004eaa:	4035      	ands	r5, r6
 8004eac:	432c      	orrs	r4, r5
 8004eae:	b2a4      	uxth	r4, r4
 8004eb0:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eb2:	780c      	ldrb	r4, [r1, #0]
 8004eb4:	4d20      	ldr	r5, [pc, #128]	; (8004f38 <USB_DeactivateEndpoint+0x120>)
 8004eb6:	00a4      	lsls	r4, r4, #2
 8004eb8:	1904      	adds	r4, r0, r4
 8004eba:	8823      	ldrh	r3, [r4, #0]
 8004ebc:	402b      	ands	r3, r5
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ec4:	780b      	ldrb	r3, [r1, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	18c0      	adds	r0, r0, r3
 8004eca:	8803      	ldrh	r3, [r0, #0]
 8004ecc:	401f      	ands	r7, r3
 8004ece:	433a      	orrs	r2, r7
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ed0:	b292      	uxth	r2, r2
 8004ed2:	8002      	strh	r2, [r0, #0]
    }
  }

  return HAL_OK;
}
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ed8:	881c      	ldrh	r4, [r3, #0]
 8004eda:	4234      	tst	r4, r6
 8004edc:	d005      	beq.n	8004eea <USB_DeactivateEndpoint+0xd2>
 8004ede:	881e      	ldrh	r6, [r3, #0]
 8004ee0:	4c17      	ldr	r4, [pc, #92]	; (8004f40 <USB_DeactivateEndpoint+0x128>)
 8004ee2:	402e      	ands	r6, r5
 8004ee4:	4326      	orrs	r6, r4
 8004ee6:	b2b6      	uxth	r6, r6
 8004ee8:	801e      	strh	r6, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eea:	780b      	ldrb	r3, [r1, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	18c3      	adds	r3, r0, r3
 8004ef0:	881e      	ldrh	r6, [r3, #0]
 8004ef2:	0674      	lsls	r4, r6, #25
 8004ef4:	d504      	bpl.n	8004f00 <USB_DeactivateEndpoint+0xe8>
 8004ef6:	881e      	ldrh	r6, [r3, #0]
 8004ef8:	4c0c      	ldr	r4, [pc, #48]	; (8004f2c <USB_DeactivateEndpoint+0x114>)
 8004efa:	402e      	ands	r6, r5
 8004efc:	4326      	orrs	r6, r4
 8004efe:	801e      	strh	r6, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f00:	780b      	ldrb	r3, [r1, #0]
 8004f02:	4c0f      	ldr	r4, [pc, #60]	; (8004f40 <USB_DeactivateEndpoint+0x128>)
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	18c3      	adds	r3, r0, r3
 8004f08:	881e      	ldrh	r6, [r3, #0]
 8004f0a:	4035      	ands	r5, r6
 8004f0c:	432c      	orrs	r4, r5
 8004f0e:	b2a4      	uxth	r4, r4
 8004f10:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f12:	780b      	ldrb	r3, [r1, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	18c3      	adds	r3, r0, r3
 8004f18:	881c      	ldrh	r4, [r3, #0]
 8004f1a:	4027      	ands	r7, r4
 8004f1c:	4317      	orrs	r7, r2
 8004f1e:	b2bf      	uxth	r7, r7
 8004f20:	801f      	strh	r7, [r3, #0]
 8004f22:	e79e      	b.n	8004e62 <USB_DeactivateEndpoint+0x4a>
 8004f24:	ffff8080 	.word	0xffff8080
 8004f28:	ffff8f8f 	.word	0xffff8f8f
 8004f2c:	000080c0 	.word	0x000080c0
 8004f30:	ffff8fbf 	.word	0xffff8fbf
 8004f34:	0000c080 	.word	0x0000c080
 8004f38:	ffffbf8f 	.word	0xffffbf8f
 8004f3c:	ffff80c0 	.word	0xffff80c0
 8004f40:	ffffc080 	.word	0xffffc080

08004f44 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f44:	780b      	ldrb	r3, [r1, #0]
 8004f46:	4a0b      	ldr	r2, [pc, #44]	; (8004f74 <USB_EPSetStall+0x30>)
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8004f4c:	784b      	ldrb	r3, [r1, #1]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d009      	beq.n	8004f66 <USB_EPSetStall+0x22>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004f52:	8803      	ldrh	r3, [r0, #0]
 8004f54:	4908      	ldr	r1, [pc, #32]	; (8004f78 <USB_EPSetStall+0x34>)
 8004f56:	4019      	ands	r1, r3
 8004f58:	2310      	movs	r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004f5a:	404b      	eors	r3, r1
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8004f62:	2000      	movs	r0, #0
 8004f64:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004f66:	8803      	ldrh	r3, [r0, #0]
 8004f68:	4904      	ldr	r1, [pc, #16]	; (8004f7c <USB_EPSetStall+0x38>)
 8004f6a:	4019      	ands	r1, r3
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	015b      	lsls	r3, r3, #5
 8004f70:	e7f3      	b.n	8004f5a <USB_EPSetStall+0x16>
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	ffff8080 	.word	0xffff8080
 8004f78:	ffff8fbf 	.word	0xffff8fbf
 8004f7c:	ffffbf8f 	.word	0xffffbf8f

08004f80 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f80:	b530      	push	{r4, r5, lr}
 8004f82:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in != 0U)
 8004f84:	784c      	ldrb	r4, [r1, #1]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	18c3      	adds	r3, r0, r3
 8004f8a:	4a15      	ldr	r2, [pc, #84]	; (8004fe0 <USB_EPClearStall+0x60>)
 8004f8c:	2c00      	cmp	r4, #0
 8004f8e:	d015      	beq.n	8004fbc <USB_EPClearStall+0x3c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f90:	881c      	ldrh	r4, [r3, #0]
 8004f92:	0664      	lsls	r4, r4, #25
 8004f94:	d505      	bpl.n	8004fa2 <USB_EPClearStall+0x22>
 8004f96:	881c      	ldrh	r4, [r3, #0]
 8004f98:	4d12      	ldr	r5, [pc, #72]	; (8004fe4 <USB_EPClearStall+0x64>)
 8004f9a:	402c      	ands	r4, r5
 8004f9c:	4d12      	ldr	r5, [pc, #72]	; (8004fe8 <USB_EPClearStall+0x68>)
 8004f9e:	432c      	orrs	r4, r5
 8004fa0:	801c      	strh	r4, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004fa2:	780b      	ldrb	r3, [r1, #0]
 8004fa4:	4911      	ldr	r1, [pc, #68]	; (8004fec <USB_EPClearStall+0x6c>)
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	18c0      	adds	r0, r0, r3
 8004faa:	8803      	ldrh	r3, [r0, #0]
 8004fac:	4019      	ands	r1, r3
 8004fae:	2330      	movs	r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fb0:	404b      	eors	r3, r1
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	8003      	strh	r3, [r0, #0]
  }
  return HAL_OK;
}
 8004fb8:	2000      	movs	r0, #0
 8004fba:	bd30      	pop	{r4, r5, pc}
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fbc:	881c      	ldrh	r4, [r3, #0]
 8004fbe:	0464      	lsls	r4, r4, #17
 8004fc0:	d505      	bpl.n	8004fce <USB_EPClearStall+0x4e>
 8004fc2:	881c      	ldrh	r4, [r3, #0]
 8004fc4:	4d07      	ldr	r5, [pc, #28]	; (8004fe4 <USB_EPClearStall+0x64>)
 8004fc6:	402c      	ands	r4, r5
 8004fc8:	4d09      	ldr	r5, [pc, #36]	; (8004ff0 <USB_EPClearStall+0x70>)
 8004fca:	432c      	orrs	r4, r5
 8004fcc:	801c      	strh	r4, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fce:	780b      	ldrb	r3, [r1, #0]
 8004fd0:	4908      	ldr	r1, [pc, #32]	; (8004ff4 <USB_EPClearStall+0x74>)
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	18c0      	adds	r0, r0, r3
 8004fd6:	8803      	ldrh	r3, [r0, #0]
 8004fd8:	4019      	ands	r1, r3
 8004fda:	23c0      	movs	r3, #192	; 0xc0
 8004fdc:	019b      	lsls	r3, r3, #6
 8004fde:	e7e7      	b.n	8004fb0 <USB_EPClearStall+0x30>
 8004fe0:	ffff8080 	.word	0xffff8080
 8004fe4:	ffff8f8f 	.word	0xffff8f8f
 8004fe8:	000080c0 	.word	0x000080c0
 8004fec:	ffff8fbf 	.word	0xffff8fbf
 8004ff0:	0000c080 	.word	0x0000c080
 8004ff4:	ffffbf8f 	.word	0xffffbf8f

08004ff8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004ff8:	2900      	cmp	r1, #0
 8004ffa:	d102      	bne.n	8005002 <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004ffc:	2380      	movs	r3, #128	; 0x80
 8004ffe:	304c      	adds	r0, #76	; 0x4c
 8005000:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8005002:	2000      	movs	r0, #0
 8005004:	4770      	bx	lr

08005006 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8005006:	2280      	movs	r2, #128	; 0x80
 8005008:	3058      	adds	r0, #88	; 0x58
 800500a:	8803      	ldrh	r3, [r0, #0]
 800500c:	0212      	lsls	r2, r2, #8
 800500e:	4313      	orrs	r3, r2
 8005010:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8005012:	2000      	movs	r0, #0
 8005014:	4770      	bx	lr

08005016 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005016:	3006      	adds	r0, #6
 8005018:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 800501a:	b280      	uxth	r0, r0
  return tmpreg;
}
 800501c:	4770      	bx	lr

0800501e <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800501e:	2000      	movs	r0, #0
 8005020:	4770      	bx	lr

08005022 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005022:	b530      	push	{r4, r5, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005024:	2480      	movs	r4, #128	; 0x80
 8005026:	00e4      	lsls	r4, r4, #3
 8005028:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800502a:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800502c:	1880      	adds	r0, r0, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	1a40      	subs	r0, r0, r1
 8005032:	1844      	adds	r4, r0, r1

  for (i = n; i != 0U; i--)
 8005034:	2b00      	cmp	r3, #0
 8005036:	d100      	bne.n	800503a <USB_WritePMA+0x18>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8005038:	bd30      	pop	{r4, r5, pc}
 800503a:	784a      	ldrb	r2, [r1, #1]
 800503c:	780d      	ldrb	r5, [r1, #0]
 800503e:	0212      	lsls	r2, r2, #8
 8005040:	432a      	orrs	r2, r5
    *pdwVal = (uint16_t)temp2;
 8005042:	8022      	strh	r2, [r4, #0]
  for (i = n; i != 0U; i--)
 8005044:	3b01      	subs	r3, #1
    pBuf++;
 8005046:	3102      	adds	r1, #2
 8005048:	e7f3      	b.n	8005032 <USB_WritePMA+0x10>
	...

0800504c <USB_EPStartXfer>:
{
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504e:	0005      	movs	r5, r0
  if (ep->is_in == 1U)
 8005050:	7848      	ldrb	r0, [r1, #1]
{
 8005052:	000e      	movs	r6, r1
 8005054:	698b      	ldr	r3, [r1, #24]
 8005056:	690c      	ldr	r4, [r1, #16]
 8005058:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 800505a:	2801      	cmp	r0, #1
 800505c:	d158      	bne.n	8005110 <USB_EPStartXfer+0xc4>
    if (ep->xfer_len > ep->maxpacket)
 800505e:	42a3      	cmp	r3, r4
 8005060:	d922      	bls.n	80050a8 <USB_EPStartXfer+0x5c>
      ep->xfer_len -= len;
 8005062:	1b1b      	subs	r3, r3, r4
 8005064:	618b      	str	r3, [r1, #24]
 8005066:	002f      	movs	r7, r5
 8005068:	6971      	ldr	r1, [r6, #20]
 800506a:	b2a4      	uxth	r4, r4
 800506c:	3750      	adds	r7, #80	; 0x50
    if (ep->doublebuffer == 0U)
 800506e:	2a00      	cmp	r2, #0
 8005070:	d11e      	bne.n	80050b0 <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005072:	88f2      	ldrh	r2, [r6, #6]
 8005074:	0023      	movs	r3, r4
 8005076:	0028      	movs	r0, r5
 8005078:	f7ff ffd3 	bl	8005022 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800507c:	7833      	ldrb	r3, [r6, #0]
 800507e:	883a      	ldrh	r2, [r7, #0]
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	189b      	adds	r3, r3, r2
 8005084:	4a56      	ldr	r2, [pc, #344]	; (80051e0 <USB_EPStartXfer+0x194>)
 8005086:	18eb      	adds	r3, r5, r3
 8005088:	189b      	adds	r3, r3, r2
 800508a:	801c      	strh	r4, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800508c:	7833      	ldrb	r3, [r6, #0]
 800508e:	4a55      	ldr	r2, [pc, #340]	; (80051e4 <USB_EPStartXfer+0x198>)
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	18ed      	adds	r5, r5, r3
 8005094:	882b      	ldrh	r3, [r5, #0]
 8005096:	401a      	ands	r2, r3
 8005098:	2330      	movs	r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800509a:	4053      	eors	r3, r2
 800509c:	4a52      	ldr	r2, [pc, #328]	; (80051e8 <USB_EPStartXfer+0x19c>)
}
 800509e:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050a0:	4313      	orrs	r3, r2
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	802b      	strh	r3, [r5, #0]
}
 80050a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ep->xfer_len = 0U;
 80050a8:	2100      	movs	r1, #0
 80050aa:	001c      	movs	r4, r3
 80050ac:	61b1      	str	r1, [r6, #24]
 80050ae:	e7da      	b.n	8005066 <USB_EPStartXfer+0x1a>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050b0:	7833      	ldrb	r3, [r6, #0]
 80050b2:	009a      	lsls	r2, r3, #2
 80050b4:	18aa      	adds	r2, r5, r2
 80050b6:	8810      	ldrh	r0, [r2, #0]
 80050b8:	00da      	lsls	r2, r3, #3
 80050ba:	0643      	lsls	r3, r0, #25
 80050bc:	d517      	bpl.n	80050ee <USB_EPStartXfer+0xa2>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050be:	883b      	ldrh	r3, [r7, #0]
 80050c0:	189b      	adds	r3, r3, r2
 80050c2:	4a4a      	ldr	r2, [pc, #296]	; (80051ec <USB_EPStartXfer+0x1a0>)
 80050c4:	195b      	adds	r3, r3, r5
 80050c6:	189b      	adds	r3, r3, r2
 80050c8:	801c      	strh	r4, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80050ca:	8972      	ldrh	r2, [r6, #10]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050cc:	0023      	movs	r3, r4
 80050ce:	0028      	movs	r0, r5
 80050d0:	f7ff ffa7 	bl	8005022 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80050d4:	7872      	ldrb	r2, [r6, #1]
 80050d6:	7833      	ldrb	r3, [r6, #0]
 80050d8:	2a00      	cmp	r2, #0
 80050da:	d110      	bne.n	80050fe <USB_EPStartXfer+0xb2>
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	18eb      	adds	r3, r5, r3
 80050e0:	4943      	ldr	r1, [pc, #268]	; (80051f0 <USB_EPStartXfer+0x1a4>)
 80050e2:	881a      	ldrh	r2, [r3, #0]
 80050e4:	400a      	ands	r2, r1
 80050e6:	4943      	ldr	r1, [pc, #268]	; (80051f4 <USB_EPStartXfer+0x1a8>)
 80050e8:	430a      	orrs	r2, r1
 80050ea:	801a      	strh	r2, [r3, #0]
 80050ec:	e7ce      	b.n	800508c <USB_EPStartXfer+0x40>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050ee:	883b      	ldrh	r3, [r7, #0]
 80050f0:	189b      	adds	r3, r3, r2
 80050f2:	4a3b      	ldr	r2, [pc, #236]	; (80051e0 <USB_EPStartXfer+0x194>)
 80050f4:	195b      	adds	r3, r3, r5
 80050f6:	189b      	adds	r3, r3, r2
 80050f8:	801c      	strh	r4, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 80050fa:	8932      	ldrh	r2, [r6, #8]
 80050fc:	e7e6      	b.n	80050cc <USB_EPStartXfer+0x80>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80050fe:	2a01      	cmp	r2, #1
 8005100:	d1c4      	bne.n	800508c <USB_EPStartXfer+0x40>
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	18eb      	adds	r3, r5, r3
 8005106:	493a      	ldr	r1, [pc, #232]	; (80051f0 <USB_EPStartXfer+0x1a4>)
 8005108:	881a      	ldrh	r2, [r3, #0]
 800510a:	400a      	ands	r2, r1
 800510c:	493a      	ldr	r1, [pc, #232]	; (80051f8 <USB_EPStartXfer+0x1ac>)
 800510e:	e7eb      	b.n	80050e8 <USB_EPStartXfer+0x9c>
    if (ep->xfer_len > ep->maxpacket)
 8005110:	42a3      	cmp	r3, r4
 8005112:	d91d      	bls.n	8005150 <USB_EPStartXfer+0x104>
      ep->xfer_len -= len;
 8005114:	1b1b      	subs	r3, r3, r4
 8005116:	618b      	str	r3, [r1, #24]
 8005118:	7831      	ldrb	r1, [r6, #0]
    if (ep->doublebuffer == 0U)
 800511a:	2a00      	cmp	r2, #0
 800511c:	d11c      	bne.n	8005158 <USB_EPStartXfer+0x10c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800511e:	002b      	movs	r3, r5
 8005120:	3350      	adds	r3, #80	; 0x50
 8005122:	881a      	ldrh	r2, [r3, #0]
 8005124:	4b31      	ldr	r3, [pc, #196]	; (80051ec <USB_EPStartXfer+0x1a0>)
 8005126:	00c9      	lsls	r1, r1, #3
 8005128:	18eb      	adds	r3, r5, r3
 800512a:	189b      	adds	r3, r3, r2
 800512c:	185b      	adds	r3, r3, r1
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800512e:	2c00      	cmp	r4, #0
 8005130:	d13c      	bne.n	80051ac <USB_EPStartXfer+0x160>
 8005132:	881a      	ldrh	r2, [r3, #0]
 8005134:	4931      	ldr	r1, [pc, #196]	; (80051fc <USB_EPStartXfer+0x1b0>)
 8005136:	4011      	ands	r1, r2
 8005138:	4a31      	ldr	r2, [pc, #196]	; (8005200 <USB_EPStartXfer+0x1b4>)
 800513a:	430a      	orrs	r2, r1
 800513c:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800513e:	7833      	ldrb	r3, [r6, #0]
 8005140:	4a30      	ldr	r2, [pc, #192]	; (8005204 <USB_EPStartXfer+0x1b8>)
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	18ed      	adds	r5, r5, r3
 8005146:	882b      	ldrh	r3, [r5, #0]
 8005148:	401a      	ands	r2, r3
 800514a:	23c0      	movs	r3, #192	; 0xc0
 800514c:	019b      	lsls	r3, r3, #6
 800514e:	e7a4      	b.n	800509a <USB_EPStartXfer+0x4e>
      ep->xfer_len = 0U;
 8005150:	2100      	movs	r1, #0
 8005152:	001c      	movs	r4, r3
 8005154:	61b1      	str	r1, [r6, #24]
 8005156:	e7df      	b.n	8005118 <USB_EPStartXfer+0xcc>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005158:	2800      	cmp	r0, #0
 800515a:	d117      	bne.n	800518c <USB_EPStartXfer+0x140>
 800515c:	002b      	movs	r3, r5
 800515e:	3350      	adds	r3, #80	; 0x50
 8005160:	881a      	ldrh	r2, [r3, #0]
 8005162:	4b1f      	ldr	r3, [pc, #124]	; (80051e0 <USB_EPStartXfer+0x194>)
 8005164:	00c9      	lsls	r1, r1, #3
 8005166:	18eb      	adds	r3, r5, r3
 8005168:	189b      	adds	r3, r3, r2
 800516a:	185b      	adds	r3, r3, r1
 800516c:	2c00      	cmp	r4, #0
 800516e:	d105      	bne.n	800517c <USB_EPStartXfer+0x130>
 8005170:	881a      	ldrh	r2, [r3, #0]
 8005172:	4922      	ldr	r1, [pc, #136]	; (80051fc <USB_EPStartXfer+0x1b0>)
 8005174:	4011      	ands	r1, r2
 8005176:	4a22      	ldr	r2, [pc, #136]	; (8005200 <USB_EPStartXfer+0x1b4>)
 8005178:	430a      	orrs	r2, r1
 800517a:	e006      	b.n	800518a <USB_EPStartXfer+0x13e>
 800517c:	2c3d      	cmp	r4, #61	; 0x3d
 800517e:	d812      	bhi.n	80051a6 <USB_EPStartXfer+0x15a>
 8005180:	2101      	movs	r1, #1
 8005182:	0862      	lsrs	r2, r4, #1
 8005184:	4021      	ands	r1, r4
 8005186:	1852      	adds	r2, r2, r1
 8005188:	0292      	lsls	r2, r2, #10
 800518a:	801a      	strh	r2, [r3, #0]
 800518c:	7872      	ldrb	r2, [r6, #1]
 800518e:	7833      	ldrb	r3, [r6, #0]
 8005190:	2a00      	cmp	r2, #0
 8005192:	d119      	bne.n	80051c8 <USB_EPStartXfer+0x17c>
 8005194:	002a      	movs	r2, r5
 8005196:	3250      	adds	r2, #80	; 0x50
 8005198:	8811      	ldrh	r1, [r2, #0]
 800519a:	4a14      	ldr	r2, [pc, #80]	; (80051ec <USB_EPStartXfer+0x1a0>)
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	18aa      	adds	r2, r5, r2
 80051a0:	1852      	adds	r2, r2, r1
 80051a2:	18d3      	adds	r3, r2, r3
 80051a4:	e7c3      	b.n	800512e <USB_EPStartXfer+0xe2>
 80051a6:	0961      	lsrs	r1, r4, #5
 80051a8:	0289      	lsls	r1, r1, #10
 80051aa:	e7e4      	b.n	8005176 <USB_EPStartXfer+0x12a>
 80051ac:	2c3d      	cmp	r4, #61	; 0x3d
 80051ae:	d805      	bhi.n	80051bc <USB_EPStartXfer+0x170>
 80051b0:	2101      	movs	r1, #1
 80051b2:	0862      	lsrs	r2, r4, #1
 80051b4:	400c      	ands	r4, r1
 80051b6:	1912      	adds	r2, r2, r4
 80051b8:	0292      	lsls	r2, r2, #10
 80051ba:	e7bf      	b.n	800513c <USB_EPStartXfer+0xf0>
 80051bc:	0964      	lsrs	r4, r4, #5
 80051be:	4a10      	ldr	r2, [pc, #64]	; (8005200 <USB_EPStartXfer+0x1b4>)
 80051c0:	02a4      	lsls	r4, r4, #10
 80051c2:	4314      	orrs	r4, r2
 80051c4:	801c      	strh	r4, [r3, #0]
 80051c6:	e7ba      	b.n	800513e <USB_EPStartXfer+0xf2>
 80051c8:	2a01      	cmp	r2, #1
 80051ca:	d1b8      	bne.n	800513e <USB_EPStartXfer+0xf2>
 80051cc:	002a      	movs	r2, r5
 80051ce:	3250      	adds	r2, #80	; 0x50
 80051d0:	8812      	ldrh	r2, [r2, #0]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	189b      	adds	r3, r3, r2
 80051d6:	4a05      	ldr	r2, [pc, #20]	; (80051ec <USB_EPStartXfer+0x1a0>)
 80051d8:	18eb      	adds	r3, r5, r3
 80051da:	189b      	adds	r3, r3, r2
 80051dc:	e7f2      	b.n	80051c4 <USB_EPStartXfer+0x178>
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	00000402 	.word	0x00000402
 80051e4:	ffff8fbf 	.word	0xffff8fbf
 80051e8:	ffff8080 	.word	0xffff8080
 80051ec:	00000406 	.word	0x00000406
 80051f0:	ffff8f8f 	.word	0xffff8f8f
 80051f4:	000080c0 	.word	0x000080c0
 80051f8:	0000c080 	.word	0x0000c080
 80051fc:	ffff83ff 	.word	0xffff83ff
 8005200:	ffff8000 	.word	0xffff8000
 8005204:	ffffbf8f 	.word	0xffffbf8f

08005208 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005208:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800520a:	2580      	movs	r5, #128	; 0x80
 800520c:	00ed      	lsls	r5, r5, #3
 800520e:	1952      	adds	r2, r2, r5
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005210:	085c      	lsrs	r4, r3, #1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005212:	1880      	adds	r0, r0, r2

  for (i = n; i != 0U; i--)
 8005214:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 8005216:	000a      	movs	r2, r1
 8005218:	1a47      	subs	r7, r0, r1
 800521a:	18bd      	adds	r5, r7, r2
  for (i = n; i != 0U; i--)
 800521c:	2e00      	cmp	r6, #0
 800521e:	d107      	bne.n	8005230 <USB_ReadPMA+0x28>
 8005220:	0064      	lsls	r4, r4, #1
 8005222:	1900      	adds	r0, r0, r4
 8005224:	1909      	adds	r1, r1, r4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005226:	07db      	lsls	r3, r3, #31
 8005228:	d501      	bpl.n	800522e <USB_ReadPMA+0x26>
  {
    temp = *pdwVal;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800522a:	8803      	ldrh	r3, [r0, #0]
 800522c:	700b      	strb	r3, [r1, #0]
  }
}
 800522e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *pdwVal;
 8005230:	882d      	ldrh	r5, [r5, #0]
  for (i = n; i != 0U; i--)
 8005232:	3e01      	subs	r6, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005234:	7015      	strb	r5, [r2, #0]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005236:	0a2d      	lsrs	r5, r5, #8
 8005238:	7055      	strb	r5, [r2, #1]
    pBuf++;
 800523a:	3202      	adds	r2, #2
 800523c:	e7ed      	b.n	800521a <USB_ReadPMA+0x12>
	...

08005240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005240:	480d      	ldr	r0, [pc, #52]	; (8005278 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005242:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8005244:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005246:	e003      	b.n	8005250 <LoopCopyDataInit>

08005248 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800524a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800524c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800524e:	3104      	adds	r1, #4

08005250 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8005250:	480b      	ldr	r0, [pc, #44]	; (8005280 <LoopForever+0xa>)
  ldr  r3, =_edata
 8005252:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <LoopForever+0xe>)
  adds  r2, r0, r1
 8005254:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005256:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005258:	d3f6      	bcc.n	8005248 <CopyDataInit>
  ldr  r2, =_sbss
 800525a:	4a0b      	ldr	r2, [pc, #44]	; (8005288 <LoopForever+0x12>)
  b  LoopFillZerobss
 800525c:	e002      	b.n	8005264 <LoopFillZerobss>

0800525e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800525e:	2300      	movs	r3, #0
  str  r3, [r2]
 8005260:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005262:	3204      	adds	r2, #4

08005264 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8005264:	4b09      	ldr	r3, [pc, #36]	; (800528c <LoopForever+0x16>)
  cmp  r2, r3
 8005266:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005268:	d3f9      	bcc.n	800525e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800526a:	f000 f82d 	bl	80052c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800526e:	f006 fa1b 	bl	800b6a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005272:	f006 f957 	bl	800b524 <main>

08005276 <LoopForever>:

LoopForever:
    b LoopForever
 8005276:	e7fe      	b.n	8005276 <LoopForever>
   ldr   r0, =_estack
 8005278:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800527c:	0800d86c 	.word	0x0800d86c
  ldr  r0, =_sdata
 8005280:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005284:	20000454 	.word	0x20000454
  ldr  r2, =_sbss
 8005288:	20000454 	.word	0x20000454
  ldr  r3, = _ebss
 800528c:	20002424 	.word	0x20002424

08005290 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005290:	e7fe      	b.n	8005290 <DMA1_Channel1_IRQHandler>
	...

08005294 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005294:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <_sbrk+0x2c>)
{
 8005296:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8005298:	6819      	ldr	r1, [r3, #0]
{
 800529a:	0002      	movs	r2, r0
	if (heap_end == 0)
 800529c:	2900      	cmp	r1, #0
 800529e:	d101      	bne.n	80052a4 <_sbrk+0x10>
		heap_end = &end;
 80052a0:	4908      	ldr	r1, [pc, #32]	; (80052c4 <_sbrk+0x30>)
 80052a2:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80052a4:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80052a6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80052a8:	1882      	adds	r2, r0, r2
 80052aa:	428a      	cmp	r2, r1
 80052ac:	d906      	bls.n	80052bc <_sbrk+0x28>
	{
		errno = ENOMEM;
 80052ae:	f006 f9f5 	bl	800b69c <__errno>
 80052b2:	230c      	movs	r3, #12
 80052b4:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80052b6:	2001      	movs	r0, #1
 80052b8:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80052ba:	bd10      	pop	{r4, pc}
	heap_end += incr;
 80052bc:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80052be:	e7fc      	b.n	80052ba <_sbrk+0x26>
 80052c0:	20000470 	.word	0x20000470
 80052c4:	20002428 	.word	0x20002428

080052c8 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80052c8:	2280      	movs	r2, #128	; 0x80
 80052ca:	4b10      	ldr	r3, [pc, #64]	; (800530c <SystemInit+0x44>)
 80052cc:	0052      	lsls	r2, r2, #1
 80052ce:	6819      	ldr	r1, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	490e      	ldr	r1, [pc, #56]	; (8005310 <SystemInit+0x48>)
 80052d8:	400a      	ands	r2, r1
 80052da:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	490d      	ldr	r1, [pc, #52]	; (8005314 <SystemInit+0x4c>)
 80052e0:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80052e2:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80052e4:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	438a      	bics	r2, r1
 80052ea:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	490a      	ldr	r1, [pc, #40]	; (8005318 <SystemInit+0x50>)
 80052f0:	400a      	ands	r2, r1
 80052f2:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	4909      	ldr	r1, [pc, #36]	; (800531c <SystemInit+0x54>)
 80052f8:	400a      	ands	r2, r1
 80052fa:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80052fc:	2200      	movs	r2, #0
 80052fe:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005300:	2280      	movs	r2, #128	; 0x80
 8005302:	4b07      	ldr	r3, [pc, #28]	; (8005320 <SystemInit+0x58>)
 8005304:	0512      	lsls	r2, r2, #20
 8005306:	609a      	str	r2, [r3, #8]
#endif
}
 8005308:	4770      	bx	lr
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	40021000 	.word	0x40021000
 8005310:	88ff400c 	.word	0x88ff400c
 8005314:	fef6fff6 	.word	0xfef6fff6
 8005318:	fffbffff 	.word	0xfffbffff
 800531c:	ff02ffff 	.word	0xff02ffff
 8005320:	e000ed00 	.word	0xe000ed00

08005324 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005324:	23a5      	movs	r3, #165	; 0xa5
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	58c3      	ldr	r3, [r0, r3]
{
 800532a:	b570      	push	{r4, r5, r6, lr}
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00e      	beq.n	800534e <USBD_CDC_EP0_RxReady+0x2a>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005330:	22a4      	movs	r2, #164	; 0xa4
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005332:	2580      	movs	r5, #128	; 0x80
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005334:	0092      	lsls	r2, r2, #2
 8005336:	5884      	ldr	r4, [r0, r2]
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005338:	00ad      	lsls	r5, r5, #2
 800533a:	5d60      	ldrb	r0, [r4, r5]
 800533c:	28ff      	cmp	r0, #255	; 0xff
 800533e:	d006      	beq.n	800534e <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005340:	4a04      	ldr	r2, [pc, #16]	; (8005354 <USBD_CDC_EP0_RxReady+0x30>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	5ca2      	ldrb	r2, [r4, r2]
 8005346:	0021      	movs	r1, r4
 8005348:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 800534a:	23ff      	movs	r3, #255	; 0xff
 800534c:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 800534e:	2000      	movs	r0, #0
 8005350:	bd70      	pop	{r4, r5, r6, pc}
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	00000201 	.word	0x00000201

08005358 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005358:	2343      	movs	r3, #67	; 0x43
 800535a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800535c:	4800      	ldr	r0, [pc, #0]	; (8005360 <USBD_CDC_GetFSCfgDesc+0x8>)
 800535e:	4770      	bx	lr
 8005360:	2000003c 	.word	0x2000003c

08005364 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005364:	2343      	movs	r3, #67	; 0x43
 8005366:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005368:	4800      	ldr	r0, [pc, #0]	; (800536c <USBD_CDC_GetHSCfgDesc+0x8>)
 800536a:	4770      	bx	lr
 800536c:	20000080 	.word	0x20000080

08005370 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005370:	2343      	movs	r3, #67	; 0x43
 8005372:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005374:	4800      	ldr	r0, [pc, #0]	; (8005378 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005376:	4770      	bx	lr
 8005378:	200000d0 	.word	0x200000d0

0800537c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800537c:	230a      	movs	r3, #10
 800537e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005380:	4800      	ldr	r0, [pc, #0]	; (8005384 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005382:	4770      	bx	lr
 8005384:	200000c4 	.word	0x200000c4

08005388 <USBD_CDC_DataOut>:
{
 8005388:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800538a:	26a4      	movs	r6, #164	; 0xa4
 800538c:	00b6      	lsls	r6, r6, #2
{
 800538e:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005390:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005392:	f000 ff8d 	bl	80062b0 <USBD_LL_GetRxDataSize>
 8005396:	2383      	movs	r3, #131	; 0x83
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	50e8      	str	r0, [r5, r3]
  if(pdev->pClassData != NULL)
 800539c:	59a3      	ldr	r3, [r4, r6]
    return USBD_FAIL;
 800539e:	2002      	movs	r0, #2
  if(pdev->pClassData != NULL)
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80053a4:	2383      	movs	r3, #131	; 0x83
 80053a6:	2281      	movs	r2, #129	; 0x81
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	18e9      	adds	r1, r5, r3
 80053ac:	3388      	adds	r3, #136	; 0x88
 80053ae:	58e3      	ldr	r3, [r4, r3]
 80053b0:	0092      	lsls	r2, r2, #2
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	58a8      	ldr	r0, [r5, r2]
 80053b6:	4798      	blx	r3
    return USBD_OK;
 80053b8:	2000      	movs	r0, #0
}
 80053ba:	bd70      	pop	{r4, r5, r6, pc}

080053bc <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80053bc:	23a4      	movs	r3, #164	; 0xa4
{
 80053be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	58c3      	ldr	r3, [r0, r3]
{
 80053c4:	0006      	movs	r6, r0
 80053c6:	000f      	movs	r7, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80053c8:	9301      	str	r3, [sp, #4]
    return USBD_FAIL;
 80053ca:	2002      	movs	r0, #2
  if(pdev->pClassData != NULL)
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d017      	beq.n	8005400 <USBD_CDC_DataIn+0x44>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80053d0:	2514      	movs	r5, #20
 80053d2:	434d      	muls	r5, r1
 80053d4:	1975      	adds	r5, r6, r5
 80053d6:	69e8      	ldr	r0, [r5, #28]
 80053d8:	2800      	cmp	r0, #0
 80053da:	d012      	beq.n	8005402 <USBD_CDC_DataIn+0x46>
 80053dc:	23a6      	movs	r3, #166	; 0xa6
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	58f3      	ldr	r3, [r6, r3]
 80053e2:	014a      	lsls	r2, r1, #5
 80053e4:	189b      	adds	r3, r3, r2
 80053e6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80053e8:	f7fa ff30 	bl	800024c <__aeabi_uidivmod>
 80053ec:	1e0c      	subs	r4, r1, #0
 80053ee:	d108      	bne.n	8005402 <USBD_CDC_DataIn+0x46>
      pdev->ep_in[epnum].total_length = 0U;
 80053f0:	61e9      	str	r1, [r5, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80053f2:	000b      	movs	r3, r1
 80053f4:	000a      	movs	r2, r1
 80053f6:	0030      	movs	r0, r6
 80053f8:	0039      	movs	r1, r7
 80053fa:	f000 ff39 	bl	8006270 <USBD_LL_Transmit>
    return USBD_OK;
 80053fe:	0020      	movs	r0, r4
}
 8005400:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8005402:	2385      	movs	r3, #133	; 0x85
 8005404:	2000      	movs	r0, #0
 8005406:	9a01      	ldr	r2, [sp, #4]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	50d0      	str	r0, [r2, r3]
 800540c:	e7f8      	b.n	8005400 <USBD_CDC_DataIn+0x44>
	...

08005410 <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005410:	23a4      	movs	r3, #164	; 0xa4
{
 8005412:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	58c7      	ldr	r7, [r0, r3]
  uint8_t ifalt = 0U;
 8005418:	466b      	mov	r3, sp
  uint16_t status_info = 0U;
 800541a:	466a      	mov	r2, sp
{
 800541c:	000e      	movs	r6, r1
  uint8_t ifalt = 0U;
 800541e:	1d59      	adds	r1, r3, #5
 8005420:	2300      	movs	r3, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005422:	2460      	movs	r4, #96	; 0x60
{
 8005424:	0005      	movs	r5, r0
  uint16_t status_info = 0U;
 8005426:	1d90      	adds	r0, r2, #6
  uint8_t ifalt = 0U;
 8005428:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 800542a:	8003      	strh	r3, [r0, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800542c:	7833      	ldrb	r3, [r6, #0]
 800542e:	401c      	ands	r4, r3
 8005430:	d029      	beq.n	8005486 <USBD_CDC_Setup+0x76>
 8005432:	2c20      	cmp	r4, #32
 8005434:	d142      	bne.n	80054bc <USBD_CDC_Setup+0xac>
    if (req->wLength)
 8005436:	88f4      	ldrh	r4, [r6, #6]
 8005438:	7870      	ldrb	r0, [r6, #1]
 800543a:	2c00      	cmp	r4, #0
 800543c:	d01b      	beq.n	8005476 <USBD_CDC_Setup+0x66>
      if (req->bmRequest & 0x80U)
 800543e:	b25b      	sxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	da0c      	bge.n	800545e <USBD_CDC_Setup+0x4e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005444:	23a5      	movs	r3, #165	; 0xa5
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	58eb      	ldr	r3, [r5, r3]
 800544a:	0022      	movs	r2, r4
 800544c:	0039      	movs	r1, r7
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005452:	0039      	movs	r1, r7
 8005454:	88f2      	ldrh	r2, [r6, #6]
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8005456:	0028      	movs	r0, r5
 8005458:	f000 fc9c 	bl	8005d94 <USBD_CtlSendData>
 800545c:	e009      	b.n	8005472 <USBD_CDC_Setup+0x62>
        hcdc->CmdOpCode = req->bRequest;
 800545e:	2380      	movs	r3, #128	; 0x80
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	54f8      	strb	r0, [r7, r3]
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005464:	4b18      	ldr	r3, [pc, #96]	; (80054c8 <USBD_CDC_Setup+0xb8>)
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005466:	0022      	movs	r2, r4
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005468:	54fc      	strb	r4, [r7, r3]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800546a:	0039      	movs	r1, r7
 800546c:	0028      	movs	r0, r5
 800546e:	f000 fca7 	bl	8005dc0 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8005472:	2000      	movs	r0, #0
}
 8005474:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005476:	23a5      	movs	r3, #165	; 0xa5
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	58eb      	ldr	r3, [r5, r3]
 800547c:	0022      	movs	r2, r4
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	0031      	movs	r1, r6
 8005482:	4798      	blx	r3
 8005484:	e7f5      	b.n	8005472 <USBD_CDC_Setup+0x62>
    switch (req->bRequest)
 8005486:	7877      	ldrb	r7, [r6, #1]
 8005488:	2f0a      	cmp	r7, #10
 800548a:	d00b      	beq.n	80054a4 <USBD_CDC_Setup+0x94>
 800548c:	2f0b      	cmp	r7, #11
 800548e:	d010      	beq.n	80054b2 <USBD_CDC_Setup+0xa2>
 8005490:	2f00      	cmp	r7, #0
 8005492:	d113      	bne.n	80054bc <USBD_CDC_Setup+0xac>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005494:	239d      	movs	r3, #157	; 0x9d
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	5ceb      	ldrb	r3, [r5, r3]
 800549a:	2b03      	cmp	r3, #3
 800549c:	d10e      	bne.n	80054bc <USBD_CDC_Setup+0xac>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800549e:	2202      	movs	r2, #2
 80054a0:	0001      	movs	r1, r0
 80054a2:	e7d8      	b.n	8005456 <USBD_CDC_Setup+0x46>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054a4:	239d      	movs	r3, #157	; 0x9d
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	5ceb      	ldrb	r3, [r5, r3]
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d106      	bne.n	80054bc <USBD_CDC_Setup+0xac>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80054ae:	2201      	movs	r2, #1
 80054b0:	e7d1      	b.n	8005456 <USBD_CDC_Setup+0x46>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054b2:	239d      	movs	r3, #157	; 0x9d
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	5ceb      	ldrb	r3, [r5, r3]
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d0da      	beq.n	8005472 <USBD_CDC_Setup+0x62>
      USBD_CtlError (pdev, req);
 80054bc:	0028      	movs	r0, r5
 80054be:	0031      	movs	r1, r6
 80054c0:	f000 fc41 	bl	8005d46 <USBD_CtlError>
      ret = USBD_FAIL;
 80054c4:	2002      	movs	r0, #2
      break;
 80054c6:	e7d5      	b.n	8005474 <USBD_CDC_Setup+0x64>
 80054c8:	00000201 	.word	0x00000201

080054cc <USBD_CDC_DeInit>:
{
 80054cc:	b570      	push	{r4, r5, r6, lr}
 80054ce:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80054d0:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80054d2:	2181      	movs	r1, #129	; 0x81
 80054d4:	f000 fe7a 	bl	80061cc <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80054d8:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80054da:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80054dc:	0020      	movs	r0, r4
 80054de:	f000 fe75 	bl	80061cc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80054e2:	0023      	movs	r3, r4
  if(pdev->pClassData != NULL)
 80054e4:	26a4      	movs	r6, #164	; 0xa4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80054e6:	33fc      	adds	r3, #252	; 0xfc
 80054e8:	65dd      	str	r5, [r3, #92]	; 0x5c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80054ea:	2182      	movs	r1, #130	; 0x82
 80054ec:	0020      	movs	r0, r4
  if(pdev->pClassData != NULL)
 80054ee:	00b6      	lsls	r6, r6, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80054f0:	f000 fe6c 	bl	80061cc <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80054f4:	59a3      	ldr	r3, [r4, r6]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80054f6:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 80054f8:	42ab      	cmp	r3, r5
 80054fa:	d008      	beq.n	800550e <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80054fc:	23a5      	movs	r3, #165	; 0xa5
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	58e3      	ldr	r3, [r4, r3]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005506:	59a0      	ldr	r0, [r4, r6]
 8005508:	f000 fede 	bl	80062c8 <USBD_static_free>
    pdev->pClassData = NULL;
 800550c:	51a5      	str	r5, [r4, r6]
}
 800550e:	2000      	movs	r0, #0
 8005510:	bd70      	pop	{r4, r5, r6, pc}

08005512 <USBD_CDC_Init>:
{
 8005512:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005514:	0006      	movs	r6, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005516:	7c03      	ldrb	r3, [r0, #16]
{
 8005518:	0004      	movs	r4, r0
 800551a:	36fc      	adds	r6, #252	; 0xfc
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800551c:	2b00      	cmp	r3, #0
 800551e:	d13b      	bne.n	8005598 <USBD_CDC_Init+0x86>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005520:	2380      	movs	r3, #128	; 0x80
 8005522:	2202      	movs	r2, #2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	2181      	movs	r1, #129	; 0x81
 8005528:	f000 fe3e 	bl	80061a8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800552c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800552e:	2380      	movs	r3, #128	; 0x80
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005530:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005532:	009b      	lsls	r3, r3, #2
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005534:	0029      	movs	r1, r5
 8005536:	2202      	movs	r2, #2
 8005538:	0020      	movs	r0, r4
 800553a:	f000 fe35 	bl	80061a8 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800553e:	65f5      	str	r5, [r6, #92]	; 0x5c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005540:	2308      	movs	r3, #8
 8005542:	2203      	movs	r2, #3
 8005544:	2182      	movs	r1, #130	; 0x82
 8005546:	0020      	movs	r0, r4
 8005548:	f000 fe2e 	bl	80061a8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800554c:	2601      	movs	r6, #1
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800554e:	2087      	movs	r0, #135	; 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005550:	6426      	str	r6, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005552:	0080      	lsls	r0, r0, #2
 8005554:	f000 feb4 	bl	80062c0 <USBD_static_malloc>
 8005558:	23a4      	movs	r3, #164	; 0xa4
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	0005      	movs	r5, r0
 800555e:	50e0      	str	r0, [r4, r3]
    ret = 1U;
 8005560:	0030      	movs	r0, r6
  if(pdev->pClassData == NULL)
 8005562:	2d00      	cmp	r5, #0
 8005564:	d017      	beq.n	8005596 <USBD_CDC_Init+0x84>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005566:	3304      	adds	r3, #4
 8005568:	58e3      	ldr	r3, [r4, r3]
    hcdc->TxState = 0U;
 800556a:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005570:	2385      	movs	r3, #133	; 0x85
 8005572:	2281      	movs	r2, #129	; 0x81
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	50ef      	str	r7, [r5, r3]
    hcdc->RxState = 0U;
 8005578:	3304      	adds	r3, #4
 800557a:	50ef      	str	r7, [r5, r3]
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800557c:	7c23      	ldrb	r3, [r4, #16]
 800557e:	0092      	lsls	r2, r2, #2
 8005580:	9301      	str	r3, [sp, #4]
 8005582:	42bb      	cmp	r3, r7
 8005584:	d111      	bne.n	80055aa <USBD_CDC_Init+0x98>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005586:	2380      	movs	r3, #128	; 0x80
 8005588:	58aa      	ldr	r2, [r5, r2]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	0031      	movs	r1, r6
 800558e:	0020      	movs	r0, r4
 8005590:	f000 fe7e 	bl	8006290 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005594:	9801      	ldr	r0, [sp, #4]
}
 8005596:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005598:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800559a:	2340      	movs	r3, #64	; 0x40
 800559c:	2202      	movs	r2, #2
 800559e:	2181      	movs	r1, #129	; 0x81
 80055a0:	f000 fe02 	bl	80061a8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80055a4:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80055a6:	2340      	movs	r3, #64	; 0x40
 80055a8:	e7c4      	b.n	8005534 <USBD_CDC_Init+0x22>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80055aa:	2340      	movs	r3, #64	; 0x40
 80055ac:	58aa      	ldr	r2, [r5, r2]
 80055ae:	0031      	movs	r1, r6
 80055b0:	0020      	movs	r0, r4
 80055b2:	f000 fe6d 	bl	8006290 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80055b6:	0038      	movs	r0, r7
 80055b8:	e7ed      	b.n	8005596 <USBD_CDC_Init+0x84>

080055ba <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 80055ba:	2302      	movs	r3, #2

  if(fops != NULL)
 80055bc:	2900      	cmp	r1, #0
 80055be:	d003      	beq.n	80055c8 <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData= fops;
 80055c0:	23a5      	movs	r3, #165	; 0xa5
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;
 80055c6:	2300      	movs	r3, #0
  }

  return ret;
}
 80055c8:	0018      	movs	r0, r3
 80055ca:	4770      	bx	lr

080055cc <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80055cc:	23a4      	movs	r3, #164	; 0xa4
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 80055d2:	2082      	movs	r0, #130	; 0x82
 80055d4:	0080      	lsls	r0, r0, #2
 80055d6:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 80055d8:	2184      	movs	r1, #132	; 0x84
 80055da:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 80055dc:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 80055de:	505a      	str	r2, [r3, r1]
}
 80055e0:	4770      	bx	lr

080055e2 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80055e2:	23a4      	movs	r3, #164	; 0xa4
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	58c2      	ldr	r2, [r0, r3]
 80055e8:	3b8c      	subs	r3, #140	; 0x8c

  return USBD_OK;
}
 80055ea:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80055ec:	50d1      	str	r1, [r2, r3]
}
 80055ee:	4770      	bx	lr

080055f0 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80055f0:	23a4      	movs	r3, #164	; 0xa4
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	58c2      	ldr	r2, [r0, r3]
{
 80055f6:	b510      	push	{r4, lr}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 80055f8:	2302      	movs	r3, #2
  if(pdev->pClassData != NULL)
 80055fa:	2a00      	cmp	r2, #0
 80055fc:	d012      	beq.n	8005624 <USBD_CDC_TransmitPacket+0x34>
    if(hcdc->TxState == 0U)
 80055fe:	2185      	movs	r1, #133	; 0x85
 8005600:	0089      	lsls	r1, r1, #2
 8005602:	5854      	ldr	r4, [r2, r1]
 8005604:	3b01      	subs	r3, #1
 8005606:	2c00      	cmp	r4, #0
 8005608:	d10c      	bne.n	8005624 <USBD_CDC_TransmitPacket+0x34>
      hcdc->TxState = 1U;
 800560a:	5053      	str	r3, [r2, r1]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800560c:	2384      	movs	r3, #132	; 0x84
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005612:	390c      	subs	r1, #12
 8005614:	5852      	ldr	r2, [r2, r1]
 8005616:	3988      	subs	r1, #136	; 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005618:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800561a:	39ff      	subs	r1, #255	; 0xff
 800561c:	b29b      	uxth	r3, r3
 800561e:	f000 fe27 	bl	8006270 <USBD_LL_Transmit>
      return USBD_OK;
 8005622:	0023      	movs	r3, r4
  }
}
 8005624:	0018      	movs	r0, r3
 8005626:	bd10      	pop	{r4, pc}

08005628 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005628:	23a4      	movs	r3, #164	; 0xa4
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	58c2      	ldr	r2, [r0, r3]
{
 800562e:	b510      	push	{r4, lr}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 8005630:	2402      	movs	r4, #2
  if(pdev->pClassData != NULL)
 8005632:	2a00      	cmp	r2, #0
 8005634:	d008      	beq.n	8005648 <USBD_CDC_ReceivePacket+0x20>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005636:	7c04      	ldrb	r4, [r0, #16]
 8005638:	3b8c      	subs	r3, #140	; 0x8c
 800563a:	58d2      	ldr	r2, [r2, r3]
 800563c:	2c00      	cmp	r4, #0
 800563e:	d105      	bne.n	800564c <USBD_CDC_ReceivePacket+0x24>
      USBD_LL_PrepareReceive(pdev,
 8005640:	3b04      	subs	r3, #4
 8005642:	2101      	movs	r1, #1
 8005644:	f000 fe24 	bl	8006290 <USBD_LL_PrepareReceive>
  }
}
 8005648:	0020      	movs	r0, r4
 800564a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800564c:	2340      	movs	r3, #64	; 0x40
 800564e:	2101      	movs	r1, #1
 8005650:	f000 fe1e 	bl	8006290 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8005654:	2400      	movs	r4, #0
 8005656:	e7f7      	b.n	8005648 <USBD_CDC_ReceivePacket+0x20>

08005658 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005658:	b510      	push	{r4, lr}
  if(pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800565a:	2302      	movs	r3, #2
  if(pdev == NULL)
 800565c:	2800      	cmp	r0, #0
 800565e:	d013      	beq.n	8005688 <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005660:	23a3      	movs	r3, #163	; 0xa3
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	58c4      	ldr	r4, [r0, r3]
 8005666:	2c00      	cmp	r4, #0
 8005668:	d001      	beq.n	800566e <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 800566a:	2400      	movs	r4, #0
 800566c:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800566e:	2900      	cmp	r1, #0
 8005670:	d002      	beq.n	8005678 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8005672:	23a2      	movs	r3, #162	; 0xa2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005678:	239d      	movs	r3, #157	; 0x9d
 800567a:	2101      	movs	r1, #1
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8005680:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005682:	f000 fd41 	bl	8006108 <USBD_LL_Init>

  return USBD_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	0018      	movs	r0, r3
 800568a:	bd10      	pop	{r4, pc}

0800568c <USBD_RegisterClass>:
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800568c:	2302      	movs	r3, #2
  if(pclass != 0)
 800568e:	2900      	cmp	r1, #0
 8005690:	d003      	beq.n	800569a <USBD_RegisterClass+0xe>
    pdev->pClass = pclass;
 8005692:	23a3      	movs	r3, #163	; 0xa3
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 8005698:	2300      	movs	r3, #0
  }

  return status;
}
 800569a:	0018      	movs	r0, r3
 800569c:	4770      	bx	lr

0800569e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800569e:	b510      	push	{r4, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80056a0:	f000 fd72 	bl	8006188 <USBD_LL_Start>

  return USBD_OK;
}
 80056a4:	2000      	movs	r0, #0
 80056a6:	bd10      	pop	{r4, pc}

080056a8 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 80056a8:	23a3      	movs	r3, #163	; 0xa3
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	58c3      	ldr	r3, [r0, r3]
{
 80056ae:	b510      	push	{r4, lr}
  if(pdev->pClass != NULL)
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <USBD_SetClassConfig+0x10>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80056b4:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 80056b6:	bd10      	pop	{r4, pc}
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4798      	blx	r3
 80056bc:	2800      	cmp	r0, #0
 80056be:	d0fa      	beq.n	80056b6 <USBD_SetClassConfig+0xe>
 80056c0:	e7f8      	b.n	80056b4 <USBD_SetClassConfig+0xc>

080056c2 <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80056c2:	23a3      	movs	r3, #163	; 0xa3
{
 80056c4:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	58c3      	ldr	r3, [r0, r3]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	4798      	blx	r3
  return USBD_OK;
}
 80056ce:	2000      	movs	r0, #0
 80056d0:	bd10      	pop	{r4, pc}
	...

080056d4 <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056d4:	23a0      	movs	r3, #160	; 0xa0
 80056d6:	009b      	lsls	r3, r3, #2
{
 80056d8:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056da:	18c5      	adds	r5, r0, r3
{
 80056dc:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056de:	0028      	movs	r0, r5
 80056e0:	f000 fb1d 	bl	8005d1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80056e4:	239b      	movs	r3, #155	; 0x9b
 80056e6:	2201      	movs	r2, #1
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80056ec:	4b11      	ldr	r3, [pc, #68]	; (8005734 <USBD_LL_SetupStage+0x60>)
 80056ee:	5ae2      	ldrh	r2, [r4, r3]
 80056f0:	3b16      	subs	r3, #22
 80056f2:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80056f4:	3310      	adds	r3, #16
 80056f6:	5ce1      	ldrb	r1, [r4, r3]
 80056f8:	231f      	movs	r3, #31
 80056fa:	400b      	ands	r3, r1
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d00f      	beq.n	8005720 <USBD_LL_SetupStage+0x4c>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <USBD_LL_SetupStage+0x40>
 8005704:	2b02      	cmp	r3, #2
 8005706:	d010      	beq.n	800572a <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005708:	237f      	movs	r3, #127	; 0x7f
 800570a:	0020      	movs	r0, r4
 800570c:	4399      	bics	r1, r3
 800570e:	f000 fd6d 	bl	80061ec <USBD_LL_StallEP>
    break;
 8005712:	e003      	b.n	800571c <USBD_LL_SetupStage+0x48>
    USBD_StdDevReq (pdev, &pdev->request);
 8005714:	0029      	movs	r1, r5
 8005716:	0020      	movs	r0, r4
 8005718:	f000 f910 	bl	800593c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800571c:	2000      	movs	r0, #0
 800571e:	bd70      	pop	{r4, r5, r6, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8005720:	0029      	movs	r1, r5
 8005722:	0020      	movs	r0, r4
 8005724:	f000 fa3e 	bl	8005ba4 <USBD_StdItfReq>
    break;
 8005728:	e7f8      	b.n	800571c <USBD_LL_SetupStage+0x48>
    USBD_StdEPReq(pdev, &pdev->request);
 800572a:	0029      	movs	r1, r5
 800572c:	0020      	movs	r0, r4
 800572e:	f000 fa63 	bl	8005bf8 <USBD_StdEPReq>
    break;
 8005732:	e7f3      	b.n	800571c <USBD_LL_SetupStage+0x48>
 8005734:	00000286 	.word	0x00000286

08005738 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	0004      	movs	r4, r0
 800573c:	0015      	movs	r5, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800573e:	2900      	cmp	r1, #0
 8005740:	d130      	bne.n	80057a4 <USBD_LL_DataOutStage+0x6c>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005742:	239b      	movs	r3, #155	; 0x9b
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	58c2      	ldr	r2, [r0, r3]
 8005748:	2a03      	cmp	r2, #3
 800574a:	d123      	bne.n	8005794 <USBD_LL_DataOutStage+0x5c>
    {
      if(pep->rem_length > pep->maxpacket)
 800574c:	0002      	movs	r2, r0
 800574e:	3241      	adds	r2, #65	; 0x41
 8005750:	32ff      	adds	r2, #255	; 0xff
 8005752:	68d3      	ldr	r3, [r2, #12]
 8005754:	6910      	ldr	r0, [r2, #16]
 8005756:	4283      	cmp	r3, r0
 8005758:	d90b      	bls.n	8005772 <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -=  pep->maxpacket;
 800575a:	1a1b      	subs	r3, r3, r0
 800575c:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx (pdev,
 800575e:	b282      	uxth	r2, r0
 8005760:	4298      	cmp	r0, r3
 8005762:	d900      	bls.n	8005766 <USBD_LL_DataOutStage+0x2e>
 8005764:	b29a      	uxth	r2, r3
 8005766:	0029      	movs	r1, r5
 8005768:	0020      	movs	r0, r4
 800576a:	f000 fb39 	bl	8005de0 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800576e:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8005770:	e016      	b.n	80057a0 <USBD_LL_DataOutStage+0x68>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005772:	23a3      	movs	r3, #163	; 0xa3
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	58e3      	ldr	r3, [r4, r3]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d006      	beq.n	800578c <USBD_LL_DataOutStage+0x54>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800577e:	229d      	movs	r2, #157	; 0x9d
 8005780:	0092      	lsls	r2, r2, #2
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005782:	5ca2      	ldrb	r2, [r4, r2]
 8005784:	2a03      	cmp	r2, #3
 8005786:	d101      	bne.n	800578c <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 8005788:	0020      	movs	r0, r4
 800578a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800578c:	0020      	movs	r0, r4
 800578e:	f000 fb2f 	bl	8005df0 <USBD_CtlSendStatus>
 8005792:	e7ec      	b.n	800576e <USBD_LL_DataOutStage+0x36>
  return USBD_OK;
 8005794:	000d      	movs	r5, r1
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005796:	2a05      	cmp	r2, #5
 8005798:	d102      	bne.n	80057a0 <USBD_LL_DataOutStage+0x68>
        pdev->ep0_state = USBD_EP0_IDLE;
 800579a:	50e1      	str	r1, [r4, r3]
        USBD_LL_StallEP(pdev, 0U);
 800579c:	f000 fd26 	bl	80061ec <USBD_LL_StallEP>
}
 80057a0:	0028      	movs	r0, r5
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 80057a4:	23a3      	movs	r3, #163	; 0xa3
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 80057aa:	2502      	movs	r5, #2
  else if((pdev->pClass->DataOut != NULL) &&
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0f6      	beq.n	80057a0 <USBD_LL_DataOutStage+0x68>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057b2:	229d      	movs	r2, #157	; 0x9d
 80057b4:	0092      	lsls	r2, r2, #2
  else if((pdev->pClass->DataOut != NULL) &&
 80057b6:	5c82      	ldrb	r2, [r0, r2]
 80057b8:	2a03      	cmp	r2, #3
 80057ba:	d1f1      	bne.n	80057a0 <USBD_LL_DataOutStage+0x68>
    pdev->pClass->DataOut(pdev, epnum);
 80057bc:	4798      	blx	r3
 80057be:	e7d6      	b.n	800576e <USBD_LL_DataOutStage+0x36>

080057c0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80057c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c2:	000d      	movs	r5, r1
 80057c4:	0004      	movs	r4, r0
 80057c6:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80057c8:	2d00      	cmp	r5, #0
 80057ca:	d14b      	bne.n	8005864 <USBD_LL_DataInStage+0xa4>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80057cc:	239b      	movs	r3, #155	; 0x9b
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	58c3      	ldr	r3, [r0, r3]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d13f      	bne.n	8005856 <USBD_LL_DataInStage+0x96>
    {
      if(pep->rem_length > pep->maxpacket)
 80057d6:	6a02      	ldr	r2, [r0, #32]
 80057d8:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80057da:	42b2      	cmp	r2, r6
 80057dc:	d912      	bls.n	8005804 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 80057de:	1b92      	subs	r2, r2, r6
 80057e0:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80057e2:	b292      	uxth	r2, r2
 80057e4:	f000 fae4 	bl	8005db0 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80057e8:	002b      	movs	r3, r5
 80057ea:	002a      	movs	r2, r5
 80057ec:	0029      	movs	r1, r5
 80057ee:	0020      	movs	r0, r4
 80057f0:	f000 fd4e 	bl	8006290 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80057f4:	239e      	movs	r3, #158	; 0x9e
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	5ce2      	ldrb	r2, [r4, r3]
 80057fa:	2000      	movs	r0, #0
 80057fc:	2a01      	cmp	r2, #1
 80057fe:	d100      	bne.n	8005802 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005800:	54e0      	strb	r0, [r4, r3]
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8005802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005804:	69c7      	ldr	r7, [r0, #28]
 8005806:	0031      	movs	r1, r6
 8005808:	0038      	movs	r0, r7
 800580a:	f7fa fd1f 	bl	800024c <__aeabi_uidivmod>
 800580e:	1e0d      	subs	r5, r1, #0
 8005810:	d10c      	bne.n	800582c <USBD_LL_DataInStage+0x6c>
 8005812:	42be      	cmp	r6, r7
 8005814:	d80a      	bhi.n	800582c <USBD_LL_DataInStage+0x6c>
           (pep->total_length < pdev->ep0_data_len))
 8005816:	269c      	movs	r6, #156	; 0x9c
 8005818:	00b6      	lsls	r6, r6, #2
           (pep->total_length >= pep->maxpacket) &&
 800581a:	59a3      	ldr	r3, [r4, r6]
 800581c:	429f      	cmp	r7, r3
 800581e:	d205      	bcs.n	800582c <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005820:	000a      	movs	r2, r1
 8005822:	0020      	movs	r0, r4
 8005824:	f000 fac4 	bl	8005db0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005828:	51a5      	str	r5, [r4, r6]
 800582a:	e7dd      	b.n	80057e8 <USBD_LL_DataInStage+0x28>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800582c:	23a3      	movs	r3, #163	; 0xa3
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	58e3      	ldr	r3, [r4, r3]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d006      	beq.n	8005846 <USBD_LL_DataInStage+0x86>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005838:	229d      	movs	r2, #157	; 0x9d
 800583a:	0092      	lsls	r2, r2, #2
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800583c:	5ca2      	ldrb	r2, [r4, r2]
 800583e:	2a03      	cmp	r2, #3
 8005840:	d101      	bne.n	8005846 <USBD_LL_DataInStage+0x86>
            pdev->pClass->EP0_TxSent(pdev);
 8005842:	0020      	movs	r0, r4
 8005844:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8005846:	2180      	movs	r1, #128	; 0x80
 8005848:	0020      	movs	r0, r4
 800584a:	f000 fccf 	bl	80061ec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800584e:	0020      	movs	r0, r4
 8005850:	f000 fada 	bl	8005e08 <USBD_CtlReceiveStatus>
 8005854:	e7ce      	b.n	80057f4 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005856:	2204      	movs	r2, #4
 8005858:	4393      	bics	r3, r2
 800585a:	d1cb      	bne.n	80057f4 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800585c:	2180      	movs	r1, #128	; 0x80
 800585e:	f000 fcc5 	bl	80061ec <USBD_LL_StallEP>
 8005862:	e7c7      	b.n	80057f4 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL) &&
 8005864:	23a3      	movs	r3, #163	; 0xa3
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 800586a:	2002      	movs	r0, #2
  else if((pdev->pClass->DataIn != NULL) &&
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0c7      	beq.n	8005802 <USBD_LL_DataInStage+0x42>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005872:	229d      	movs	r2, #157	; 0x9d
 8005874:	0092      	lsls	r2, r2, #2
  else if((pdev->pClass->DataIn != NULL) &&
 8005876:	5ca2      	ldrb	r2, [r4, r2]
 8005878:	2a03      	cmp	r2, #3
 800587a:	d1c2      	bne.n	8005802 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum);
 800587c:	0029      	movs	r1, r5
 800587e:	0020      	movs	r0, r4
 8005880:	4798      	blx	r3
  return USBD_OK;
 8005882:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8005884:	e7bd      	b.n	8005802 <USBD_LL_DataInStage+0x42>

08005886 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005886:	2200      	movs	r2, #0
{
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800588c:	0011      	movs	r1, r2
 800588e:	2340      	movs	r3, #64	; 0x40
 8005890:	f000 fc8a 	bl	80061a8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005894:	0023      	movs	r3, r4
 8005896:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005898:	2640      	movs	r6, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800589a:	33fc      	adds	r3, #252	; 0xfc
 800589c:	649d      	str	r5, [r3, #72]	; 0x48
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800589e:	655e      	str	r6, [r3, #84]	; 0x54

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058a0:	2180      	movs	r1, #128	; 0x80
 80058a2:	0033      	movs	r3, r6
 80058a4:	2200      	movs	r2, #0
 80058a6:	0020      	movs	r0, r4
 80058a8:	f000 fc7e 	bl	80061a8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058ac:	239d      	movs	r3, #157	; 0x9d
  pdev->ep0_state = USBD_EP0_IDLE;
 80058ae:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058b0:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80058b2:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80058b4:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058b6:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80058b8:	3b08      	subs	r3, #8
 80058ba:	50e1      	str	r1, [r4, r3]
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;
 80058bc:	3310      	adds	r3, #16
  pdev->dev_config= 0U;
 80058be:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80058c0:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 80058c2:	3314      	adds	r3, #20
 80058c4:	58e3      	ldr	r3, [r4, r3]
 80058c6:	428b      	cmp	r3, r1
 80058c8:	d005      	beq.n	80058d6 <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80058ca:	23a3      	movs	r3, #163	; 0xa3
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	58e3      	ldr	r3, [r4, r3]
 80058d0:	0020      	movs	r0, r4
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4798      	blx	r3
  }

  return USBD_OK;
}
 80058d6:	2000      	movs	r0, #0
 80058d8:	bd70      	pop	{r4, r5, r6, pc}

080058da <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80058da:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80058dc:	2000      	movs	r0, #0
 80058de:	4770      	bx	lr

080058e0 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80058e0:	239d      	movs	r3, #157	; 0x9d
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	5cc1      	ldrb	r1, [r0, r3]
 80058e6:	4a03      	ldr	r2, [pc, #12]	; (80058f4 <USBD_LL_Suspend+0x14>)
 80058e8:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80058ea:	2204      	movs	r2, #4
 80058ec:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 80058ee:	2000      	movs	r0, #0
 80058f0:	4770      	bx	lr
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	00000275 	.word	0x00000275

080058f8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 80058f8:	4b02      	ldr	r3, [pc, #8]	; (8005904 <USBD_LL_Resume+0xc>)
 80058fa:	5cc2      	ldrb	r2, [r0, r3]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 8005900:	2000      	movs	r0, #0
 8005902:	4770      	bx	lr
 8005904:	00000275 	.word	0x00000275

08005908 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005908:	239d      	movs	r3, #157	; 0x9d
{
 800590a:	b510      	push	{r4, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	5cc3      	ldrb	r3, [r0, r3]
 8005910:	2b03      	cmp	r3, #3
 8005912:	d106      	bne.n	8005922 <USBD_LL_SOF+0x1a>
  {
    if(pdev->pClass->SOF != NULL)
 8005914:	23a3      	movs	r3, #163	; 0xa3
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	58c3      	ldr	r3, [r0, r3]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d000      	beq.n	8005922 <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 8005920:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8005922:	2000      	movs	r0, #0
 8005924:	bd10      	pop	{r4, pc}

08005926 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8005926:	b510      	push	{r4, lr}
 8005928:	0004      	movs	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 800592a:	2180      	movs	r1, #128	; 0x80
 800592c:	f000 fc5e 	bl	80061ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005930:	2100      	movs	r1, #0
 8005932:	0020      	movs	r0, r4
 8005934:	f000 fc5a 	bl	80061ec <USBD_LL_StallEP>
}
 8005938:	bd10      	pop	{r4, pc}
	...

0800593c <USBD_StdDevReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800593c:	2260      	movs	r2, #96	; 0x60
 800593e:	780b      	ldrb	r3, [r1, #0]
{
 8005940:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005942:	4013      	ands	r3, r2
{
 8005944:	0004      	movs	r4, r0
 8005946:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005948:	2b20      	cmp	r3, #32
 800594a:	d014      	beq.n	8005976 <USBD_StdDevReq+0x3a>
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d012      	beq.n	8005976 <USBD_StdDevReq+0x3a>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d000      	beq.n	8005956 <USBD_StdDevReq+0x1a>
 8005954:	e094      	b.n	8005a80 <USBD_StdDevReq+0x144>
    switch (req->bRequest)
 8005956:	7848      	ldrb	r0, [r1, #1]
 8005958:	2809      	cmp	r0, #9
 800595a:	d900      	bls.n	800595e <USBD_StdDevReq+0x22>
 800595c:	e090      	b.n	8005a80 <USBD_StdDevReq+0x144>
 800595e:	f7fa fbe5 	bl	800012c <__gnu_thumb1_case_uhi>
 8005962:	00ee      	.short	0x00ee
 8005964:	008f010c 	.word	0x008f010c
 8005968:	008f0104 	.word	0x008f0104
 800596c:	00130081 	.word	0x00130081
 8005970:	00d8008f 	.word	0x00d8008f
 8005974:	00a2      	.short	0x00a2
    pdev->pClass->Setup(pdev, req);
 8005976:	23a3      	movs	r3, #163	; 0xa3
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	58e3      	ldr	r3, [r4, r3]
 800597c:	0029      	movs	r1, r5
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	0020      	movs	r0, r4
 8005982:	4798      	blx	r3
}
 8005984:	2000      	movs	r0, #0
 8005986:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  switch (req->wValue >> 8)
 8005988:	884b      	ldrh	r3, [r1, #2]
 800598a:	0a18      	lsrs	r0, r3, #8
 800598c:	3801      	subs	r0, #1
 800598e:	2806      	cmp	r0, #6
 8005990:	d876      	bhi.n	8005a80 <USBD_StdDevReq+0x144>
 8005992:	f7fa fbc1 	bl	8000118 <__gnu_thumb1_case_uqi>
 8005996:	2504      	.short	0x2504
 8005998:	50757534 	.word	0x50757534
 800599c:	5b          	.byte	0x5b
 800599d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800599e:	23a2      	movs	r3, #162	; 0xa2
 80059a0:	466a      	mov	r2, sp
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	58e3      	ldr	r3, [r4, r3]
 80059a6:	7c20      	ldrb	r0, [r4, #16]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	1d91      	adds	r1, r2, #6
 80059ac:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 80059ae:	466b      	mov	r3, sp
 80059b0:	1d9e      	adds	r6, r3, #6
 80059b2:	8831      	ldrh	r1, [r6, #0]
 80059b4:	2900      	cmp	r1, #0
 80059b6:	d00c      	beq.n	80059d2 <USBD_StdDevReq+0x96>
 80059b8:	88ea      	ldrh	r2, [r5, #6]
 80059ba:	2a00      	cmp	r2, #0
 80059bc:	d009      	beq.n	80059d2 <USBD_StdDevReq+0x96>
    len = MIN(len, req->wLength);
 80059be:	1c0b      	adds	r3, r1, #0
 80059c0:	4291      	cmp	r1, r2
 80059c2:	d900      	bls.n	80059c6 <USBD_StdDevReq+0x8a>
 80059c4:	1c13      	adds	r3, r2, #0
    USBD_CtlSendData (pdev, pbuf, len);
 80059c6:	0001      	movs	r1, r0
    len = MIN(len, req->wLength);
 80059c8:	b29a      	uxth	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 80059ca:	0020      	movs	r0, r4
    len = MIN(len, req->wLength);
 80059cc:	8033      	strh	r3, [r6, #0]
    USBD_CtlSendData (pdev, pbuf, len);
 80059ce:	f000 f9e1 	bl	8005d94 <USBD_CtlSendData>
  if(req->wLength == 0U)
 80059d2:	88eb      	ldrh	r3, [r5, #6]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1d5      	bne.n	8005984 <USBD_StdDevReq+0x48>
      USBD_CtlSendStatus(pdev);
 80059d8:	0020      	movs	r0, r4
 80059da:	f000 fa09 	bl	8005df0 <USBD_CtlSendStatus>
 80059de:	e7d1      	b.n	8005984 <USBD_StdDevReq+0x48>
 80059e0:	23a3      	movs	r3, #163	; 0xa3
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80059e2:	7c22      	ldrb	r2, [r4, #16]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	58e3      	ldr	r3, [r4, r3]
 80059e8:	2a00      	cmp	r2, #0
 80059ea:	d106      	bne.n	80059fa <USBD_StdDevReq+0xbe>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80059ee:	466a      	mov	r2, sp
 80059f0:	1d90      	adds	r0, r2, #6
 80059f2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059f4:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80059f6:	7043      	strb	r3, [r0, #1]
 80059f8:	e7d9      	b.n	80059ae <USBD_StdDevReq+0x72>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80059fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fc:	e7f7      	b.n	80059ee <USBD_StdDevReq+0xb2>
    switch ((uint8_t)(req->wValue))
 80059fe:	b2d8      	uxtb	r0, r3
 8005a00:	2805      	cmp	r0, #5
 8005a02:	d83d      	bhi.n	8005a80 <USBD_StdDevReq+0x144>
 8005a04:	22a2      	movs	r2, #162	; 0xa2
 8005a06:	0092      	lsls	r2, r2, #2
 8005a08:	7c23      	ldrb	r3, [r4, #16]
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005a0a:	58a2      	ldr	r2, [r4, r2]
    switch ((uint8_t)(req->wValue))
 8005a0c:	f7fa fb84 	bl	8000118 <__gnu_thumb1_case_uqi>
 8005a10:	0d0b0903 	.word	0x0d0b0903
 8005a14:	110f      	.short	0x110f
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a16:	6852      	ldr	r2, [r2, #4]
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005a18:	4669      	mov	r1, sp
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	3106      	adds	r1, #6
 8005a1e:	4790      	blx	r2
 8005a20:	e7c5      	b.n	80059ae <USBD_StdDevReq+0x72>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005a22:	6892      	ldr	r2, [r2, #8]
 8005a24:	e7f8      	b.n	8005a18 <USBD_StdDevReq+0xdc>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005a26:	68d2      	ldr	r2, [r2, #12]
 8005a28:	e7f6      	b.n	8005a18 <USBD_StdDevReq+0xdc>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005a2a:	6912      	ldr	r2, [r2, #16]
 8005a2c:	e7f4      	b.n	8005a18 <USBD_StdDevReq+0xdc>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a2e:	6952      	ldr	r2, [r2, #20]
 8005a30:	e7f2      	b.n	8005a18 <USBD_StdDevReq+0xdc>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005a32:	6992      	ldr	r2, [r2, #24]
 8005a34:	e7f0      	b.n	8005a18 <USBD_StdDevReq+0xdc>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005a36:	7c23      	ldrb	r3, [r4, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d121      	bne.n	8005a80 <USBD_StdDevReq+0x144>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005a3c:	23a3      	movs	r3, #163	; 0xa3
 8005a3e:	466a      	mov	r2, sp
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	58e3      	ldr	r3, [r4, r3]
 8005a44:	1d90      	adds	r0, r2, #6
 8005a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a48:	4798      	blx	r3
 8005a4a:	e7b0      	b.n	80059ae <USBD_StdDevReq+0x72>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005a4c:	7c23      	ldrb	r3, [r4, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d116      	bne.n	8005a80 <USBD_StdDevReq+0x144>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005a52:	23a3      	movs	r3, #163	; 0xa3
 8005a54:	466a      	mov	r2, sp
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	58e3      	ldr	r3, [r4, r3]
 8005a5a:	1d90      	adds	r0, r2, #6
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005a60:	2307      	movs	r3, #7
 8005a62:	e7c8      	b.n	80059f6 <USBD_StdDevReq+0xba>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005a64:	888b      	ldrh	r3, [r1, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <USBD_StdDevReq+0x144>
 8005a6a:	88cb      	ldrh	r3, [r1, #6]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d107      	bne.n	8005a80 <USBD_StdDevReq+0x144>
 8005a70:	884e      	ldrh	r6, [r1, #2]
 8005a72:	2e7f      	cmp	r6, #127	; 0x7f
 8005a74:	d804      	bhi.n	8005a80 <USBD_StdDevReq+0x144>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a76:	259d      	movs	r5, #157	; 0x9d
 8005a78:	00ad      	lsls	r5, r5, #2
 8005a7a:	5d63      	ldrb	r3, [r4, r5]
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d103      	bne.n	8005a88 <USBD_StdDevReq+0x14c>
      USBD_CtlError(pdev , req);
 8005a80:	0020      	movs	r0, r4
 8005a82:	f7ff ff50 	bl	8005926 <USBD_CtlError.constprop.1>
 8005a86:	e77d      	b.n	8005984 <USBD_StdDevReq+0x48>
      pdev->dev_address = dev_addr;
 8005a88:	4b44      	ldr	r3, [pc, #272]	; (8005b9c <USBD_StdDevReq+0x260>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005a8a:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8005a8c:	54e1      	strb	r1, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005a8e:	0020      	movs	r0, r4
 8005a90:	f000 fbde 	bl	8006250 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005a94:	0020      	movs	r0, r4
 8005a96:	f000 f9ab 	bl	8005df0 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a9a:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 8005a9c:	2e00      	cmp	r6, #0
 8005a9e:	d100      	bne.n	8005aa2 <USBD_StdDevReq+0x166>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	5563      	strb	r3, [r4, r5]
 8005aa4:	e76e      	b.n	8005984 <USBD_StdDevReq+0x48>
  cfgidx = (uint8_t)(req->wValue);
 8005aa6:	7889      	ldrb	r1, [r1, #2]
 8005aa8:	4d3d      	ldr	r5, [pc, #244]	; (8005ba0 <USBD_StdDevReq+0x264>)
 8005aaa:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005aac:	2901      	cmp	r1, #1
 8005aae:	d8e7      	bhi.n	8005a80 <USBD_StdDevReq+0x144>
    switch (pdev->dev_state)
 8005ab0:	239d      	movs	r3, #157	; 0x9d
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	5ce2      	ldrb	r2, [r4, r3]
 8005ab6:	2a02      	cmp	r2, #2
 8005ab8:	d009      	beq.n	8005ace <USBD_StdDevReq+0x192>
 8005aba:	2a03      	cmp	r2, #3
 8005abc:	d015      	beq.n	8005aea <USBD_StdDevReq+0x1ae>
      USBD_CtlError(pdev, req);
 8005abe:	0020      	movs	r0, r4
 8005ac0:	f7ff ff31 	bl	8005926 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 8005ac4:	7829      	ldrb	r1, [r5, #0]
 8005ac6:	0020      	movs	r0, r4
 8005ac8:	f7ff fdfb 	bl	80056c2 <USBD_ClrClassConfig>
 8005acc:	e75a      	b.n	8005984 <USBD_StdDevReq+0x48>
      if (cfgidx)
 8005ace:	2900      	cmp	r1, #0
 8005ad0:	d100      	bne.n	8005ad4 <USBD_StdDevReq+0x198>
 8005ad2:	e781      	b.n	80059d8 <USBD_StdDevReq+0x9c>
        pdev->dev_config = cfgidx;
 8005ad4:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005ad6:	2203      	movs	r2, #3
        pdev->dev_config = cfgidx;
 8005ad8:	6061      	str	r1, [r4, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005ada:	54e2      	strb	r2, [r4, r3]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005adc:	0020      	movs	r0, r4
 8005ade:	f7ff fde3 	bl	80056a8 <USBD_SetClassConfig>
 8005ae2:	2802      	cmp	r0, #2
 8005ae4:	d000      	beq.n	8005ae8 <USBD_StdDevReq+0x1ac>
 8005ae6:	e777      	b.n	80059d8 <USBD_StdDevReq+0x9c>
 8005ae8:	e7ca      	b.n	8005a80 <USBD_StdDevReq+0x144>
      if (cfgidx == 0U)
 8005aea:	2900      	cmp	r1, #0
 8005aec:	d106      	bne.n	8005afc <USBD_StdDevReq+0x1c0>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005aee:	2202      	movs	r2, #2
        USBD_ClrClassConfig(pdev, cfgidx);
 8005af0:	0020      	movs	r0, r4
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005af2:	54e2      	strb	r2, [r4, r3]
        pdev->dev_config = cfgidx;
 8005af4:	6061      	str	r1, [r4, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8005af6:	f7ff fde4 	bl	80056c2 <USBD_ClrClassConfig>
 8005afa:	e76d      	b.n	80059d8 <USBD_StdDevReq+0x9c>
      else if (cfgidx != pdev->dev_config)
 8005afc:	6861      	ldr	r1, [r4, #4]
 8005afe:	2901      	cmp	r1, #1
 8005b00:	d100      	bne.n	8005b04 <USBD_StdDevReq+0x1c8>
 8005b02:	e769      	b.n	80059d8 <USBD_StdDevReq+0x9c>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005b04:	b2c9      	uxtb	r1, r1
 8005b06:	0020      	movs	r0, r4
 8005b08:	f7ff fddb 	bl	80056c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005b0c:	7829      	ldrb	r1, [r5, #0]
 8005b0e:	6061      	str	r1, [r4, #4]
 8005b10:	e7e4      	b.n	8005adc <USBD_StdDevReq+0x1a0>
  if (req->wLength != 1U)
 8005b12:	88ca      	ldrh	r2, [r1, #6]
 8005b14:	2a01      	cmp	r2, #1
 8005b16:	d1b3      	bne.n	8005a80 <USBD_StdDevReq+0x144>
    switch (pdev->dev_state)
 8005b18:	239d      	movs	r3, #157	; 0x9d
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	5ce3      	ldrb	r3, [r4, r3]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0ae      	beq.n	8005a80 <USBD_StdDevReq+0x144>
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d906      	bls.n	8005b34 <USBD_StdDevReq+0x1f8>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005b26:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d1a9      	bne.n	8005a80 <USBD_StdDevReq+0x144>
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005b2c:	0020      	movs	r0, r4
 8005b2e:	f000 f931 	bl	8005d94 <USBD_CtlSendData>
 8005b32:	e727      	b.n	8005984 <USBD_StdDevReq+0x48>
      pdev->dev_default_config = 0U;
 8005b34:	2300      	movs	r3, #0
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005b36:	0021      	movs	r1, r4
      pdev->dev_default_config = 0U;
 8005b38:	60a3      	str	r3, [r4, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005b3a:	3108      	adds	r1, #8
 8005b3c:	e7f6      	b.n	8005b2c <USBD_StdDevReq+0x1f0>
  switch (pdev->dev_state)
 8005b3e:	239d      	movs	r3, #157	; 0x9d
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	5ce3      	ldrb	r3, [r4, r3]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d89a      	bhi.n	8005a80 <USBD_StdDevReq+0x144>
    if(req->wLength != 0x2U)
 8005b4a:	88cb      	ldrh	r3, [r1, #6]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d197      	bne.n	8005a80 <USBD_StdDevReq+0x144>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b50:	3b01      	subs	r3, #1
 8005b52:	60e3      	str	r3, [r4, #12]
    if (pdev->dev_remote_wakeup)
 8005b54:	239f      	movs	r3, #159	; 0x9f
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	58e3      	ldr	r3, [r4, r3]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <USBD_StdDevReq+0x226>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	60e3      	str	r3, [r4, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005b62:	0021      	movs	r1, r4
 8005b64:	2202      	movs	r2, #2
 8005b66:	310c      	adds	r1, #12
 8005b68:	e7e0      	b.n	8005b2c <USBD_StdDevReq+0x1f0>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b6a:	884b      	ldrh	r3, [r1, #2]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d000      	beq.n	8005b72 <USBD_StdDevReq+0x236>
 8005b70:	e708      	b.n	8005984 <USBD_StdDevReq+0x48>
    pdev->dev_remote_wakeup = 1U;
 8005b72:	229f      	movs	r2, #159	; 0x9f
 8005b74:	0092      	lsls	r2, r2, #2
 8005b76:	50a3      	str	r3, [r4, r2]
 8005b78:	e72e      	b.n	80059d8 <USBD_StdDevReq+0x9c>
  switch (pdev->dev_state)
 8005b7a:	239d      	movs	r3, #157	; 0x9d
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	5ce3      	ldrb	r3, [r4, r3]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d900      	bls.n	8005b88 <USBD_StdDevReq+0x24c>
 8005b86:	e77b      	b.n	8005a80 <USBD_StdDevReq+0x144>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b88:	884b      	ldrh	r3, [r1, #2]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d000      	beq.n	8005b90 <USBD_StdDevReq+0x254>
 8005b8e:	e6f9      	b.n	8005984 <USBD_StdDevReq+0x48>
      pdev->dev_remote_wakeup = 0U;
 8005b90:	239f      	movs	r3, #159	; 0x9f
 8005b92:	2200      	movs	r2, #0
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	50e2      	str	r2, [r4, r3]
 8005b98:	e71e      	b.n	80059d8 <USBD_StdDevReq+0x9c>
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	00000276 	.word	0x00000276
 8005ba0:	20000474 	.word	0x20000474

08005ba4 <USBD_StdItfReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ba4:	2260      	movs	r2, #96	; 0x60
 8005ba6:	780b      	ldrb	r3, [r1, #0]
{
 8005ba8:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005baa:	4013      	ands	r3, r2
{
 8005bac:	0004      	movs	r4, r0
 8005bae:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	d003      	beq.n	8005bbc <USBD_StdItfReq+0x18>
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d001      	beq.n	8005bbc <USBD_StdItfReq+0x18>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d119      	bne.n	8005bf0 <USBD_StdItfReq+0x4c>
    switch (pdev->dev_state)
 8005bbc:	239d      	movs	r3, #157	; 0x9d
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	5ce3      	ldrb	r3, [r4, r3]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d813      	bhi.n	8005bf0 <USBD_StdItfReq+0x4c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005bc8:	792b      	ldrb	r3, [r5, #4]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d810      	bhi.n	8005bf0 <USBD_StdItfReq+0x4c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005bce:	23a3      	movs	r3, #163	; 0xa3
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	58e3      	ldr	r3, [r4, r3]
 8005bd4:	0029      	movs	r1, r5
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	0020      	movs	r0, r4
 8005bda:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005bdc:	88eb      	ldrh	r3, [r5, #6]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d104      	bne.n	8005bec <USBD_StdItfReq+0x48>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d102      	bne.n	8005bec <USBD_StdItfReq+0x48>
          USBD_CtlSendStatus(pdev);
 8005be6:	0020      	movs	r0, r4
 8005be8:	f000 f902 	bl	8005df0 <USBD_CtlSendStatus>
}
 8005bec:	2000      	movs	r0, #0
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
      USBD_CtlError(pdev, req);
 8005bf0:	0020      	movs	r0, r4
 8005bf2:	f7ff fe98 	bl	8005926 <USBD_CtlError.constprop.1>
      break;
 8005bf6:	e7f9      	b.n	8005bec <USBD_StdItfReq+0x48>

08005bf8 <USBD_StdEPReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bf8:	780a      	ldrb	r2, [r1, #0]
{
 8005bfa:	000b      	movs	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bfc:	2160      	movs	r1, #96	; 0x60
{
 8005bfe:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c00:	400a      	ands	r2, r1
{
 8005c02:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c04:	2a20      	cmp	r2, #32
 8005c06:	d017      	beq.n	8005c38 <USBD_StdEPReq+0x40>
 8005c08:	2a40      	cmp	r2, #64	; 0x40
 8005c0a:	d015      	beq.n	8005c38 <USBD_StdEPReq+0x40>
 8005c0c:	2a00      	cmp	r2, #0
 8005c0e:	d10f      	bne.n	8005c30 <USBD_StdEPReq+0x38>
  ep_addr  = LOBYTE(req->wIndex);
 8005c10:	8898      	ldrh	r0, [r3, #4]
    switch (req->bRequest)
 8005c12:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005c14:	b2c1      	uxtb	r1, r0
    switch (req->bRequest)
 8005c16:	2a01      	cmp	r2, #1
 8005c18:	d026      	beq.n	8005c68 <USBD_StdEPReq+0x70>
 8005c1a:	2a00      	cmp	r2, #0
 8005c1c:	d03e      	beq.n	8005c9c <USBD_StdEPReq+0xa4>
 8005c1e:	2a03      	cmp	r2, #3
 8005c20:	d106      	bne.n	8005c30 <USBD_StdEPReq+0x38>
      switch (pdev->dev_state)
 8005c22:	229d      	movs	r2, #157	; 0x9d
 8005c24:	0092      	lsls	r2, r2, #2
 8005c26:	5ca2      	ldrb	r2, [r4, r2]
 8005c28:	2a02      	cmp	r2, #2
 8005c2a:	d02d      	beq.n	8005c88 <USBD_StdEPReq+0x90>
 8005c2c:	2a03      	cmp	r2, #3
 8005c2e:	d00c      	beq.n	8005c4a <USBD_StdEPReq+0x52>
        USBD_CtlError(pdev, req);
 8005c30:	0020      	movs	r0, r4
 8005c32:	f7ff fe78 	bl	8005926 <USBD_CtlError.constprop.1>
        break;
 8005c36:	e006      	b.n	8005c46 <USBD_StdEPReq+0x4e>
    pdev->pClass->Setup (pdev, req);
 8005c38:	22a3      	movs	r2, #163	; 0xa3
 8005c3a:	0092      	lsls	r2, r2, #2
 8005c3c:	58a2      	ldr	r2, [r4, r2]
 8005c3e:	0019      	movs	r1, r3
 8005c40:	6892      	ldr	r2, [r2, #8]
 8005c42:	0020      	movs	r0, r4
 8005c44:	4790      	blx	r2
}
 8005c46:	2000      	movs	r0, #0
 8005c48:	bd70      	pop	{r4, r5, r6, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005c4a:	885a      	ldrh	r2, [r3, #2]
 8005c4c:	2a00      	cmp	r2, #0
 8005c4e:	d107      	bne.n	8005c60 <USBD_StdEPReq+0x68>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c50:	064a      	lsls	r2, r1, #25
 8005c52:	d005      	beq.n	8005c60 <USBD_StdEPReq+0x68>
 8005c54:	88db      	ldrh	r3, [r3, #6]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d102      	bne.n	8005c60 <USBD_StdEPReq+0x68>
            USBD_LL_StallEP(pdev, ep_addr);
 8005c5a:	0020      	movs	r0, r4
 8005c5c:	f000 fac6 	bl	80061ec <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8005c60:	0020      	movs	r0, r4
 8005c62:	f000 f8c5 	bl	8005df0 <USBD_CtlSendStatus>
        break;
 8005c66:	e7ee      	b.n	8005c46 <USBD_StdEPReq+0x4e>
      switch (pdev->dev_state)
 8005c68:	229d      	movs	r2, #157	; 0x9d
 8005c6a:	0092      	lsls	r2, r2, #2
 8005c6c:	5ca2      	ldrb	r2, [r4, r2]
 8005c6e:	2a02      	cmp	r2, #2
 8005c70:	d00a      	beq.n	8005c88 <USBD_StdEPReq+0x90>
 8005c72:	2a03      	cmp	r2, #3
 8005c74:	d1dc      	bne.n	8005c30 <USBD_StdEPReq+0x38>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005c76:	885b      	ldrh	r3, [r3, #2]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e4      	bne.n	8005c46 <USBD_StdEPReq+0x4e>
          if ((ep_addr & 0x7FU) != 0x00U)
 8005c7c:	064b      	lsls	r3, r1, #25
 8005c7e:	d0ef      	beq.n	8005c60 <USBD_StdEPReq+0x68>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c80:	0020      	movs	r0, r4
 8005c82:	f000 fac3 	bl	800620c <USBD_LL_ClearStallEP>
 8005c86:	e7eb      	b.n	8005c60 <USBD_StdEPReq+0x68>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c88:	064b      	lsls	r3, r1, #25
 8005c8a:	d0d1      	beq.n	8005c30 <USBD_StdEPReq+0x38>
          USBD_LL_StallEP(pdev, ep_addr);
 8005c8c:	0020      	movs	r0, r4
 8005c8e:	f000 faad 	bl	80061ec <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005c92:	2180      	movs	r1, #128	; 0x80
 8005c94:	0020      	movs	r0, r4
 8005c96:	f000 faa9 	bl	80061ec <USBD_LL_StallEP>
 8005c9a:	e7d4      	b.n	8005c46 <USBD_StdEPReq+0x4e>
      switch (pdev->dev_state)
 8005c9c:	239d      	movs	r3, #157	; 0x9d
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	5ce3      	ldrb	r3, [r4, r3]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d017      	beq.n	8005cd6 <USBD_StdEPReq+0xde>
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d1c2      	bne.n	8005c30 <USBD_StdEPReq+0x38>
 8005caa:	220f      	movs	r2, #15
 8005cac:	2314      	movs	r3, #20
 8005cae:	400a      	ands	r2, r1
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cb0:	435a      	muls	r2, r3
 8005cb2:	18a2      	adds	r2, r4, r2
        if((ep_addr & 0x80U) == 0x80U)
 8005cb4:	0600      	lsls	r0, r0, #24
 8005cb6:	d51e      	bpl.n	8005cf6 <USBD_StdEPReq+0xfe>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cb8:	6992      	ldr	r2, [r2, #24]
 8005cba:	2a00      	cmp	r2, #0
 8005cbc:	d0b8      	beq.n	8005c30 <USBD_StdEPReq+0x38>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005cbe:	257f      	movs	r5, #127	; 0x7f
 8005cc0:	400d      	ands	r5, r1
 8005cc2:	3501      	adds	r5, #1
 8005cc4:	435d      	muls	r5, r3
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005cc6:	237f      	movs	r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005cc8:	1965      	adds	r5, r4, r5
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005cca:	400b      	ands	r3, r1
 8005ccc:	d11e      	bne.n	8005d0c <USBD_StdEPReq+0x114>
            pep->status = 0x0001U;
 8005cce:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	0029      	movs	r1, r5
 8005cd4:	e00b      	b.n	8005cee <USBD_StdEPReq+0xf6>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cd6:	064b      	lsls	r3, r1, #25
 8005cd8:	d1aa      	bne.n	8005c30 <USBD_StdEPReq+0x38>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005cda:	0021      	movs	r1, r4
 8005cdc:	3141      	adds	r1, #65	; 0x41
 8005cde:	31ff      	adds	r1, #255	; 0xff
 8005ce0:	0603      	lsls	r3, r0, #24
 8005ce2:	d501      	bpl.n	8005ce8 <USBD_StdEPReq+0xf0>
 8005ce4:	392d      	subs	r1, #45	; 0x2d
 8005ce6:	39ff      	subs	r1, #255	; 0xff
          pep->status = 0x0000U;
 8005ce8:	2300      	movs	r3, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005cea:	2202      	movs	r2, #2
          pep->status = 0x0000U;
 8005cec:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005cee:	0020      	movs	r0, r4
 8005cf0:	f000 f850 	bl	8005d94 <USBD_CtlSendData>
          break;
 8005cf4:	e7a7      	b.n	8005c46 <USBD_StdEPReq+0x4e>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005cf6:	32fc      	adds	r2, #252	; 0xfc
 8005cf8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005cfa:	2a00      	cmp	r2, #0
 8005cfc:	d100      	bne.n	8005d00 <USBD_StdEPReq+0x108>
 8005cfe:	e797      	b.n	8005c30 <USBD_StdEPReq+0x38>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005d00:	257f      	movs	r5, #127	; 0x7f
 8005d02:	400d      	ands	r5, r1
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005d04:	435d      	muls	r5, r3
 8005d06:	3541      	adds	r5, #65	; 0x41
 8005d08:	35ff      	adds	r5, #255	; 0xff
 8005d0a:	e7dc      	b.n	8005cc6 <USBD_StdEPReq+0xce>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005d0c:	0020      	movs	r0, r4
 8005d0e:	f000 fa8d 	bl	800622c <USBD_LL_IsStallEP>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d001      	beq.n	8005d1a <USBD_StdEPReq+0x122>
            pep->status = 0x0001U;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e7d9      	b.n	8005cce <USBD_StdEPReq+0xd6>
            pep->status = 0x0000U;
 8005d1a:	6028      	str	r0, [r5, #0]
 8005d1c:	e7d8      	b.n	8005cd0 <USBD_StdEPReq+0xd8>

08005d1e <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005d1e:	780b      	ldrb	r3, [r1, #0]
 8005d20:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005d22:	784b      	ldrb	r3, [r1, #1]
 8005d24:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005d26:	78ca      	ldrb	r2, [r1, #3]
 8005d28:	788b      	ldrb	r3, [r1, #2]
 8005d2a:	0212      	lsls	r2, r2, #8
 8005d2c:	189b      	adds	r3, r3, r2
 8005d2e:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005d30:	794a      	ldrb	r2, [r1, #5]
 8005d32:	790b      	ldrb	r3, [r1, #4]
 8005d34:	0212      	lsls	r2, r2, #8
 8005d36:	189b      	adds	r3, r3, r2
 8005d38:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005d3a:	79ca      	ldrb	r2, [r1, #7]
 8005d3c:	798b      	ldrb	r3, [r1, #6]
 8005d3e:	0212      	lsls	r2, r2, #8
 8005d40:	189b      	adds	r3, r3, r2
 8005d42:	80c3      	strh	r3, [r0, #6]
}
 8005d44:	4770      	bx	lr

08005d46 <USBD_CtlError>:
{
 8005d46:	b510      	push	{r4, lr}
 8005d48:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8005d4a:	2180      	movs	r1, #128	; 0x80
 8005d4c:	f000 fa4e 	bl	80061ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005d50:	2100      	movs	r1, #0
 8005d52:	0020      	movs	r0, r4
 8005d54:	f000 fa4a 	bl	80061ec <USBD_LL_StallEP>
}
 8005d58:	bd10      	pop	{r4, pc}

08005d5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8005d5e:	4298      	cmp	r0, r3
 8005d60:	d101      	bne.n	8005d66 <USBD_GetString+0xc>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0U;
    }
  }
}
 8005d62:	bd30      	pop	{r4, r5, pc}
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8005d64:	002b      	movs	r3, r5
 8005d66:	5cc4      	ldrb	r4, [r0, r3]
 8005d68:	1c5d      	adds	r5, r3, #1
 8005d6a:	2c00      	cmp	r4, #0
 8005d6c:	d1fa      	bne.n	8005d64 <USBD_GetString+0xa>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	3301      	adds	r3, #1
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005d76:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	704b      	strb	r3, [r1, #1]
 8005d7c:	3b01      	subs	r3, #1
    while (*desc != '\0')
 8005d7e:	7805      	ldrb	r5, [r0, #0]
 8005d80:	2d00      	cmp	r5, #0
 8005d82:	d0ee      	beq.n	8005d62 <USBD_GetString+0x8>
      unicode[idx++] = *desc++;
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	54cd      	strb	r5, [r1, r3]
 8005d88:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8005d8a:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8005d8c:	3001      	adds	r0, #1
      unicode[idx++] =  0U;
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	548c      	strb	r4, [r1, r2]
 8005d92:	e7f4      	b.n	8005d7e <USBD_GetString+0x24>

08005d94 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005d94:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d96:	229b      	movs	r2, #155	; 0x9b
{
 8005d98:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d9a:	2402      	movs	r4, #2
 8005d9c:	0092      	lsls	r2, r2, #2
 8005d9e:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005da0:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 8005da2:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8005da4:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005da6:	2100      	movs	r1, #0
 8005da8:	f000 fa62 	bl	8006270 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005dac:	2000      	movs	r0, #0
 8005dae:	bd10      	pop	{r4, pc}

08005db0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005db0:	b510      	push	{r4, lr}
 8005db2:	0013      	movs	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005db4:	000a      	movs	r2, r1
 8005db6:	2100      	movs	r1, #0
 8005db8:	f000 fa5a 	bl	8006270 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	bd10      	pop	{r4, pc}

08005dc0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8005dc0:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005dc2:	229b      	movs	r2, #155	; 0x9b
{
 8005dc4:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005dc6:	2403      	movs	r4, #3
 8005dc8:	0092      	lsls	r2, r2, #2
 8005dca:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8005dcc:	0002      	movs	r2, r0
 8005dce:	32fc      	adds	r2, #252	; 0xfc
 8005dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
  pdev->ep_out[0].rem_length   = len;
 8005dd2:	6513      	str	r3, [r2, #80]	; 0x50

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8005dd4:	000a      	movs	r2, r1
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	f000 fa5a 	bl	8006290 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005ddc:	2000      	movs	r0, #0
 8005dde:	bd10      	pop	{r4, pc}

08005de0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005de0:	b510      	push	{r4, lr}
 8005de2:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005de4:	000a      	movs	r2, r1
 8005de6:	2100      	movs	r1, #0
 8005de8:	f000 fa52 	bl	8006290 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005dec:	2000      	movs	r0, #0
 8005dee:	bd10      	pop	{r4, pc}

08005df0 <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005df0:	239b      	movs	r3, #155	; 0x9b
 8005df2:	2204      	movs	r2, #4
 8005df4:	009b      	lsls	r3, r3, #2
{
 8005df6:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005df8:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	001a      	movs	r2, r3
 8005dfe:	0019      	movs	r1, r3
 8005e00:	f000 fa36 	bl	8006270 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005e04:	2000      	movs	r0, #0
 8005e06:	bd10      	pop	{r4, pc}

08005e08 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e08:	239b      	movs	r3, #155	; 0x9b
 8005e0a:	2205      	movs	r2, #5
 8005e0c:	009b      	lsls	r3, r3, #2
{
 8005e0e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e10:	50c2      	str	r2, [r0, r3]

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005e12:	2300      	movs	r3, #0
 8005e14:	001a      	movs	r2, r3
 8005e16:	0019      	movs	r1, r3
 8005e18:	f000 fa3a 	bl	8006290 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	bd10      	pop	{r4, pc}

08005e20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005e20:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005e22:	4c11      	ldr	r4, [pc, #68]	; (8005e68 <MX_USB_DEVICE_Init+0x48>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	4911      	ldr	r1, [pc, #68]	; (8005e6c <MX_USB_DEVICE_Init+0x4c>)
 8005e28:	0020      	movs	r0, r4
 8005e2a:	f7ff fc15 	bl	8005658 <USBD_Init>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d001      	beq.n	8005e36 <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 8005e32:	f005 f8eb 	bl	800b00c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005e36:	490e      	ldr	r1, [pc, #56]	; (8005e70 <MX_USB_DEVICE_Init+0x50>)
 8005e38:	0020      	movs	r0, r4
 8005e3a:	f7ff fc27 	bl	800568c <USBD_RegisterClass>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d001      	beq.n	8005e46 <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 8005e42:	f005 f8e3 	bl	800b00c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005e46:	490b      	ldr	r1, [pc, #44]	; (8005e74 <MX_USB_DEVICE_Init+0x54>)
 8005e48:	0020      	movs	r0, r4
 8005e4a:	f7ff fbb6 	bl	80055ba <USBD_CDC_RegisterInterface>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d001      	beq.n	8005e56 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
 8005e52:	f005 f8db 	bl	800b00c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005e56:	0020      	movs	r0, r4
 8005e58:	f7ff fc21 	bl	800569e <USBD_Start>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d001      	beq.n	8005e64 <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 8005e60:	f005 f8d4 	bl	800b00c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005e64:	bd10      	pop	{r4, pc}
 8005e66:	46c0      	nop			; (mov r8, r8)
 8005e68:	20001034 	.word	0x20001034
 8005e6c:	20000124 	.word	0x20000124
 8005e70:	20000004 	.word	0x20000004
 8005e74:	20000114 	.word	0x20000114

08005e78 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005e78:	2000      	movs	r0, #0
 8005e7a:	4770      	bx	lr

08005e7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005e7c:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005e7e:	4d0b      	ldr	r5, [pc, #44]	; (8005eac <CDC_Receive_FS+0x30>)
{
 8005e80:	0004      	movs	r4, r0
 8005e82:	000e      	movs	r6, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005e84:	0001      	movs	r1, r0
 8005e86:	0028      	movs	r0, r5
 8005e88:	f7ff fbab 	bl	80055e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005e8c:	0028      	movs	r0, r5
 8005e8e:	f7ff fbcb 	bl	8005628 <USBD_CDC_ReceivePacket>

  //strcpy((char *)UserRxBufferFS, (char *)Buf);  /*pending controller null buf*/
  WSQ_VCP_RxReady = true;
 8005e92:	2201      	movs	r2, #1
 8005e94:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <CDC_Receive_FS+0x34>)
 8005e96:	701a      	strb	r2, [r3, #0]
	if( NULL != WSQ_VPC_CallbackRXUserDefined ){
 8005e98:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <CDC_Receive_FS+0x38>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <CDC_Receive_FS+0x2a>
		WSQ_VPC_CallbackRXUserDefined(Buf,*Len);
 8005ea0:	6831      	ldr	r1, [r6, #0]
 8005ea2:	0020      	movs	r0, r4
 8005ea4:	4798      	blx	r3
	}

  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	bd70      	pop	{r4, r5, r6, pc}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	20001034 	.word	0x20001034
 8005eb0:	20001008 	.word	0x20001008
 8005eb4:	2000100c 	.word	0x2000100c

08005eb8 <CDC_Init_FS>:
{
 8005eb8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005eba:	4c06      	ldr	r4, [pc, #24]	; (8005ed4 <CDC_Init_FS+0x1c>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4906      	ldr	r1, [pc, #24]	; (8005ed8 <CDC_Init_FS+0x20>)
 8005ec0:	0020      	movs	r0, r4
 8005ec2:	f7ff fb83 	bl	80055cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005ec6:	4905      	ldr	r1, [pc, #20]	; (8005edc <CDC_Init_FS+0x24>)
 8005ec8:	0020      	movs	r0, r4
 8005eca:	f7ff fb8a 	bl	80055e2 <USBD_CDC_SetRxBuffer>
}
 8005ece:	2000      	movs	r0, #0
 8005ed0:	bd10      	pop	{r4, pc}
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	20001034 	.word	0x20001034
 8005ed8:	200016b9 	.word	0x200016b9
 8005edc:	200012d0 	.word	0x200012d0

08005ee0 <CDC_Control_FS>:
	switch(cmd)
 8005ee0:	2822      	cmp	r0, #34	; 0x22
 8005ee2:	d105      	bne.n	8005ef0 <CDC_Control_FS+0x10>
       	if( (req->wValue &0x0001) != 0)
 8005ee4:	884b      	ldrh	r3, [r1, #2]
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	4a03      	ldr	r2, [pc, #12]	; (8005ef8 <CDC_Control_FS+0x18>)
 8005eea:	400b      	ands	r3, r1
 8005eec:	d002      	beq.n	8005ef4 <CDC_Control_FS+0x14>
        	    host_com_port_open = 1;
 8005eee:	7011      	strb	r1, [r2, #0]
}
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	4770      	bx	lr
           		host_com_port_open = 0;
 8005ef4:	7013      	strb	r3, [r2, #0]
 8005ef6:	e7fb      	b.n	8005ef0 <CDC_Control_FS+0x10>
 8005ef8:	20002034 	.word	0x20002034

08005efc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005efc:	000a      	movs	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005efe:	21a4      	movs	r1, #164	; 0xa4
{
 8005f00:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005f02:	4c08      	ldr	r4, [pc, #32]	; (8005f24 <CDC_Transmit_FS+0x28>)
 8005f04:	0089      	lsls	r1, r1, #2
{
 8005f06:	0003      	movs	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005f08:	5860      	ldr	r0, [r4, r1]
  if (hcdc->TxState != 0){
 8005f0a:	397c      	subs	r1, #124	; 0x7c
 8005f0c:	5841      	ldr	r1, [r0, r1]
    return USBD_BUSY;
 8005f0e:	2001      	movs	r0, #1
  if (hcdc->TxState != 0){
 8005f10:	2900      	cmp	r1, #0
 8005f12:	d106      	bne.n	8005f22 <CDC_Transmit_FS+0x26>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005f14:	0019      	movs	r1, r3
 8005f16:	0020      	movs	r0, r4
 8005f18:	f7ff fb58 	bl	80055cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005f1c:	0020      	movs	r0, r4
 8005f1e:	f7ff fb67 	bl	80055f0 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 8005f22:	bd10      	pop	{r4, pc}
 8005f24:	20001034 	.word	0x20001034

08005f28 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005f28:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8005f2a:	4801      	ldr	r0, [pc, #4]	; (8005f30 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8005f2c:	800b      	strh	r3, [r1, #0]
}
 8005f2e:	4770      	bx	lr
 8005f30:	20000140 	.word	0x20000140

08005f34 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005f34:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005f36:	4801      	ldr	r0, [pc, #4]	; (8005f3c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005f38:	800b      	strh	r3, [r1, #0]
}
 8005f3a:	4770      	bx	lr
 8005f3c:	20000154 	.word	0x20000154

08005f40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005f40:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005f42:	2500      	movs	r5, #0
 8005f44:	3a01      	subs	r2, #1
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	0052      	lsls	r2, r2, #1
 8005f4a:	1c8b      	adds	r3, r1, #2
 8005f4c:	18d2      	adds	r2, r2, r3
    if (((value >> 28)) < 0xA)
 8005f4e:	0f04      	lsrs	r4, r0, #28
 8005f50:	b2e3      	uxtb	r3, r4
 8005f52:	2c09      	cmp	r4, #9
 8005f54:	d807      	bhi.n	8005f66 <IntToUnicode+0x26>
      pbuf[2 * idx] = (value >> 28) + '0';
 8005f56:	3330      	adds	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f58:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8005f5a:	704d      	strb	r5, [r1, #1]
 8005f5c:	3102      	adds	r1, #2
    value = value << 4;
 8005f5e:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 8005f60:	428a      	cmp	r2, r1
 8005f62:	d1f4      	bne.n	8005f4e <IntToUnicode+0xe>
  }
}
 8005f64:	bd30      	pop	{r4, r5, pc}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f66:	3337      	adds	r3, #55	; 0x37
 8005f68:	e7f6      	b.n	8005f58 <IntToUnicode+0x18>
	...

08005f6c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8005f6c:	231a      	movs	r3, #26
{
 8005f6e:	b570      	push	{r4, r5, r6, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005f70:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005f72:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <USBD_FS_SerialStrDescriptor+0x34>)
 8005f74:	4c0b      	ldr	r4, [pc, #44]	; (8005fa4 <USBD_FS_SerialStrDescriptor+0x38>)
 8005f76:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005f78:	4b0b      	ldr	r3, [pc, #44]	; (8005fa8 <USBD_FS_SerialStrDescriptor+0x3c>)
  deviceserial0 += deviceserial2;
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d00b      	beq.n	8005f9a <USBD_FS_SerialStrDescriptor+0x2e>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005f82:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <USBD_FS_SerialStrDescriptor+0x40>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005f84:	1ca1      	adds	r1, r4, #2
 8005f86:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005f88:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005f8a:	f7ff ffd9 	bl	8005f40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005f8e:	0021      	movs	r1, r4
 8005f90:	2204      	movs	r2, #4
 8005f92:	3112      	adds	r1, #18
 8005f94:	0028      	movs	r0, r5
 8005f96:	f7ff ffd3 	bl	8005f40 <IntToUnicode>
}
 8005f9a:	0020      	movs	r0, r4
 8005f9c:	bd70      	pop	{r4, r5, r6, pc}
 8005f9e:	46c0      	nop			; (mov r8, r8)
 8005fa0:	1ff80050 	.word	0x1ff80050
 8005fa4:	20000158 	.word	0x20000158
 8005fa8:	1ff80058 	.word	0x1ff80058
 8005fac:	1ff80054 	.word	0x1ff80054

08005fb0 <USBD_FS_ManufacturerStrDescriptor>:
{
 8005fb0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005fb2:	4c04      	ldr	r4, [pc, #16]	; (8005fc4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8005fb4:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005fb6:	4804      	ldr	r0, [pc, #16]	; (8005fc8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005fb8:	0021      	movs	r1, r4
 8005fba:	f7ff fece 	bl	8005d5a <USBD_GetString>
}
 8005fbe:	0020      	movs	r0, r4
 8005fc0:	bd10      	pop	{r4, pc}
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	20001aa4 	.word	0x20001aa4
 8005fc8:	0800c2fe 	.word	0x0800c2fe

08005fcc <USBD_FS_ProductStrDescriptor>:
{
 8005fcc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005fce:	4c04      	ldr	r4, [pc, #16]	; (8005fe0 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8005fd0:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005fd2:	4804      	ldr	r0, [pc, #16]	; (8005fe4 <USBD_FS_ProductStrDescriptor+0x18>)
 8005fd4:	0021      	movs	r1, r4
 8005fd6:	f7ff fec0 	bl	8005d5a <USBD_GetString>
}
 8005fda:	0020      	movs	r0, r4
 8005fdc:	bd10      	pop	{r4, pc}
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	20001aa4 	.word	0x20001aa4
 8005fe4:	0800c311 	.word	0x0800c311

08005fe8 <USBD_FS_ConfigStrDescriptor>:
{
 8005fe8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005fea:	4c04      	ldr	r4, [pc, #16]	; (8005ffc <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8005fec:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005fee:	4804      	ldr	r0, [pc, #16]	; (8006000 <USBD_FS_ConfigStrDescriptor+0x18>)
 8005ff0:	0021      	movs	r1, r4
 8005ff2:	f7ff feb2 	bl	8005d5a <USBD_GetString>
}
 8005ff6:	0020      	movs	r0, r4
 8005ff8:	bd10      	pop	{r4, pc}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	20001aa4 	.word	0x20001aa4
 8006000:	0800c2e5 	.word	0x0800c2e5

08006004 <USBD_FS_InterfaceStrDescriptor>:
{
 8006004:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006006:	4c04      	ldr	r4, [pc, #16]	; (8006018 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8006008:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800600a:	4804      	ldr	r0, [pc, #16]	; (800601c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800600c:	0021      	movs	r1, r4
 800600e:	f7ff fea4 	bl	8005d5a <USBD_GetString>
}
 8006012:	0020      	movs	r0, r4
 8006014:	bd10      	pop	{r4, pc}
 8006016:	46c0      	nop			; (mov r8, r8)
 8006018:	20001aa4 	.word	0x20001aa4
 800601c:	0800c2f0 	.word	0x0800c2f0

08006020 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 8006020:	4b09      	ldr	r3, [pc, #36]	; (8006048 <HAL_PCD_MspInit+0x28>)
 8006022:	6802      	ldr	r2, [r0, #0]
{
 8006024:	b510      	push	{r4, lr}
  if(pcdHandle->Instance==USB)
 8006026:	429a      	cmp	r2, r3
 8006028:	d10d      	bne.n	8006046 <HAL_PCD_MspInit+0x26>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800602a:	2380      	movs	r3, #128	; 0x80
 800602c:	4a07      	ldr	r2, [pc, #28]	; (800604c <HAL_PCD_MspInit+0x2c>)
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	6b91      	ldr	r1, [r2, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006032:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 8006034:	430b      	orrs	r3, r1
 8006036:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006038:	2200      	movs	r2, #0
 800603a:	0011      	movs	r1, r2
 800603c:	f7fc ffdc 	bl	8002ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8006040:	201f      	movs	r0, #31
 8006042:	f7fd f803 	bl	800304c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006046:	bd10      	pop	{r4, pc}
 8006048:	40005c00 	.word	0x40005c00
 800604c:	40021000 	.word	0x40021000

08006050 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006050:	238c      	movs	r3, #140	; 0x8c
{
 8006052:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	18c1      	adds	r1, r0, r3
 8006058:	3340      	adds	r3, #64	; 0x40
 800605a:	58c0      	ldr	r0, [r0, r3]
 800605c:	f7ff fb3a 	bl	80056d4 <USBD_LL_SetupStage>
}
 8006060:	bd10      	pop	{r4, pc}

08006062 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006062:	014b      	lsls	r3, r1, #5
 8006064:	18c3      	adds	r3, r0, r3
 8006066:	33fc      	adds	r3, #252	; 0xfc
 8006068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800606a:	239c      	movs	r3, #156	; 0x9c
{
 800606c:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	58c0      	ldr	r0, [r0, r3]
 8006072:	f7ff fb61 	bl	8005738 <USBD_LL_DataOutStage>
}
 8006076:	bd10      	pop	{r4, pc}

08006078 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006078:	014b      	lsls	r3, r1, #5
 800607a:	18c3      	adds	r3, r0, r3
 800607c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800607e:	239c      	movs	r3, #156	; 0x9c
{
 8006080:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	58c0      	ldr	r0, [r0, r3]
 8006086:	f7ff fb9b 	bl	80057c0 <USBD_LL_DataInStage>
}
 800608a:	bd10      	pop	{r4, pc}

0800608c <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800608c:	239c      	movs	r3, #156	; 0x9c
{
 800608e:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	58c0      	ldr	r0, [r0, r3]
 8006094:	f7ff fc38 	bl	8005908 <USBD_LL_SOF>
}
 8006098:	bd10      	pop	{r4, pc}

0800609a <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800609a:	6883      	ldr	r3, [r0, #8]
{ 
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d001      	beq.n	80060a8 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80060a4:	f004 ffb2 	bl	800b00c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80060a8:	259c      	movs	r5, #156	; 0x9c
 80060aa:	00ad      	lsls	r5, r5, #2
 80060ac:	2101      	movs	r1, #1
 80060ae:	5960      	ldr	r0, [r4, r5]
 80060b0:	f7ff fc13 	bl	80058da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80060b4:	5960      	ldr	r0, [r4, r5]
 80060b6:	f7ff fbe6 	bl	8005886 <USBD_LL_Reset>
}
 80060ba:	bd70      	pop	{r4, r5, r6, pc}

080060bc <HAL_PCD_SuspendCallback>:
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80060bc:	239c      	movs	r3, #156	; 0x9c
{
 80060be:	b510      	push	{r4, lr}
 80060c0:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	58c0      	ldr	r0, [r0, r3]
 80060c6:	f7ff fc0b 	bl	80058e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80060ca:	69a3      	ldr	r3, [r4, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d004      	beq.n	80060da <HAL_PCD_SuspendCallback+0x1e>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80060d0:	2306      	movs	r3, #6
 80060d2:	4a02      	ldr	r2, [pc, #8]	; (80060dc <HAL_PCD_SuspendCallback+0x20>)
 80060d4:	6911      	ldr	r1, [r2, #16]
 80060d6:	430b      	orrs	r3, r1
 80060d8:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80060da:	bd10      	pop	{r4, pc}
 80060dc:	e000ed00 	.word	0xe000ed00

080060e0 <HAL_PCD_ResumeCallback>:
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80060e0:	6983      	ldr	r3, [r0, #24]
{
 80060e2:	b510      	push	{r4, lr}
 80060e4:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d006      	beq.n	80060f8 <HAL_PCD_ResumeCallback+0x18>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80060ea:	2106      	movs	r1, #6
 80060ec:	4a05      	ldr	r2, [pc, #20]	; (8006104 <HAL_PCD_ResumeCallback+0x24>)
 80060ee:	6913      	ldr	r3, [r2, #16]
 80060f0:	438b      	bics	r3, r1
 80060f2:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 80060f4:	f004 ff8e 	bl	800b014 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80060f8:	239c      	movs	r3, #156	; 0x9c
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	58e0      	ldr	r0, [r4, r3]
 80060fe:	f7ff fbfb 	bl	80058f8 <USBD_LL_Resume>
}
 8006102:	bd10      	pop	{r4, pc}
 8006104:	e000ed00 	.word	0xe000ed00

08006108 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 8006108:	239c      	movs	r3, #156	; 0x9c
{
 800610a:	b570      	push	{r4, r5, r6, lr}
 800610c:	0005      	movs	r5, r0
  hpcd_USB_FS.pData = pdev;
 800610e:	481c      	ldr	r0, [pc, #112]	; (8006180 <USBD_LL_Init+0x78>)
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	50c5      	str	r5, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 8006114:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <USBD_LL_Init+0x7c>)
  pdev->pData = &hpcd_USB_FS;
 8006116:	24a6      	movs	r4, #166	; 0xa6
  hpcd_USB_FS.Instance = USB;
 8006118:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800611a:	2308      	movs	r3, #8
 800611c:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800611e:	3b06      	subs	r3, #6
 8006120:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006122:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006124:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8006126:	00a4      	lsls	r4, r4, #2
 8006128:	5128      	str	r0, [r5, r4]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800612a:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800612c:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800612e:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006130:	f7fd f89e 	bl	8003270 <HAL_PCD_Init>
 8006134:	2800      	cmp	r0, #0
 8006136:	d001      	beq.n	800613c <USBD_LL_Init+0x34>
    Error_Handler( );
 8006138:	f004 ff68 	bl	800b00c <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800613c:	2200      	movs	r2, #0
 800613e:	5928      	ldr	r0, [r5, r4]
 8006140:	0011      	movs	r1, r2
 8006142:	2318      	movs	r3, #24
 8006144:	f7fd fc55 	bl	80039f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006148:	5928      	ldr	r0, [r5, r4]
 800614a:	2358      	movs	r3, #88	; 0x58
 800614c:	2200      	movs	r2, #0
 800614e:	2180      	movs	r1, #128	; 0x80
 8006150:	f7fd fc4f 	bl	80039f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006154:	5928      	ldr	r0, [r5, r4]
 8006156:	23c0      	movs	r3, #192	; 0xc0
 8006158:	2200      	movs	r2, #0
 800615a:	2181      	movs	r1, #129	; 0x81
 800615c:	f7fd fc49 	bl	80039f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006160:	2388      	movs	r3, #136	; 0x88
 8006162:	5928      	ldr	r0, [r5, r4]
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	2200      	movs	r2, #0
 8006168:	2101      	movs	r1, #1
 800616a:	f7fd fc42 	bl	80039f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800616e:	2380      	movs	r3, #128	; 0x80
 8006170:	5928      	ldr	r0, [r5, r4]
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	2200      	movs	r2, #0
 8006176:	2182      	movs	r1, #130	; 0x82
 8006178:	f7fd fc3b 	bl	80039f2 <HAL_PCDEx_PMAConfig>
}
 800617c:	2000      	movs	r0, #0
 800617e:	bd70      	pop	{r4, r5, r6, pc}
 8006180:	20001ca4 	.word	0x20001ca4
 8006184:	40005c00 	.word	0x40005c00

08006188 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8006188:	23a6      	movs	r3, #166	; 0xa6
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	58c0      	ldr	r0, [r0, r3]
{
 800618e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006190:	f7fd f8da 	bl	8003348 <HAL_PCD_Start>
 8006194:	2302      	movs	r3, #2
 8006196:	2803      	cmp	r0, #3
 8006198:	d801      	bhi.n	800619e <USBD_LL_Start+0x16>
 800619a:	4b02      	ldr	r3, [pc, #8]	; (80061a4 <USBD_LL_Start+0x1c>)
 800619c:	5c1b      	ldrb	r3, [r3, r0]
}
 800619e:	0018      	movs	r0, r3
 80061a0:	bd10      	pop	{r4, pc}
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	0800c327 	.word	0x0800c327

080061a8 <USBD_LL_OpenEP>:
{
 80061a8:	b510      	push	{r4, lr}
 80061aa:	0014      	movs	r4, r2
 80061ac:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80061ae:	0023      	movs	r3, r4
 80061b0:	24a6      	movs	r4, #166	; 0xa6
 80061b2:	00a4      	lsls	r4, r4, #2
 80061b4:	5900      	ldr	r0, [r0, r4]
 80061b6:	f7fd f8ec 	bl	8003392 <HAL_PCD_EP_Open>
 80061ba:	2302      	movs	r3, #2
 80061bc:	2803      	cmp	r0, #3
 80061be:	d801      	bhi.n	80061c4 <USBD_LL_OpenEP+0x1c>
 80061c0:	4b01      	ldr	r3, [pc, #4]	; (80061c8 <USBD_LL_OpenEP+0x20>)
 80061c2:	5c1b      	ldrb	r3, [r3, r0]
}
 80061c4:	0018      	movs	r0, r3
 80061c6:	bd10      	pop	{r4, pc}
 80061c8:	0800c327 	.word	0x0800c327

080061cc <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80061cc:	23a6      	movs	r3, #166	; 0xa6
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	58c0      	ldr	r0, [r0, r3]
{
 80061d2:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80061d4:	f7fd f90d 	bl	80033f2 <HAL_PCD_EP_Close>
 80061d8:	2302      	movs	r3, #2
 80061da:	2803      	cmp	r0, #3
 80061dc:	d801      	bhi.n	80061e2 <USBD_LL_CloseEP+0x16>
 80061de:	4b02      	ldr	r3, [pc, #8]	; (80061e8 <USBD_LL_CloseEP+0x1c>)
 80061e0:	5c1b      	ldrb	r3, [r3, r0]
}
 80061e2:	0018      	movs	r0, r3
 80061e4:	bd10      	pop	{r4, pc}
 80061e6:	46c0      	nop			; (mov r8, r8)
 80061e8:	0800c327 	.word	0x0800c327

080061ec <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80061ec:	23a6      	movs	r3, #166	; 0xa6
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	58c0      	ldr	r0, [r0, r3]
{
 80061f2:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80061f4:	f7fd fb9c 	bl	8003930 <HAL_PCD_EP_SetStall>
 80061f8:	2302      	movs	r3, #2
 80061fa:	2803      	cmp	r0, #3
 80061fc:	d801      	bhi.n	8006202 <USBD_LL_StallEP+0x16>
 80061fe:	4b02      	ldr	r3, [pc, #8]	; (8006208 <USBD_LL_StallEP+0x1c>)
 8006200:	5c1b      	ldrb	r3, [r3, r0]
}
 8006202:	0018      	movs	r0, r3
 8006204:	bd10      	pop	{r4, pc}
 8006206:	46c0      	nop			; (mov r8, r8)
 8006208:	0800c327 	.word	0x0800c327

0800620c <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800620c:	23a6      	movs	r3, #166	; 0xa6
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	58c0      	ldr	r0, [r0, r3]
{
 8006212:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006214:	f7fd fbc1 	bl	800399a <HAL_PCD_EP_ClrStall>
 8006218:	2302      	movs	r3, #2
 800621a:	2803      	cmp	r0, #3
 800621c:	d801      	bhi.n	8006222 <USBD_LL_ClearStallEP+0x16>
 800621e:	4b02      	ldr	r3, [pc, #8]	; (8006228 <USBD_LL_ClearStallEP+0x1c>)
 8006220:	5c1b      	ldrb	r3, [r3, r0]
}
 8006222:	0018      	movs	r0, r3
 8006224:	bd10      	pop	{r4, pc}
 8006226:	46c0      	nop			; (mov r8, r8)
 8006228:	0800c327 	.word	0x0800c327

0800622c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800622c:	23a6      	movs	r3, #166	; 0xa6
  if((ep_addr & 0x80) == 0x80)
 800622e:	b24a      	sxtb	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8006234:	2a00      	cmp	r2, #0
 8006236:	da06      	bge.n	8006246 <USBD_LL_IsStallEP+0x1a>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006238:	227f      	movs	r2, #127	; 0x7f
 800623a:	4011      	ands	r1, r2
 800623c:	0149      	lsls	r1, r1, #5
 800623e:	185b      	adds	r3, r3, r1
 8006240:	332a      	adds	r3, #42	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006242:	7818      	ldrb	r0, [r3, #0]
}
 8006244:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006246:	0149      	lsls	r1, r1, #5
 8006248:	185b      	adds	r3, r3, r1
 800624a:	332b      	adds	r3, #43	; 0x2b
 800624c:	33ff      	adds	r3, #255	; 0xff
 800624e:	e7f8      	b.n	8006242 <USBD_LL_IsStallEP+0x16>

08006250 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006250:	23a6      	movs	r3, #166	; 0xa6
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	58c0      	ldr	r0, [r0, r3]
{
 8006256:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006258:	f7fd f889 	bl	800336e <HAL_PCD_SetAddress>
 800625c:	2302      	movs	r3, #2
 800625e:	2803      	cmp	r0, #3
 8006260:	d801      	bhi.n	8006266 <USBD_LL_SetUSBAddress+0x16>
 8006262:	4b02      	ldr	r3, [pc, #8]	; (800626c <USBD_LL_SetUSBAddress+0x1c>)
 8006264:	5c1b      	ldrb	r3, [r3, r0]
}
 8006266:	0018      	movs	r0, r3
 8006268:	bd10      	pop	{r4, pc}
 800626a:	46c0      	nop			; (mov r8, r8)
 800626c:	0800c327 	.word	0x0800c327

08006270 <USBD_LL_Transmit>:
{
 8006270:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006272:	24a6      	movs	r4, #166	; 0xa6
 8006274:	00a4      	lsls	r4, r4, #2
 8006276:	5900      	ldr	r0, [r0, r4]
 8006278:	f7fd f901 	bl	800347e <HAL_PCD_EP_Transmit>
 800627c:	2302      	movs	r3, #2
 800627e:	2803      	cmp	r0, #3
 8006280:	d801      	bhi.n	8006286 <USBD_LL_Transmit+0x16>
 8006282:	4b02      	ldr	r3, [pc, #8]	; (800628c <USBD_LL_Transmit+0x1c>)
 8006284:	5c1b      	ldrb	r3, [r3, r0]
}
 8006286:	0018      	movs	r0, r3
 8006288:	bd10      	pop	{r4, pc}
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	0800c327 	.word	0x0800c327

08006290 <USBD_LL_PrepareReceive>:
{
 8006290:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006292:	24a6      	movs	r4, #166	; 0xa6
 8006294:	00a4      	lsls	r4, r4, #2
 8006296:	5900      	ldr	r0, [r0, r4]
 8006298:	f7fd f8cf 	bl	800343a <HAL_PCD_EP_Receive>
 800629c:	2302      	movs	r3, #2
 800629e:	2803      	cmp	r0, #3
 80062a0:	d801      	bhi.n	80062a6 <USBD_LL_PrepareReceive+0x16>
 80062a2:	4b02      	ldr	r3, [pc, #8]	; (80062ac <USBD_LL_PrepareReceive+0x1c>)
 80062a4:	5c1b      	ldrb	r3, [r3, r0]
}
 80062a6:	0018      	movs	r0, r3
 80062a8:	bd10      	pop	{r4, pc}
 80062aa:	46c0      	nop			; (mov r8, r8)
 80062ac:	0800c327 	.word	0x0800c327

080062b0 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80062b0:	23a6      	movs	r3, #166	; 0xa6
{
 80062b2:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	58c0      	ldr	r0, [r0, r3]
 80062b8:	f7fd f8da 	bl	8003470 <HAL_PCD_EP_GetRxCount>
}
 80062bc:	bd10      	pop	{r4, pc}
	...

080062c0 <USBD_static_malloc>:
}
 80062c0:	4800      	ldr	r0, [pc, #0]	; (80062c4 <USBD_static_malloc+0x4>)
 80062c2:	4770      	bx	lr
 80062c4:	20000478 	.word	0x20000478

080062c8 <USBD_static_free>:
}
 80062c8:	4770      	bx	lr
	...

080062cc <App_State_NotificationWait>:

/*===========================================================================================*/

qSM_Status_t App_State_NotificationWait(qSM_Handler_t fsm){
	qEvent_t e = fsm->Data;
	if(fsm->Signal ==  QSM_SIGNAL_ENTRY){
 80062cc:	6903      	ldr	r3, [r0, #16]
qSM_Status_t App_State_NotificationWait(qSM_Handler_t fsm){
 80062ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062d0:	0004      	movs	r4, r0
	qEvent_t e = fsm->Data;
 80062d2:	68c5      	ldr	r5, [r0, #12]
	if(fsm->Signal ==  QSM_SIGNAL_ENTRY){
 80062d4:	3302      	adds	r3, #2
 80062d6:	d107      	bne.n	80062e8 <App_State_NotificationWait+0x1c>
		qDebug_Message("App_State_NotificationWait");
 80062d8:	2100      	movs	r1, #0
 80062da:	4808      	ldr	r0, [pc, #32]	; (80062fc <App_State_NotificationWait+0x30>)
 80062dc:	9101      	str	r1, [sp, #4]
 80062de:	9100      	str	r1, [sp, #0]
 80062e0:	4b07      	ldr	r3, [pc, #28]	; (8006300 <App_State_NotificationWait+0x34>)
 80062e2:	0002      	movs	r2, r0
 80062e4:	f002 fb40 	bl	8008968 <_qtrace_func>
	}

	if(e->Trigger == byNotificationSimple && 	( (int)e->EventData == OPERATION_SLEEP) ){ /*check task end*/
 80062e8:	7a2b      	ldrb	r3, [r5, #8]
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d104      	bne.n	80062f8 <App_State_NotificationWait+0x2c>
 80062ee:	686b      	ldr	r3, [r5, #4]
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d101      	bne.n	80062f8 <App_State_NotificationWait+0x2c>
		fsm->NextState = App_State_Sleep;
 80062f4:	4b03      	ldr	r3, [pc, #12]	; (8006304 <App_State_NotificationWait+0x38>)
 80062f6:	6023      	str	r3, [r4, #0]
		return qSM_EXIT_SUCCESS;
	}
	return qSM_EXIT_SUCCESS;
}
 80062f8:	4803      	ldr	r0, [pc, #12]	; (8006308 <App_State_NotificationWait+0x3c>)
 80062fa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80062fc:	0800d709 	.word	0x0800d709
 8006300:	0800c387 	.word	0x0800c387
 8006304:	080063cd 	.word	0x080063cd
 8006308:	ffff8001 	.word	0xffff8001

0800630c <App_State_Mode>:
	if(fsm->Signal ==  QSM_SIGNAL_ENTRY){
 800630c:	6903      	ldr	r3, [r0, #16]
qSM_Status_t App_State_Mode(qSM_Handler_t fsm){
 800630e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006310:	0004      	movs	r4, r0
	if(fsm->Signal ==  QSM_SIGNAL_ENTRY){
 8006312:	3302      	adds	r3, #2
 8006314:	d107      	bne.n	8006326 <App_State_Mode+0x1a>
		qDebug_Message("App_State_Mode");
 8006316:	2100      	movs	r1, #0
 8006318:	480d      	ldr	r0, [pc, #52]	; (8006350 <App_State_Mode+0x44>)
 800631a:	9101      	str	r1, [sp, #4]
 800631c:	9100      	str	r1, [sp, #0]
 800631e:	4b0d      	ldr	r3, [pc, #52]	; (8006354 <App_State_Mode+0x48>)
 8006320:	0002      	movs	r2, r0
 8006322:	f002 fb21 	bl	8008968 <_qtrace_func>
	if(WakeUp_Source.Source == WKUP_PIN){
 8006326:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <App_State_Mode+0x4c>)
 8006328:	781d      	ldrb	r5, [r3, #0]
		fsm->NextState =App_State_PushButtonWait;
 800632a:	4b0c      	ldr	r3, [pc, #48]	; (800635c <App_State_Mode+0x50>)
	if(WakeUp_Source.Source == WKUP_PIN){
 800632c:	2d07      	cmp	r5, #7
 800632e:	d00c      	beq.n	800634a <App_State_Mode+0x3e>
		fsm->NextState = App_State_Sleep;
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <App_State_Mode+0x54>)
	}else if(WakeUp_Source.Source == WKUP_TIME){
 8006332:	2d08      	cmp	r5, #8
 8006334:	d109      	bne.n	800634a <App_State_Mode+0x3e>
		qTask_Set_State(&TaskHandlerEvents_Scan, qEnabled);
 8006336:	4e0b      	ldr	r6, [pc, #44]	; (8006364 <App_State_Mode+0x58>)
 8006338:	2101      	movs	r1, #1
 800633a:	0030      	movs	r0, r6
 800633c:	f002 fac9 	bl	80088d2 <qTask_Set_State>
		qTask_Set_Data(&TaskHandlerEvents_Scan,(void*)WKUP_TIME);
 8006340:	0029      	movs	r1, r5
 8006342:	0030      	movs	r0, r6
 8006344:	f002 fa97 	bl	8008876 <qTask_Set_Data>
		fsm->NextState = App_State_NotificationWait;
 8006348:	4b07      	ldr	r3, [pc, #28]	; (8006368 <App_State_Mode+0x5c>)
}
 800634a:	4808      	ldr	r0, [pc, #32]	; (800636c <App_State_Mode+0x60>)
		fsm->NextState = App_State_Sleep;
 800634c:	6023      	str	r3, [r4, #0]
}
 800634e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8006350:	0800d709 	.word	0x0800d709
 8006354:	0800c378 	.word	0x0800c378
 8006358:	20001f30 	.word	0x20001f30
 800635c:	08006371 	.word	0x08006371
 8006360:	080063cd 	.word	0x080063cd
 8006364:	20001f34 	.word	0x20001f34
 8006368:	080062cd 	.word	0x080062cd
 800636c:	ffff8001 	.word	0xffff8001

08006370 <App_State_PushButtonWait>:
/*===========================================================================================*/

qSM_Status_t App_State_PushButtonWait(qSM_Handler_t fsm){
	//char *array[] = {"ZEROPRESS","ONEPRESS","TWOPRESS", "THREEPRESS", "FOURPRESS"}; //qDebug_Message(array[Nclick]);

	if(fsm->Signal ==  QSM_SIGNAL_ENTRY){
 8006370:	6903      	ldr	r3, [r0, #16]
qSM_Status_t App_State_PushButtonWait(qSM_Handler_t fsm){
 8006372:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006374:	0004      	movs	r4, r0
	if(fsm->Signal ==  QSM_SIGNAL_ENTRY){
 8006376:	3302      	adds	r3, #2
 8006378:	d107      	bne.n	800638a <App_State_PushButtonWait+0x1a>
		qDebug_Message("App_State_PushButtonWait");
 800637a:	2100      	movs	r1, #0
 800637c:	480d      	ldr	r0, [pc, #52]	; (80063b4 <App_State_PushButtonWait+0x44>)
 800637e:	9101      	str	r1, [sp, #4]
 8006380:	9100      	str	r1, [sp, #0]
 8006382:	4b0d      	ldr	r3, [pc, #52]	; (80063b8 <App_State_PushButtonWait+0x48>)
 8006384:	0002      	movs	r2, r0
 8006386:	f002 faef 	bl	8008968 <_qtrace_func>
	}

	Nclick =BSP_GPIO_DEBOUNCE_GET_CLICK();
 800638a:	f004 fbcb 	bl	800ab24 <WSQ_GPIO_DebounceGetClicks>

	/*iButton Click only*/
	if(AppData_Config.NumPulsation != 0){
 800638e:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <App_State_PushButtonWait+0x4c>)
 8006390:	337c      	adds	r3, #124	; 0x7c
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10a      	bne.n	80063ae <App_State_PushButtonWait+0x3e>

	}else{
		/*wifi-gps-sensor*/
		qTask_Set_State(&TaskHandlerEvents_Scan, qEnabled);			/*launch check task*/
 8006398:	4d09      	ldr	r5, [pc, #36]	; (80063c0 <App_State_PushButtonWait+0x50>)
 800639a:	2101      	movs	r1, #1
 800639c:	0028      	movs	r0, r5
 800639e:	f002 fa98 	bl	80088d2 <qTask_Set_State>
		qTask_Set_Data(&TaskHandlerEvents_Scan, (void*)WKUP_PIN);
 80063a2:	2107      	movs	r1, #7
 80063a4:	0028      	movs	r0, r5
 80063a6:	f002 fa66 	bl	8008876 <qTask_Set_Data>
		fsm->NextState = App_State_NotificationWait;
 80063aa:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <App_State_PushButtonWait+0x54>)
 80063ac:	6023      	str	r3, [r4, #0]
		return qSM_EXIT_SUCCESS;
	}

	return qSM_EXIT_SUCCESS;
}
 80063ae:	4806      	ldr	r0, [pc, #24]	; (80063c8 <App_State_PushButtonWait+0x58>)
 80063b0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	0800d709 	.word	0x0800d709
 80063b8:	0800c3a2 	.word	0x0800c3a2
 80063bc:	20000184 	.word	0x20000184
 80063c0:	20001f34 	.word	0x20001f34
 80063c4:	080062cd 	.word	0x080062cd
 80063c8:	ffff8001 	.word	0xffff8001

080063cc <App_State_Sleep>:

/*===========================================================================================*/

qSM_Status_t App_State_Sleep(qSM_Handler_t fsm){
	WSSFM1XRX_Return_t RetSigfox;
	if(fsm->Signal ==  QSM_SIGNAL_ENTRY){
 80063cc:	6903      	ldr	r3, [r0, #16]
qSM_Status_t App_State_Sleep(qSM_Handler_t fsm){
 80063ce:	b513      	push	{r0, r1, r4, lr}
	if(fsm->Signal ==  QSM_SIGNAL_ENTRY){
 80063d0:	3302      	adds	r3, #2
 80063d2:	d109      	bne.n	80063e8 <App_State_Sleep+0x1c>
		qDebug_Message("App_State_Sleep");
 80063d4:	2100      	movs	r1, #0
 80063d6:	4818      	ldr	r0, [pc, #96]	; (8006438 <App_State_Sleep+0x6c>)
 80063d8:	9101      	str	r1, [sp, #4]
 80063da:	9100      	str	r1, [sp, #0]
 80063dc:	4b17      	ldr	r3, [pc, #92]	; (800643c <App_State_Sleep+0x70>)
 80063de:	0002      	movs	r2, r0
 80063e0:	f002 fac2 	bl	8008968 <_qtrace_func>
		Service_Sigfox_WakeUp();
 80063e4:	f004 f99c 	bl	800a720 <Service_Sigfox_WakeUp>
  * @rmtoll CR   CWUF       LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 80063e8:	2304      	movs	r3, #4
 80063ea:	4a15      	ldr	r2, [pc, #84]	; (8006440 <App_State_Sleep+0x74>)
	BSP_SYSTEM_CLEAR_FLAG_WU();
	BSP_SYSTEM_CLEAR_FLAG_WUT();


	//BSP_FUEL_GAUGE_SLEEP();
	BSP_GPIO_DISABLE_ANALOG();
 80063ec:	2000      	movs	r0, #0
 80063ee:	6811      	ldr	r1, [r2, #0]
 80063f0:	430b      	orrs	r3, r1
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_WUTF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 80063f2:	4914      	ldr	r1, [pc, #80]	; (8006444 <App_State_Sleep+0x78>)
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	68ca      	ldr	r2, [r1, #12]
 80063f8:	4b13      	ldr	r3, [pc, #76]	; (8006448 <App_State_Sleep+0x7c>)
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60cb      	str	r3, [r1, #12]
 8006400:	f004 fba7 	bl	800ab52 <WSQ_GPIO_EnableAnalog>
	BSP_GPIO_DISABLE_SENSORS();
 8006404:	2000      	movs	r0, #0
 8006406:	f004 fbad 	bl	800ab64 <WSQ_GPIO_EnableSensors>


	if( ( (RetSigfox = Service_Sigfox_Sleep()) == WSSFM1XRX_OK_RESPONSE ) || (WSSFM1XRX_MAX_RETRIES_REACHED == RetSigfox  ) ){
 800640a:	f004 f997 	bl	800a73c <Service_Sigfox_Sleep>
 800640e:	23f7      	movs	r3, #247	; 0xf7
 8006410:	4018      	ands	r0, r3
 8006412:	2803      	cmp	r0, #3
 8006414:	d10d      	bne.n	8006432 <App_State_Sleep+0x66>
		qDebug_Message("-----Core Sleep-----");
 8006416:	2400      	movs	r4, #0
 8006418:	4807      	ldr	r0, [pc, #28]	; (8006438 <App_State_Sleep+0x6c>)
 800641a:	4b0c      	ldr	r3, [pc, #48]	; (800644c <App_State_Sleep+0x80>)
 800641c:	0002      	movs	r2, r0
 800641e:	0021      	movs	r1, r4
 8006420:	9401      	str	r4, [sp, #4]
 8006422:	9400      	str	r4, [sp, #0]
 8006424:	f002 faa0 	bl	8008968 <_qtrace_func>
		//BSP_FUEL_GAUGE_SLEEP();
		BSP_GPIO_DISPLAY_COLOR_RGB(COLOR_RGB_BLACK);
 8006428:	0020      	movs	r0, r4
 800642a:	f004 fba5 	bl	800ab78 <WSQ_GPIO_DisplayColorRGB>
		BSP_SYSTEM_CORE_SLEEP();
 800642e:	f004 fdaf 	bl	800af90 <WSQ_SYSTEM_StandbyCore>
	}
	/*sleep sigfox, gps ,sensor and anythings*/
	return qSM_EXIT_SUCCESS;
}
 8006432:	4807      	ldr	r0, [pc, #28]	; (8006450 <App_State_Sleep+0x84>)
 8006434:	bd16      	pop	{r1, r2, r4, pc}
 8006436:	46c0      	nop			; (mov r8, r8)
 8006438:	0800d709 	.word	0x0800d709
 800643c:	0800c3bb 	.word	0x0800c3bb
 8006440:	40007000 	.word	0x40007000
 8006444:	40002800 	.word	0x40002800
 8006448:	fffffb7f 	.word	0xfffffb7f
 800644c:	0800c3cb 	.word	0x0800c3cb
 8006450:	ffff8001 	.word	0xffff8001

08006454 <App_State_ConfigMode>:
	if(fsm->Signal ==  QSM_SIGNAL_ENTRY){
 8006454:	6903      	ldr	r3, [r0, #16]
qSM_Status_t App_State_ConfigMode(qSM_Handler_t fsm){
 8006456:	b507      	push	{r0, r1, r2, lr}
	if(fsm->Signal ==  QSM_SIGNAL_ENTRY){
 8006458:	3302      	adds	r3, #2
 800645a:	d107      	bne.n	800646c <App_State_ConfigMode+0x18>
		qDebug_Message("App_State_ConfigMode");
 800645c:	2100      	movs	r1, #0
 800645e:	481c      	ldr	r0, [pc, #112]	; (80064d0 <App_State_ConfigMode+0x7c>)
 8006460:	9101      	str	r1, [sp, #4]
 8006462:	9100      	str	r1, [sp, #0]
 8006464:	4b1b      	ldr	r3, [pc, #108]	; (80064d4 <App_State_ConfigMode+0x80>)
 8006466:	0002      	movs	r2, r0
 8006468:	f002 fa7e 	bl	8008968 <_qtrace_func>
	if(BSP_USB_STATE_CONFIGURED()){
 800646c:	239d      	movs	r3, #157	; 0x9d
 800646e:	4a1a      	ldr	r2, [pc, #104]	; (80064d8 <App_State_ConfigMode+0x84>)
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	5cd3      	ldrb	r3, [r2, r3]
 8006474:	2b03      	cmp	r3, #3
 8006476:	d128      	bne.n	80064ca <App_State_ConfigMode+0x76>
		if( qTask_EventFlags_Check(qTask_Self(), QEVENTFLAG_01, 0, 0) ){
 8006478:	f002 fa01 	bl	800887e <qTask_Self>
 800647c:	2300      	movs	r3, #0
 800647e:	2180      	movs	r1, #128	; 0x80
 8006480:	001a      	movs	r2, r3
 8006482:	0149      	lsls	r1, r1, #5
 8006484:	f002 f9ff 	bl	8008886 <qTask_EventFlags_Check>
 8006488:	1e03      	subs	r3, r0, #0
 800648a:	4814      	ldr	r0, [pc, #80]	; (80064dc <App_State_ConfigMode+0x88>)
 800648c:	d010      	beq.n	80064b0 <App_State_ConfigMode+0x5c>
static void BlinkColor(Colores_t color , float time){
	static qSTimer_t TimeoutClick = QSTIMER_INITIALIZER;
	static uint8_t toggle = 0;

	if (time != 0){
		if (qSTimer_FreeRun(&TimeoutClick, time )){
 800648e:	4914      	ldr	r1, [pc, #80]	; (80064e0 <App_State_ConfigMode+0x8c>)
 8006490:	f002 f9ca 	bl	8008828 <qSTimer_FreeRun>
 8006494:	2800      	cmp	r0, #0
 8006496:	d009      	beq.n	80064ac <App_State_ConfigMode+0x58>
			toggle = !toggle;
 8006498:	4a12      	ldr	r2, [pc, #72]	; (80064e4 <App_State_ConfigMode+0x90>)
 800649a:	7813      	ldrb	r3, [r2, #0]
 800649c:	4259      	negs	r1, r3
 800649e:	4159      	adcs	r1, r3
			BSP_GPIO_DISPLAY_COLOR_RGB( toggle == 1 ? color : COLOR_RGB_BLACK );
 80064a0:	2006      	movs	r0, #6
 80064a2:	424b      	negs	r3, r1
			toggle = !toggle;
 80064a4:	7011      	strb	r1, [r2, #0]
			BSP_GPIO_DISPLAY_COLOR_RGB( toggle == 1 ? color : COLOR_RGB_BLACK );
 80064a6:	4018      	ands	r0, r3
 80064a8:	f004 fb66 	bl	800ab78 <WSQ_GPIO_DisplayColorRGB>
}
 80064ac:	480e      	ldr	r0, [pc, #56]	; (80064e8 <App_State_ConfigMode+0x94>)
 80064ae:	bd0e      	pop	{r1, r2, r3, pc}
		if (qSTimer_FreeRun(&TimeoutClick, time )){
 80064b0:	21fc      	movs	r1, #252	; 0xfc
 80064b2:	0589      	lsls	r1, r1, #22
 80064b4:	f002 f9b8 	bl	8008828 <qSTimer_FreeRun>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d0f7      	beq.n	80064ac <App_State_ConfigMode+0x58>
			toggle = !toggle;
 80064bc:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <App_State_ConfigMode+0x90>)
 80064be:	7818      	ldrb	r0, [r3, #0]
 80064c0:	4242      	negs	r2, r0
 80064c2:	4150      	adcs	r0, r2
 80064c4:	b2c0      	uxtb	r0, r0
 80064c6:	7018      	strb	r0, [r3, #0]
 80064c8:	e7ee      	b.n	80064a8 <App_State_ConfigMode+0x54>
		BSP_SYSTEM_RESET_SFT(); /*update data*/
 80064ca:	f004 fd89 	bl	800afe0 <WSQ_SYSTEM_ResetSFT>
 80064ce:	e7ed      	b.n	80064ac <App_State_ConfigMode+0x58>
 80064d0:	0800d709 	.word	0x0800d709
 80064d4:	0800c363 	.word	0x0800c363
 80064d8:	20001034 	.word	0x20001034
 80064dc:	20000698 	.word	0x20000698
 80064e0:	3dcccccd 	.word	0x3dcccccd
 80064e4:	200006a8 	.word	0x200006a8
 80064e8:	ffff8001 	.word	0xffff8001

080064ec <App_State_CheckConditions>:
	if(fsm->Signal ==  QSM_SIGNAL_ENTRY){
 80064ec:	6903      	ldr	r3, [r0, #16]
qSM_Status_t App_State_CheckConditions(qSM_Handler_t fsm){
 80064ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064f0:	0005      	movs	r5, r0
	if(fsm->Signal ==  QSM_SIGNAL_ENTRY){
 80064f2:	3302      	adds	r3, #2
 80064f4:	d111      	bne.n	800651a <App_State_CheckConditions+0x2e>
		qSTimer_Set(&TimeoutUsb, 1.0);  /*wait config usb*/
 80064f6:	21fe      	movs	r1, #254	; 0xfe
 80064f8:	482e      	ldr	r0, [pc, #184]	; (80065b4 <App_State_CheckConditions+0xc8>)
 80064fa:	0589      	lsls	r1, r1, #22
 80064fc:	f002 f96a 	bl	80087d4 <qSTimer_Set>
		qDebug_Message("App_State_CheckConditions");
 8006500:	2100      	movs	r1, #0
 8006502:	482d      	ldr	r0, [pc, #180]	; (80065b8 <App_State_CheckConditions+0xcc>)
 8006504:	4b2d      	ldr	r3, [pc, #180]	; (80065bc <App_State_CheckConditions+0xd0>)
 8006506:	0002      	movs	r2, r0
 8006508:	9101      	str	r1, [sp, #4]
 800650a:	9100      	str	r1, [sp, #0]
 800650c:	f002 fa2c 	bl	8008968 <_qtrace_func>
		BSP_GPIO_DISPLAY_COLOR_RGB( AppData_Config.Pulsation_1.rgb);
 8006510:	4b2b      	ldr	r3, [pc, #172]	; (80065c0 <App_State_CheckConditions+0xd4>)
 8006512:	3378      	adds	r3, #120	; 0x78
 8006514:	7818      	ldrb	r0, [r3, #0]
 8006516:	f004 fb2f 	bl	800ab78 <WSQ_GPIO_DisplayColorRGB>
	qCR_Begin{
 800651a:	4c2a      	ldr	r4, [pc, #168]	; (80065c4 <App_State_CheckConditions+0xd8>)
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	d003      	beq.n	800652a <App_State_CheckConditions+0x3e>
 8006522:	2b29      	cmp	r3, #41	; 0x29
 8006524:	d015      	beq.n	8006552 <App_State_CheckConditions+0x66>
}
 8006526:	4828      	ldr	r0, [pc, #160]	; (80065c8 <App_State_CheckConditions+0xdc>)
 8006528:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		if(qSTimer_Expired(&TimeoutUsb)){
 800652a:	4822      	ldr	r0, [pc, #136]	; (80065b4 <App_State_CheckConditions+0xc8>)
 800652c:	f002 f96f 	bl	800880e <qSTimer_Expired>
 8006530:	2800      	cmp	r0, #0
 8006532:	d03a      	beq.n	80065aa <App_State_CheckConditions+0xbe>
			if(strlen(AppData_Config.Id_module) < 8 || strlen(AppData_Config.Pac_module) < 16){
 8006534:	4825      	ldr	r0, [pc, #148]	; (80065cc <App_State_CheckConditions+0xe0>)
 8006536:	f7f9 fde7 	bl	8000108 <strlen>
 800653a:	2807      	cmp	r0, #7
 800653c:	d904      	bls.n	8006548 <App_State_CheckConditions+0x5c>
 800653e:	4824      	ldr	r0, [pc, #144]	; (80065d0 <App_State_CheckConditions+0xe4>)
 8006540:	f7f9 fde2 	bl	8000108 <strlen>
 8006544:	280f      	cmp	r0, #15
 8006546:	d825      	bhi.n	8006594 <App_State_CheckConditions+0xa8>
				Service_Sigfox_Run(1);
 8006548:	2001      	movs	r0, #1
 800654a:	f003 fecf 	bl	800a2ec <Service_Sigfox_Run>
				qCR_WaitUntil(Service_Sigfox_GetStatus() == WSSFM1XRX_STATUS_MODULE_INITIALIZED);
 800654e:	2329      	movs	r3, #41	; 0x29
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	f003 ff39 	bl	800a3c8 <Service_Sigfox_GetStatus>
 8006556:	0006      	movs	r6, r0
 8006558:	2809      	cmp	r0, #9
 800655a:	d1e4      	bne.n	8006526 <App_State_CheckConditions+0x3a>
				strncpy(AppData_Config.Pac_module , Service_Sigfox_GetPAC() , 17) ;
 800655c:	f003 ff46 	bl	800a3ec <Service_Sigfox_GetPAC>
 8006560:	2211      	movs	r2, #17
 8006562:	0001      	movs	r1, r0
 8006564:	481a      	ldr	r0, [pc, #104]	; (80065d0 <App_State_CheckConditions+0xe4>)
 8006566:	f005 f940 	bl	800b7ea <strncpy>
				strncpy(AppData_Config.Id_module , Service_Sigfox_GetID() , 9) ;
 800656a:	f003 ff33 	bl	800a3d4 <Service_Sigfox_GetID>
 800656e:	0032      	movs	r2, r6
 8006570:	0001      	movs	r1, r0
 8006572:	4816      	ldr	r0, [pc, #88]	; (80065cc <App_State_CheckConditions+0xe0>)
 8006574:	f005 f939 	bl	800b7ea <strncpy>
				BSP_FLASH_WRITE(BSP_FLASH_INIT_ADDR_RESERVED_DATA_CONF, &AppData_Config,sizeof(AppData_Config));
 8006578:	22a4      	movs	r2, #164	; 0xa4
 800657a:	4911      	ldr	r1, [pc, #68]	; (80065c0 <App_State_CheckConditions+0xd4>)
 800657c:	4815      	ldr	r0, [pc, #84]	; (80065d4 <App_State_CheckConditions+0xe8>)
 800657e:	f004 f9cc 	bl	800a91a <WSQ_Flash_Write>
				qTrace();
 8006582:	2300      	movs	r3, #0
 8006584:	4a0c      	ldr	r2, [pc, #48]	; (80065b8 <App_State_CheckConditions+0xcc>)
 8006586:	9301      	str	r3, [sp, #4]
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	4913      	ldr	r1, [pc, #76]	; (80065d8 <App_State_CheckConditions+0xec>)
 800658c:	0013      	movs	r3, r2
 800658e:	4813      	ldr	r0, [pc, #76]	; (80065dc <App_State_CheckConditions+0xf0>)
 8006590:	f002 f9ea 	bl	8008968 <_qtrace_func>
			if(BSP_USB_STATE_CONFIGURED()){
 8006594:	239d      	movs	r3, #157	; 0x9d
 8006596:	4a12      	ldr	r2, [pc, #72]	; (80065e0 <App_State_CheckConditions+0xf4>)
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	5cd3      	ldrb	r3, [r2, r3]
 800659c:	2b03      	cmp	r3, #3
 800659e:	d102      	bne.n	80065a6 <App_State_CheckConditions+0xba>
				fsm->NextState = App_State_ConfigMode;
 80065a0:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <App_State_CheckConditions+0xf8>)
 80065a2:	602b      	str	r3, [r5, #0]
				return qSM_EXIT_SUCCESS;
 80065a4:	e7bf      	b.n	8006526 <App_State_CheckConditions+0x3a>
				fsm->NextState = App_State_Mode;
 80065a6:	4b10      	ldr	r3, [pc, #64]	; (80065e8 <App_State_CheckConditions+0xfc>)
 80065a8:	602b      	str	r3, [r5, #0]
	}qCR_End;
 80065aa:	2301      	movs	r3, #1
 80065ac:	425b      	negs	r3, r3
 80065ae:	6023      	str	r3, [r4, #0]
 80065b0:	e7b9      	b.n	8006526 <App_State_CheckConditions+0x3a>
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	200006a0 	.word	0x200006a0
 80065b8:	0800d709 	.word	0x0800d709
 80065bc:	0800c32b 	.word	0x0800c32b
 80065c0:	20000184 	.word	0x20000184
 80065c4:	20000174 	.word	0x20000174
 80065c8:	ffff8001 	.word	0xffff8001
 80065cc:	20000202 	.word	0x20000202
 80065d0:	2000020e 	.word	0x2000020e
 80065d4:	08080000 	.word	0x08080000
 80065d8:	0800c3e0 	.word	0x0800c3e0
 80065dc:	0800c345 	.word	0x0800c345
 80065e0:	20001034 	.word	0x20001034
 80065e4:	08006455 	.word	0x08006455
 80065e8:	0800630d 	.word	0x0800630d

080065ec <App_State_Failure>:
}
 80065ec:	4770      	bx	lr
	...

080065f0 <App_Task_ScanAndEvents_Callback>:

BSP_WakeUp_Source_t WakeUp_Source;


/*===========================================================================================*/
void App_Task_ScanAndEvents_Callback(qEvent_t arg){
 80065f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


	static uint8_t ShouldReport =0 ;
	static uint8_t ShouldReportISQC = 0;

	qCR_Begin{
 80065f2:	4a60      	ldr	r2, [pc, #384]	; (8006774 <App_Task_ScanAndEvents_Callback+0x184>)
 80065f4:	6813      	ldr	r3, [r2, #0]
 80065f6:	2b89      	cmp	r3, #137	; 0x89
 80065f8:	d100      	bne.n	80065fc <App_Task_ScanAndEvents_Callback+0xc>
 80065fa:	e085      	b.n	8006708 <App_Task_ScanAndEvents_Callback+0x118>
 80065fc:	dc04      	bgt.n	8006608 <App_Task_ScanAndEvents_Callback+0x18>
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	d00b      	beq.n	800661a <App_Task_ScanAndEvents_Callback+0x2a>
 8006602:	2b81      	cmp	r3, #129	; 0x81
 8006604:	d05f      	beq.n	80066c6 <App_Task_ScanAndEvents_Callback+0xd6>
		qCR_WaitUntil(Service_Sigfox_QueueIsEmpty());
		qTask_Notification_Send(&TaskApplicationFSM, (void*)OPERATION_SLEEP) ;
		qTask_Set_State(qTask_Self(),qDisabled);
		qCR_Yield;
	}qCR_End;
}
 8006606:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	qCR_Begin{
 8006608:	2b94      	cmp	r3, #148	; 0x94
 800660a:	d100      	bne.n	800660e <App_Task_ScanAndEvents_Callback+0x1e>
 800660c:	e098      	b.n	8006740 <App_Task_ScanAndEvents_Callback+0x150>
 800660e:	2b97      	cmp	r3, #151	; 0x97
 8006610:	d1f9      	bne.n	8006606 <App_Task_ScanAndEvents_Callback+0x16>
	}qCR_End;
 8006612:	2301      	movs	r3, #1
 8006614:	425b      	negs	r3, r3
 8006616:	6013      	str	r3, [r2, #0]
}
 8006618:	e7f5      	b.n	8006606 <App_Task_ScanAndEvents_Callback+0x16>
		WakeUp.Source = (int)arg->TaskData;
 800661a:	6802      	ldr	r2, [r0, #0]
 800661c:	4b56      	ldr	r3, [pc, #344]	; (8006778 <App_Task_ScanAndEvents_Callback+0x188>)
		BSP_SENSOR_TH_READ_DATA();
 800661e:	4857      	ldr	r0, [pc, #348]	; (800677c <App_Task_ScanAndEvents_Callback+0x18c>)
		WakeUp.Source = (int)arg->TaskData;
 8006620:	701a      	strb	r2, [r3, #0]
		BSP_SENSOR_TH_READ_DATA();
 8006622:	2502      	movs	r5, #2
 8006624:	f000 fc4c 	bl	8006ec0 <SHT30_ReadData>
				BSP_SENSOR_TH_READ_DATA();
 8006628:	4e54      	ldr	r6, [pc, #336]	; (800677c <App_Task_ScanAndEvents_Callback+0x18c>)
				qDebug_Float(SHT30.temperature); /*GetTemp*/
 800662a:	2400      	movs	r4, #0
				BSP_SENSOR_TH_READ_DATA();
 800662c:	0030      	movs	r0, r6
 800662e:	f000 fc47 	bl	8006ec0 <SHT30_ReadData>
				qDebug_Float(SHT30.temperature); /*GetTemp*/
 8006632:	4f53      	ldr	r7, [pc, #332]	; (8006780 <App_Task_ScanAndEvents_Callback+0x190>)
 8006634:	220a      	movs	r2, #10
 8006636:	0039      	movs	r1, r7
 8006638:	6930      	ldr	r0, [r6, #16]
 800663a:	f001 fac9 	bl	8007bd0 <qIOUtil_FtoA>
 800663e:	4a51      	ldr	r2, [pc, #324]	; (8006784 <App_Task_ScanAndEvents_Callback+0x194>)
 8006640:	0003      	movs	r3, r0
 8006642:	0021      	movs	r1, r4
 8006644:	4850      	ldr	r0, [pc, #320]	; (8006788 <App_Task_ScanAndEvents_Callback+0x198>)
 8006646:	9401      	str	r4, [sp, #4]
 8006648:	9400      	str	r4, [sp, #0]
 800664a:	f002 f98d 	bl	8008968 <_qtrace_func>
				qDebug_Float(SHT30.humidity ); /*Gethum*/
 800664e:	220a      	movs	r2, #10
 8006650:	0039      	movs	r1, r7
 8006652:	6970      	ldr	r0, [r6, #20]
 8006654:	f001 fabc 	bl	8007bd0 <qIOUtil_FtoA>
 8006658:	9401      	str	r4, [sp, #4]
 800665a:	0003      	movs	r3, r0
 800665c:	9400      	str	r4, [sp, #0]
 800665e:	4a4b      	ldr	r2, [pc, #300]	; (800678c <App_Task_ScanAndEvents_Callback+0x19c>)
 8006660:	0021      	movs	r1, r4
 8006662:	4849      	ldr	r0, [pc, #292]	; (8006788 <App_Task_ScanAndEvents_Callback+0x198>)
 8006664:	f002 f980 	bl	8008968 <_qtrace_func>
		for( int i = 0; i< 2 ; i++){
 8006668:	2d01      	cmp	r5, #1
 800666a:	d17b      	bne.n	8006764 <App_Task_ScanAndEvents_Callback+0x174>
		switch( WakeUp.Source){
 800666c:	4b42      	ldr	r3, [pc, #264]	; (8006778 <App_Task_ScanAndEvents_Callback+0x188>)
 800666e:	4e48      	ldr	r6, [pc, #288]	; (8006790 <App_Task_ScanAndEvents_Callback+0x1a0>)
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b07      	cmp	r3, #7
 8006674:	d078      	beq.n	8006768 <App_Task_ScanAndEvents_Callback+0x178>
 8006676:	2b08      	cmp	r3, #8
 8006678:	d178      	bne.n	800676c <App_Task_ScanAndEvents_Callback+0x17c>
			if(	AppData_Config.NumPulsation != 0 ){
 800667a:	4b46      	ldr	r3, [pc, #280]	; (8006794 <App_Task_ScanAndEvents_Callback+0x1a4>)
 800667c:	337c      	adds	r3, #124	; 0x7c
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	42a3      	cmp	r3, r4
 8006682:	d071      	beq.n	8006768 <App_Task_ScanAndEvents_Callback+0x178>
				ShouldReportISQC = 1;
 8006684:	4b44      	ldr	r3, [pc, #272]	; (8006798 <App_Task_ScanAndEvents_Callback+0x1a8>)
 8006686:	701d      	strb	r5, [r3, #0]
		if(1 == Isquare_Data.Sensors.id.LowBattery )
 8006688:	4b44      	ldr	r3, [pc, #272]	; (800679c <App_Task_ScanAndEvents_Callback+0x1ac>)
 800668a:	7ad8      	ldrb	r0, [r3, #11]
 800668c:	0703      	lsls	r3, r0, #28
 800668e:	d50d      	bpl.n	80066ac <App_Task_ScanAndEvents_Callback+0xbc>
			qDebug_Decimal(Isquare_Data.Sensors.id.LowBattery);
 8006690:	0700      	lsls	r0, r0, #28
 8006692:	220a      	movs	r2, #10
 8006694:	0039      	movs	r1, r7
 8006696:	0fc0      	lsrs	r0, r0, #31
 8006698:	f001 fa65 	bl	8007b66 <qIOUtil_ItoA>
 800669c:	2100      	movs	r1, #0
 800669e:	0003      	movs	r3, r0
 80066a0:	9101      	str	r1, [sp, #4]
 80066a2:	9100      	str	r1, [sp, #0]
 80066a4:	4a3e      	ldr	r2, [pc, #248]	; (80067a0 <App_Task_ScanAndEvents_Callback+0x1b0>)
 80066a6:	4838      	ldr	r0, [pc, #224]	; (8006788 <App_Task_ScanAndEvents_Callback+0x198>)
 80066a8:	f002 f95e 	bl	8008968 <_qtrace_func>
		if(ShouldReport  || ShouldReportISQC )
 80066ac:	7833      	ldrb	r3, [r6, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d103      	bne.n	80066ba <App_Task_ScanAndEvents_Callback+0xca>
 80066b2:	4b39      	ldr	r3, [pc, #228]	; (8006798 <App_Task_ScanAndEvents_Callback+0x1a8>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d03a      	beq.n	8006730 <App_Task_ScanAndEvents_Callback+0x140>
			Service_Sigfox_Run(1);
 80066ba:	2001      	movs	r0, #1
 80066bc:	f003 fe16 	bl	800a2ec <Service_Sigfox_Run>
			qCR_WaitUntil(Service_Sigfox_GetStatus() == WSSFM1XRX_STATUS_MODULE_INITIALIZED);
 80066c0:	2281      	movs	r2, #129	; 0x81
 80066c2:	4b2c      	ldr	r3, [pc, #176]	; (8006774 <App_Task_ScanAndEvents_Callback+0x184>)
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	f003 fe7f 	bl	800a3c8 <Service_Sigfox_GetStatus>
 80066ca:	2809      	cmp	r0, #9
 80066cc:	d19b      	bne.n	8006606 <App_Task_ScanAndEvents_Callback+0x16>
			if ( 0 == AppData_Config.onlySendLocation   )   /*skip frame sensors with onlysendframe*/
 80066ce:	4c31      	ldr	r4, [pc, #196]	; (8006794 <App_Task_ScanAndEvents_Callback+0x1a4>)
 80066d0:	0023      	movs	r3, r4
 80066d2:	337d      	adds	r3, #125	; 0x7d
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d12a      	bne.n	8006730 <App_Task_ScanAndEvents_Callback+0x140>
				qTrace_Message("sensors\r\n");
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	4a2a      	ldr	r2, [pc, #168]	; (8006788 <App_Task_ScanAndEvents_Callback+0x198>)
 80066e0:	4b30      	ldr	r3, [pc, #192]	; (80067a4 <App_Task_ScanAndEvents_Callback+0x1b4>)
 80066e2:	4931      	ldr	r1, [pc, #196]	; (80067a8 <App_Task_ScanAndEvents_Callback+0x1b8>)
 80066e4:	4831      	ldr	r0, [pc, #196]	; (80067ac <App_Task_ScanAndEvents_Callback+0x1bc>)
 80066e6:	f002 f93f 	bl	8008968 <_qtrace_func>
				Isquare_Data.Sensors.id.type =  APPDATAUP_SENSORS;
 80066ea:	2207      	movs	r2, #7
 80066ec:	482b      	ldr	r0, [pc, #172]	; (800679c <App_Task_ScanAndEvents_Callback+0x1ac>)
				Service_Sigfox_Send(Isquare_Data.AllBytes, AppData_Config.downlinkIsActive);
 80066ee:	3441      	adds	r4, #65	; 0x41
				Isquare_Data.Sensors.id.type =  APPDATAUP_SENSORS;
 80066f0:	7ac3      	ldrb	r3, [r0, #11]
 80066f2:	4393      	bics	r3, r2
 80066f4:	001a      	movs	r2, r3
 80066f6:	2303      	movs	r3, #3
 80066f8:	4313      	orrs	r3, r2
 80066fa:	72c3      	strb	r3, [r0, #11]
				Service_Sigfox_Send(Isquare_Data.AllBytes, AppData_Config.downlinkIsActive);
 80066fc:	7821      	ldrb	r1, [r4, #0]
 80066fe:	f003 ffeb 	bl	800a6d8 <Service_Sigfox_Send>
				qCR_WaitUntil(Service_Sigfox_GetStatus()==WSSFM1XRX_STATUS_SENT_MESSAGE);
 8006702:	2289      	movs	r2, #137	; 0x89
 8006704:	4b1b      	ldr	r3, [pc, #108]	; (8006774 <App_Task_ScanAndEvents_Callback+0x184>)
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	f003 fe5e 	bl	800a3c8 <Service_Sigfox_GetStatus>
 800670c:	280d      	cmp	r0, #13
 800670e:	d000      	beq.n	8006712 <App_Task_ScanAndEvents_Callback+0x122>
 8006710:	e779      	b.n	8006606 <App_Task_ScanAndEvents_Callback+0x16>
				if( AppData_Config.downlinkIsActive){
 8006712:	4c20      	ldr	r4, [pc, #128]	; (8006794 <App_Task_ScanAndEvents_Callback+0x1a4>)
 8006714:	0023      	movs	r3, r4
 8006716:	3341      	adds	r3, #65	; 0x41
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d008      	beq.n	8006730 <App_Task_ScanAndEvents_Callback+0x140>
					if(1 == Service_Sigfox_GetDownlinkStatus())
 800671e:	f004 f825 	bl	800a76c <Service_Sigfox_GetDownlinkStatus>
 8006722:	2801      	cmp	r0, #1
 8006724:	d101      	bne.n	800672a <App_Task_ScanAndEvents_Callback+0x13a>
						App_DiscrimateFrameDownlink(Service_Sigfox_GetDownlinkFrame());
 8006726:	f004 f813 	bl	800a750 <Service_Sigfox_GetDownlinkFrame>
					AppData_Config.downlinkIsActive = 0; /*clear downlink (the wakeup read memory flash egain)*/
 800672a:	2300      	movs	r3, #0
 800672c:	3441      	adds	r4, #65	; 0x41
 800672e:	7023      	strb	r3, [r4, #0]
		BSP_GPIO_WRITE_OUT_CTL(AppData_Config.DoCtrl);
 8006730:	4b18      	ldr	r3, [pc, #96]	; (8006794 <App_Task_ScanAndEvents_Callback+0x1a4>)
 8006732:	339f      	adds	r3, #159	; 0x9f
 8006734:	7818      	ldrb	r0, [r3, #0]
 8006736:	f004 fa3b 	bl	800abb0 <WSQ_GPIO_WriteOutputCtrl>
		qCR_WaitUntil(Service_Sigfox_QueueIsEmpty());
 800673a:	2294      	movs	r2, #148	; 0x94
 800673c:	4b0d      	ldr	r3, [pc, #52]	; (8006774 <App_Task_ScanAndEvents_Callback+0x184>)
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	f004 f81a 	bl	800a778 <Service_Sigfox_QueueIsEmpty>
 8006744:	2800      	cmp	r0, #0
 8006746:	d100      	bne.n	800674a <App_Task_ScanAndEvents_Callback+0x15a>
 8006748:	e75d      	b.n	8006606 <App_Task_ScanAndEvents_Callback+0x16>
		qTask_Notification_Send(&TaskApplicationFSM, (void*)OPERATION_SLEEP) ;
 800674a:	2108      	movs	r1, #8
 800674c:	4818      	ldr	r0, [pc, #96]	; (80067b0 <App_Task_ScanAndEvents_Callback+0x1c0>)
 800674e:	f002 f886 	bl	800885e <qTask_Notification_Send>
		qTask_Set_State(qTask_Self(),qDisabled);
 8006752:	f002 f894 	bl	800887e <qTask_Self>
 8006756:	2100      	movs	r1, #0
 8006758:	f002 f8bb 	bl	80088d2 <qTask_Set_State>
		qCR_Yield;
 800675c:	2297      	movs	r2, #151	; 0x97
 800675e:	4b05      	ldr	r3, [pc, #20]	; (8006774 <App_Task_ScanAndEvents_Callback+0x184>)
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	e750      	b.n	8006606 <App_Task_ScanAndEvents_Callback+0x16>
 8006764:	2501      	movs	r5, #1
 8006766:	e75f      	b.n	8006628 <App_Task_ScanAndEvents_Callback+0x38>
			ShouldReport = 1;
 8006768:	7035      	strb	r5, [r6, #0]
			break;
 800676a:	e78d      	b.n	8006688 <App_Task_ScanAndEvents_Callback+0x98>
			ShouldReportISQC = 1;
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <App_Task_ScanAndEvents_Callback+0x1a8>)
			ShouldReport = 0;
 800676e:	7034      	strb	r4, [r6, #0]
			ShouldReportISQC = 1;
 8006770:	701d      	strb	r5, [r3, #0]
			break;
 8006772:	e789      	b.n	8006688 <App_Task_ScanAndEvents_Callback+0x98>
 8006774:	2000022c 	.word	0x2000022c
 8006778:	20000228 	.word	0x20000228
 800677c:	20001f18 	.word	0x20001f18
 8006780:	20000804 	.word	0x20000804
 8006784:	0800c3fa 	.word	0x0800c3fa
 8006788:	0800d709 	.word	0x0800d709
 800678c:	0800c40d 	.word	0x0800c40d
 8006790:	200006b0 	.word	0x200006b0
 8006794:	20000184 	.word	0x20000184
 8006798:	200006b1 	.word	0x200006b1
 800679c:	20001fb4 	.word	0x20001fb4
 80067a0:	0800c41d 	.word	0x0800c41d
 80067a4:	0800c441 	.word	0x0800c441
 80067a8:	0800c46b 	.word	0x0800c46b
 80067ac:	0800c44b 	.word	0x0800c44b
 80067b0:	20001f74 	.word	0x20001f74

080067b4 <App_Task_Idle>:

/*===========================================================================================*/

void App_Task_Idle(qEvent_t e){
	//WSQ_SYSTEM_FeedCOP();/*TODO: WDT new*/
}
 80067b4:	4770      	bx	lr

080067b6 <Debounce_Init>:
 *
 * Ej:  Debounce_Init(&DebounceData,40, PULLUP);
 *
 */
void Debounce_Init(DebounceData_t *PtrDataStruct,uint32_t DebounceTick, DebounceState_t PULL_x){
    PtrDataStruct->Delay=DebounceTick; /*DELAY_DEBOUNCE;*/
 80067b6:	b2c9      	uxtb	r1, r1
    PtrDataStruct->PreviousState_ = (PULL_x == PULL_UP) ? HIGH_:LOW_;
 80067b8:	1f53      	subs	r3, r2, #5
    PtrDataStruct->Delay=DebounceTick; /*DELAY_DEBOUNCE;*/
 80067ba:	7101      	strb	r1, [r0, #4]
    PtrDataStruct->PreviousState_ = (PULL_x == PULL_UP) ? HIGH_:LOW_;
 80067bc:	4259      	negs	r1, r3
 80067be:	414b      	adcs	r3, r1
    PtrDataStruct->PreviousState_ = (PULL_x == PULL_DOWN) ? LOW_:HIGH_;
 80067c0:	3a06      	subs	r2, #6
    PtrDataStruct->PreviousState_ = (PULL_x == PULL_UP) ? HIGH_:LOW_;
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	7043      	strb	r3, [r0, #1]
    PtrDataStruct->PreviousState_ = (PULL_x == PULL_DOWN) ? LOW_:HIGH_;
 80067c6:	1e53      	subs	r3, r2, #1
 80067c8:	419a      	sbcs	r2, r3
    PtrDataStruct->FlagFalling = 0;
 80067ca:	2300      	movs	r3, #0
    PtrDataStruct->PreviousState_ = (PULL_x == PULL_DOWN) ? LOW_:HIGH_;
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	7042      	strb	r2, [r0, #1]
    PtrDataStruct->FlagFalling = 0;
 80067d0:	7083      	strb	r3, [r0, #2]
    PtrDataStruct->FlagRising = 0;
 80067d2:	70c3      	strb	r3, [r0, #3]
}
 80067d4:	4770      	bx	lr

080067d6 <Debounce_Update>:
 * Ej: 	Debounce_Update(&DebounceData, HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13));
 *
 */

void Debounce_Update(DebounceData_t *PtrDataStruct,uint8_t PinState){
    if((PtrDataStruct->PreviousState_ && !PinState ) || (!PtrDataStruct->PreviousState_ && PinState) ){ /*FALLING*/
 80067d6:	7843      	ldrb	r3, [r0, #1]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <Debounce_Update+0xa>
 80067dc:	2900      	cmp	r1, #0
 80067de:	d004      	beq.n	80067ea <Debounce_Update+0x14>
 80067e0:	7843      	ldrb	r3, [r0, #1]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d122      	bne.n	800682c <Debounce_Update+0x56>
 80067e6:	2900      	cmp	r1, #0
 80067e8:	d020      	beq.n	800682c <Debounce_Update+0x56>
        if(PtrDataStruct->TimeCounter++ >= PtrDataStruct->Delay){  /* 40 ms*/
 80067ea:	7943      	ldrb	r3, [r0, #5]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	7142      	strb	r2, [r0, #5]
 80067f4:	7902      	ldrb	r2, [r0, #4]
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d315      	bcc.n	8006826 <Debounce_Update+0x50>
			if(PtrDataStruct->PreviousState_ && !PinState) {PtrDataStruct->Status = FALLING; PtrDataStruct->FlagFalling = 1;}
 80067fa:	7843      	ldrb	r3, [r0, #1]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <Debounce_Update+0x36>
 8006800:	2900      	cmp	r1, #0
 8006802:	d103      	bne.n	800680c <Debounce_Update+0x36>
 8006804:	2303      	movs	r3, #3
 8006806:	7183      	strb	r3, [r0, #6]
 8006808:	3b02      	subs	r3, #2
 800680a:	7083      	strb	r3, [r0, #2]
        	if(!PtrDataStruct->PreviousState_ && PinState) {PtrDataStruct->Status = RISING; PtrDataStruct->FlagRising = 1; }
 800680c:	7843      	ldrb	r3, [r0, #1]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d105      	bne.n	800681e <Debounce_Update+0x48>
 8006812:	2900      	cmp	r1, #0
 8006814:	d003      	beq.n	800681e <Debounce_Update+0x48>
 8006816:	3302      	adds	r3, #2
 8006818:	7183      	strb	r3, [r0, #6]
 800681a:	3b01      	subs	r3, #1
 800681c:	70c3      	strb	r3, [r0, #3]
        	PtrDataStruct->PreviousState_ = PinState;
         	PtrDataStruct->TimeCounter=0;
 800681e:	2300      	movs	r3, #0
        	PtrDataStruct->PreviousState_ = PinState;
 8006820:	7041      	strb	r1, [r0, #1]
         	PtrDataStruct->TimeCounter=0;
 8006822:	7143      	strb	r3, [r0, #5]
		}else PtrDataStruct->Status =FLAG_UNKNOWN;

    }else   PtrDataStruct->Status = PinState;
}
 8006824:	4770      	bx	lr
		}else PtrDataStruct->Status =FLAG_UNKNOWN;
 8006826:	2304      	movs	r3, #4
 8006828:	7183      	strb	r3, [r0, #6]
 800682a:	e7fb      	b.n	8006824 <Debounce_Update+0x4e>
    }else   PtrDataStruct->Status = PinState;
 800682c:	7181      	strb	r1, [r0, #6]
}
 800682e:	e7f9      	b.n	8006824 <Debounce_Update+0x4e>

08006830 <WSSFM1XRX_StringTX>:
	/*Deprecated return ( NULL != obj->CallbackDownlink )? obj->CallbackDownlink(obj) : WSSFM1XRX_DL_DISCRIMINATE_ERROR;*/
	return RetValue;
}

/*Private Functions ********************************************************************************************************************************/
static void WSSFM1XRX_StringTX(WSSFM1XRXConfig_t *obj, char* WSSFM1XRX_String){
 8006830:	b570      	push	{r4, r5, r6, lr}
 8006832:	0005      	movs	r5, r0
 8006834:	000c      	movs	r4, r1
 8006836:	3401      	adds	r4, #1
  	int i =0;
  	while( '\0' != WSSFM1XRX_String[i]  ) {          
 8006838:	1e63      	subs	r3, r4, #1
 800683a:	7819      	ldrb	r1, [r3, #0]
 800683c:	2900      	cmp	r1, #0
 800683e:	d100      	bne.n	8006842 <WSSFM1XRX_StringTX+0x12>
		obj->TX_WSSFM1XRX(NULL,WSSFM1XRX_String[i++]);
	}
}
 8006840:	bd70      	pop	{r4, r5, r6, pc}
		obj->TX_WSSFM1XRX(NULL,WSSFM1XRX_String[i++]);
 8006842:	2000      	movs	r0, #0
 8006844:	68ab      	ldr	r3, [r5, #8]
 8006846:	4798      	blx	r3
 8006848:	e7f5      	b.n	8006836 <WSSFM1XRX_StringTX+0x6>

0800684a <WSSFM1XRX_ResetObject>:

/*Private Functions ***********************************************************************************************************************************************/
static void WSSFM1XRX_ResetObject(WSSFM1XRXConfig_t *obj){
 800684a:	b510      	push	{r4, lr}
	(void)memset( (void *) obj->RxFrame,0,obj->SizeBuffRx);
 800684c:	2100      	movs	r1, #0
static void WSSFM1XRX_ResetObject(WSSFM1XRXConfig_t *obj){
 800684e:	0004      	movs	r4, r0
	(void)memset( (void *) obj->RxFrame,0,obj->SizeBuffRx);
 8006850:	7d02      	ldrb	r2, [r0, #20]
 8006852:	6900      	ldr	r0, [r0, #16]
 8006854:	f004 ff79 	bl	800b74a <memset>
	obj->StatusFlag=(uint8_t)WSSFM1XRX_DEFAULT;
 8006858:	2309      	movs	r3, #9
	obj->RxIndex=0;
	obj->RxReady=SF_FALSE;
	obj->State_Api = WSSFM1XRX_IDLE; /*verificar*/
 800685a:	0022      	movs	r2, r4
	obj->StatusFlag=(uint8_t)WSSFM1XRX_DEFAULT;
 800685c:	75e3      	strb	r3, [r4, #23]
	obj->RxIndex=0;
 800685e:	2300      	movs	r3, #0
	obj->State_Api = WSSFM1XRX_IDLE; /*verificar*/
 8006860:	3229      	adds	r2, #41	; 0x29
	obj->RxIndex=0;
 8006862:	75a3      	strb	r3, [r4, #22]
	obj->RxReady=SF_FALSE;
 8006864:	7563      	strb	r3, [r4, #21]
	obj->State_Api = WSSFM1XRX_IDLE; /*verificar*/
 8006866:	7013      	strb	r3, [r2, #0]
	obj->State_W = WSSFM1XRX_W_IDLE; /*verificar*/
 8006868:	3428      	adds	r4, #40	; 0x28
 800686a:	3302      	adds	r3, #2
 800686c:	7023      	strb	r3, [r4, #0]
}
 800686e:	bd10      	pop	{r4, pc}

08006870 <WSSFM1XRX_Init>:
WSSFM1XRX_Return_t WSSFM1XRX_Init(WSSFM1XRXConfig_t *obj, DigitalFcn_t Reset, DigitalFcn_t WkUp, TxFnc_t Tx_Wssfm1xrx,WSSFM1XRX_FreqUL_t Frequency_Tx ,TickReadFcn_t TickRead,char* Input , uint8_t SizeInput, uint8_t MaxNumberRetries){
 8006870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006872:	001e      	movs	r6, r3
 8006874:	ab06      	add	r3, sp, #24
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	0004      	movs	r4, r0
 800687a:	0017      	movs	r7, r2
 800687c:	a80a      	add	r0, sp, #40	; 0x28
 800687e:	aa09      	add	r2, sp, #36	; 0x24
 8006880:	7805      	ldrb	r5, [r0, #0]
 8006882:	469c      	mov	ip, r3
 8006884:	7812      	ldrb	r2, [r2, #0]
		RetValue = WSSFM1XRX_FAILURE;
 8006886:	200a      	movs	r0, #10
	if( ( NULL != obj ) && ( NULL != Reset ) && ( NULL != WkUp ) && ( NULL != Tx_Wssfm1xrx ) && ( NULL != TickRead ) ){ /*si alguno es null, return falla*/
 8006888:	2c00      	cmp	r4, #0
 800688a:	d020      	beq.n	80068ce <WSSFM1XRX_Init+0x5e>
 800688c:	2900      	cmp	r1, #0
 800688e:	d01e      	beq.n	80068ce <WSSFM1XRX_Init+0x5e>
 8006890:	2f00      	cmp	r7, #0
 8006892:	d01c      	beq.n	80068ce <WSSFM1XRX_Init+0x5e>
 8006894:	2e00      	cmp	r6, #0
 8006896:	d01a      	beq.n	80068ce <WSSFM1XRX_Init+0x5e>
 8006898:	9b07      	ldr	r3, [sp, #28]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d017      	beq.n	80068ce <WSSFM1XRX_Init+0x5e>
        obj->TICK_READ = TickRead;
 800689e:	60e3      	str	r3, [r4, #12]
        obj->Frequency=Frequency_Tx;
 80068a0:	4663      	mov	r3, ip
 80068a2:	7623      	strb	r3, [r4, #24]
        obj->RxFrame = Input; 
 80068a4:	9b08      	ldr	r3, [sp, #32]
        obj->RST=Reset;
 80068a6:	6021      	str	r1, [r4, #0]
        obj->RxFrame = Input; 
 80068a8:	6123      	str	r3, [r4, #16]
        obj->State_Api = WSSFM1XRX_IDLE; /**/
 80068aa:	0023      	movs	r3, r4
        obj->RxReady=SF_FALSE;
 80068ac:	2100      	movs	r1, #0
        obj->State_Api = WSSFM1XRX_IDLE; /**/
 80068ae:	3329      	adds	r3, #41	; 0x29
        obj->RxReady=SF_FALSE;
 80068b0:	7561      	strb	r1, [r4, #21]
        obj->WKUP=WkUp;
 80068b2:	6067      	str	r7, [r4, #4]
        obj->TX_WSSFM1XRX=Tx_Wssfm1xrx;
 80068b4:	60a6      	str	r6, [r4, #8]
        obj->RxIndex=0;
 80068b6:	75a1      	strb	r1, [r4, #22]
        obj->SizeBuffRx = SizeInput;
 80068b8:	7522      	strb	r2, [r4, #20]
        obj->State_W = WSSFM1XRX_W_IDLE; /*State Idle function Wait non blocking*/
 80068ba:	3b01      	subs	r3, #1
        obj->State_Api = WSSFM1XRX_IDLE; /**/
 80068bc:	7059      	strb	r1, [r3, #1]
        obj->State_W = WSSFM1XRX_W_IDLE; /*State Idle function Wait non blocking*/
 80068be:	3808      	subs	r0, #8
 80068c0:	7018      	strb	r0, [r3, #0]
        (void)memset((void*)obj->RxFrame,0,obj->SizeBuffRx);
 80068c2:	9808      	ldr	r0, [sp, #32]
 80068c4:	f004 ff41 	bl	800b74a <memset>
	WSSFM1XRX_Return_t RetValue = WSSFM1XRX_INIT_OK;
 80068c8:	2005      	movs	r0, #5
        obj->MaxNumberRetries = MaxNumberRetries;
 80068ca:	342b      	adds	r4, #43	; 0x2b
 80068cc:	7025      	strb	r5, [r4, #0]
}
 80068ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080068d0 <WSSFM1XRX_Wait_NonBlock>:
WSSFM1XRX_Return_t WSSFM1XRX_Wait_NonBlock(WSSFM1XRXConfig_t *obj, uint32_t msec){
 80068d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( WSSFM1XRX_W_IDLE == obj->State_W ){
 80068d2:	0006      	movs	r6, r0
WSSFM1XRX_Return_t WSSFM1XRX_Wait_NonBlock(WSSFM1XRXConfig_t *obj, uint32_t msec){
 80068d4:	9101      	str	r1, [sp, #4]
	if( WSSFM1XRX_W_IDLE == obj->State_W ){
 80068d6:	3628      	adds	r6, #40	; 0x28
 80068d8:	7833      	ldrb	r3, [r6, #0]
WSSFM1XRX_Return_t WSSFM1XRX_Wait_NonBlock(WSSFM1XRXConfig_t *obj, uint32_t msec){
 80068da:	0004      	movs	r4, r0
 80068dc:	4d0e      	ldr	r5, [pc, #56]	; (8006918 <WSSFM1XRX_Wait_NonBlock+0x48>)
 80068de:	4f0f      	ldr	r7, [pc, #60]	; (800691c <WSSFM1XRX_Wait_NonBlock+0x4c>)
	if( WSSFM1XRX_W_IDLE == obj->State_W ){
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d108      	bne.n	80068f6 <WSSFM1XRX_Wait_NonBlock+0x26>
		RetValue = WSSFM1XRX_WAITING ;
 80068e4:	3b01      	subs	r3, #1
 80068e6:	702b      	strb	r3, [r5, #0]
		WSSFM1XRX_StartTick = 0;
 80068e8:	2300      	movs	r3, #0
 80068ea:	603b      	str	r3, [r7, #0]
		WSSFM1XRX_StartTick = obj->TICK_READ() ;/*tickRead_ms();*/
 80068ec:	68c3      	ldr	r3, [r0, #12]
 80068ee:	4798      	blx	r3
		obj->State_W = WSSFM1XRX_W_RUNNING ;
 80068f0:	2303      	movs	r3, #3
		WSSFM1XRX_StartTick = obj->TICK_READ() ;/*tickRead_ms();*/
 80068f2:	6038      	str	r0, [r7, #0]
		obj->State_W = WSSFM1XRX_W_RUNNING ;
 80068f4:	7033      	strb	r3, [r6, #0]
	if( ( obj->TICK_READ() - WSSFM1XRX_StartTick) > msec ){ 
 80068f6:	68e3      	ldr	r3, [r4, #12]
 80068f8:	4798      	blx	r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	1ac0      	subs	r0, r0, r3
 80068fe:	9b01      	ldr	r3, [sp, #4]
 8006900:	4298      	cmp	r0, r3
 8006902:	d907      	bls.n	8006914 <WSSFM1XRX_Wait_NonBlock+0x44>
		obj->State_W = WSSFM1XRX_W_IDLE;
 8006904:	2302      	movs	r3, #2
 8006906:	7033      	strb	r3, [r6, #0]
		obj->State_Api = WSSFM1XRX_IDLE; /*Cuando vence el tiempo mando el comando de nuevo*/
 8006908:	2300      	movs	r3, #0
 800690a:	3429      	adds	r4, #41	; 0x29
 800690c:	7023      	strb	r3, [r4, #0]
		RetValue = WSSFM1XRX_WAITING;
 800690e:	702b      	strb	r3, [r5, #0]
	return RetValue;
 8006910:	7828      	ldrb	r0, [r5, #0]
}
 8006912:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		RetValue = WSSFM1XRX_WAITING;
 8006914:	2301      	movs	r3, #1
 8006916:	e7fa      	b.n	800690e <WSSFM1XRX_Wait_NonBlock+0x3e>
 8006918:	200006b2 	.word	0x200006b2
 800691c:	200006b4 	.word	0x200006b4

08006920 <WSSFM1XRX_Wait_Block>:
WSSFM1XRX_Return_t WSSFM1XRX_Wait_Block(WSSFM1XRXConfig_t *obj, uint32_t msec){
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	0004      	movs	r4, r0
 8006924:	000d      	movs	r5, r1
	while( WSSFM1XRX_WAITING == WSSFM1XRX_Wait_NonBlock(obj, msec) ){}
 8006926:	0029      	movs	r1, r5
 8006928:	0020      	movs	r0, r4
 800692a:	f7ff ffd1 	bl	80068d0 <WSSFM1XRX_Wait_NonBlock>
 800692e:	2801      	cmp	r0, #1
 8006930:	d0f9      	beq.n	8006926 <WSSFM1XRX_Wait_Block+0x6>
}
 8006932:	2000      	movs	r0, #0
 8006934:	bd70      	pop	{r4, r5, r6, pc}
	...

08006938 <WSSFM1XRX_WakeUP>:
WSSFM1XRX_Return_t WSSFM1XRX_WakeUP(WSSFM1XRXConfig_t *obj) {
 8006938:	b570      	push	{r4, r5, r6, lr}
	if( WSSFM1XRX_NONE ==  RetValueAux ) {
 800693a:	4d10      	ldr	r5, [pc, #64]	; (800697c <WSSFM1XRX_WakeUP+0x44>)
WSSFM1XRX_Return_t WSSFM1XRX_WakeUP(WSSFM1XRXConfig_t *obj) {
 800693c:	0004      	movs	r4, r0
	if( WSSFM1XRX_NONE ==  RetValueAux ) {
 800693e:	782b      	ldrb	r3, [r5, #0]
 8006940:	2b04      	cmp	r3, #4
 8006942:	d107      	bne.n	8006954 <WSSFM1XRX_WakeUP+0x1c>
		obj->RST(SF_FALSE);
 8006944:	2000      	movs	r0, #0
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	4798      	blx	r3
		obj->WKUP(SF_FALSE);
 800694a:	6863      	ldr	r3, [r4, #4]
 800694c:	2000      	movs	r0, #0
 800694e:	4798      	blx	r3
		RetValueAux = WSSFM1XRX_WAITING;
 8006950:	2301      	movs	r3, #1
 8006952:	702b      	strb	r3, [r5, #0]
	RetValue =  WSSFM1XRX_Wait_Block(obj, WSSFM1XRX_WAKEUP_TIME_DELAY_PULSE); /*Return WAITING or TIMEOUT*/
 8006954:	21c8      	movs	r1, #200	; 0xc8
 8006956:	0020      	movs	r0, r4
 8006958:	f7ff ffe2 	bl	8006920 <WSSFM1XRX_Wait_Block>
	if( WSSFM1XRX_TIMEOUT == RetValue ){
 800695c:	2800      	cmp	r0, #0
 800695e:	d107      	bne.n	8006970 <WSSFM1XRX_WakeUP+0x38>
		obj->RST(SF_TRUE);
 8006960:	3001      	adds	r0, #1
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	4798      	blx	r3
		obj->WKUP(SF_TRUE);
 8006966:	6863      	ldr	r3, [r4, #4]
 8006968:	2001      	movs	r0, #1
 800696a:	4798      	blx	r3
		RetValueAux = WSSFM1XRX_NONE;
 800696c:	2304      	movs	r3, #4
 800696e:	702b      	strb	r3, [r5, #0]
	RetValue =  WSSFM1XRX_Wait_Block(obj, WSSFM1XRX_WAKEUP_WAIT_TIME_DELAY_RESP); /*Return WAITING or TIMEOUT*/
 8006970:	2196      	movs	r1, #150	; 0x96
 8006972:	0020      	movs	r0, r4
 8006974:	0049      	lsls	r1, r1, #1
 8006976:	f7ff ffd3 	bl	8006920 <WSSFM1XRX_Wait_Block>
}
 800697a:	bd70      	pop	{r4, r5, r6, pc}
 800697c:	2000023d 	.word	0x2000023d

08006980 <WSSFM1XRX_ResetModule>:
WSSFM1XRX_Return_t WSSFM1XRX_ResetModule(WSSFM1XRXConfig_t *obj ,WSSFM1XRX_WaitMode_t Wait  ){
 8006980:	b570      	push	{r4, r5, r6, lr}
	if( WSSFM1XRX_NONE == RetValueAux ){
 8006982:	4d11      	ldr	r5, [pc, #68]	; (80069c8 <WSSFM1XRX_ResetModule+0x48>)
WSSFM1XRX_Return_t WSSFM1XRX_ResetModule(WSSFM1XRXConfig_t *obj ,WSSFM1XRX_WaitMode_t Wait  ){
 8006984:	0004      	movs	r4, r0
	if( WSSFM1XRX_NONE == RetValueAux ){
 8006986:	782b      	ldrb	r3, [r5, #0]
WSSFM1XRX_Return_t WSSFM1XRX_ResetModule(WSSFM1XRXConfig_t *obj ,WSSFM1XRX_WaitMode_t Wait  ){
 8006988:	000e      	movs	r6, r1
	if( WSSFM1XRX_NONE == RetValueAux ){
 800698a:	2b04      	cmp	r3, #4
 800698c:	d109      	bne.n	80069a2 <WSSFM1XRX_ResetModule+0x22>
		WSSFM1XRX_ResetObject(obj);
 800698e:	f7ff ff5c 	bl	800684a <WSSFM1XRX_ResetObject>
		obj->RST(SF_FALSE);  /*Reset*/
 8006992:	2000      	movs	r0, #0
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	4798      	blx	r3
		obj->WKUP(SF_FALSE);  /*Wake up*/
 8006998:	6863      	ldr	r3, [r4, #4]
 800699a:	2000      	movs	r0, #0
 800699c:	4798      	blx	r3
		RetValueAux = WSSFM1XRX_WAITING;
 800699e:	2301      	movs	r3, #1
 80069a0:	702b      	strb	r3, [r5, #0]
	RetValue =  Wait(obj,WSSFM1XRX_SLEEP_TIME_RESET); /*Return WAITING or TIMEOUT*/
 80069a2:	21fa      	movs	r1, #250	; 0xfa
 80069a4:	0020      	movs	r0, r4
 80069a6:	0089      	lsls	r1, r1, #2
 80069a8:	47b0      	blx	r6
 80069aa:	4e08      	ldr	r6, [pc, #32]	; (80069cc <WSSFM1XRX_ResetModule+0x4c>)
 80069ac:	7030      	strb	r0, [r6, #0]
	if( WSSFM1XRX_TIMEOUT == RetValue ){
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d107      	bne.n	80069c2 <WSSFM1XRX_ResetModule+0x42>
		obj->RST(SF_TRUE);
 80069b2:	3001      	adds	r0, #1
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	4798      	blx	r3
		obj->WKUP(SF_TRUE);
 80069b8:	6863      	ldr	r3, [r4, #4]
 80069ba:	2001      	movs	r0, #1
 80069bc:	4798      	blx	r3
		RetValueAux = WSSFM1XRX_NONE;
 80069be:	2304      	movs	r3, #4
 80069c0:	702b      	strb	r3, [r5, #0]
	return  RetValue;
 80069c2:	7830      	ldrb	r0, [r6, #0]
}
 80069c4:	bd70      	pop	{r4, r5, r6, pc}
 80069c6:	46c0      	nop			; (mov r8, r8)
 80069c8:	2000023e 	.word	0x2000023e
 80069cc:	2000023c 	.word	0x2000023c

080069d0 <WSSFM1XRX_ISRRX>:
	if( (RxChar < (char)CHAR_PRINT_BELOW)  || (RxChar > (char)CHAR_PRINT_ABOVE) ) {
 80069d0:	000b      	movs	r3, r1
 80069d2:	3b0a      	subs	r3, #10
void WSSFM1XRX_ISRRX(WSSFM1XRXConfig_t *obj, const char RxChar){
 80069d4:	b510      	push	{r4, lr}
	if( (RxChar < (char)CHAR_PRINT_BELOW)  || (RxChar > (char)CHAR_PRINT_ABOVE) ) {
 80069d6:	2b70      	cmp	r3, #112	; 0x70
 80069d8:	d81d      	bhi.n	8006a16 <WSSFM1XRX_ISRRX+0x46>
	if((uint8_t)SF_TRUE == obj->RxReady) {
 80069da:	7d43      	ldrb	r3, [r0, #21]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d01a      	beq.n	8006a16 <WSSFM1XRX_ISRRX+0x46>
	obj->RxFrame[obj->RxIndex] = RxChar; /*misra c 13.3*/
 80069e0:	7d83      	ldrb	r3, [r0, #22]
 80069e2:	6902      	ldr	r2, [r0, #16]
 80069e4:	54d1      	strb	r1, [r2, r3]
	obj->RxIndex++;
 80069e6:	7d83      	ldrb	r3, [r0, #22]
 80069e8:	3301      	adds	r3, #1
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	7583      	strb	r3, [r0, #22]
	if (obj->RxIndex >= (obj->SizeBuffRx - (uint8_t)1) ) { /* misra c 10.4*/
 80069ee:	7d03      	ldrb	r3, [r0, #20]
 80069f0:	7d82      	ldrb	r2, [r0, #22]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	429a      	cmp	r2, r3
 80069f6:	db01      	blt.n	80069fc <WSSFM1XRX_ISRRX+0x2c>
		obj->RxIndex=0; 
 80069f8:	2300      	movs	r3, #0
 80069fa:	7583      	strb	r3, [r0, #22]
	obj->RxFrame[obj->RxIndex] = (char)0;
 80069fc:	2200      	movs	r2, #0
 80069fe:	7d83      	ldrb	r3, [r0, #22]
 8006a00:	6904      	ldr	r4, [r0, #16]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	54e2      	strb	r2, [r4, r3]
	if( '\r' == RxChar ){
 8006a06:	290d      	cmp	r1, #13
 8006a08:	d105      	bne.n	8006a16 <WSSFM1XRX_ISRRX+0x46>
		if((uint8_t)SF_FALSE == obj->DownLink){
 8006a0a:	7e43      	ldrb	r3, [r0, #25]
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d103      	bne.n	8006a18 <WSSFM1XRX_ISRRX+0x48>
			obj->RxIndex = 0;
 8006a10:	7583      	strb	r3, [r0, #22]
			obj->RxReady = SF_TRUE; /* Framed completed*/
 8006a12:	2301      	movs	r3, #1
 8006a14:	7543      	strb	r3, [r0, #21]
}
 8006a16:	bd10      	pop	{r4, pc}
			obj->DownLink = SF_FALSE; /* Clear the downlink request */
 8006a18:	7642      	strb	r2, [r0, #25]
 8006a1a:	e7fc      	b.n	8006a16 <WSSFM1XRX_ISRRX+0x46>

08006a1c <WSSFM1XRX_MatchResponse>:
WSSFM1XRX_Return_t WSSFM1XRX_MatchResponse(WSSFM1XRXConfig_t *obj, char *expectedResponse){
 8006a1c:	b510      	push	{r4, lr}
	if((bool)obj->RxReady){
 8006a1e:	7d42      	ldrb	r2, [r0, #21]
WSSFM1XRX_Return_t WSSFM1XRX_MatchResponse(WSSFM1XRXConfig_t *obj, char *expectedResponse){
 8006a20:	0003      	movs	r3, r0
				Rprocess = WSSFM1XRX_RSP_NOMATCH;
 8006a22:	2002      	movs	r0, #2
	if((bool)obj->RxReady){
 8006a24:	2a00      	cmp	r2, #0
 8006a26:	d008      	beq.n	8006a3a <WSSFM1XRX_MatchResponse+0x1e>
			Rprocess = WSSFM1XRX_OK_RESPONSE;
 8006a28:	3001      	adds	r0, #1
		if( NULL != expectedResponse ){
 8006a2a:	2900      	cmp	r1, #0
 8006a2c:	d005      	beq.n	8006a3a <WSSFM1XRX_MatchResponse+0x1e>
			if( NULL != strstr((const char *) obj->RxFrame,(char *)expectedResponse) ) {
 8006a2e:	6918      	ldr	r0, [r3, #16]
 8006a30:	f004 feef 	bl	800b812 <strstr>
			Rprocess = WSSFM1XRX_OK_RESPONSE;
 8006a34:	1e43      	subs	r3, r0, #1
 8006a36:	4198      	sbcs	r0, r3
 8006a38:	3002      	adds	r0, #2
}
 8006a3a:	bd10      	pop	{r4, pc}

08006a3c <WSSFM1XRX_SendRawMessage>:
WSSFM1XRX_Return_t WSSFM1XRX_SendRawMessage(WSSFM1XRXConfig_t *obj,char* Payload,char* ExpectedResponse,char * BuffStr,WSSFM1XRX_WaitMode_t Wait,uint32_t msec){
 8006a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( WSSFM1XRX_IDLE == obj->State_Api ){ /*Firstentry bloqueante o no bloqueante*/
 8006a3e:	0006      	movs	r6, r0
WSSFM1XRX_Return_t WSSFM1XRX_SendRawMessage(WSSFM1XRXConfig_t *obj,char* Payload,char* ExpectedResponse,char * BuffStr,WSSFM1XRX_WaitMode_t Wait,uint32_t msec){
 8006a40:	9201      	str	r2, [sp, #4]
	if( WSSFM1XRX_IDLE == obj->State_Api ){ /*Firstentry bloqueante o no bloqueante*/
 8006a42:	3629      	adds	r6, #41	; 0x29
WSSFM1XRX_Return_t WSSFM1XRX_SendRawMessage(WSSFM1XRXConfig_t *obj,char* Payload,char* ExpectedResponse,char * BuffStr,WSSFM1XRX_WaitMode_t Wait,uint32_t msec){
 8006a44:	001f      	movs	r7, r3
	if( WSSFM1XRX_IDLE == obj->State_Api ){ /*Firstentry bloqueante o no bloqueante*/
 8006a46:	7833      	ldrb	r3, [r6, #0]
WSSFM1XRX_Return_t WSSFM1XRX_SendRawMessage(WSSFM1XRXConfig_t *obj,char* Payload,char* ExpectedResponse,char * BuffStr,WSSFM1XRX_WaitMode_t Wait,uint32_t msec){
 8006a48:	0004      	movs	r4, r0
 8006a4a:	000d      	movs	r5, r1
	if( WSSFM1XRX_IDLE == obj->State_Api ){ /*Firstentry bloqueante o no bloqueante*/
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d118      	bne.n	8006a82 <WSSFM1XRX_SendRawMessage+0x46>
		WSSFM1XRX_ResetObject(obj);
 8006a50:	f7ff fefb 	bl	800684a <WSSFM1XRX_ResetObject>
		if( NULL != Payload ) {
 8006a54:	2d00      	cmp	r5, #0
 8006a56:	d003      	beq.n	8006a60 <WSSFM1XRX_SendRawMessage+0x24>
			WSSFM1XRX_StringTX(obj,Payload);
 8006a58:	0029      	movs	r1, r5
 8006a5a:	0020      	movs	r0, r4
 8006a5c:	f7ff fee8 	bl	8006830 <WSSFM1XRX_StringTX>
		obj->State_Api = WSSFM1XRX_RUNNING;
 8006a60:	2301      	movs	r3, #1
 8006a62:	7033      	strb	r3, [r6, #0]
		if(obj->NumberRetries++ > obj->MaxNumberRetries) {
 8006a64:	0023      	movs	r3, r4
 8006a66:	332a      	adds	r3, #42	; 0x2a
 8006a68:	781a      	ldrb	r2, [r3, #0]
 8006a6a:	1c51      	adds	r1, r2, #1
 8006a6c:	7019      	strb	r1, [r3, #0]
 8006a6e:	0021      	movs	r1, r4
 8006a70:	312b      	adds	r1, #43	; 0x2b
 8006a72:	7809      	ldrb	r1, [r1, #0]
 8006a74:	4291      	cmp	r1, r2
 8006a76:	d204      	bcs.n	8006a82 <WSSFM1XRX_SendRawMessage+0x46>
			obj->NumberRetries = 0;
 8006a78:	2200      	movs	r2, #0
			RetValue = WSSFM1XRX_MAX_RETRIES_REACHED; /* misra c 15.5*/
 8006a7a:	250b      	movs	r5, #11
			obj->NumberRetries = 0;
 8006a7c:	701a      	strb	r2, [r3, #0]
}
 8006a7e:	0028      	movs	r0, r5
 8006a80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 * @brief Function wait for response expected.
 */
static WSSFM1XRX_Return_t WSSFM1XRX_WaitForResponse(WSSFM1XRXConfig_t *obj , char *ExpectedResponse, WSSFM1XRX_WaitMode_t Wait ,uint32_t msec){
	WSSFM1XRX_Return_t retvalue;
    WSSFM1XRX_Return_t retvalueM ;  /*= WSSFM1XRX_NONE;*/
	retvalue =  Wait(obj,msec); /*Return WAITING or TIMEOUT*/
 8006a82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a84:	0020      	movs	r0, r4
 8006a86:	9b08      	ldr	r3, [sp, #32]
 8006a88:	4798      	blx	r3
	retvalueM = WSSFM1XRX_MatchResponse(obj,ExpectedResponse); /*Return Response ok or No match*/
 8006a8a:	9901      	ldr	r1, [sp, #4]
	retvalue =  Wait(obj,msec); /*Return WAITING or TIMEOUT*/
 8006a8c:	0005      	movs	r5, r0
	retvalueM = WSSFM1XRX_MatchResponse(obj,ExpectedResponse); /*Return Response ok or No match*/
 8006a8e:	0020      	movs	r0, r4
 8006a90:	f7ff ffc4 	bl	8006a1c <WSSFM1XRX_MatchResponse>
	return (retvalueM == WSSFM1XRX_OK_RESPONSE)? retvalueM  : retvalue  ;/*Delay NonBlocking or Non-blocking*/
 8006a94:	2803      	cmp	r0, #3
 8006a96:	d012      	beq.n	8006abe <WSSFM1XRX_SendRawMessage+0x82>
	if( (WSSFM1XRX_TIMEOUT == RetValue) || (WSSFM1XRX_OK_RESPONSE == RetValue) ){ /*misra c 12.1*/
 8006a98:	2d00      	cmp	r5, #0
 8006a9a:	d001      	beq.n	8006aa0 <WSSFM1XRX_SendRawMessage+0x64>
 8006a9c:	2d03      	cmp	r5, #3
 8006a9e:	d1ee      	bne.n	8006a7e <WSSFM1XRX_SendRawMessage+0x42>
		if( (uint8_t)SF_TRUE == obj->RxReady ){ /*misra c 14.4*/
 8006aa0:	7d63      	ldrb	r3, [r4, #21]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d108      	bne.n	8006ab8 <WSSFM1XRX_SendRawMessage+0x7c>
			if( NULL != BuffStr ){  /*misra c 15.6*/
 8006aa6:	2f00      	cmp	r7, #0
 8006aa8:	d003      	beq.n	8006ab2 <WSSFM1XRX_SendRawMessage+0x76>
				(void)strcpy(BuffStr, (char*)obj->RxFrame) ; /*misra c 17.7*/
 8006aaa:	6921      	ldr	r1, [r4, #16]
 8006aac:	0038      	movs	r0, r7
 8006aae:	f004 fe83 	bl	800b7b8 <strcpy>
			obj->NumberRetries = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	342a      	adds	r4, #42	; 0x2a
 8006ab6:	7023      	strb	r3, [r4, #0]
		obj->State_Api = WSSFM1XRX_IDLE;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	7033      	strb	r3, [r6, #0]
 8006abc:	e7df      	b.n	8006a7e <WSSFM1XRX_SendRawMessage+0x42>
	return (retvalueM == WSSFM1XRX_OK_RESPONSE)? retvalueM  : retvalue  ;/*Delay NonBlocking or Non-blocking*/
 8006abe:	0005      	movs	r5, r0
 8006ac0:	e7ee      	b.n	8006aa0 <WSSFM1XRX_SendRawMessage+0x64>
	...

08006ac4 <WSSFM1XRX_Sleep>:
WSSFM1XRX_Return_t WSSFM1XRX_Sleep(WSSFM1XRXConfig_t *obj ,WSSFM1XRX_WaitMode_t Wait ){
 8006ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ac6:	0004      	movs	r4, r0
	obj->RST(1);
 8006ac8:	2001      	movs	r0, #1
 8006aca:	6823      	ldr	r3, [r4, #0]
WSSFM1XRX_Return_t WSSFM1XRX_Sleep(WSSFM1XRXConfig_t *obj ,WSSFM1XRX_WaitMode_t Wait ){
 8006acc:	000d      	movs	r5, r1
	obj->RST(1);
 8006ace:	4798      	blx	r3
	obj->WKUP(1);
 8006ad0:	6863      	ldr	r3, [r4, #4]
 8006ad2:	2001      	movs	r0, #1
 8006ad4:	4798      	blx	r3
	return WSSFM1XRX_SendRawMessage(obj,"AT$P=2\r","OK",NULL,Wait,WSSFM1XRX_SLEEP_TIME_DELAY_RESP); 
 8006ad6:	23fa      	movs	r3, #250	; 0xfa
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	9301      	str	r3, [sp, #4]
 8006adc:	9500      	str	r5, [sp, #0]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	4a02      	ldr	r2, [pc, #8]	; (8006aec <WSSFM1XRX_Sleep+0x28>)
 8006ae2:	4903      	ldr	r1, [pc, #12]	; (8006af0 <WSSFM1XRX_Sleep+0x2c>)
 8006ae4:	0020      	movs	r0, r4
 8006ae6:	f7ff ffa9 	bl	8006a3c <WSSFM1XRX_SendRawMessage>
}
 8006aea:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8006aec:	0800c4e3 	.word	0x0800c4e3
 8006af0:	0800c4e6 	.word	0x0800c4e6

08006af4 <WSSFM1XRX_CheckModule>:
	return WSSFM1XRX_SendRawMessage(obj,"AT\r","OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP); 
 8006af4:	23fa      	movs	r3, #250	; 0xfa
WSSFM1XRX_Return_t WSSFM1XRX_CheckModule(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait ){
 8006af6:	b507      	push	{r0, r1, r2, lr}
	return WSSFM1XRX_SendRawMessage(obj,"AT\r","OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP); 
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	9301      	str	r3, [sp, #4]
 8006afc:	9100      	str	r1, [sp, #0]
 8006afe:	2300      	movs	r3, #0
 8006b00:	4a02      	ldr	r2, [pc, #8]	; (8006b0c <WSSFM1XRX_CheckModule+0x18>)
 8006b02:	4903      	ldr	r1, [pc, #12]	; (8006b10 <WSSFM1XRX_CheckModule+0x1c>)
 8006b04:	f7ff ff9a 	bl	8006a3c <WSSFM1XRX_SendRawMessage>
}
 8006b08:	bd0e      	pop	{r1, r2, r3, pc}
 8006b0a:	46c0      	nop			; (mov r8, r8)
 8006b0c:	0800c4e3 	.word	0x0800c4e3
 8006b10:	0800c49e 	.word	0x0800c49e

08006b14 <WSSFM1XRX_AskChannels>:
	RetVal = WSSFM1XRX_SendRawMessage(obj,"AT$GI?\r",NULL,NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP);
 8006b14:	23fa      	movs	r3, #250	; 0xfa
WSSFM1XRX_Return_t WSSFM1XRX_AskChannels(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, WSSFM1XRX_Channels_t *Channels ){
 8006b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
	RetVal = WSSFM1XRX_SendRawMessage(obj,"AT$GI?\r",NULL,NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP);
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	9301      	str	r3, [sp, #4]
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	9100      	str	r1, [sp, #0]
WSSFM1XRX_Return_t WSSFM1XRX_AskChannels(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, WSSFM1XRX_Channels_t *Channels ){
 8006b20:	0015      	movs	r5, r2
	RetVal = WSSFM1XRX_SendRawMessage(obj,"AT$GI?\r",NULL,NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP);
 8006b22:	490b      	ldr	r1, [pc, #44]	; (8006b50 <WSSFM1XRX_AskChannels+0x3c>)
 8006b24:	001a      	movs	r2, r3
WSSFM1XRX_Return_t WSSFM1XRX_AskChannels(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, WSSFM1XRX_Channels_t *Channels ){
 8006b26:	0006      	movs	r6, r0
	RetVal = WSSFM1XRX_SendRawMessage(obj,"AT$GI?\r",NULL,NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP);
 8006b28:	f7ff ff88 	bl	8006a3c <WSSFM1XRX_SendRawMessage>
 8006b2c:	0004      	movs	r4, r0
	if( WSSFM1XRX_OK_RESPONSE == RetVal ){ 
 8006b2e:	2803      	cmp	r0, #3
 8006b30:	d10c      	bne.n	8006b4c <WSSFM1XRX_AskChannels+0x38>
		rspPtr = strchr( ((const char *)obj->RxFrame) , (int)',');
 8006b32:	6936      	ldr	r6, [r6, #16]
 8006b34:	212c      	movs	r1, #44	; 0x2c
 8006b36:	0030      	movs	r0, r6
 8006b38:	f004 fe30 	bl	800b79c <strchr>
		if( NULL != rspPtr ){
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d005      	beq.n	8006b4c <WSSFM1XRX_AskChannels+0x38>
			Channels->x = (uint8_t)obj->RxFrame[0]- (uint8_t)'0';/* (*(rspPtr-1))-(uint8_t)'0';*/ /*non compliant misra c 18.4*/
 8006b40:	7833      	ldrb	r3, [r6, #0]
 8006b42:	3b30      	subs	r3, #48	; 0x30
 8006b44:	702b      	strb	r3, [r5, #0]
			Channels->y = (uint8_t)obj->RxFrame[2] -(uint8_t)'0' ;  /* (*(rspPtr+1))-(uint8_t)'0';  */
 8006b46:	78b3      	ldrb	r3, [r6, #2]
 8006b48:	3b30      	subs	r3, #48	; 0x30
 8006b4a:	706b      	strb	r3, [r5, #1]
}
 8006b4c:	0020      	movs	r0, r4
 8006b4e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8006b50:	0800c48e 	.word	0x0800c48e

08006b54 <WSSFM1XRX_CheckChannels>:
	WSSFM1XRX_Channels_t Channels ={0,0};
 8006b54:	2300      	movs	r3, #0
WSSFM1XRX_Return_t WSSFM1XRX_CheckChannels(WSSFM1XRXConfig_t *obj, WSSFM1XRX_WaitMode_t Wait ){
 8006b56:	b513      	push	{r0, r1, r4, lr}
	WSSFM1XRX_Channels_t Channels ={0,0};
 8006b58:	ac01      	add	r4, sp, #4
	retval = WSSFM1XRX_AskChannels(obj,Wait,&Channels);
 8006b5a:	0022      	movs	r2, r4
	WSSFM1XRX_Channels_t Channels ={0,0};
 8006b5c:	8023      	strh	r3, [r4, #0]
	retval = WSSFM1XRX_AskChannels(obj,Wait,&Channels);
 8006b5e:	f7ff ffd9 	bl	8006b14 <WSSFM1XRX_AskChannels>
	if( WSSFM1XRX_OK_RESPONSE == retval ){
 8006b62:	2803      	cmp	r0, #3
 8006b64:	d107      	bne.n	8006b76 <WSSFM1XRX_CheckChannels+0x22>
		retval = ( (Channels.x == (uint8_t)0) || (Channels.y < (uint8_t)3 )) ? WSSFM1XRX_CHANN_NO_OK : WSSFM1XRX_CHANN_OK;
 8006b66:	7823      	ldrb	r3, [r4, #0]
 8006b68:	3005      	adds	r0, #5
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <WSSFM1XRX_CheckChannels+0x22>
 8006b6e:	7863      	ldrb	r3, [r4, #1]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d900      	bls.n	8006b76 <WSSFM1XRX_CheckChannels+0x22>
 8006b74:	3801      	subs	r0, #1
}
 8006b76:	bd16      	pop	{r1, r2, r4, pc}

08006b78 <WSSFM1XRX_ResetChannels>:
	return WSSFM1XRX_SendRawMessage(obj,"AT$RC\r","OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP); 
 8006b78:	23fa      	movs	r3, #250	; 0xfa
WSSFM1XRX_Return_t WSSFM1XRX_ResetChannels(WSSFM1XRXConfig_t *obj, WSSFM1XRX_WaitMode_t Wait ){
 8006b7a:	b507      	push	{r0, r1, r2, lr}
	return WSSFM1XRX_SendRawMessage(obj,"AT$RC\r","OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP); 
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	9301      	str	r3, [sp, #4]
 8006b80:	9100      	str	r1, [sp, #0]
 8006b82:	2300      	movs	r3, #0
 8006b84:	4a02      	ldr	r2, [pc, #8]	; (8006b90 <WSSFM1XRX_ResetChannels+0x18>)
 8006b86:	4903      	ldr	r1, [pc, #12]	; (8006b94 <WSSFM1XRX_ResetChannels+0x1c>)
 8006b88:	f7ff ff58 	bl	8006a3c <WSSFM1XRX_SendRawMessage>
}
 8006b8c:	bd0e      	pop	{r1, r2, r3, pc}
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	0800c4e3 	.word	0x0800c4e3
 8006b94:	0800c4d5 	.word	0x0800c4d5

08006b98 <WSSFM1XRX_ChangeFrequencyUL>:
	return WSSFM1XRX_SendRawMessage(obj, 
 8006b98:	23fa      	movs	r3, #250	; 0xfa
WSSFM1XRX_Return_t WSSFM1XRX_ChangeFrequencyUL(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait , WSSFM1XRX_FreqUL_t Frequency){	
 8006b9a:	b513      	push	{r0, r1, r4, lr}
	return WSSFM1XRX_SendRawMessage(obj, 
 8006b9c:	9100      	str	r1, [sp, #0]
 8006b9e:	4905      	ldr	r1, [pc, #20]	; (8006bb4 <WSSFM1XRX_ChangeFrequencyUL+0x1c>)
 8006ba0:	0094      	lsls	r4, r2, #2
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	9301      	str	r3, [sp, #4]
 8006ba6:	4a04      	ldr	r2, [pc, #16]	; (8006bb8 <WSSFM1XRX_ChangeFrequencyUL+0x20>)
 8006ba8:	2300      	movs	r3, #0
 8006baa:	5861      	ldr	r1, [r4, r1]
 8006bac:	f7ff ff46 	bl	8006a3c <WSSFM1XRX_SendRawMessage>
}
 8006bb0:	bd16      	pop	{r1, r2, r4, pc}
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	0800c4f0 	.word	0x0800c4f0
 8006bb8:	0800c4e3 	.word	0x0800c4e3

08006bbc <WSSFM1XRX_ChangeFrequencyDL>:
	return WSSFM1XRX_SendRawMessage(obj, (char *)WSSFM1XRX_DL_FREQUENCIES[Frequency]  ,"OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP);
 8006bbc:	23fa      	movs	r3, #250	; 0xfa
WSSFM1XRX_Return_t WSSFM1XRX_ChangeFrequencyDL(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait , WSSFM1XRX_FreqUL_t Frequency){
 8006bbe:	b513      	push	{r0, r1, r4, lr}
	return WSSFM1XRX_SendRawMessage(obj, (char *)WSSFM1XRX_DL_FREQUENCIES[Frequency]  ,"OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP);
 8006bc0:	9100      	str	r1, [sp, #0]
 8006bc2:	4905      	ldr	r1, [pc, #20]	; (8006bd8 <WSSFM1XRX_ChangeFrequencyDL+0x1c>)
 8006bc4:	0094      	lsls	r4, r2, #2
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	4a04      	ldr	r2, [pc, #16]	; (8006bdc <WSSFM1XRX_ChangeFrequencyDL+0x20>)
 8006bcc:	2300      	movs	r3, #0
 8006bce:	5861      	ldr	r1, [r4, r1]
 8006bd0:	f7ff ff34 	bl	8006a3c <WSSFM1XRX_SendRawMessage>
}
 8006bd4:	bd16      	pop	{r1, r2, r4, pc}
 8006bd6:	46c0      	nop			; (mov r8, r8)
 8006bd8:	0800c4a4 	.word	0x0800c4a4
 8006bdc:	0800c4e3 	.word	0x0800c4e3

08006be0 <WSSFM1XRX_SaveParameters>:
	return WSSFM1XRX_SendRawMessage(obj,"AT$WR\r","OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP); 
 8006be0:	23fa      	movs	r3, #250	; 0xfa
WSSFM1XRX_Return_t WSSFM1XRX_SaveParameters(WSSFM1XRXConfig_t *obj, WSSFM1XRX_WaitMode_t Wait ){
 8006be2:	b507      	push	{r0, r1, r2, lr}
	return WSSFM1XRX_SendRawMessage(obj,"AT$WR\r","OK",NULL,Wait,WSSFM1XRX_GENERAL_TIME_DELAY_RESP); 
 8006be4:	011b      	lsls	r3, r3, #4
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	9100      	str	r1, [sp, #0]
 8006bea:	2300      	movs	r3, #0
 8006bec:	4a02      	ldr	r2, [pc, #8]	; (8006bf8 <WSSFM1XRX_SaveParameters+0x18>)
 8006bee:	4903      	ldr	r1, [pc, #12]	; (8006bfc <WSSFM1XRX_SaveParameters+0x1c>)
 8006bf0:	f7ff ff24 	bl	8006a3c <WSSFM1XRX_SendRawMessage>
}
 8006bf4:	bd0e      	pop	{r1, r2, r3, pc}
 8006bf6:	46c0      	nop			; (mov r8, r8)
 8006bf8:	0800c4e3 	.word	0x0800c4e3
 8006bfc:	0800c4dc 	.word	0x0800c4dc

08006c00 <DL_DiscriminateDownLink>:
WSSFM1XRX_DL_Return_t DL_DiscriminateDownLink(WSSFM1XRXConfig_t* obj){
 8006c00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c02:	0005      	movs	r5, r0
	uint8_t byteStr[WSSFM1XRX_DL_BYTE_SIZE + 1] = {0};
 8006c04:	2203      	movs	r2, #3
 8006c06:	2100      	movs	r1, #0
 8006c08:	a801      	add	r0, sp, #4
 8006c0a:	f004 fd9e 	bl	800b74a <memset>
	payLoadHead = (uint8_t *)strstr((const char*)obj->RxFrame, "RX");
 8006c0e:	4915      	ldr	r1, [pc, #84]	; (8006c64 <DL_DiscriminateDownLink+0x64>)
 8006c10:	6928      	ldr	r0, [r5, #16]
 8006c12:	f004 fdfe 	bl	800b812 <strstr>
		return WSSFM1XRX_DL_HEAD_ERROR;
 8006c16:	2301      	movs	r3, #1
	payLoadHead = (uint8_t *)strstr((const char*)obj->RxFrame, "RX");
 8006c18:	1e04      	subs	r4, r0, #0
	if(NULL == payLoadHead){
 8006c1a:	d020      	beq.n	8006c5e <DL_DiscriminateDownLink+0x5e>
	payLoadTail = (uint8_t *)strstr((const char*)payLoadHead, "\r");
 8006c1c:	210d      	movs	r1, #13
 8006c1e:	f004 fdbd 	bl	800b79c <strchr>
		return WSSFM1XRX_DL_TAIL_ERROR;
 8006c22:	2302      	movs	r3, #2
	if(NULL == payLoadTail){
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d01a      	beq.n	8006c5e <DL_DiscriminateDownLink+0x5e>
    payLoadTail[1] = (uint8_t)'\0';
 8006c28:	2300      	movs	r3, #0
 8006c2a:	7043      	strb	r3, [r0, #1]
	if( WSSFM1XRX_DL_PAYLOAD_LENGTH != (strlen((const char *)payLoadHead) - 1u) ){ /*probar*/
 8006c2c:	0020      	movs	r0, r4
 8006c2e:	f7f9 fa6b 	bl	8000108 <strlen>
		return WSSFM1XRX_DL_LENGTH_ERROR;
 8006c32:	2303      	movs	r3, #3
	if( WSSFM1XRX_DL_PAYLOAD_LENGTH != (strlen((const char *)payLoadHead) - 1u) ){ /*probar*/
 8006c34:	281b      	cmp	r0, #27
 8006c36:	d112      	bne.n	8006c5e <DL_DiscriminateDownLink+0x5e>
 8006c38:	18e6      	adds	r6, r4, r3
 8006c3a:	3520      	adds	r5, #32
 8006c3c:	341b      	adds	r4, #27
		(void)strncpy((char *)byteStr, (const char *)&payLoadHead[byteIndex], WSSFM1XRX_DL_BYTE_SIZE);/*probar*/
 8006c3e:	0031      	movs	r1, r6
 8006c40:	2202      	movs	r2, #2
 8006c42:	a801      	add	r0, sp, #4
 8006c44:	f004 fdd1 	bl	800b7ea <strncpy>
		obj->DL_NumericFrame[i] = (uint8_t)strtol((const char *)byteStr, NULL, 16);
 8006c48:	2210      	movs	r2, #16
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	a801      	add	r0, sp, #4
 8006c4e:	f004 fe7b 	bl	800b948 <strtol>
 8006c52:	3603      	adds	r6, #3
 8006c54:	7028      	strb	r0, [r5, #0]
 8006c56:	3501      	adds	r5, #1
	for( i = 0; i < (uint8_t)WSSFM1XRX_DL_PAYLOAD_SYZE; i++){
 8006c58:	42a6      	cmp	r6, r4
 8006c5a:	d1f0      	bne.n	8006c3e <DL_DiscriminateDownLink+0x3e>
		RetValue = WSSFM1XRX_DL_SUCCESS;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	0018      	movs	r0, r3
 8006c60:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	0800c48b 	.word	0x0800c48b

08006c68 <NibbletoX>:
/*Nible(4bits) decimal to hex string***/

char NibbletoX(uint8_t value){
	char ch;
    uint8_t c_h;
	c_h = (value & (uint8_t)0x0Fu) + (uint8_t)'0' ;
 8006c68:	230f      	movs	r3, #15
 8006c6a:	4003      	ands	r3, r0
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	3030      	adds	r0, #48	; 0x30
    ch = (char)c_h;
	return (ch > (char)'9')? (ch + 7) : ch;
 8006c70:	2839      	cmp	r0, #57	; 0x39
 8006c72:	d901      	bls.n	8006c78 <NibbletoX+0x10>
 8006c74:	3337      	adds	r3, #55	; 0x37
 8006c76:	0018      	movs	r0, r3
}
 8006c78:	4770      	bx	lr
	...

08006c7c <WSSFM1XRX_SendMessage>:
WSSFM1XRX_Return_t WSSFM1XRX_SendMessage(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, void* data, void * CopyDataTx, uint8_t size, uint8_t eDownlink){
 8006c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c7e:	b095      	sub	sp, #84	; 0x54
 8006c80:	9303      	str	r3, [sp, #12]
 8006c82:	ab1a      	add	r3, sp, #104	; 0x68
 8006c84:	781c      	ldrb	r4, [r3, #0]
 8006c86:	ab1b      	add	r3, sp, #108	; 0x6c
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	9107      	str	r1, [sp, #28]
 8006c8c:	9304      	str	r3, [sp, #16]
	uint8_t slen = ((uint8_t)2*size) + (uint8_t)6; /*misra c 10.4 & 12.1*/
 8006c8e:	1ce3      	adds	r3, r4, #3
 8006c90:	005b      	lsls	r3, r3, #1
WSSFM1XRX_Return_t WSSFM1XRX_SendMessage(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, void* data, void * CopyDataTx, uint8_t size, uint8_t eDownlink){
 8006c92:	9208      	str	r2, [sp, #32]
	char UplinkPayload[WSSFM1XRX_MAX_DATA_SIZE_WITH_DL] = "AT$SF="; /*max length frame with downlink*/
 8006c94:	4939      	ldr	r1, [pc, #228]	; (8006d7c <WSSFM1XRX_SendMessage+0x100>)
 8006c96:	2207      	movs	r2, #7
WSSFM1XRX_Return_t WSSFM1XRX_SendMessage(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, void* data, void * CopyDataTx, uint8_t size, uint8_t eDownlink){
 8006c98:	0006      	movs	r6, r0
	char UplinkPayload[WSSFM1XRX_MAX_DATA_SIZE_WITH_DL] = "AT$SF="; /*max length frame with downlink*/
 8006c9a:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t slen = ((uint8_t)2*size) + (uint8_t)6; /*misra c 10.4 & 12.1*/
 8006c9c:	b2df      	uxtb	r7, r3
	char UplinkPayload[WSSFM1XRX_MAX_DATA_SIZE_WITH_DL] = "AT$SF="; /*max length frame with downlink*/
 8006c9e:	f004 fd4b 	bl	800b738 <memcpy>
 8006ca2:	200f      	movs	r0, #15
 8006ca4:	ab08      	add	r3, sp, #32
 8006ca6:	18c0      	adds	r0, r0, r3
 8006ca8:	221e      	movs	r2, #30
 8006caa:	2100      	movs	r1, #0
 8006cac:	f004 fd4d 	bl	800b74a <memset>
	sizecopy = (sizecopy > (uint8_t)WSSFM1XRX_MAX_BYTE_TX_FRAME )? (uint8_t)WSSFM1XRX_MAX_BYTE_TX_FRAME : sizecopy;
 8006cb0:	1c23      	adds	r3, r4, #0
 8006cb2:	2c0c      	cmp	r4, #12
 8006cb4:	d900      	bls.n	8006cb8 <WSSFM1XRX_SendMessage+0x3c>
 8006cb6:	230c      	movs	r3, #12
	str[finalsize]='\0';
 8006cb8:	250e      	movs	r5, #14
	sizecopy = (sizecopy > (uint8_t)WSSFM1XRX_MAX_BYTE_TX_FRAME )? (uint8_t)WSSFM1XRX_MAX_BYTE_TX_FRAME : sizecopy;
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	9202      	str	r2, [sp, #8]
	str[finalsize]='\0';
 8006cbe:	aa08      	add	r2, sp, #32
 8006cc0:	18ad      	adds	r5, r5, r2
 8006cc2:	2200      	movs	r2, #0
	finalsize = sizecopy*((uint8_t)2);
 8006cc4:	005b      	lsls	r3, r3, #1
	str[finalsize]='\0';
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	18eb      	adds	r3, r5, r3
 8006cca:	701a      	strb	r2, [r3, #0]
	for(i = ((int8_t)sizecopy-1) ; i >= 0; i--){   /*misra 10.4 */
 8006ccc:	9b02      	ldr	r3, [sp, #8]
 8006cce:	9a02      	ldr	r2, [sp, #8]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	327f      	adds	r2, #127	; 0x7f
 8006cd4:	b25b      	sxtb	r3, r3
 8006cd6:	9209      	str	r2, [sp, #36]	; 0x24
		str[j++]=NibbletoX(xbyte>>4);
 8006cd8:	9505      	str	r5, [sp, #20]
 8006cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cdc:	b2dd      	uxtb	r5, r3
 8006cde:	1b54      	subs	r4, r2, r5
 8006ce0:	0064      	lsls	r4, r4, #1
 8006ce2:	b262      	sxtb	r2, r4
 8006ce4:	9206      	str	r2, [sp, #24]
	for(i = ((int8_t)sizecopy-1) ; i >= 0; i--){   /*misra 10.4 */
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	d12f      	bne.n	8006d4a <WSSFM1XRX_SendMessage+0xce>
	if(( WSSFM1XRX_IDLE == obj->State_Api )) {
 8006cea:	0033      	movs	r3, r6
 8006cec:	3329      	adds	r3, #41	; 0x29
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <WSSFM1XRX_SendMessage+0x7c>
		obj->DownLink = eDownlink;	/*misra c 15.6*/
 8006cf4:	9b04      	ldr	r3, [sp, #16]
 8006cf6:	7673      	strb	r3, [r6, #25]
	if( (uint8_t)SF_TRUE == obj->DownLink){ /*misra c 14.4*/
 8006cf8:	7e73      	ldrb	r3, [r6, #25]
 8006cfa:	ac0a      	add	r4, sp, #40	; 0x28
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d139      	bne.n	8006d74 <WSSFM1XRX_SendMessage+0xf8>
		UplinkPayload[slen]='1';
 8006d00:	2231      	movs	r2, #49	; 0x31
		UplinkPayload[slen]=',';
 8006d02:	332b      	adds	r3, #43	; 0x2b
 8006d04:	55e3      	strb	r3, [r4, r7]
		slen++;						/*misra c 13.3*/
 8006d06:	1c7b      	adds	r3, r7, #1
		UplinkPayload[slen]='1';
 8006d08:	b2db      	uxtb	r3, r3
		slen++;
 8006d0a:	3702      	adds	r7, #2
		UplinkPayload[slen]='1';
 8006d0c:	54e2      	strb	r2, [r4, r3]
		UplinkPayload[slen]='\r';
 8006d0e:	b2fb      	uxtb	r3, r7
 8006d10:	3a24      	subs	r2, #36	; 0x24
 8006d12:	54e2      	strb	r2, [r4, r3]
	timeWait = (bool)eDownlink ? (uint32_t)WSSFM1XRX_DL_TIMEOUT : (uint32_t)WSSFM1XRX_SEND_MESSAGE_TIME_DELAY_RESP; /*WSSFM1XRX_DL_TIMEOUT*/
 8006d14:	9d04      	ldr	r5, [sp, #16]
 8006d16:	426b      	negs	r3, r5
 8006d18:	415d      	adcs	r5, r3
 8006d1a:	4b19      	ldr	r3, [pc, #100]	; (8006d80 <WSSFM1XRX_SendMessage+0x104>)
 8006d1c:	426d      	negs	r5, r5
 8006d1e:	401d      	ands	r5, r3
 8006d20:	4b18      	ldr	r3, [pc, #96]	; (8006d84 <WSSFM1XRX_SendMessage+0x108>)
 8006d22:	18ed      	adds	r5, r5, r3
	if( NULL != CopyDataTx ) {
 8006d24:	9b03      	ldr	r3, [sp, #12]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d004      	beq.n	8006d34 <WSSFM1XRX_SendMessage+0xb8>
		(void)memcpy(CopyDataTx,UplinkPayload,WSSFM1XRX_MAX_DATA_SIZE_WITH_DL);
 8006d2a:	2225      	movs	r2, #37	; 0x25
 8006d2c:	0021      	movs	r1, r4
 8006d2e:	0018      	movs	r0, r3
 8006d30:	f004 fd02 	bl	800b738 <memcpy>
	return WSSFM1XRX_SendRawMessage(obj, UplinkPayload, "OK", NULL, Wait, timeWait);
 8006d34:	9b07      	ldr	r3, [sp, #28]
 8006d36:	9501      	str	r5, [sp, #4]
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <WSSFM1XRX_SendMessage+0x10c>)
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	0021      	movs	r1, r4
 8006d40:	0030      	movs	r0, r6
 8006d42:	f7ff fe7b 	bl	8006a3c <WSSFM1XRX_SendRawMessage>
}
 8006d46:	b015      	add	sp, #84	; 0x54
 8006d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xbyte = bdata[i];
 8006d4a:	9a08      	ldr	r2, [sp, #32]
 8006d4c:	5cd4      	ldrb	r4, [r2, r3]
		str[j++]=NibbletoX(xbyte>>4);
 8006d4e:	0920      	lsrs	r0, r4, #4
 8006d50:	f7ff ff8a 	bl	8006c68 <NibbletoX>
 8006d54:	9b05      	ldr	r3, [sp, #20]
 8006d56:	9a06      	ldr	r2, [sp, #24]
 8006d58:	5498      	strb	r0, [r3, r2]
		str[j++]=NibbletoX(xbyte);
 8006d5a:	0020      	movs	r0, r4
 8006d5c:	f7ff ff84 	bl	8006c68 <NibbletoX>
 8006d60:	9b02      	ldr	r3, [sp, #8]
 8006d62:	9a05      	ldr	r2, [sp, #20]
 8006d64:	1b5b      	subs	r3, r3, r5
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b25b      	sxtb	r3, r3
	for(i = ((int8_t)sizecopy-1) ; i >= 0; i--){   /*misra 10.4 */
 8006d6c:	3d01      	subs	r5, #1
		str[j++]=NibbletoX(xbyte);
 8006d6e:	54d0      	strb	r0, [r2, r3]
	for(i = ((int8_t)sizecopy-1) ; i >= 0; i--){   /*misra 10.4 */
 8006d70:	b26b      	sxtb	r3, r5
 8006d72:	e7b2      	b.n	8006cda <WSSFM1XRX_SendMessage+0x5e>
		UplinkPayload[slen]='\r';
 8006d74:	230d      	movs	r3, #13
 8006d76:	55e3      	strb	r3, [r4, r7]
 8006d78:	e7cc      	b.n	8006d14 <WSSFM1XRX_SendMessage+0x98>
 8006d7a:	46c0      	nop			; (mov r8, r8)
 8006d7c:	0800c15c 	.word	0x0800c15c
 8006d80:	ffff2d10 	.word	0xffff2d10
 8006d84:	0000ea60 	.word	0x0000ea60
 8006d88:	0800c4e3 	.word	0x0800c4e3

08006d8c <WSSFM1XRX_GetRespNoexpected>:
 * 
 * @return Operation result in the form WSSFM1XRX_DL_Return_t.
 *
 * @Note : use only if not response expected
 */
WSSFM1XRX_Return_t WSSFM1XRX_GetRespNoexpected(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, char * CommandStr, char *BuffStr){
 8006d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	WSSFM1XRX_Return_t RetValue;
    bool RxReady_nonvolatile; /* asignar obj->ready no actualiza en test*/

	if( ( WSSFM1XRX_IDLE == obj->State_Api ) ) { /*Firstentry block or Nonblocking*/
 8006d8e:	0005      	movs	r5, r0
WSSFM1XRX_Return_t WSSFM1XRX_GetRespNoexpected(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, char * CommandStr, char *BuffStr){
 8006d90:	9201      	str	r2, [sp, #4]
	if( ( WSSFM1XRX_IDLE == obj->State_Api ) ) { /*Firstentry block or Nonblocking*/
 8006d92:	3529      	adds	r5, #41	; 0x29
WSSFM1XRX_Return_t WSSFM1XRX_GetRespNoexpected(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, char * CommandStr, char *BuffStr){
 8006d94:	001e      	movs	r6, r3
	if( ( WSSFM1XRX_IDLE == obj->State_Api ) ) { /*Firstentry block or Nonblocking*/
 8006d96:	782b      	ldrb	r3, [r5, #0]
WSSFM1XRX_Return_t WSSFM1XRX_GetRespNoexpected(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, char * CommandStr, char *BuffStr){
 8006d98:	0004      	movs	r4, r0
 8006d9a:	000f      	movs	r7, r1
	if( ( WSSFM1XRX_IDLE == obj->State_Api ) ) { /*Firstentry block or Nonblocking*/
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d107      	bne.n	8006db0 <WSSFM1XRX_GetRespNoexpected+0x24>
		WSSFM1XRX_ResetObject(obj);
 8006da0:	f7ff fd53 	bl	800684a <WSSFM1XRX_ResetObject>
		WSSFM1XRX_StringTX(obj,CommandStr);
 8006da4:	9901      	ldr	r1, [sp, #4]
 8006da6:	0020      	movs	r0, r4
 8006da8:	f7ff fd42 	bl	8006830 <WSSFM1XRX_StringTX>
		obj->State_Api = WSSFM1XRX_RUNNING;
 8006dac:	2301      	movs	r3, #1
 8006dae:	702b      	strb	r3, [r5, #0]
	}
	RetValue = Wait(obj,WSSFM1XRX_GENERAL_TIME_DELAY_RESP) ;
 8006db0:	21fa      	movs	r1, #250	; 0xfa
 8006db2:	0020      	movs	r0, r4
 8006db4:	0109      	lsls	r1, r1, #4
 8006db6:	47b8      	blx	r7
	RxReady_nonvolatile = (bool)obj->RxReady; /*corrige regla misra c - no colocar en inicializar*/
 8006db8:	7d63      	ldrb	r3, [r4, #21]
	RetValue = Wait(obj,WSSFM1XRX_GENERAL_TIME_DELAY_RESP) ;
 8006dba:	0007      	movs	r7, r0
	RxReady_nonvolatile = (bool)obj->RxReady; /*corrige regla misra c - no colocar en inicializar*/
 8006dbc:	b2db      	uxtb	r3, r3
	
	if( (WSSFM1XRX_TIMEOUT == RetValue) || ((RetValue == WSSFM1XRX_WAITING) && ( RxReady_nonvolatile )  ) ){
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d005      	beq.n	8006dce <WSSFM1XRX_GetRespNoexpected+0x42>
 8006dc2:	2801      	cmp	r0, #1
 8006dc4:	d101      	bne.n	8006dca <WSSFM1XRX_GetRespNoexpected+0x3e>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d104      	bne.n	8006dd4 <WSSFM1XRX_GetRespNoexpected+0x48>
            RetValue = WSSFM1XRX_FAILURE;
        }
		obj->State_Api = WSSFM1XRX_IDLE;
	}
	return RetValue;
}
 8006dca:	0038      	movs	r0, r7
 8006dcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            RetValue = WSSFM1XRX_FAILURE;
 8006dce:	270a      	movs	r7, #10
		if( RxReady_nonvolatile ){  
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d006      	beq.n	8006de2 <WSSFM1XRX_GetRespNoexpected+0x56>
			RetValue = WSSFM1XRX_OK_RESPONSE;
 8006dd4:	2703      	movs	r7, #3
            if( NULL != BuffStr ) {
 8006dd6:	2e00      	cmp	r6, #0
 8006dd8:	d003      	beq.n	8006de2 <WSSFM1XRX_GetRespNoexpected+0x56>
            	(void)strcpy((char*)BuffStr, (char*)obj->RxFrame) ; /*frame stored in RxFrame*/ 
 8006dda:	6921      	ldr	r1, [r4, #16]
 8006ddc:	0030      	movs	r0, r6
 8006dde:	f004 fceb 	bl	800b7b8 <strcpy>
		obj->State_Api = WSSFM1XRX_IDLE;
 8006de2:	2300      	movs	r3, #0
 8006de4:	702b      	strb	r3, [r5, #0]
 8006de6:	e7f0      	b.n	8006dca <WSSFM1XRX_GetRespNoexpected+0x3e>

08006de8 <WSSFM1XRX_GetID>:
WSSFM1XRX_Return_t WSSFM1XRX_GetID(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait,char *IDStr){
 8006de8:	b510      	push	{r4, lr}
 8006dea:	0013      	movs	r3, r2
	return 	WSSFM1XRX_GetRespNoexpected(obj,Wait,"AT$I=10\r",IDStr);
 8006dec:	4a01      	ldr	r2, [pc, #4]	; (8006df4 <WSSFM1XRX_GetID+0xc>)
 8006dee:	f7ff ffcd 	bl	8006d8c <WSSFM1XRX_GetRespNoexpected>
}
 8006df2:	bd10      	pop	{r4, pc}
 8006df4:	0800c4bc 	.word	0x0800c4bc

08006df8 <WSSFM1XRX_GetPAC>:
WSSFM1XRX_Return_t WSSFM1XRX_GetPAC(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait,char *PACStr ){
 8006df8:	b510      	push	{r4, lr}
 8006dfa:	0013      	movs	r3, r2
	return 	WSSFM1XRX_GetRespNoexpected(obj,Wait,"AT$I=11\r",PACStr);
 8006dfc:	4a01      	ldr	r2, [pc, #4]	; (8006e04 <WSSFM1XRX_GetPAC+0xc>)
 8006dfe:	f7ff ffc5 	bl	8006d8c <WSSFM1XRX_GetRespNoexpected>
}
 8006e02:	bd10      	pop	{r4, pc}
 8006e04:	0800c4c5 	.word	0x0800c4c5

08006e08 <WSSFM1XRX_GetVoltage>:
	char *ptr = NULL;
 8006e08:	2300      	movs	r3, #0
WSSFM1XRX_Return_t WSSFM1XRX_GetVoltage(WSSFM1XRXConfig_t *obj, WSSFM1XRX_WaitMode_t Wait,uint16_t *mVolt ){
 8006e0a:	b530      	push	{r4, r5, lr}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	0015      	movs	r5, r2
	char *ptr = NULL;
 8006e10:	9300      	str	r3, [sp, #0]
	RetValue =	WSSFM1XRX_GetRespNoexpected(obj,Wait,"AT$V?\r",mVolStr);
 8006e12:	4a07      	ldr	r2, [pc, #28]	; (8006e30 <WSSFM1XRX_GetVoltage+0x28>)
 8006e14:	ab01      	add	r3, sp, #4
 8006e16:	f7ff ffb9 	bl	8006d8c <WSSFM1XRX_GetRespNoexpected>
	*mVolt = (uint16_t)strtol(mVolStr , &ptr ,BASE_DECIMAL);
 8006e1a:	220a      	movs	r2, #10
	RetValue =	WSSFM1XRX_GetRespNoexpected(obj,Wait,"AT$V?\r",mVolStr);
 8006e1c:	0004      	movs	r4, r0
	*mVolt = (uint16_t)strtol(mVolStr , &ptr ,BASE_DECIMAL);
 8006e1e:	4669      	mov	r1, sp
 8006e20:	a801      	add	r0, sp, #4
 8006e22:	f004 fd91 	bl	800b948 <strtol>
 8006e26:	8028      	strh	r0, [r5, #0]
}
 8006e28:	0020      	movs	r0, r4
 8006e2a:	b005      	add	sp, #20
 8006e2c:	bd30      	pop	{r4, r5, pc}
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	0800c4ce 	.word	0x0800c4ce

08006e34 <WSSFM1XRX_AskFrequencyUL>:
WSSFM1XRX_Return_t WSSFM1XRX_AskFrequencyUL(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, WSSFM1XRX_FreqUL_t *Frequency ){
 8006e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e36:	0004      	movs	r4, r0
 8006e38:	000d      	movs	r5, r1
 8006e3a:	b085      	sub	sp, #20
	uint8_t FreqStr[11] = {(uint8_t)'\0'}; /*misra c 12.3*/
 8006e3c:	2100      	movs	r1, #0
WSSFM1XRX_Return_t WSSFM1XRX_AskFrequencyUL(WSSFM1XRXConfig_t *obj,WSSFM1XRX_WaitMode_t Wait, WSSFM1XRX_FreqUL_t *Frequency ){
 8006e3e:	0017      	movs	r7, r2
	uint8_t FreqStr[11] = {(uint8_t)'\0'}; /*misra c 12.3*/
 8006e40:	a801      	add	r0, sp, #4
 8006e42:	220b      	movs	r2, #11
 8006e44:	f004 fc81 	bl	800b74a <memset>
	RetValue =	WSSFM1XRX_GetRespNoexpected(obj,Wait,"AT$IF?\r",(char*)FreqStr);
 8006e48:	ab01      	add	r3, sp, #4
 8006e4a:	4a0e      	ldr	r2, [pc, #56]	; (8006e84 <WSSFM1XRX_AskFrequencyUL+0x50>)
 8006e4c:	0029      	movs	r1, r5
 8006e4e:	0020      	movs	r0, r4
 8006e50:	f7ff ff9c 	bl	8006d8c <WSSFM1XRX_GetRespNoexpected>
 8006e54:	0006      	movs	r6, r0
	if( strlen((char*)FreqStr) >= 9 ){  /*length frequency incomming*/
 8006e56:	a801      	add	r0, sp, #4
 8006e58:	f7f9 f956 	bl	8000108 <strlen>
 8006e5c:	2808      	cmp	r0, #8
 8006e5e:	d90e      	bls.n	8006e7e <WSSFM1XRX_AskFrequencyUL+0x4a>
 8006e60:	2400      	movs	r4, #0
			if( NULL != strstr(WSSFM1XRX_UL_FREQUENCIES[i], (const char*)FreqStr) ){
 8006e62:	4a09      	ldr	r2, [pc, #36]	; (8006e88 <WSSFM1XRX_AskFrequencyUL+0x54>)
 8006e64:	00a3      	lsls	r3, r4, #2
 8006e66:	a901      	add	r1, sp, #4
 8006e68:	5898      	ldr	r0, [r3, r2]
 8006e6a:	b2e5      	uxtb	r5, r4
 8006e6c:	f004 fcd1 	bl	800b812 <strstr>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d103      	bne.n	8006e7c <WSSFM1XRX_AskFrequencyUL+0x48>
 8006e74:	3401      	adds	r4, #1
		for(i = 0; i< (uint8_t)6; i++) { /*misra c 10.4*/
 8006e76:	2c06      	cmp	r4, #6
 8006e78:	d1f3      	bne.n	8006e62 <WSSFM1XRX_AskFrequencyUL+0x2e>
 8006e7a:	0025      	movs	r5, r4
		*Frequency = (WSSFM1XRX_FreqUL_t)i;
 8006e7c:	703d      	strb	r5, [r7, #0]
}
 8006e7e:	0030      	movs	r0, r6
 8006e80:	b005      	add	sp, #20
 8006e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e84:	0800c496 	.word	0x0800c496
 8006e88:	0800c4f0 	.word	0x0800c4f0

08006e8c <SHT30_Init>:
 **********************************************************************************/

#include <sht30.h>

void SHT30_Init(SHT30_t *obj, SHT30_Write_Fcn_t Write, SHT30_Read_Fcn_t Read, uint8_t Addres_Device){
	obj->Private.Write = Write;
 8006e8c:	6001      	str	r1, [r0, #0]
	obj->Private.Read = Read;
 8006e8e:	6042      	str	r2, [r0, #4]
	obj->Private.Address = Addres_Device;
 8006e90:	7203      	strb	r3, [r0, #8]
}
 8006e92:	4770      	bx	lr

08006e94 <SHT30_Write>:

void SHT30_Write(SHT30_t *obj, uint16_t Reg){
 8006e94:	0002      	movs	r2, r0
 8006e96:	b513      	push	{r0, r1, r4, lr}
  uint8_t buffer[2];
  
  buffer[0] = (uint8_t)(Reg>>8);
 8006e98:	0a08      	lsrs	r0, r1, #8
 8006e9a:	ab01      	add	r3, sp, #4
  buffer[1] = (uint8_t)(Reg & 0x00ff);
 8006e9c:	7059      	strb	r1, [r3, #1]
  buffer[0] = (uint8_t)(Reg>>8);
 8006e9e:	7018      	strb	r0, [r3, #0]
  obj->Private.Write(obj->Private.Address, (void*)buffer, SHT30_SIZE_REG);
 8006ea0:	7a10      	ldrb	r0, [r2, #8]
 8006ea2:	6814      	ldr	r4, [r2, #0]
 8006ea4:	0019      	movs	r1, r3
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	47a0      	blx	r4
}
 8006eaa:	bd13      	pop	{r0, r1, r4, pc}

08006eac <SHT30_Read>:

void SHT30_Read(SHT30_t *obj, uint16_t Reg, uint8_t amount){
 8006eac:	0003      	movs	r3, r0
 /*reg Temp Msb|lsb|crc ack Hum msb|Hum|lsb|crc*/
	obj->Private.Read(obj->Private.Address, obj->Private.buffer, amount,1);   /*1 byte 0 dummy to write*/
 8006eae:	0001      	movs	r1, r0
void SHT30_Read(SHT30_t *obj, uint16_t Reg, uint8_t amount){
 8006eb0:	b510      	push	{r4, lr}
	obj->Private.Read(obj->Private.Address, obj->Private.buffer, amount,1);   /*1 byte 0 dummy to write*/
 8006eb2:	3109      	adds	r1, #9
 8006eb4:	685c      	ldr	r4, [r3, #4]
 8006eb6:	7a00      	ldrb	r0, [r0, #8]
 8006eb8:	2301      	movs	r3, #1
 8006eba:	47a0      	blx	r4
}
 8006ebc:	bd10      	pop	{r4, pc}
	...

08006ec0 <SHT30_ReadData>:

void SHT30_ReadData(SHT30_t *obj){
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	0004      	movs	r4, r0
    uint16_t RawTemp;
    uint16_t RawHum;

	SHT30_Write(obj,SHT30_CMD_CLOCK_STRETCH_H);  /*clock stretching  , COMMAND MEASURE AND HIGH REPEATIBILITY*/
 8006ec4:	4917      	ldr	r1, [pc, #92]	; (8006f24 <SHT30_ReadData+0x64>)
 8006ec6:	f7ff ffe5 	bl	8006e94 <SHT30_Write>
    SHT30_Read(obj, 0x00,SHT30_MAX_DATA_READ);
 8006eca:	2206      	movs	r2, #6
 8006ecc:	0020      	movs	r0, r4
 8006ece:	2100      	movs	r1, #0
 8006ed0:	f7ff ffec 	bl	8006eac <SHT30_Read>

    RawTemp = (uint16_t)(obj->Private.buffer[0]<<8 | obj->Private.buffer[1]);
    RawHum = (uint16_t)(obj->Private.buffer[3]<<8 | obj->Private.buffer[4]);
 8006ed4:	7b25      	ldrb	r5, [r4, #12]
 8006ed6:	7b63      	ldrb	r3, [r4, #13]
 8006ed8:	022d      	lsls	r5, r5, #8
 8006eda:	431d      	orrs	r5, r3
    RawTemp = (uint16_t)(obj->Private.buffer[0]<<8 | obj->Private.buffer[1]);
 8006edc:	7a63      	ldrb	r3, [r4, #9]
 8006ede:	7aa0      	ldrb	r0, [r4, #10]
 8006ee0:	021b      	lsls	r3, r3, #8
    obj->temperature =  (float)(-45 + 175*(RawTemp/(65535.0)) );
 8006ee2:	4318      	orrs	r0, r3
 8006ee4:	f7fb fed2 	bl	8002c8c <__aeabi_i2d>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <SHT30_ReadData+0x68>)
 8006eec:	f7fa fd0a 	bl	8001904 <__aeabi_ddiv>
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	4b0e      	ldr	r3, [pc, #56]	; (8006f2c <SHT30_ReadData+0x6c>)
 8006ef4:	f7fb f910 	bl	8002118 <__aeabi_dmul>
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4b0d      	ldr	r3, [pc, #52]	; (8006f30 <SHT30_ReadData+0x70>)
 8006efc:	f7fb fb7e 	bl	80025fc <__aeabi_dsub>
 8006f00:	f7fb ff82 	bl	8002e08 <__aeabi_d2f>
 8006f04:	6120      	str	r0, [r4, #16]
    obj->humidity =  (float)(100*(RawHum/(65535.0)));
 8006f06:	0028      	movs	r0, r5
 8006f08:	f7fb fec0 	bl	8002c8c <__aeabi_i2d>
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <SHT30_ReadData+0x68>)
 8006f10:	f7fa fcf8 	bl	8001904 <__aeabi_ddiv>
 8006f14:	2200      	movs	r2, #0
 8006f16:	4b07      	ldr	r3, [pc, #28]	; (8006f34 <SHT30_ReadData+0x74>)
 8006f18:	f7fb f8fe 	bl	8002118 <__aeabi_dmul>
 8006f1c:	f7fb ff74 	bl	8002e08 <__aeabi_d2f>
 8006f20:	6160      	str	r0, [r4, #20]
}
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	00002c06 	.word	0x00002c06
 8006f28:	40efffe0 	.word	0x40efffe0
 8006f2c:	4065e000 	.word	0x4065e000
 8006f30:	40468000 	.word	0x40468000
 8006f34:	40590000 	.word	0x40590000

08006f38 <qATCLI_Notify>:
    }
    return RetValue;
}
/*============================================================================*/
static qBool_t qATCLI_Notify( qATCLI_t * const cli ){
    cli->qPrivate.Input.Ready = qTrue;
 8006f38:	0003      	movs	r3, r0
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	3334      	adds	r3, #52	; 0x34
static qBool_t qATCLI_Notify( qATCLI_t * const cli ){
 8006f3e:	b510      	push	{r4, lr}
    cli->qPrivate.Input.Ready = qTrue;
 8006f40:	701a      	strb	r2, [r3, #0]
    cli->qPrivate.Input.index = 0u;
 8006f42:	2300      	movs	r3, #0
 8006f44:	6283      	str	r3, [r0, #40]	; 0x28
    if( NULL != cli->qPrivate.xNotifyFcn ){
 8006f46:	69c3      	ldr	r3, [r0, #28]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d000      	beq.n	8006f4e <qATCLI_Notify+0x16>
        cli->qPrivate.xNotifyFcn( cli );
 8006f4c:	4798      	blx	r3
    }
    return qTrue;
}
 8006f4e:	2001      	movs	r0, #1
 8006f50:	bd10      	pop	{r4, pc}
	...

08006f54 <qATCLI_Putc_Wrapper>:
/*============================================================================*/
static void qATCLI_Putc_Wrapper( const char c ){
 8006f54:	b510      	push	{r4, lr}
	ATOutCharFcn( NULL, c );
 8006f56:	4b03      	ldr	r3, [pc, #12]	; (8006f64 <qATCLI_Putc_Wrapper+0x10>)
static void qATCLI_Putc_Wrapper( const char c ){
 8006f58:	0001      	movs	r1, r0
	ATOutCharFcn( NULL, c );
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	4798      	blx	r3
}
 8006f60:	bd10      	pop	{r4, pc}
 8006f62:	46c0      	nop			; (mov r8, r8)
 8006f64:	200006b8 	.word	0x200006b8

08006f68 <qATCLI_Puts_Wrapper>:
/*============================================================================*/
static void qATCLI_Puts_Wrapper( const char *s ){
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	0004      	movs	r4, r0
 8006f6c:	3401      	adds	r4, #1
	qIndex_t i = 0u;
	while( '\0' != s[i] ){
 8006f6e:	1e63      	subs	r3, r4, #1
 8006f70:	7819      	ldrb	r1, [r3, #0]
 8006f72:	2900      	cmp	r1, #0
 8006f74:	d100      	bne.n	8006f78 <qATCLI_Puts_Wrapper+0x10>
        ATOutCharFcn( NULL, s[i++] );
    }
}
 8006f76:	bd10      	pop	{r4, pc}
        ATOutCharFcn( NULL, s[i++] );
 8006f78:	4b02      	ldr	r3, [pc, #8]	; (8006f84 <qATCLI_Puts_Wrapper+0x1c>)
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4798      	blx	r3
 8006f80:	e7f4      	b.n	8006f6c <qATCLI_Puts_Wrapper+0x4>
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	200006b8 	.word	0x200006b8

08006f88 <qATCLI_Input_Fix>:
/*============================================================================*/
/*
modifies the input string removing non-graph chars 
*/
#if ( Q_ATCLI_INPUT_FIX == 1 )
static char* qATCLI_Input_Fix( char *s, size_t maxlen){
 8006f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f8a:	0006      	movs	r6, r0
 8006f8c:	0004      	movs	r4, r0
    int i,j;
    j = 0;
 8006f8e:	2700      	movs	r7, #0
 8006f90:	180b      	adds	r3, r1, r0
 8006f92:	9301      	str	r3, [sp, #4]
    for( i = 0; ( '\0' != s[i] ) && (maxlen > 0u) ; i++ ){
 8006f94:	7823      	ldrb	r3, [r4, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d006      	beq.n	8006fa8 <qATCLI_Input_Fix+0x20>
 8006f9a:	9a01      	ldr	r2, [sp, #4]
 8006f9c:	4294      	cmp	r4, r2
 8006f9e:	d003      	beq.n	8006fa8 <qATCLI_Input_Fix+0x20>
        if( '\r' == s[i] ){
 8006fa0:	2b0d      	cmp	r3, #13
 8006fa2:	d105      	bne.n	8006fb0 <qATCLI_Input_Fix+0x28>
            s[i] = '\0';
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	7023      	strb	r3, [r4, #0]
        if( 0 != isgraph( (int)s[i]) ){
            s[j++] = (char)tolower( (int)s[i] );
        }
        --maxlen;
    }
    s[j] = '\0';
 8006fa8:	2300      	movs	r3, #0
    return s;
}
 8006faa:	0030      	movs	r0, r6
    s[j] = '\0';
 8006fac:	55f3      	strb	r3, [r6, r7]
}
 8006fae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( 0 != isgraph( (int)s[i]) ){
 8006fb0:	f004 fba2 	bl	800b6f8 <__locale_ctype_ptr>
 8006fb4:	2217      	movs	r2, #23
 8006fb6:	7825      	ldrb	r5, [r4, #0]
 8006fb8:	1c6b      	adds	r3, r5, #1
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	5cc3      	ldrb	r3, [r0, r3]
 8006fbe:	4213      	tst	r3, r2
 8006fc0:	d00a      	beq.n	8006fd8 <qATCLI_Input_Fix+0x50>
            s[j++] = (char)tolower( (int)s[i] );
 8006fc2:	f004 fb99 	bl	800b6f8 <__locale_ctype_ptr>
 8006fc6:	2203      	movs	r2, #3
 8006fc8:	9b00      	ldr	r3, [sp, #0]
 8006fca:	5cc3      	ldrb	r3, [r0, r3]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d100      	bne.n	8006fd4 <qATCLI_Input_Fix+0x4c>
 8006fd2:	3520      	adds	r5, #32
 8006fd4:	55f5      	strb	r5, [r6, r7]
 8006fd6:	3701      	adds	r7, #1
 8006fd8:	3401      	adds	r4, #1
 8006fda:	e7db      	b.n	8006f94 <qATCLI_Input_Fix+0xc>

08006fdc <qATCLI_Setup>:
qBool_t qATCLI_Setup( qATCLI_t * const cli, const qPutChar_t OutputFcn, char *Input, const size_t SizeInput, char *Output, const size_t SizeOutput, const char *Identifier, const char *OK_Response, const char *ERROR_Response, const char *NOTFOUND_Response, const char *term_EOL ){
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	0004      	movs	r4, r0
    qBool_t RetValue = qFalse;
 8006fe0:	1e05      	subs	r5, r0, #0
    if(  ( NULL != cli ) && ( NULL != OutputFcn) ) {
 8006fe2:	d034      	beq.n	800704e <qATCLI_Setup+0x72>
    qBool_t RetValue = qFalse;
 8006fe4:	2500      	movs	r5, #0
    if(  ( NULL != cli ) && ( NULL != OutputFcn) ) {
 8006fe6:	42a9      	cmp	r1, r5
 8006fe8:	d031      	beq.n	800704e <qATCLI_Setup+0x72>
        cli->qPrivate.Input.Buffer = (char*)Input;
 8006fea:	6242      	str	r2, [r0, #36]	; 0x24
        cli->qPrivate.Input.MaxIndex =  SizeInput - 1u;
 8006fec:	1e5a      	subs	r2, r3, #1
        cli->qPrivate.Input.Size = SizeInput;
 8006fee:	6303      	str	r3, [r0, #48]	; 0x30
        cli->qPrivate.Input.MaxIndex =  SizeInput - 1u;
 8006ff0:	62c2      	str	r2, [r0, #44]	; 0x2c
        cli->qPrivate.Input.Ready = qFalse;
 8006ff2:	0002      	movs	r2, r0
        cli->qPrivate.OutputFcn = OutputFcn;
 8006ff4:	6181      	str	r1, [r0, #24]
        cli->qPrivate.Identifier = Identifier;
 8006ff6:	9906      	ldr	r1, [sp, #24]
        cli->qPrivate.Input.Ready = qFalse;
 8006ff8:	3234      	adds	r2, #52	; 0x34
        cli->qPrivate.Identifier = Identifier;
 8006ffa:	6101      	str	r1, [r0, #16]
        cli->qPrivate.OK_Response = OK_Response;
 8006ffc:	9907      	ldr	r1, [sp, #28]
        cli->qPrivate.First  = NULL;
 8006ffe:	6005      	str	r5, [r0, #0]
        cli->qPrivate.OK_Response = OK_Response;
 8007000:	6041      	str	r1, [r0, #4]
        cli->qPrivate.ERROR_Response = ERROR_Response;
 8007002:	9908      	ldr	r1, [sp, #32]
 8007004:	6081      	str	r1, [r0, #8]
        cli->qPrivate.NOTFOUND_Response = NOTFOUND_Response;
 8007006:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007008:	60c1      	str	r1, [r0, #12]
        cli->qPrivate.term_EOL = term_EOL;
 800700a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800700c:	6141      	str	r1, [r0, #20]
        cli->qPrivate.SizeOutput = SizeOutput;
 800700e:	9905      	ldr	r1, [sp, #20]
 8007010:	6201      	str	r1, [r0, #32]
        cli->qPrivate.Input.Ready = qFalse;
 8007012:	7015      	strb	r5, [r2, #0]
        cli->qPrivate.xPublic.Output = Output;
 8007014:	9a04      	ldr	r2, [sp, #16]
        cli->qPrivate.Input.index = 0u;
 8007016:	6285      	str	r5, [r0, #40]	; 0x28
        cli->qPrivate.xPublic.Output = Output;
 8007018:	6682      	str	r2, [r0, #104]	; 0x68
        cli->qPrivate.xPublic.putch = &qATCLI_Putc_Wrapper;
 800701a:	4a0e      	ldr	r2, [pc, #56]	; (8007054 <qATCLI_Setup+0x78>)
        cli->qPrivate.xNotifyFcn = NULL;
 800701c:	61c5      	str	r5, [r0, #28]
        cli->qPrivate.xPublic.putch = &qATCLI_Putc_Wrapper;
 800701e:	6602      	str	r2, [r0, #96]	; 0x60
        cli->qPrivate.xPublic.puts = &qATCLI_Puts_Wrapper;
 8007020:	4a0d      	ldr	r2, [pc, #52]	; (8007058 <qATCLI_Setup+0x7c>)
        (void)memset( (void*)cli->qPrivate.Input.Buffer, 0, SizeInput );
 8007022:	0029      	movs	r1, r5
        cli->qPrivate.xPublic.puts = &qATCLI_Puts_Wrapper;
 8007024:	6642      	str	r2, [r0, #100]	; 0x64
        cli->qPrivate.Params.GetArgPtr = &GetArgPtr;
 8007026:	4a0d      	ldr	r2, [pc, #52]	; (800705c <qATCLI_Setup+0x80>)
 8007028:	6402      	str	r2, [r0, #64]	; 0x40
        cli->qPrivate.Params.GetArgInt = &GetArgInt;
 800702a:	4a0d      	ldr	r2, [pc, #52]	; (8007060 <qATCLI_Setup+0x84>)
 800702c:	6442      	str	r2, [r0, #68]	; 0x44
        cli->qPrivate.Params.GetArgFlt = &GetArgFlt;
 800702e:	4a0d      	ldr	r2, [pc, #52]	; (8007064 <qATCLI_Setup+0x88>)
 8007030:	6482      	str	r2, [r0, #72]	; 0x48
        cli->qPrivate.Params.GetArgHex = &GetArgHex;
 8007032:	4a0d      	ldr	r2, [pc, #52]	; (8007068 <qATCLI_Setup+0x8c>)
 8007034:	64c2      	str	r2, [r0, #76]	; 0x4c
        cli->qPrivate.Params.GetArgString = &GetArgString;
 8007036:	4a0d      	ldr	r2, [pc, #52]	; (800706c <qATCLI_Setup+0x90>)
 8007038:	6502      	str	r2, [r0, #80]	; 0x50
        (void)memset( (void*)cli->qPrivate.Input.Buffer, 0, SizeInput );
 800703a:	001a      	movs	r2, r3
 800703c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800703e:	f004 fb84 	bl	800b74a <memset>
        (void)memset( (void*)cli->qPrivate.xPublic.Output, 0, SizeOutput );
 8007042:	0029      	movs	r1, r5
 8007044:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007046:	9a05      	ldr	r2, [sp, #20]
 8007048:	f004 fb7f 	bl	800b74a <memset>
        RetValue = qTrue;
 800704c:	3501      	adds	r5, #1
}
 800704e:	0028      	movs	r0, r5
 8007050:	bd70      	pop	{r4, r5, r6, pc}
 8007052:	46c0      	nop			; (mov r8, r8)
 8007054:	08006f55 	.word	0x08006f55
 8007058:	08006f69 	.word	0x08006f69
 800705c:	0800750d 	.word	0x0800750d
 8007060:	08007535 	.word	0x08007535
 8007064:	08007561 	.word	0x08007561
 8007068:	08007589 	.word	0x08007589
 800706c:	080074a5 	.word	0x080074a5

08007070 <qATCLI_CmdSubscribe>:
qBool_t qATCLI_CmdSubscribe( qATCLI_t * const cli, qATCLI_Command_t * const Command, char *TextCommand, const qATCLI_CommandCallback_t Callback, qATCLI_Options_t CmdOpt, void *param ){
 8007070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007072:	001f      	movs	r7, r3
 8007074:	ab08      	add	r3, sp, #32
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	0006      	movs	r6, r0
 800707a:	000c      	movs	r4, r1
 800707c:	0015      	movs	r5, r2
 800707e:	9301      	str	r3, [sp, #4]
    if( ( NULL != cli ) && ( NULL != Command ) && ( NULL != TextCommand ) && ( NULL != Callback ) ){
 8007080:	2800      	cmp	r0, #0
 8007082:	d101      	bne.n	8007088 <qATCLI_CmdSubscribe+0x18>
    qBool_t RetValue = qFalse;
 8007084:	2000      	movs	r0, #0
}
 8007086:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if( ( NULL != cli ) && ( NULL != Command ) && ( NULL != TextCommand ) && ( NULL != Callback ) ){
 8007088:	2900      	cmp	r1, #0
 800708a:	d0fb      	beq.n	8007084 <qATCLI_CmdSubscribe+0x14>
 800708c:	2a00      	cmp	r2, #0
 800708e:	d0f9      	beq.n	8007084 <qATCLI_CmdSubscribe+0x14>
 8007090:	2f00      	cmp	r7, #0
 8007092:	d0f7      	beq.n	8007084 <qATCLI_CmdSubscribe+0x14>
        Command->qPrivate.CmdLen = qIOUtil_StrLen( TextCommand, cli->qPrivate.Input.Size );        
 8007094:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007096:	0010      	movs	r0, r2
 8007098:	f000 fc17 	bl	80078ca <qIOUtil_StrLen>
 800709c:	6160      	str	r0, [r4, #20]
        if( Command->qPrivate.CmdLen >= 2u ){
 800709e:	2801      	cmp	r0, #1
 80070a0:	d9f0      	bls.n	8007084 <qATCLI_CmdSubscribe+0x14>
            if( ( 'a' == TextCommand[0] ) && ( 't' == TextCommand[1] ) ) { /*command should start with an <at> at the beginning */
 80070a2:	782b      	ldrb	r3, [r5, #0]
 80070a4:	2b61      	cmp	r3, #97	; 0x61
 80070a6:	d1ed      	bne.n	8007084 <qATCLI_CmdSubscribe+0x14>
 80070a8:	786b      	ldrb	r3, [r5, #1]
 80070aa:	2b74      	cmp	r3, #116	; 0x74
 80070ac:	d1ea      	bne.n	8007084 <qATCLI_CmdSubscribe+0x14>
                Command->qPrivate.CmdOpt = 0x0FFFu & CmdOpt; /*high nibble not used yet*/
 80070ae:	9b01      	ldr	r3, [sp, #4]
                Command->Text = (char*)TextCommand;
 80070b0:	6065      	str	r5, [r4, #4]
                Command->qPrivate.CmdOpt = 0x0FFFu & CmdOpt; /*high nibble not used yet*/
 80070b2:	051b      	lsls	r3, r3, #20
 80070b4:	0d1b      	lsrs	r3, r3, #20
 80070b6:	8223      	strh	r3, [r4, #16]
                Command->qPrivate.Next = cli->qPrivate.First; /*MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed*/
 80070b8:	6833      	ldr	r3, [r6, #0]
                Command->qPrivate.CommandCallback = Callback;
 80070ba:	60a7      	str	r7, [r4, #8]
                Command->qPrivate.Next = cli->qPrivate.First; /*MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed*/
 80070bc:	60e3      	str	r3, [r4, #12]
                Command->param = param;
 80070be:	9b09      	ldr	r3, [sp, #36]	; 0x24
                RetValue = qTrue;  
 80070c0:	2001      	movs	r0, #1
                Command->param = param;
 80070c2:	6023      	str	r3, [r4, #0]
                cli->qPrivate.First = Command;
 80070c4:	6034      	str	r4, [r6, #0]
 80070c6:	e7de      	b.n	8007086 <qATCLI_CmdSubscribe+0x16>

080070c8 <qATCLI_CmdIterate>:
    qATCLI_Command_t *Cmd = NULL;
 80070c8:	1e03      	subs	r3, r0, #0
    if(NULL != cli){
 80070ca:	d005      	beq.n	80070d8 <qATCLI_CmdIterate+0x10>
 80070cc:	4a06      	ldr	r2, [pc, #24]	; (80070e8 <qATCLI_CmdIterate+0x20>)
        if( qTrue == reload ){
 80070ce:	2901      	cmp	r1, #1
 80070d0:	d104      	bne.n	80070dc <qATCLI_CmdIterate+0x14>
            Iterator = cli->qPrivate.First; /*MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed*/
 80070d2:	6803      	ldr	r3, [r0, #0]
 80070d4:	6013      	str	r3, [r2, #0]
    qATCLI_Command_t *Cmd = NULL;
 80070d6:	2300      	movs	r3, #0
} 
 80070d8:	0018      	movs	r0, r3
 80070da:	4770      	bx	lr
            Cmd = Iterator;
 80070dc:	6813      	ldr	r3, [r2, #0]
            if( NULL != Iterator ){
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0fa      	beq.n	80070d8 <qATCLI_CmdIterate+0x10>
                Iterator = Cmd->qPrivate.Next; 
 80070e2:	68d9      	ldr	r1, [r3, #12]
 80070e4:	6011      	str	r1, [r2, #0]
 80070e6:	e7f7      	b.n	80070d8 <qATCLI_CmdIterate+0x10>
 80070e8:	200006c0 	.word	0x200006c0

080070ec <qATCLI_ISRHandler>:
qBool_t qATCLI_ISRHandler( qATCLI_t * const cli, char c ){
 80070ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070ee:	0004      	movs	r4, r0
 80070f0:	000d      	movs	r5, r1
    if( NULL != cli ){
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d101      	bne.n	80070fa <qATCLI_ISRHandler+0xe>
    qBool_t RetValue = qFalse;
 80070f6:	2000      	movs	r0, #0
}
 80070f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ReadyInput = cli->qPrivate.Input.Ready;
 80070fa:	0003      	movs	r3, r0
 80070fc:	3334      	adds	r3, #52	; 0x34
 80070fe:	781e      	ldrb	r6, [r3, #0]
        if( ( 0 != isgraph( (int)c ) ) && ( qFalse == ReadyInput ) ){
 8007100:	f004 fafa 	bl	800b6f8 <__locale_ctype_ptr>
 8007104:	2317      	movs	r3, #23
 8007106:	1c6f      	adds	r7, r5, #1
 8007108:	5dc2      	ldrb	r2, [r0, r7]
        ReadyInput = cli->qPrivate.Input.Ready;
 800710a:	b2f6      	uxtb	r6, r6
        if( ( 0 != isgraph( (int)c ) ) && ( qFalse == ReadyInput ) ){
 800710c:	421a      	tst	r2, r3
 800710e:	d019      	beq.n	8007144 <qATCLI_ISRHandler+0x58>
 8007110:	2e00      	cmp	r6, #0
 8007112:	d117      	bne.n	8007144 <qATCLI_ISRHandler+0x58>
            CurrentIndex = cli->qPrivate.Input.index; /*to avoid undefined order of volatile accesses*/
 8007114:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            cli->qPrivate.Input.Buffer[ CurrentIndex++ ] = (char)tolower( (int)c );
 8007116:	002e      	movs	r6, r5
            CurrentIndex = cli->qPrivate.Input.index; /*to avoid undefined order of volatile accesses*/
 8007118:	9301      	str	r3, [sp, #4]
            cli->qPrivate.Input.Buffer[ CurrentIndex++ ] = (char)tolower( (int)c );
 800711a:	f004 faed 	bl	800b6f8 <__locale_ctype_ptr>
 800711e:	2203      	movs	r2, #3
 8007120:	5dc3      	ldrb	r3, [r0, r7]
 8007122:	4013      	ands	r3, r2
 8007124:	2b01      	cmp	r3, #1
 8007126:	d100      	bne.n	800712a <qATCLI_ISRHandler+0x3e>
 8007128:	3620      	adds	r6, #32
 800712a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800712c:	9901      	ldr	r1, [sp, #4]
 800712e:	9b01      	ldr	r3, [sp, #4]
 8007130:	5456      	strb	r6, [r2, r1]
            cli->qPrivate.Input.Buffer[ CurrentIndex   ] = (char)0x00u;
 8007132:	2100      	movs	r1, #0
 8007134:	6a62      	ldr	r2, [r4, #36]	; 0x24
            cli->qPrivate.Input.Buffer[ CurrentIndex++ ] = (char)tolower( (int)c );
 8007136:	3301      	adds	r3, #1
            cli->qPrivate.Input.Buffer[ CurrentIndex   ] = (char)0x00u;
 8007138:	54d1      	strb	r1, [r2, r3]
            if( CurrentIndex >= cli->qPrivate.Input.MaxIndex ){
 800713a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                CurrentIndex = 0u;
 800713c:	4293      	cmp	r3, r2
 800713e:	4192      	sbcs	r2, r2
 8007140:	4013      	ands	r3, r2
            cli->qPrivate.Input.index = CurrentIndex;
 8007142:	62a3      	str	r3, [r4, #40]	; 0x28
        if ( '\r' == c ){
 8007144:	2d0d      	cmp	r5, #13
 8007146:	d1d6      	bne.n	80070f6 <qATCLI_ISRHandler+0xa>
            RetValue = qATCLI_Notify( cli );
 8007148:	0020      	movs	r0, r4
 800714a:	f7ff fef5 	bl	8006f38 <qATCLI_Notify>
 800714e:	e7d3      	b.n	80070f8 <qATCLI_ISRHandler+0xc>

08007150 <qATCLI_ISRHandlerBlock>:
qBool_t qATCLI_ISRHandlerBlock( qATCLI_t * const cli, char *Data, const size_t n ){
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	0004      	movs	r4, r0
 8007154:	000e      	movs	r6, r1
    if( NULL != cli ){
 8007156:	2800      	cmp	r0, #0
 8007158:	d101      	bne.n	800715e <qATCLI_ISRHandlerBlock+0xe>
    qBool_t RetValue = qFalse;
 800715a:	2000      	movs	r0, #0
}
 800715c:	bd70      	pop	{r4, r5, r6, pc}
        ReadyInput = cli->qPrivate.Input.Ready;
 800715e:	0003      	movs	r3, r0
 8007160:	3334      	adds	r3, #52	; 0x34
 8007162:	781b      	ldrb	r3, [r3, #0]
        MaxToInsert = cli->qPrivate.Input.MaxIndex;
 8007164:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        ReadyInput = cli->qPrivate.Input.Ready;
 8007166:	b2db      	uxtb	r3, r3
        if( ( n > 0u ) && ( n < MaxToInsert ) &&  ( qFalse == ReadyInput ) ) {
 8007168:	2a00      	cmp	r2, #0
 800716a:	d0f6      	beq.n	800715a <qATCLI_ISRHandlerBlock+0xa>
 800716c:	4295      	cmp	r5, r2
 800716e:	d9f4      	bls.n	800715a <qATCLI_ISRHandlerBlock+0xa>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1f2      	bne.n	800715a <qATCLI_ISRHandlerBlock+0xa>
            if( 1u == n ){
 8007174:	2a01      	cmp	r2, #1
 8007176:	d103      	bne.n	8007180 <qATCLI_ISRHandlerBlock+0x30>
                RetValue = qATCLI_ISRHandler( cli, Data[0] );
 8007178:	7809      	ldrb	r1, [r1, #0]
 800717a:	f7ff ffb7 	bl	80070ec <qATCLI_ISRHandler>
 800717e:	e7ed      	b.n	800715c <qATCLI_ISRHandlerBlock+0xc>
                if( 0 != isgraph( (int)Data[0] ) ){
 8007180:	f004 faba 	bl	800b6f8 <__locale_ctype_ptr>
 8007184:	7833      	ldrb	r3, [r6, #0]
 8007186:	18c0      	adds	r0, r0, r3
 8007188:	2317      	movs	r3, #23
 800718a:	7842      	ldrb	r2, [r0, #1]
 800718c:	421a      	tst	r2, r3
 800718e:	d0e4      	beq.n	800715a <qATCLI_ISRHandlerBlock+0xa>
                    if( NULL != qIOUtil_StrChr( Data, (int)'\r', MaxToInsert ) ){ /*find the end of line safely*/
 8007190:	002a      	movs	r2, r5
 8007192:	210d      	movs	r1, #13
 8007194:	0030      	movs	r0, r6
 8007196:	f000 fb8b 	bl	80078b0 <qIOUtil_StrChr>
 800719a:	2800      	cmp	r0, #0
 800719c:	d0dd      	beq.n	800715a <qATCLI_ISRHandlerBlock+0xa>
                        (void)qIOUtil_StrlCpy( (char*)cli->qPrivate.Input.Buffer, Data, MaxToInsert ); /*safe string copy*/
 800719e:	002a      	movs	r2, r5
 80071a0:	0031      	movs	r1, r6
 80071a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80071a4:	f000 fb9f 	bl	80078e6 <qIOUtil_StrlCpy>
                        (void)qATCLI_Input_Fix( (char*)cli->qPrivate.Input.Buffer, MaxToInsert ); /*TODO : check pertinence*/
 80071a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80071aa:	0029      	movs	r1, r5
 80071ac:	f7ff feec 	bl	8006f88 <qATCLI_Input_Fix>
                        RetValue = qATCLI_Notify( cli );
 80071b0:	0020      	movs	r0, r4
 80071b2:	f7ff fec1 	bl	8006f38 <qATCLI_Notify>
 80071b6:	e7d1      	b.n	800715c <qATCLI_ISRHandlerBlock+0xc>

080071b8 <qATCLI_Exec>:

    The response output for the requested command

*/
/*============================================================================*/
qATCLI_Response_t qATCLI_Exec( qATCLI_t * const cli, char *cmd ){
 80071b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ba:	0004      	movs	r4, r0
 80071bc:	b085      	sub	sp, #20
 80071be:	000f      	movs	r7, r1
    qATCLI_Response_t RetValue = QATCLI_NOTFOUND;
    qATCLI_Command_t *Command;
    qATCLI_CommandCallback_t CmdCallback;
    
    if( ( NULL != cli ) && ( NULL != cmd ) ){
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d004      	beq.n	80071ce <qATCLI_Exec+0x16>
 80071c4:	2900      	cmp	r1, #0
 80071c6:	d002      	beq.n	80071ce <qATCLI_Exec+0x16>
        /*cstat -MISRAC2012-Rule-11.5 -CERT-EXP36-C_b*/
        for( Command = (qATCLI_Command_t*)cli->qPrivate.First ; NULL != Command ; Command = Command->qPrivate.Next ){ /*loop over the subscribed commands*/ /*MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed*/
 80071c8:	6805      	ldr	r5, [r0, #0]
 80071ca:	2d00      	cmp	r5, #0
 80071cc:	d101      	bne.n	80071d2 <qATCLI_Exec+0x1a>
    qATCLI_Response_t RetValue = QATCLI_NOTFOUND;
 80071ce:	483c      	ldr	r0, [pc, #240]	; (80072c0 <qATCLI_Exec+0x108>)
 80071d0:	e020      	b.n	8007214 <qATCLI_Exec+0x5c>
        /*cstat +MISRAC2012-Rule-11.5 +CERT-EXP36-C_b*/  
            if( strstr( cmd, Command->Text ) == cmd ){ /*check if the input match the subscribed command starting from the beginning*/ /*TODO : potentially unsafe, find a better way*/
 80071d2:	6869      	ldr	r1, [r5, #4]
 80071d4:	0038      	movs	r0, r7
 80071d6:	f004 fb1c 	bl	800b812 <strstr>
 80071da:	42b8      	cmp	r0, r7
 80071dc:	d000      	beq.n	80071e0 <qATCLI_Exec+0x28>
 80071de:	e06b      	b.n	80072b8 <qATCLI_Exec+0x100>
            	RetValue = qATCLI_NOTALLOWED;
                if( qATCLI_PreProcessing( Command, (char*)cmd, &cli->qPrivate.Params ) ){ /*if success, proceed with the user pos-processing*/
 80071e0:	0023      	movs	r3, r4
/*============================================================================*/
static qBool_t qATCLI_PreProcessing( qATCLI_Command_t * const Command, char *InputBuffer, qATCLI_PreCmd_t params ){
    qBool_t RetValue = qFalse;
    size_t argMin, argMax;
    
    params->Type = qATCLI_CMDTYPE_UNDEF;
 80071e2:	2600      	movs	r6, #0
                if( qATCLI_PreProcessing( Command, (char*)cmd, &cli->qPrivate.Params ) ){ /*if success, proceed with the user pos-processing*/
 80071e4:	3338      	adds	r3, #56	; 0x38
 80071e6:	9303      	str	r3, [sp, #12]
    params->Type = qATCLI_CMDTYPE_UNDEF;
 80071e8:	331c      	adds	r3, #28
 80071ea:	801e      	strh	r6, [r3, #0]
    params->Command = Command;
    params->StrLen = qIOUtil_StrLen( (const char*)InputBuffer, QATCLI_RECOMMENDED_INPUT_SIZE ) - Command->qPrivate.CmdLen;
 80071ec:	0038      	movs	r0, r7
    params->Command = Command;
 80071ee:	63a5      	str	r5, [r4, #56]	; 0x38
    params->StrLen = qIOUtil_StrLen( (const char*)InputBuffer, QATCLI_RECOMMENDED_INPUT_SIZE ) - Command->qPrivate.CmdLen;
 80071f0:	2180      	movs	r1, #128	; 0x80
    params->Type = qATCLI_CMDTYPE_UNDEF;
 80071f2:	9301      	str	r3, [sp, #4]
    params->StrLen = qIOUtil_StrLen( (const char*)InputBuffer, QATCLI_RECOMMENDED_INPUT_SIZE ) - Command->qPrivate.CmdLen;
 80071f4:	f000 fb69 	bl	80078ca <qIOUtil_StrLen>
 80071f8:	696b      	ldr	r3, [r5, #20]
    params->StrData = (char*)&InputBuffer[ Command->qPrivate.CmdLen ]; /*params->StrData = (char*)(InputBuffer+Command->qPrivate.CmdLen);*/
    params->NumArgs = 0u;
 80071fa:	65e6      	str	r6, [r4, #92]	; 0x5c
    params->StrLen = qIOUtil_StrLen( (const char*)InputBuffer, QATCLI_RECOMMENDED_INPUT_SIZE ) - Command->qPrivate.CmdLen;
 80071fc:	1ac0      	subs	r0, r0, r3
    params->StrData = (char*)&InputBuffer[ Command->qPrivate.CmdLen ]; /*params->StrData = (char*)(InputBuffer+Command->qPrivate.CmdLen);*/
 80071fe:	18ff      	adds	r7, r7, r3
    params->StrLen = qIOUtil_StrLen( (const char*)InputBuffer, QATCLI_RECOMMENDED_INPUT_SIZE ) - Command->qPrivate.CmdLen;
 8007200:	65a0      	str	r0, [r4, #88]	; 0x58
    params->StrData = (char*)&InputBuffer[ Command->qPrivate.CmdLen ]; /*params->StrData = (char*)(InputBuffer+Command->qPrivate.CmdLen);*/
 8007202:	63e7      	str	r7, [r4, #60]	; 0x3c

    if( 0u == params->StrLen ){ /*command should be an ACT command */
 8007204:	42b0      	cmp	r0, r6
 8007206:	d114      	bne.n	8007232 <qATCLI_Exec+0x7a>
        if( 0u != ( Command->qPrivate.CmdOpt & (qATCLI_Options_t)qATCLI_CMDTYPE_ACT ) ){ /*check if is allowed*/
 8007208:	2380      	movs	r3, #128	; 0x80
 800720a:	8a2a      	ldrh	r2, [r5, #16]
 800720c:	011b      	lsls	r3, r3, #4
 800720e:	421a      	tst	r2, r3
 8007210:	d102      	bne.n	8007218 <qATCLI_Exec+0x60>
            	RetValue = qATCLI_NOTALLOWED;
 8007212:	482c      	ldr	r0, [pc, #176]	; (80072c4 <qATCLI_Exec+0x10c>)
}
 8007214:	b005      	add	sp, #20
 8007216:	bdf0      	pop	{r4, r5, r6, r7, pc}
            params->Type = qATCLI_CMDTYPE_ACT;  /*set the type to ACT*/
 8007218:	9a01      	ldr	r2, [sp, #4]
 800721a:	8013      	strh	r3, [r2, #0]
                    if( qATCLI_CMDTYPE_UNDEF == cli->qPrivate.Params.Type ){
 800721c:	0022      	movs	r2, r4
 800721e:	3254      	adds	r2, #84	; 0x54
 8007220:	8812      	ldrh	r2, [r2, #0]
                    CmdCallback = Command->qPrivate.CommandCallback;
 8007222:	68ab      	ldr	r3, [r5, #8]
                    if( qATCLI_CMDTYPE_UNDEF == cli->qPrivate.Params.Type ){
 8007224:	2a00      	cmp	r2, #0
 8007226:	d049      	beq.n	80072bc <qATCLI_Exec+0x104>
                        RetValue = CmdCallback( &cli->qPrivate.xPublic, &cli->qPrivate.Params  ); /*invoke the callback*/
 8007228:	0020      	movs	r0, r4
 800722a:	9903      	ldr	r1, [sp, #12]
 800722c:	3060      	adds	r0, #96	; 0x60
 800722e:	4798      	blx	r3
 8007230:	e7f0      	b.n	8007214 <qATCLI_Exec+0x5c>
            RetValue = qTrue;
        }
    } 
    else if ( params->StrLen > 0u ){
        if( '?' == params->StrData[0] ){ /*command should be READ command */
 8007232:	783b      	ldrb	r3, [r7, #0]
 8007234:	2b3f      	cmp	r3, #63	; 0x3f
 8007236:	d10b      	bne.n	8007250 <qATCLI_Exec+0x98>
            if( 0u != ( Command->qPrivate.CmdOpt & (qATCLI_Options_t)qATCLI_CMDTYPE_READ ) ){ /*check if is allowed*/
 8007238:	2380      	movs	r3, #128	; 0x80
 800723a:	8a2a      	ldrh	r2, [r5, #16]
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	421a      	tst	r2, r3
 8007240:	d0e7      	beq.n	8007212 <qATCLI_Exec+0x5a>
                    if( 0u != ( Command->qPrivate.CmdOpt & (qATCLI_Options_t)qATCLI_CMDTYPE_PARA ) ){ /*check if is allowed*/
                        params->NumArgs = qATCLI_NumOfArgs( params->StrData ); /*get the args count using the default delimiter*/
                        argMin = QATCLI_CMDMASK_ARG_MINNUM( (size_t)Command->qPrivate.CmdOpt );
                        argMax = QATCLI_CMDMASK_ARG_MAXNUM( (size_t)Command->qPrivate.CmdOpt );
                        if( ( params->NumArgs >= argMin ) && ( params->NumArgs <= argMax ) ){
                            params->Type = qATCLI_CMDTYPE_PARA; /*set the type to PARA*/
 8007242:	9a01      	ldr	r2, [sp, #4]
                            params->StrData++; /*move string pointer once*/
 8007244:	3701      	adds	r7, #1
                            params->StrLen--; /*decrease the len one*/
 8007246:	3801      	subs	r0, #1
                            params->Type = qATCLI_CMDTYPE_PARA; /*set the type to PARA*/
 8007248:	8013      	strh	r3, [r2, #0]
                            params->StrData++; /*move string pointer once*/
 800724a:	63e7      	str	r7, [r4, #60]	; 0x3c
                            params->StrLen--; /*decrease the len one*/
 800724c:	65a0      	str	r0, [r4, #88]	; 0x58
 800724e:	e7e5      	b.n	800721c <qATCLI_Exec+0x64>
        else if( params->StrLen >= 2u ){ /*can be at+xx=? or at+xx=...*/
 8007250:	2801      	cmp	r0, #1
 8007252:	d0de      	beq.n	8007212 <qATCLI_Exec+0x5a>
            if( '=' == params->StrData[0] ){ /*could be a TEST or PARA command*/
 8007254:	2b3d      	cmp	r3, #61	; 0x3d
 8007256:	d1dc      	bne.n	8007212 <qATCLI_Exec+0x5a>
                if( '?' == params->StrData[1] ){ 
 8007258:	787b      	ldrb	r3, [r7, #1]
 800725a:	2b3f      	cmp	r3, #63	; 0x3f
 800725c:	d10c      	bne.n	8007278 <qATCLI_Exec+0xc0>
                    if( 2u == params->StrLen ){ /*command should be a TEST Command*/
 800725e:	2802      	cmp	r0, #2
 8007260:	d1d7      	bne.n	8007212 <qATCLI_Exec+0x5a>
                        if( 0u != ( Command->qPrivate.CmdOpt & (qATCLI_Options_t)qATCLI_CMDTYPE_TEST ) ){ /*check if is allowed*/
 8007262:	33c2      	adds	r3, #194	; 0xc2
 8007264:	8a2a      	ldrh	r2, [r5, #16]
 8007266:	33ff      	adds	r3, #255	; 0xff
 8007268:	421a      	tst	r2, r3
 800726a:	d0d2      	beq.n	8007212 <qATCLI_Exec+0x5a>
                            params->Type = qATCLI_CMDTYPE_TEST; /*set the type to TEXT*/
 800726c:	9a01      	ldr	r2, [sp, #4]
                            params->StrData+=2; /*move string two positions ahead*/
 800726e:	3702      	adds	r7, #2
                            params->Type = qATCLI_CMDTYPE_TEST; /*set the type to TEXT*/
 8007270:	8013      	strh	r3, [r2, #0]
                            params->StrData+=2; /*move string two positions ahead*/
 8007272:	63e7      	str	r7, [r4, #60]	; 0x3c
                            params->StrLen-=2u;  /*decrease the len*/
 8007274:	65a6      	str	r6, [r4, #88]	; 0x58
 8007276:	e7d1      	b.n	800721c <qATCLI_Exec+0x64>
                    if( 0u != ( Command->qPrivate.CmdOpt & (qATCLI_Options_t)qATCLI_CMDTYPE_PARA ) ){ /*check if is allowed*/
 8007278:	8a2b      	ldrh	r3, [r5, #16]
 800727a:	05da      	lsls	r2, r3, #23
 800727c:	d5c9      	bpl.n	8007212 <qATCLI_Exec+0x5a>
 800727e:	46bc      	mov	ip, r7
 8007280:	e006      	b.n	8007290 <qATCLI_Exec+0xd8>
}
/*============================================================================*/
static size_t qATCLI_NumOfArgs( const char *str ){
	size_t count = 0u;
	while( '\0' != *str ){
        if ( (char)QATCLI_DEFAULT_ATSET_DELIM == (char)*str++ ){
 8007282:	2101      	movs	r1, #1
 8007284:	448c      	add	ip, r1
 8007286:	9902      	ldr	r1, [sp, #8]
 8007288:	292c      	cmp	r1, #44	; 0x2c
 800728a:	d000      	beq.n	800728e <qATCLI_Exec+0xd6>
 800728c:	0032      	movs	r2, r6
 800728e:	0016      	movs	r6, r2
	while( '\0' != *str ){
 8007290:	4662      	mov	r2, ip
 8007292:	7812      	ldrb	r2, [r2, #0]
 8007294:	9202      	str	r2, [sp, #8]
 8007296:	9902      	ldr	r1, [sp, #8]
 8007298:	1c72      	adds	r2, r6, #1
 800729a:	2900      	cmp	r1, #0
 800729c:	d1f1      	bne.n	8007282 <qATCLI_Exec+0xca>
                        argMin = QATCLI_CMDMASK_ARG_MINNUM( (size_t)Command->qPrivate.CmdOpt );
 800729e:	001e      	movs	r6, r3
 80072a0:	310f      	adds	r1, #15
                        params->NumArgs = qATCLI_NumOfArgs( params->StrData ); /*get the args count using the default delimiter*/
 80072a2:	65e2      	str	r2, [r4, #92]	; 0x5c
                        argMin = QATCLI_CMDMASK_ARG_MINNUM( (size_t)Command->qPrivate.CmdOpt );
 80072a4:	400e      	ands	r6, r1
                        if( ( params->NumArgs >= argMin ) && ( params->NumArgs <= argMax ) ){
 80072a6:	4296      	cmp	r6, r2
 80072a8:	d8b3      	bhi.n	8007212 <qATCLI_Exec+0x5a>
                        argMax = QATCLI_CMDMASK_ARG_MAXNUM( (size_t)Command->qPrivate.CmdOpt );
 80072aa:	091b      	lsrs	r3, r3, #4
 80072ac:	4019      	ands	r1, r3
                        if( ( params->NumArgs >= argMin ) && ( params->NumArgs <= argMax ) ){
 80072ae:	4291      	cmp	r1, r2
 80072b0:	d3af      	bcc.n	8007212 <qATCLI_Exec+0x5a>
                            params->Type = qATCLI_CMDTYPE_PARA; /*set the type to PARA*/
 80072b2:	2380      	movs	r3, #128	; 0x80
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	e7c4      	b.n	8007242 <qATCLI_Exec+0x8a>
        for( Command = (qATCLI_Command_t*)cli->qPrivate.First ; NULL != Command ; Command = Command->qPrivate.Next ){ /*loop over the subscribed commands*/ /*MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed*/
 80072b8:	68ed      	ldr	r5, [r5, #12]
 80072ba:	e786      	b.n	80071ca <qATCLI_Exec+0x12>
                        RetValue = QATCLI_ERROR;
 80072bc:	4802      	ldr	r0, [pc, #8]	; (80072c8 <qATCLI_Exec+0x110>)
 80072be:	e7a9      	b.n	8007214 <qATCLI_Exec+0x5c>
 80072c0:	00007ffe 	.word	0x00007ffe
 80072c4:	ffff8002 	.word	0xffff8002
 80072c8:	ffff8001 	.word	0xffff8001

080072cc <qATCLI_Input_Flush>:
    if( NULL != cli ){
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d006      	beq.n	80072de <qATCLI_Input_Flush+0x12>
        Input->Ready = qFalse;
 80072d0:	0002      	movs	r2, r0
 80072d2:	2300      	movs	r3, #0
 80072d4:	3234      	adds	r2, #52	; 0x34
 80072d6:	7013      	strb	r3, [r2, #0]
        Input->index = 0u;
 80072d8:	6283      	str	r3, [r0, #40]	; 0x28
        Input->Buffer[0] = (char)0x00u;
 80072da:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80072dc:	7013      	strb	r3, [r2, #0]
}
 80072de:	4770      	bx	lr

080072e0 <qATCLI_Run>:
qBool_t qATCLI_Run( qATCLI_t * const cli ){
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	1e04      	subs	r4, r0, #0
    if( NULL != cli){
 80072e4:	d101      	bne.n	80072ea <qATCLI_Run+0xa>
    qBool_t RetValue = qFalse;
 80072e6:	2000      	movs	r0, #0
}
 80072e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Current = cli;
 80072ea:	4b47      	ldr	r3, [pc, #284]	; (8007408 <qATCLI_Run+0x128>)
		ATOutCharFcn = cli->qPrivate.OutputFcn;
 80072ec:	6982      	ldr	r2, [r0, #24]
		Current = cli;
 80072ee:	6018      	str	r0, [r3, #0]
		ATOutCharFcn = cli->qPrivate.OutputFcn;
 80072f0:	4b46      	ldr	r3, [pc, #280]	; (800740c <qATCLI_Run+0x12c>)
 80072f2:	601a      	str	r2, [r3, #0]
		if( Input->Ready ){ /*a new input has arrived*/
 80072f4:	0003      	movs	r3, r0
 80072f6:	3334      	adds	r3, #52	; 0x34
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0f3      	beq.n	80072e6 <qATCLI_Run+0x6>
            InputBuffer[ Input->MaxIndex ] = (char)'\0'; /*to perform string-safe operations */
 80072fe:	2700      	movs	r7, #0
            InputBuffer = Input->Buffer; /*to conform MISRAC2012-Rule-13.2_b*/
 8007300:	6a46      	ldr	r6, [r0, #36]	; 0x24
            InputBuffer[ Input->MaxIndex ] = (char)'\0'; /*to perform string-safe operations */
 8007302:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
			if 	( 0 == strncmp( (const char*)InputBuffer, QATCLI_DEFAULT_AT_COMMAND, Input->Size ) ){
 8007304:	4942      	ldr	r1, [pc, #264]	; (8007410 <qATCLI_Run+0x130>)
            InputBuffer[ Input->MaxIndex ] = (char)'\0'; /*to perform string-safe operations */
 8007306:	54f7      	strb	r7, [r6, r3]
			if 	( 0 == strncmp( (const char*)InputBuffer, QATCLI_DEFAULT_AT_COMMAND, Input->Size ) ){
 8007308:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800730a:	0030      	movs	r0, r6
 800730c:	f004 fa5c 	bl	800b7c8 <strncmp>
            	OutputRetval = QATCLI_OK;			/*check if the input its the simple AT command*/
 8007310:	2501      	movs	r5, #1
			if 	( 0 == strncmp( (const char*)InputBuffer, QATCLI_DEFAULT_AT_COMMAND, Input->Size ) ){
 8007312:	42b8      	cmp	r0, r7
 8007314:	d014      	beq.n	8007340 <qATCLI_Run+0x60>
			else if	( QATCLI_NOTFOUND != ( CLIRetVal = qATCLI_Exec( cli, Input->Buffer ) ) ){
 8007316:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007318:	0020      	movs	r0, r4
 800731a:	f7ff ff4d 	bl	80071b8 <qATCLI_Exec>
 800731e:	4b3d      	ldr	r3, [pc, #244]	; (8007414 <qATCLI_Run+0x134>)
 8007320:	0005      	movs	r5, r0
 8007322:	4298      	cmp	r0, r3
 8007324:	d10c      	bne.n	8007340 <qATCLI_Run+0x60>
			else if ( 0 == strncmp( (const char*)InputBuffer, QATCLI_DEFAULT_ID_COMMAND, Input->Size ) ){
 8007326:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007328:	493b      	ldr	r1, [pc, #236]	; (8007418 <qATCLI_Run+0x138>)
 800732a:	0030      	movs	r0, r6
 800732c:	f004 fa4c 	bl	800b7c8 <strncmp>
 8007330:	42b8      	cmp	r0, r7
 8007332:	d033      	beq.n	800739c <qATCLI_Run+0xbc>
			else if	( qIOUtil_StrLen( (const char*)InputBuffer, Input->Size ) >= QATCLI_MIN_INPUT_LENGTH ){
 8007334:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007336:	0030      	movs	r0, r6
 8007338:	f000 fac7 	bl	80078ca <qIOUtil_StrLen>
 800733c:	2802      	cmp	r0, #2
 800733e:	d92f      	bls.n	80073a0 <qATCLI_Run+0xc0>
			if( NULL != cli->qPrivate.xPublic.Output ){ /*show the user output if available*/
 8007340:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007342:	2800      	cmp	r0, #0
 8007344:	d009      	beq.n	800735a <qATCLI_Run+0x7a>
				if( '\0' != cli->qPrivate.xPublic.Output[0] ){
 8007346:	7803      	ldrb	r3, [r0, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d006      	beq.n	800735a <qATCLI_Run+0x7a>
 800734c:	6e66      	ldr	r6, [r4, #100]	; 0x64
                PutString( cli->qPrivate.xPublic.Output );
 800734e:	47b0      	blx	r6
        PutString( ( NULL != cli->qPrivate.term_EOL )? cli->qPrivate.term_EOL : QATCLI_DEFAULT_EOL_STRING );
 8007350:	6960      	ldr	r0, [r4, #20]
 8007352:	2800      	cmp	r0, #0
 8007354:	d100      	bne.n	8007358 <qATCLI_Run+0x78>
 8007356:	4831      	ldr	r0, [pc, #196]	; (800741c <qATCLI_Run+0x13c>)
 8007358:	47b0      	blx	r6
	if( QATCLI_NORESPONSE != retval ){
 800735a:	2d00      	cmp	r5, #0
 800735c:	d038      	beq.n	80073d0 <qATCLI_Run+0xf0>
    PutString = cli->qPrivate.xPublic.puts;
 800735e:	6e66      	ldr	r6, [r4, #100]	; 0x64
        switch( retval ){ /*handle the command-callback response*/
 8007360:	2d01      	cmp	r5, #1
 8007362:	d03d      	beq.n	80073e0 <qATCLI_Run+0x100>
 8007364:	dc1e      	bgt.n	80073a4 <qATCLI_Run+0xc4>
 8007366:	4b2e      	ldr	r3, [pc, #184]	; (8007420 <qATCLI_Run+0x140>)
 8007368:	429d      	cmp	r5, r3
 800736a:	d027      	beq.n	80073bc <qATCLI_Run+0xdc>
 800736c:	4b2d      	ldr	r3, [pc, #180]	; (8007424 <qATCLI_Run+0x144>)
 800736e:	429d      	cmp	r5, r3
 8007370:	d03b      	beq.n	80073ea <qATCLI_Run+0x10a>
                if( (qBase_t)retval < 0 ){
 8007372:	2d00      	cmp	r5, #0
 8007374:	da27      	bge.n	80073c6 <qATCLI_Run+0xe6>
                    ErrorCode = QATCLI_ERRORCODE( (qINT32_t)retval );
 8007376:	4268      	negs	r0, r5
                    (void)qIOUtil_ItoA( ErrorCode, cli->qPrivate.xPublic.Output, 10u );
 8007378:	220a      	movs	r2, #10
 800737a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    PutChar = cli->qPrivate.xPublic.putch;
 800737c:	6e27      	ldr	r7, [r4, #96]	; 0x60
                    (void)qIOUtil_ItoA( ErrorCode, cli->qPrivate.xPublic.Output, 10u );
 800737e:	f000 fbf2 	bl	8007b66 <qIOUtil_ItoA>
                    PutString( ( NULL != cli->qPrivate.ERROR_Response)? cli->qPrivate.ERROR_Response : QATCLI_DEFAULT_ERROR_RSP_STRING);
 8007382:	68a0      	ldr	r0, [r4, #8]
 8007384:	2800      	cmp	r0, #0
 8007386:	d100      	bne.n	800738a <qATCLI_Run+0xaa>
 8007388:	4827      	ldr	r0, [pc, #156]	; (8007428 <qATCLI_Run+0x148>)
 800738a:	47b0      	blx	r6
                    PutChar(':');
 800738c:	203a      	movs	r0, #58	; 0x3a
 800738e:	47b8      	blx	r7
                    PutString( cli->qPrivate.xPublic.Output );
 8007390:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007392:	47b0      	blx	r6
                    cli->qPrivate.xPublic.Output[0] = '\0';
 8007394:	2300      	movs	r3, #0
 8007396:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007398:	7013      	strb	r3, [r2, #0]
 800739a:	e014      	b.n	80073c6 <qATCLI_Run+0xe6>
                OutputRetval = QATCLI_DEVID;		/*check if the input its an ID request using the ATID command*/
 800739c:	4d23      	ldr	r5, [pc, #140]	; (800742c <qATCLI_Run+0x14c>)
 800739e:	e7cf      	b.n	8007340 <qATCLI_Run+0x60>
                OutputRetval = QATCLI_NORESPONSE;  /*nothing to do*/
 80073a0:	003d      	movs	r5, r7
 80073a2:	e7cd      	b.n	8007340 <qATCLI_Run+0x60>
        switch( retval ){ /*handle the command-callback response*/
 80073a4:	4b1b      	ldr	r3, [pc, #108]	; (8007414 <qATCLI_Run+0x134>)
 80073a6:	429d      	cmp	r5, r3
 80073a8:	d026      	beq.n	80073f8 <qATCLI_Run+0x118>
 80073aa:	dc2a      	bgt.n	8007402 <qATCLI_Run+0x122>
 80073ac:	4b1f      	ldr	r3, [pc, #124]	; (800742c <qATCLI_Run+0x14c>)
 80073ae:	429d      	cmp	r5, r3
 80073b0:	d1df      	bne.n	8007372 <qATCLI_Run+0x92>
                PutString( ( NULL != cli->qPrivate.Identifier )? cli->qPrivate.Identifier: QATCLI_DEFAULT_DEVID_STRING );
 80073b2:	6920      	ldr	r0, [r4, #16]
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d105      	bne.n	80073c4 <qATCLI_Run+0xe4>
 80073b8:	481d      	ldr	r0, [pc, #116]	; (8007430 <qATCLI_Run+0x150>)
 80073ba:	e003      	b.n	80073c4 <qATCLI_Run+0xe4>
                PutString( ( NULL != cli->qPrivate.ERROR_Response )? cli->qPrivate.ERROR_Response : QATCLI_DEFAULT_ERROR_RSP_STRING);
 80073bc:	68a0      	ldr	r0, [r4, #8]
 80073be:	2800      	cmp	r0, #0
 80073c0:	d100      	bne.n	80073c4 <qATCLI_Run+0xe4>
 80073c2:	4819      	ldr	r0, [pc, #100]	; (8007428 <qATCLI_Run+0x148>)
                PutString( cli->qPrivate.xPublic.Output );
 80073c4:	47b0      	blx	r6
        PutString( ( NULL != cli->qPrivate.term_EOL )? cli->qPrivate.term_EOL : QATCLI_DEFAULT_EOL_STRING );
 80073c6:	6960      	ldr	r0, [r4, #20]
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d100      	bne.n	80073ce <qATCLI_Run+0xee>
 80073cc:	4813      	ldr	r0, [pc, #76]	; (800741c <qATCLI_Run+0x13c>)
 80073ce:	47b0      	blx	r6
			qATCLI_Input_Flush( cli ); /*flush buffers*/
 80073d0:	0020      	movs	r0, r4
 80073d2:	f7ff ff7b 	bl	80072cc <qATCLI_Input_Flush>
			cli->qPrivate.xPublic.Output[0]  = '\0';
 80073d6:	2200      	movs	r2, #0
 80073d8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
			RetValue = qTrue;
 80073da:	2001      	movs	r0, #1
			cli->qPrivate.xPublic.Output[0]  = '\0';
 80073dc:	701a      	strb	r2, [r3, #0]
 80073de:	e783      	b.n	80072e8 <qATCLI_Run+0x8>
                PutString( ( NULL != cli->qPrivate.OK_Response )? cli->qPrivate.OK_Response: QATCLI_DEFAULT_OK_RSP_STRING );
 80073e0:	6860      	ldr	r0, [r4, #4]
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d1ee      	bne.n	80073c4 <qATCLI_Run+0xe4>
 80073e6:	4813      	ldr	r0, [pc, #76]	; (8007434 <qATCLI_Run+0x154>)
 80073e8:	e7ec      	b.n	80073c4 <qATCLI_Run+0xe4>
                PutString( ( NULL != cli->qPrivate.ERROR_Response )? cli->qPrivate.ERROR_Response : QATCLI_DEFAULT_ERROR_RSP_STRING);
 80073ea:	68a0      	ldr	r0, [r4, #8]
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d100      	bne.n	80073f2 <qATCLI_Run+0x112>
 80073f0:	480d      	ldr	r0, [pc, #52]	; (8007428 <qATCLI_Run+0x148>)
 80073f2:	47b0      	blx	r6
                PutString(QATCLI_DEAFULT_NOTALLOWED_RSP_STRING);
 80073f4:	4810      	ldr	r0, [pc, #64]	; (8007438 <qATCLI_Run+0x158>)
 80073f6:	e7e5      	b.n	80073c4 <qATCLI_Run+0xe4>
                PutString( ( NULL != cli->qPrivate.NOTFOUND_Response )? cli->qPrivate.NOTFOUND_Response: QATCLI_DEFAULT_NOTFOUND_RSP_STRING );
 80073f8:	68e0      	ldr	r0, [r4, #12]
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d1e2      	bne.n	80073c4 <qATCLI_Run+0xe4>
 80073fe:	480f      	ldr	r0, [pc, #60]	; (800743c <qATCLI_Run+0x15c>)
 8007400:	e7e0      	b.n	80073c4 <qATCLI_Run+0xe4>
                PutString( cli->qPrivate.xPublic.Output );
 8007402:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007404:	e7de      	b.n	80073c4 <qATCLI_Run+0xe4>
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	200006bc 	.word	0x200006bc
 800740c:	200006b8 	.word	0x200006b8
 8007410:	0800d27d 	.word	0x0800d27d
 8007414:	00007ffe 	.word	0x00007ffe
 8007418:	0800c5dd 	.word	0x0800c5dd
 800741c:	0800d707 	.word	0x0800d707
 8007420:	ffff8001 	.word	0xffff8001
 8007424:	ffff8002 	.word	0xffff8002
 8007428:	0800c5c3 	.word	0x0800c5c3
 800742c:	00007ffd 	.word	0x00007ffd
 8007430:	0800c5c9 	.word	0x0800c5c9
 8007434:	0800c4e3 	.word	0x0800c4e3
 8007438:	0800c5e2 	.word	0x0800c5e2
 800743c:	0800c5d5 	.word	0x0800c5d5

08007440 <qATCLI_GetArgString>:
char* qATCLI_GetArgString( const qATCLI_PreCmd_t param, qINT8_t n, char* out ){
 8007440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( ( NULL != param ) && ( NULL != out ) && ( n > 0 ) ){
 8007442:	2800      	cmp	r0, #0
 8007444:	d02c      	beq.n	80074a0 <qATCLI_GetArgString+0x60>
 8007446:	2a00      	cmp	r2, #0
 8007448:	d013      	beq.n	8007472 <qATCLI_GetArgString+0x32>
 800744a:	2900      	cmp	r1, #0
 800744c:	dd28      	ble.n	80074a0 <qATCLI_GetArgString+0x60>
        if( qATCLI_CMDTYPE_PARA ==  param->Type ){
 800744e:	2380      	movs	r3, #128	; 0x80
 8007450:	8b84      	ldrh	r4, [r0, #28]
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	429c      	cmp	r4, r3
 8007456:	d123      	bne.n	80074a0 <qATCLI_GetArgString+0x60>
            n--;
 8007458:	3901      	subs	r1, #1
 800745a:	b24b      	sxtb	r3, r1
 800745c:	9301      	str	r3, [sp, #4]
	char *RetPtr = NULL;
 800745e:	2300      	movs	r3, #0
	qINT8_t i,j, argc = 0;
 8007460:	001c      	movs	r4, r3
            j = 0;
 8007462:	001f      	movs	r7, r3
            for( i=0 ; '\0' != param->StrData[i]; i++){
 8007464:	0019      	movs	r1, r3
                    out[j] = '\0';
 8007466:	469c      	mov	ip, r3
            for( i=0 ; '\0' != param->StrData[i]; i++){
 8007468:	6845      	ldr	r5, [r0, #4]
 800746a:	5c6e      	ldrb	r6, [r5, r1]
 800746c:	2e00      	cmp	r6, #0
 800746e:	d102      	bne.n	8007476 <qATCLI_GetArgString+0x36>
 8007470:	001a      	movs	r2, r3
}
 8007472:	0010      	movs	r0, r2
 8007474:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                if(argc == n){
 8007476:	9d01      	ldr	r5, [sp, #4]
 8007478:	42ac      	cmp	r4, r5
 800747a:	d108      	bne.n	800748e <qATCLI_GetArgString+0x4e>
                    if( ( argc > n ) || ( QATCLI_DEFAULT_ATSET_DELIM == param->StrData[i] ) ){
 800747c:	2e2c      	cmp	r6, #44	; 0x2c
 800747e:	d0f8      	beq.n	8007472 <qATCLI_GetArgString+0x32>
                    out[j] = '\0';
 8007480:	4663      	mov	r3, ip
                    out[j++] = param->StrData[i];
 8007482:	1c7d      	adds	r5, r7, #1
 8007484:	b26d      	sxtb	r5, r5
 8007486:	55d6      	strb	r6, [r2, r7]
                    out[j] = '\0';
 8007488:	5553      	strb	r3, [r2, r5]
                    out[j++] = param->StrData[i];
 800748a:	002f      	movs	r7, r5
                    out[j] = '\0';
 800748c:	0013      	movs	r3, r2
                if( QATCLI_DEFAULT_ATSET_DELIM == param->StrData[i] ){
 800748e:	6845      	ldr	r5, [r0, #4]
 8007490:	5c6d      	ldrb	r5, [r5, r1]
 8007492:	2d2c      	cmp	r5, #44	; 0x2c
 8007494:	d101      	bne.n	800749a <qATCLI_GetArgString+0x5a>
                    argc++;
 8007496:	3401      	adds	r4, #1
 8007498:	b264      	sxtb	r4, r4
 800749a:	3101      	adds	r1, #1
 800749c:	b249      	sxtb	r1, r1
 800749e:	e7e3      	b.n	8007468 <qATCLI_GetArgString+0x28>
	char *RetPtr = NULL;
 80074a0:	2200      	movs	r2, #0
 80074a2:	e7e6      	b.n	8007472 <qATCLI_GetArgString+0x32>

080074a4 <GetArgString>:
    if( NULL != Current){
 80074a4:	4b06      	ldr	r3, [pc, #24]	; (80074c0 <GetArgString+0x1c>)
static char* GetArgString( qArgNum_t n, char* out ){
 80074a6:	b510      	push	{r4, lr}
    if( NULL != Current){
 80074a8:	681b      	ldr	r3, [r3, #0]
static char* GetArgString( qArgNum_t n, char* out ){
 80074aa:	0004      	movs	r4, r0
 80074ac:	000a      	movs	r2, r1
    char* RetValue = NULL;
 80074ae:	1e18      	subs	r0, r3, #0
    if( NULL != Current){
 80074b0:	d004      	beq.n	80074bc <GetArgString+0x18>
        RetValue = qATCLI_GetArgString( &Current->qPrivate.Params, n, out );
 80074b2:	3338      	adds	r3, #56	; 0x38
 80074b4:	0018      	movs	r0, r3
 80074b6:	0021      	movs	r1, r4
 80074b8:	f7ff ffc2 	bl	8007440 <qATCLI_GetArgString>
}
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	200006bc 	.word	0x200006bc

080074c4 <qATCLI_GetArgPtr>:

Return value:

    A pointer to the desired argument. NULL  pointer if the argument is not present.
*/
char* qATCLI_GetArgPtr( const qATCLI_PreCmd_t param, qINT8_t n ){
 80074c4:	b530      	push	{r4, r5, lr}
	qIndex_t i, argc = 0;
    char *RetPtr = NULL;
 80074c6:	1e03      	subs	r3, r0, #0
	if( ( NULL != param ) && ( n > 0 ) ) {
 80074c8:	d01b      	beq.n	8007502 <qATCLI_GetArgPtr+0x3e>
    char *RetPtr = NULL;
 80074ca:	2300      	movs	r3, #0
	if( ( NULL != param ) && ( n > 0 ) ) {
 80074cc:	4299      	cmp	r1, r3
 80074ce:	dd18      	ble.n	8007502 <qATCLI_GetArgPtr+0x3e>
        if( qATCLI_CMDTYPE_PARA == param->Type ) {
 80074d0:	2280      	movs	r2, #128	; 0x80
 80074d2:	8b84      	ldrh	r4, [r0, #28]
 80074d4:	0052      	lsls	r2, r2, #1
 80074d6:	4294      	cmp	r4, r2
 80074d8:	d113      	bne.n	8007502 <qATCLI_GetArgPtr+0x3e>
 80074da:	6843      	ldr	r3, [r0, #4]
            if( 1 == n ){
 80074dc:	2901      	cmp	r1, #1
 80074de:	d010      	beq.n	8007502 <qATCLI_GetArgPtr+0x3e>
                RetPtr = param->StrData;
            } 
            else{
                n--;
 80074e0:	001a      	movs	r2, r3
	qIndex_t i, argc = 0;
 80074e2:	2500      	movs	r5, #0
                n--;
 80074e4:	3901      	subs	r1, #1
 80074e6:	b2c9      	uxtb	r1, r1
	            for( i = 0 ; '\0' != param->StrData[i] ; i++){
 80074e8:	7810      	ldrb	r0, [r2, #0]
 80074ea:	1ad4      	subs	r4, r2, r3
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d101      	bne.n	80074f4 <qATCLI_GetArgPtr+0x30>
    char *RetPtr = NULL;
 80074f0:	0003      	movs	r3, r0
 80074f2:	e006      	b.n	8007502 <qATCLI_GetArgPtr+0x3e>
		            if( (char)QATCLI_DEFAULT_ATSET_DELIM == param->StrData[i] ){
 80074f4:	282c      	cmp	r0, #44	; 0x2c
 80074f6:	d106      	bne.n	8007506 <qATCLI_GetArgPtr+0x42>
			            if( ++argc >= (qIndex_t)n ){
 80074f8:	3501      	adds	r5, #1
 80074fa:	428d      	cmp	r5, r1
 80074fc:	d303      	bcc.n	8007506 <qATCLI_GetArgPtr+0x42>
                            RetPtr = param->StrData+i+1;        
 80074fe:	3401      	adds	r4, #1
 8007500:	191b      	adds	r3, r3, r4
	            }
            }
        }
    }
    return RetPtr;
}
 8007502:	0018      	movs	r0, r3
 8007504:	bd30      	pop	{r4, r5, pc}
 8007506:	3201      	adds	r2, #1
 8007508:	e7ee      	b.n	80074e8 <qATCLI_GetArgPtr+0x24>
	...

0800750c <GetArgPtr>:
    if( NULL != Current){
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <GetArgPtr+0x18>)
static char* GetArgPtr( qArgNum_t n ){
 800750e:	0001      	movs	r1, r0
    if( NULL != Current){
 8007510:	681b      	ldr	r3, [r3, #0]
static char* GetArgPtr( qArgNum_t n ){
 8007512:	b510      	push	{r4, lr}
    char *RetValue = NULL;
 8007514:	1e18      	subs	r0, r3, #0
    if( NULL != Current){
 8007516:	d003      	beq.n	8007520 <GetArgPtr+0x14>
        RetValue = qATCLI_GetArgPtr( &Current->qPrivate.Params, n );
 8007518:	3338      	adds	r3, #56	; 0x38
 800751a:	0018      	movs	r0, r3
 800751c:	f7ff ffd2 	bl	80074c4 <qATCLI_GetArgPtr>
}
 8007520:	bd10      	pop	{r4, pc}
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	200006bc 	.word	0x200006bc

08007528 <qATCLI_GetArgInt>:

Return value:

    The argument parsed as integer. Same behavior of qIOUtil_AtoI. If argument not found returns 0
*/
int qATCLI_GetArgInt( const qATCLI_PreCmd_t param, qINT8_t n ){
 8007528:	b510      	push	{r4, lr}
    /*cstat -CERT-STR34-C*/
	return (int) qIOUtil_AtoI( qATCLI_GetArgPtr(param, n) );
 800752a:	f7ff ffcb 	bl	80074c4 <qATCLI_GetArgPtr>
 800752e:	f000 faf9 	bl	8007b24 <qIOUtil_AtoI>
    /*cstat +CERT-STR34-C*/
}
 8007532:	bd10      	pop	{r4, pc}

08007534 <GetArgInt>:
static int GetArgInt( qArgNum_t n ){
 8007534:	0001      	movs	r1, r0
    int RetValue = 0;
 8007536:	2000      	movs	r0, #0
    if( NULL != Current){
 8007538:	4b04      	ldr	r3, [pc, #16]	; (800754c <GetArgInt+0x18>)
static int GetArgInt( qArgNum_t n ){
 800753a:	b510      	push	{r4, lr}
    if( NULL != Current){
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4283      	cmp	r3, r0
 8007540:	d003      	beq.n	800754a <GetArgInt+0x16>
        RetValue = qATCLI_GetArgInt( &Current->qPrivate.Params, n );
 8007542:	3338      	adds	r3, #56	; 0x38
 8007544:	0018      	movs	r0, r3
 8007546:	f7ff ffef 	bl	8007528 <qATCLI_GetArgInt>
}
 800754a:	bd10      	pop	{r4, pc}
 800754c:	200006bc 	.word	0x200006bc

08007550 <qATCLI_GetArgFlt>:

Return value:

    The argument parsed as Float. Same behavior of qIOUtil_AtoF. If argument not found returns 0
*/
qFloat32_t qATCLI_GetArgFlt( const qATCLI_PreCmd_t param, qINT8_t n ){
 8007550:	b510      	push	{r4, lr}
	return (qFloat32_t) qIOUtil_AtoF( qATCLI_GetArgPtr(param, n) );
 8007552:	f7ff ffb7 	bl	80074c4 <qATCLI_GetArgPtr>
 8007556:	f000 fa89 	bl	8007a6c <qIOUtil_AtoF>
 800755a:	f7fb fc55 	bl	8002e08 <__aeabi_d2f>
}
 800755e:	bd10      	pop	{r4, pc}

08007560 <GetArgFlt>:
    if( NULL != Current){
 8007560:	4b05      	ldr	r3, [pc, #20]	; (8007578 <GetArgFlt+0x18>)
static qFloat32_t GetArgFlt( qArgNum_t n ){
 8007562:	0001      	movs	r1, r0
    if( NULL != Current){
 8007564:	6818      	ldr	r0, [r3, #0]
static qFloat32_t GetArgFlt( qArgNum_t n ){
 8007566:	b510      	push	{r4, lr}
    if( NULL != Current){
 8007568:	2800      	cmp	r0, #0
 800756a:	d003      	beq.n	8007574 <GetArgFlt+0x14>
        RetValue = qATCLI_GetArgFlt( &Current->qPrivate.Params, n );
 800756c:	3038      	adds	r0, #56	; 0x38
 800756e:	f7ff ffef 	bl	8007550 <qATCLI_GetArgFlt>
}
 8007572:	bd10      	pop	{r4, pc}
    qFloat32_t RetValue = 0.0f;
 8007574:	2000      	movs	r0, #0
    return RetValue;  
 8007576:	e7fc      	b.n	8007572 <GetArgFlt+0x12>
 8007578:	200006bc 	.word	0x200006bc

0800757c <qATCLI_GetArgHex>:

Return value:

    The HEX argument parsed as qUINT32_t. Same behavior of qIOUtil_XtoU32. If argument not found returns 0
*/
qUINT32_t qATCLI_GetArgHex( const qATCLI_PreCmd_t param, qINT8_t n ){
 800757c:	b510      	push	{r4, lr}
    /*cstat -CERT-STR34-C*/
	return (qUINT32_t) qIOUtil_XtoU32( qATCLI_GetArgPtr(param, n) );
 800757e:	f7ff ffa1 	bl	80074c4 <qATCLI_GetArgPtr>
 8007582:	f000 fa37 	bl	80079f4 <qIOUtil_XtoU32>
    /*cstat +CERT-STR34-C*/ 
}
 8007586:	bd10      	pop	{r4, pc}

08007588 <GetArgHex>:
static qUINT32_t GetArgHex( qArgNum_t n ){
 8007588:	0001      	movs	r1, r0
    qUINT32_t RetValue = 0uL;
 800758a:	2000      	movs	r0, #0
    if( NULL != Current){
 800758c:	4b04      	ldr	r3, [pc, #16]	; (80075a0 <GetArgHex+0x18>)
static qUINT32_t GetArgHex( qArgNum_t n ){
 800758e:	b510      	push	{r4, lr}
    if( NULL != Current){
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4283      	cmp	r3, r0
 8007594:	d003      	beq.n	800759e <GetArgHex+0x16>
        RetValue = qATCLI_GetArgHex( &Current->qPrivate.Params, n );
 8007596:	3338      	adds	r3, #56	; 0x38
 8007598:	0018      	movs	r0, r3
 800759a:	f7ff ffef 	bl	800757c <qATCLI_GetArgHex>
}
 800759e:	bd10      	pop	{r4, pc}
 80075a0:	200006bc 	.word	0x200006bc

080075a4 <qClock_InternalTick>:

static qTimingBase_t TimmingBase;

/*============================================================================*/
static qClock_t qClock_InternalTick( void ){
    return _qSysTick_Epochs_;
 80075a4:	4b01      	ldr	r3, [pc, #4]	; (80075ac <qClock_InternalTick+0x8>)
 80075a6:	6818      	ldr	r0, [r3, #0]
} 
 80075a8:	4770      	bx	lr
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	200006c8 	.word	0x200006c8

080075b0 <qClock_SetTimeBase>:

    - tb : Time base 

*/
void qClock_SetTimeBase( const qTimingBase_t tb ){
    TimmingBase = tb;
 80075b0:	4b01      	ldr	r3, [pc, #4]	; (80075b8 <qClock_SetTimeBase+0x8>)
 80075b2:	6018      	str	r0, [r3, #0]
} 
 80075b4:	4770      	bx	lr
 80075b6:	46c0      	nop			; (mov r8, r8)
 80075b8:	200006c4 	.word	0x200006c4

080075bc <qClock_SetTickProvider>:
    - provider : A pointer to the tick provider function  
                 qClock_t fcn(void)
                 qUINT32_t fcn(void)

*/
void qClock_SetTickProvider( qGetTickFcn_t provider ){
 80075bc:	4b03      	ldr	r3, [pc, #12]	; (80075cc <qClock_SetTickProvider+0x10>)
    if( NULL != provider ){
 80075be:	2800      	cmp	r0, #0
 80075c0:	d001      	beq.n	80075c6 <qClock_SetTickProvider+0xa>
        qClock_GetTick = provider;
 80075c2:	6018      	str	r0, [r3, #0]
    }
    else{
        qClock_GetTick = &qClock_InternalTick;
    }
}
 80075c4:	4770      	bx	lr
        qClock_GetTick = &qClock_InternalTick;
 80075c6:	4a02      	ldr	r2, [pc, #8]	; (80075d0 <qClock_SetTickProvider+0x14>)
 80075c8:	601a      	str	r2, [r3, #0]
}
 80075ca:	e7fb      	b.n	80075c4 <qClock_SetTickProvider+0x8>
 80075cc:	20000240 	.word	0x20000240
 80075d0:	080075a5 	.word	0x080075a5

080075d4 <qClock_Convert2Clock>:

Return value:

    time (t) in epochs
*/
qClock_t qClock_Convert2Clock( const qTime_t t ){
 80075d4:	b510      	push	{r4, lr}
    #else 
        #if ( Q_SETUP_TICK_IN_HERTZ == 1 )
            return (qClock_t)(t*TimmingBase);
        #else
            qTime_t epochs = qTimeImmediate;
            if( t > qTimeImmediate ){
 80075d6:	2100      	movs	r1, #0
qClock_t qClock_Convert2Clock( const qTime_t t ){
 80075d8:	1c04      	adds	r4, r0, #0
            if( t > qTimeImmediate ){
 80075da:	f7f8 fea1 	bl	8000320 <__aeabi_fcmpgt>
 80075de:	2800      	cmp	r0, #0
 80075e0:	d00b      	beq.n	80075fa <qClock_Convert2Clock+0x26>
                epochs = (t/TimmingBase) + QFLT_TIME_FIX_VALUE;
 80075e2:	4b07      	ldr	r3, [pc, #28]	; (8007600 <qClock_Convert2Clock+0x2c>)
 80075e4:	1c20      	adds	r0, r4, #0
 80075e6:	6819      	ldr	r1, [r3, #0]
 80075e8:	f7f9 f942 	bl	8000870 <__aeabi_fdiv>
 80075ec:	21fc      	movs	r1, #252	; 0xfc
 80075ee:	0589      	lsls	r1, r1, #22
 80075f0:	f7f8 ffa4 	bl	800053c <__aeabi_fadd>
            }           
            return (qClock_t)epochs;
 80075f4:	f7f8 fec8 	bl	8000388 <__aeabi_f2uiz>
        #endif    
    #endif
}
 80075f8:	bd10      	pop	{r4, pc}
            qTime_t epochs = qTimeImmediate;
 80075fa:	2000      	movs	r0, #0
 80075fc:	e7fa      	b.n	80075f4 <qClock_Convert2Clock+0x20>
 80075fe:	46c0      	nop			; (mov r8, r8)
 8007600:	200006c4 	.word	0x200006c4

08007604 <qClock_SysTick>:

Feed the system tick. This call is mandatory and must be called once inside the 
dedicated timer interrupt service routine (ISR). 
*/    
void qClock_SysTick( void ){ 
    _qSysTick_Epochs_++; 
 8007604:	4a02      	ldr	r2, [pc, #8]	; (8007610 <qClock_SysTick+0xc>)
 8007606:	6813      	ldr	r3, [r2, #0]
 8007608:	3301      	adds	r3, #1
 800760a:	6013      	str	r3, [r2, #0]
}
 800760c:	4770      	bx	lr
 800760e:	46c0      	nop			; (mov r8, r8)
 8007610:	200006c8 	.word	0x200006c8

08007614 <qClock_TimeDeadlineCheck>:
    returns qFalse
*/
/*============================================================================*/
qBool_t qClock_TimeDeadlineCheck( const qClock_t ti, const qClock_t td ){
    qBool_t RetValue = qFalse;
    if( ( qClock_GetTick() - ti ) >= td ){
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <qClock_TimeDeadlineCheck+0x18>)
qBool_t qClock_TimeDeadlineCheck( const qClock_t ti, const qClock_t td ){
 8007616:	b570      	push	{r4, r5, r6, lr}
    if( ( qClock_GetTick() - ti ) >= td ){
 8007618:	681b      	ldr	r3, [r3, #0]
qBool_t qClock_TimeDeadlineCheck( const qClock_t ti, const qClock_t td ){
 800761a:	000c      	movs	r4, r1
 800761c:	0005      	movs	r5, r0
    if( ( qClock_GetTick() - ti ) >= td ){
 800761e:	4798      	blx	r3
 8007620:	1b45      	subs	r5, r0, r5
 8007622:	2000      	movs	r0, #0
 8007624:	42a5      	cmp	r5, r4
 8007626:	4140      	adcs	r0, r0
        RetValue = qTrue;
    }
    return RetValue; 
 8007628:	b2c0      	uxtb	r0, r0
}
 800762a:	bd70      	pop	{r4, r5, r6, pc}
 800762c:	20000240 	.word	0x20000240

08007630 <qCritical_Enter>:

Enter a critical section. This function invokes the <Disabler> if available.
Please see <qCritical_SetInterruptsED>

*/  
void qCritical_Enter( void ){
 8007630:	b510      	push	{r4, lr}
    qInt_Disabler_t Disabler;
    if( NULL != Critical.I_Disable ){
 8007632:	4c03      	ldr	r4, [pc, #12]	; (8007640 <qCritical_Enter+0x10>)
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <qCritical_Enter+0xe>
        Disabler = Critical.I_Disable;
        Critical.IntFlags = Disabler();
 800763a:	4798      	blx	r3
 800763c:	60a0      	str	r0, [r4, #8]
    }
}
 800763e:	bd10      	pop	{r4, pc}
 8007640:	200006cc 	.word	0x200006cc

08007644 <qCritical_Exit>:
Please see <qCritical_SetInterruptsED>

*/ 
void qCritical_Exit( void ){
    qInt_Restorer_t Restorer;
    if( NULL != Critical.I_Restorer ){
 8007644:	4a03      	ldr	r2, [pc, #12]	; (8007654 <qCritical_Exit+0x10>)
void qCritical_Exit( void ){
 8007646:	b510      	push	{r4, lr}
    if( NULL != Critical.I_Restorer ){
 8007648:	6853      	ldr	r3, [r2, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <qCritical_Exit+0xe>
        Restorer = Critical.I_Restorer;
        Restorer( Critical.IntFlags );
 800764e:	6890      	ldr	r0, [r2, #8]
 8007650:	4798      	blx	r3
    }
}
 8007652:	bd10      	pop	{r4, pc}
 8007654:	200006cc 	.word	0x200006cc

08007658 <qStateMachine_ExecSubStateIfAvailable>:
    else{
        qStateMachine_ExecSubStateIfAvailable( obj->qPrivate.Unexpected, handle ); /*Run unexpected state if available*/
    }
}
/*============================================================================*/
static void qStateMachine_ExecSubStateIfAvailable( const qSM_SubState_t substate, qSM_Handler_t handle ){
 8007658:	b510      	push	{r4, lr}
 800765a:	1e03      	subs	r3, r0, #0
    if( NULL != substate ){
 800765c:	d001      	beq.n	8007662 <qStateMachine_ExecSubStateIfAvailable+0xa>
        substate( handle );
 800765e:	0008      	movs	r0, r1
 8007660:	4798      	blx	r3
    }
}
 8007662:	bd10      	pop	{r4, pc}

08007664 <qStateMachine_ExecStateIfAvailable>:
 static void qStateMachine_ExecStateIfAvailable( qSM_t * const obj, const qSM_State_t state, qSM_Signal_t xSignal ){
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    handle = &obj->qPrivate.xPublic;
 8007666:	0005      	movs	r5, r0
 8007668:	4f10      	ldr	r7, [pc, #64]	; (80076ac <qStateMachine_ExecStateIfAvailable+0x48>)
 800766a:	3540      	adds	r5, #64	; 0x40
    handle->Signal = xSignal;
 800766c:	6502      	str	r2, [r0, #80]	; 0x50
 static void qStateMachine_ExecStateIfAvailable( qSM_t * const obj, const qSM_State_t state, qSM_Signal_t xSignal ){
 800766e:	0004      	movs	r4, r0
 8007670:	000e      	movs	r6, r1
    qStateMachine_ExecSubStateIfAvailable( obj->qPrivate.BeforeAnyState , handle ); /*eval the BeforeAnyState if available*/
 8007672:	68c0      	ldr	r0, [r0, #12]
 8007674:	0029      	movs	r1, r5
 8007676:	f7ff ffef 	bl	8007658 <qStateMachine_ExecSubStateIfAvailable>
    qSM_Status_t ExitStatus = qSM_EXIT_FAILURE;
 800767a:	0038      	movs	r0, r7
    if( NULL != state ){ /*eval the state if available*/
 800767c:	2e00      	cmp	r6, #0
 800767e:	d001      	beq.n	8007684 <qStateMachine_ExecStateIfAvailable+0x20>
        ExitStatus = state( handle );
 8007680:	0028      	movs	r0, r5
 8007682:	47b0      	blx	r6
    obj->qPrivate.xPublic.LastReturnStatus = ExitStatus;
 8007684:	0023      	movs	r3, r4
 8007686:	3356      	adds	r3, #86	; 0x56
 8007688:	8018      	strh	r0, [r3, #0]
    obj->qPrivate.xPublic.LastState = state; /*update the LastState*/
 800768a:	64a6      	str	r6, [r4, #72]	; 0x48
    if( qSM_EXIT_FAILURE == ExitStatus ){
 800768c:	42b8      	cmp	r0, r7
 800768e:	d104      	bne.n	800769a <qStateMachine_ExecStateIfAvailable+0x36>
        qStateMachine_ExecSubStateIfAvailable( obj->qPrivate.Failure, handle ); /*Run failure state if available*/
 8007690:	0029      	movs	r1, r5
 8007692:	6820      	ldr	r0, [r4, #0]
        qStateMachine_ExecSubStateIfAvailable( obj->qPrivate.Unexpected, handle ); /*Run unexpected state if available*/
 8007694:	f7ff ffe0 	bl	8007658 <qStateMachine_ExecSubStateIfAvailable>
}
 8007698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( qSM_EXIT_SUCCESS == ExitStatus ){
 800769a:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <qStateMachine_ExecStateIfAvailable+0x4c>)
        qStateMachine_ExecSubStateIfAvailable( obj->qPrivate.Success, handle ); /*Run success state if available*/
 800769c:	0029      	movs	r1, r5
    else if ( qSM_EXIT_SUCCESS == ExitStatus ){
 800769e:	4298      	cmp	r0, r3
 80076a0:	d101      	bne.n	80076a6 <qStateMachine_ExecStateIfAvailable+0x42>
        qStateMachine_ExecSubStateIfAvailable( obj->qPrivate.Success, handle ); /*Run success state if available*/
 80076a2:	6860      	ldr	r0, [r4, #4]
 80076a4:	e7f6      	b.n	8007694 <qStateMachine_ExecStateIfAvailable+0x30>
        qStateMachine_ExecSubStateIfAvailable( obj->qPrivate.Unexpected, handle ); /*Run unexpected state if available*/
 80076a6:	68a0      	ldr	r0, [r4, #8]
 80076a8:	e7f4      	b.n	8007694 <qStateMachine_ExecStateIfAvailable+0x30>
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	ffff8002 	.word	0xffff8002
 80076b0:	ffff8001 	.word	0xffff8001

080076b4 <qStateMachine_Setup>:
qBool_t qStateMachine_Setup( qSM_t * const obj, qSM_State_t InitState, qSM_SubState_t SuccessState, qSM_SubState_t FailureState, qSM_SubState_t UnexpectedState, qSM_SubState_t BeforeAnyState ){
 80076b4:	b530      	push	{r4, r5, lr}
 80076b6:	2400      	movs	r4, #0
    qBool_t RetValue = qFalse;
 80076b8:	0005      	movs	r5, r0
    if( ( NULL != obj ) && ( NULL != InitState ) ){
 80076ba:	42a0      	cmp	r0, r4
 80076bc:	d018      	beq.n	80076f0 <qStateMachine_Setup+0x3c>
    qBool_t RetValue = qFalse;
 80076be:	000d      	movs	r5, r1
    if( ( NULL != obj ) && ( NULL != InitState ) ){
 80076c0:	42a1      	cmp	r1, r4
 80076c2:	d015      	beq.n	80076f0 <qStateMachine_Setup+0x3c>
        obj->qPrivate.xPublic.NextState = InitState;
 80076c4:	6401      	str	r1, [r0, #64]	; 0x40
        obj->qPrivate.xPublic.PreviousReturnStatus = qSM_EXIT_SUCCESS;
 80076c6:	0001      	movs	r1, r0
 80076c8:	4d0a      	ldr	r5, [pc, #40]	; (80076f4 <qStateMachine_Setup+0x40>)
 80076ca:	3154      	adds	r1, #84	; 0x54
        obj->qPrivate.xPublic.PreviousState = NULL;
 80076cc:	6444      	str	r4, [r0, #68]	; 0x44
        obj->qPrivate.xPublic.PreviousReturnStatus = qSM_EXIT_SUCCESS;
 80076ce:	800d      	strh	r5, [r1, #0]
        RetValue = qTrue;
 80076d0:	2501      	movs	r5, #1
        obj->qPrivate.Failure = FailureState;
 80076d2:	6003      	str	r3, [r0, #0]
        obj->qPrivate.Unexpected = UnexpectedState;
 80076d4:	9b03      	ldr	r3, [sp, #12]
        obj->qPrivate.xPublic.LastState = NULL;
 80076d6:	6484      	str	r4, [r0, #72]	; 0x48
        obj->qPrivate.Unexpected = UnexpectedState;
 80076d8:	6083      	str	r3, [r0, #8]
        obj->qPrivate.BeforeAnyState = BeforeAnyState;
 80076da:	9b04      	ldr	r3, [sp, #16]
        obj->qPrivate.xPublic.Signal = (qSM_Signal_t)0u;
 80076dc:	6504      	str	r4, [r0, #80]	; 0x50
        obj->qPrivate.xPublic.Parent = NULL;
 80076de:	6584      	str	r4, [r0, #88]	; 0x58
        obj->qPrivate.Success = SuccessState;
 80076e0:	6042      	str	r2, [r0, #4]
        obj->qPrivate.BeforeAnyState = BeforeAnyState;
 80076e2:	60c3      	str	r3, [r0, #12]
        obj->qPrivate.TransitionTable = NULL;
 80076e4:	6104      	str	r4, [r0, #16]
        obj->qPrivate.Owner = NULL;
 80076e6:	6144      	str	r4, [r0, #20]
        obj->qPrivate.SignalQueue.qPrivate.head = NULL;
 80076e8:	6244      	str	r4, [r0, #36]	; 0x24
        obj->qPrivate.Composite.head = NULL;
 80076ea:	6184      	str	r4, [r0, #24]
        obj->qPrivate.Composite.next = NULL;
 80076ec:	61c4      	str	r4, [r0, #28]
        obj->qPrivate.Composite.rootState = NULL;
 80076ee:	6204      	str	r4, [r0, #32]
}
 80076f0:	0028      	movs	r0, r5
 80076f2:	bd30      	pop	{r4, r5, pc}
 80076f4:	ffff8001 	.word	0xffff8001

080076f8 <qStateMachine_SweepTransitionTable>:

Return value:

    Returns qTrue if the sweep produce a state transition, otherwise returns qFalse;
*/
qBool_t qStateMachine_SweepTransitionTable( qSM_t * const obj, qSM_Signal_t xSignal ){
 80076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fa:	1e04      	subs	r4, r0, #0
    qSM_State_t xCurrentState;
    size_t iEntry;
    qBool_t SigActionGuard = qTrue;
    qSM_t *toTargetFSM;

    if( NULL != obj ){
 80076fc:	d020      	beq.n	8007740 <qStateMachine_SweepTransitionTable+0x48>
        table = obj->qPrivate.TransitionTable; /*MISRAC2012-Rule-11.5 deviation allowed*/
 80076fe:	6902      	ldr	r2, [r0, #16]
    qBool_t RetValue = qFalse;
 8007700:	1e10      	subs	r0, r2, #0
        if( NULL != table ){
 8007702:	d01d      	beq.n	8007740 <qStateMachine_SweepTransitionTable+0x48>
    qBool_t RetValue = qFalse;
 8007704:	2000      	movs	r0, #0
            /*xSignal = obj->qPrivate.xPublic.Signal;*/
            if( xSignal < QSM_SIGNAL_RANGE_MAX ){ /*check for a valid signal value*/
 8007706:	1d4b      	adds	r3, r1, #5
 8007708:	d81a      	bhi.n	8007740 <qStateMachine_SweepTransitionTable+0x48>
                xCurrentState = obj->qPrivate.xPublic.NextState;
 800770a:	6c26      	ldr	r6, [r4, #64]	; 0x40
                for( iEntry = 0; iEntry < table->qPrivate.NumberOfEntries; iEntry++ ){ /*loop the transition-table entries*/
 800770c:	6815      	ldr	r5, [r2, #0]
 800770e:	4285      	cmp	r5, r0
 8007710:	d101      	bne.n	8007716 <qStateMachine_SweepTransitionTable+0x1e>
    qBool_t RetValue = qFalse;
 8007712:	2000      	movs	r0, #0
 8007714:	e014      	b.n	8007740 <qStateMachine_SweepTransitionTable+0x48>
                    iTransition = table->qPrivate.Transitions[iEntry]; /*get the current entry*/
 8007716:	2318      	movs	r3, #24
 8007718:	4343      	muls	r3, r0
 800771a:	6857      	ldr	r7, [r2, #4]
 800771c:	18fb      	adds	r3, r7, r3
 800771e:	681f      	ldr	r7, [r3, #0]
                    if( ( ( NULL == iTransition.xCurrentState ) || ( xCurrentState == iTransition.xCurrentState ) ) && ( xSignal == iTransition.Signal) ){ /*both conditions match*/
 8007720:	2f00      	cmp	r7, #0
 8007722:	d001      	beq.n	8007728 <qStateMachine_SweepTransitionTable+0x30>
 8007724:	42be      	cmp	r6, r7
 8007726:	d11a      	bne.n	800775e <qStateMachine_SweepTransitionTable+0x66>
 8007728:	685f      	ldr	r7, [r3, #4]
 800772a:	42b9      	cmp	r1, r7
 800772c:	d117      	bne.n	800775e <qStateMachine_SweepTransitionTable+0x66>
                    iTransition = table->qPrivate.Transitions[iEntry]; /*get the current entry*/
 800772e:	689e      	ldr	r6, [r3, #8]
 8007730:	330c      	adds	r3, #12
 8007732:	cba4      	ldmia	r3!, {r2, r5, r7}
                        if( NULL != iTransition.SignalAction ){  /*run the signal-action(or guard) if available*/
 8007734:	2a00      	cmp	r2, #0
 8007736:	d104      	bne.n	8007742 <qStateMachine_SweepTransitionTable+0x4a>
                            SigActionGuard = iTransition.SignalAction( &obj->qPrivate.xPublic );
                        }
                        if( qTrue == SigActionGuard ){ /*check if he guard allow the transition*/
                            obj->qPrivate.xPublic.NextState = iTransition.xNextState;    /*make the transition to the target state*/
 8007738:	6426      	str	r6, [r4, #64]	; 0x40
                            /*cstat -MISRAC2012-Rule-11.5 -CERT-EXP36-C_b*/
                            toTargetFSM = (qSM_t*)iTransition.xToTargetHandle; /*MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed*/
                            /*cstat +MISRAC2012-Rule-11.5 +CERT-EXP36-C_b*/
                            if( ( NULL != toTargetFSM ) ){ /*run the exit action on target FSM*/
 800773a:	2d00      	cmp	r5, #0
 800773c:	d107      	bne.n	800774e <qStateMachine_SweepTransitionTable+0x56>
                            /* TODO: signal should be queueded again*/ 
                        }
                        else{
                            /*nothing to do here*/
                        }
                        RetValue = qTrue;
 800773e:	2001      	movs	r0, #1
                }
            }
        }        
    }
    return RetValue;
}
 8007740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                            SigActionGuard = iTransition.SignalAction( &obj->qPrivate.xPublic );
 8007742:	0020      	movs	r0, r4
 8007744:	3040      	adds	r0, #64	; 0x40
 8007746:	4790      	blx	r2
                        if( qTrue == SigActionGuard ){ /*check if he guard allow the transition*/
 8007748:	2801      	cmp	r0, #1
 800774a:	d1f8      	bne.n	800773e <qStateMachine_SweepTransitionTable+0x46>
 800774c:	e7f4      	b.n	8007738 <qStateMachine_SweepTransitionTable+0x40>
                                qStateMachine_ExecStateIfAvailable( toTargetFSM, toTargetFSM->qPrivate.xPublic.NextState, QSM_SIGNAL_EXIT );
 800774e:	2203      	movs	r2, #3
 8007750:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007752:	4252      	negs	r2, r2
 8007754:	0028      	movs	r0, r5
 8007756:	f7ff ff85 	bl	8007664 <qStateMachine_ExecStateIfAvailable>
                                toTargetFSM->qPrivate.xPublic.NextState = iTransition.xToTargetState; /*move to the new state*/
 800775a:	642f      	str	r7, [r5, #64]	; 0x40
 800775c:	e7ef      	b.n	800773e <qStateMachine_SweepTransitionTable+0x46>
                for( iEntry = 0; iEntry < table->qPrivate.NumberOfEntries; iEntry++ ){ /*loop the transition-table entries*/
 800775e:	3001      	adds	r0, #1
 8007760:	e7d5      	b.n	800770e <qStateMachine_SweepTransitionTable+0x16>
	...

08007764 <qStateMachine_Run>:
    root->qPrivate.Active = qTrue; /*the root fsm is always active*/
 8007764:	0003      	movs	r3, r0
 8007766:	2201      	movs	r2, #1
void qStateMachine_Run( qSM_t * const root, void *Data ){
 8007768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800776a:	0004      	movs	r4, r0
    qSM_Stack_t *s = NULL;  /* Initialize stack s */
 800776c:	2700      	movs	r7, #0
void qStateMachine_Run( qSM_t * const root, void *Data ){
 800776e:	b085      	sub	sp, #20
    root->qPrivate.Active = qTrue; /*the root fsm is always active*/
 8007770:	335c      	adds	r3, #92	; 0x5c
void qStateMachine_Run( qSM_t * const root, void *Data ){
 8007772:	9101      	str	r1, [sp, #4]
    root->qPrivate.Active = qTrue; /*the root fsm is always active*/
 8007774:	701a      	strb	r2, [r3, #0]
    return RetValue; 
}  
/*============================================================================*/
static void qStateMachine_StackPush( qSM_Stack_t **top_ref, qSM_t *t ){ 
    qSM_Stack_t *new_tNode;
    if( qSM_StackIndex < (size_t)Q_FSM_MAX_NEST_DEPTH ){
 8007776:	4e45      	ldr	r6, [pc, #276]	; (800788c <qStateMachine_Run+0x128>)
 8007778:	6833      	ldr	r3, [r6, #0]
 800777a:	2b04      	cmp	r3, #4
 800777c:	d807      	bhi.n	800778e <qStateMachine_Run+0x2a>
        new_tNode = &qSM_RAM_Area[ qSM_StackIndex++ ];
 800777e:	4944      	ldr	r1, [pc, #272]	; (8007890 <qStateMachine_Run+0x12c>)
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	6032      	str	r2, [r6, #0]
 8007786:	18ca      	adds	r2, r1, r3
        new_tNode->t  = t;  /* put in the data  */
        new_tNode->next = (*top_ref);  /* link the old list of the new tNode */   
 8007788:	6057      	str	r7, [r2, #4]
        (*top_ref) = new_tNode;   /* move the head to point to the new tNode */      
 800778a:	0017      	movs	r7, r2
        new_tNode->t  = t;  /* put in the data  */
 800778c:	505c      	str	r4, [r3, r1]
            current = current->qPrivate.Composite.next;
 800778e:	69e4      	ldr	r4, [r4, #28]
        RetValue = ( 0u == qSM_StackIndex )? qTrue : qFalse;
 8007790:	6833      	ldr	r3, [r6, #0]
        if( NULL != current ){     /* Reach the deep-most fsm of the current*/
 8007792:	2c00      	cmp	r4, #0
 8007794:	d1ef      	bne.n	8007776 <qStateMachine_Run+0x12>
    if( NULL != top ){
 8007796:	2f00      	cmp	r7, #0
 8007798:	d075      	beq.n	8007886 <qStateMachine_Run+0x122>
            if( qFalse ==  hierarchy_drilled ){
 800779a:	2b00      	cmp	r3, #0
 800779c:	d073      	beq.n	8007886 <qStateMachine_Run+0x122>
    qSM_t *res = NULL; 
    qSM_Stack_t *top; 
  
    if( qFalse == qStateMachine_StackIsEmpty( *top_ref )) { 
        top = *top_ref; 
        res = top->t; 
 800779e:	683c      	ldr	r4, [r7, #0]
        *top_ref = top->next; 
        qSM_StackIndex--; 
 80077a0:	3b01      	subs	r3, #1
        *top_ref = top->next; 
 80077a2:	687f      	ldr	r7, [r7, #4]
        qSM_StackIndex--; 
 80077a4:	6033      	str	r3, [r6, #0]
                if( NULL != current){
 80077a6:	2c00      	cmp	r4, #0
 80077a8:	d0f2      	beq.n	8007790 <qStateMachine_Run+0x2c>
    parent =  (qSM_t*)current->qPrivate.xPublic.Parent;  /*MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed*/              
 80077aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
    if( NULL != parent ){
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d128      	bne.n	8007802 <qStateMachine_Run+0x9e>
    qSM_Signal_t xSignal = QSM_SIGNAL_NONE;
 80077b0:	2301      	movs	r3, #1
 80077b2:	425b      	negs	r3, r3
 80077b4:	9303      	str	r3, [sp, #12]
    obj->qPrivate.xPublic.Data = Data;   /*pass the data through the fsm*/
 80077b6:	9b01      	ldr	r3, [sp, #4]
    CurrentState = obj->qPrivate.xPublic.NextState;
 80077b8:	6c25      	ldr	r5, [r4, #64]	; 0x40
    obj->qPrivate.xPublic.Data = Data;   /*pass the data through the fsm*/
 80077ba:	64e3      	str	r3, [r4, #76]	; 0x4c
    if( obj->qPrivate.xPublic.LastState != CurrentState ){ /*entry condition, update the PreviousState*/
 80077bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80077be:	429d      	cmp	r5, r3
 80077c0:	d14a      	bne.n	8007858 <qStateMachine_Run+0xf4>
        if( qTrue == qQueue_IsReady( &obj->qPrivate.SignalQueue ) ){
 80077c2:	0023      	movs	r3, r4
 80077c4:	3324      	adds	r3, #36	; 0x24
 80077c6:	0018      	movs	r0, r3
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	f000 ff31 	bl	8008630 <qQueue_IsReady>
 80077ce:	2801      	cmp	r0, #1
 80077d0:	d14f      	bne.n	8007872 <qStateMachine_Run+0x10e>
            if( qTrue == qQueue_Receive( &obj->qPrivate.SignalQueue, &xSignal ) ){
 80077d2:	a903      	add	r1, sp, #12
 80077d4:	9800      	ldr	r0, [sp, #0]
 80077d6:	f000 ff9d 	bl	8008714 <qQueue_Receive>
 80077da:	2801      	cmp	r0, #1
 80077dc:	d107      	bne.n	80077ee <qStateMachine_Run+0x8a>
                if( NULL != obj->qPrivate.Composite.head ){
 80077de:	69a3      	ldr	r3, [r4, #24]
 80077e0:	9903      	ldr	r1, [sp, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d000      	beq.n	80077e8 <qStateMachine_Run+0x84>
                    obj->qPrivate.xPublic.Signal = xSignal; /*store the signal if any child needs it*/
 80077e6:	6521      	str	r1, [r4, #80]	; 0x50
                (void)qStateMachine_SweepTransitionTable( obj, xSignal );
 80077e8:	0020      	movs	r0, r4
 80077ea:	f7ff ff85 	bl	80076f8 <qStateMachine_SweepTransitionTable>
        qStateMachine_ExecStateIfAvailable( obj, CurrentState, xSignal );
 80077ee:	9a03      	ldr	r2, [sp, #12]
 80077f0:	0029      	movs	r1, r5
 80077f2:	0020      	movs	r0, r4
 80077f4:	f7ff ff36 	bl	8007664 <qStateMachine_ExecStateIfAvailable>
        if( CurrentState != obj->qPrivate.xPublic.NextState ){ /*Has a transition occurred??*/
 80077f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077fa:	429d      	cmp	r5, r3
 80077fc:	d02a      	beq.n	8007854 <qStateMachine_Run+0xf0>
            qStateMachine_ExecStateIfAvailable( obj, CurrentState, QSM_SIGNAL_EXIT ); 
 80077fe:	2203      	movs	r2, #3
 8007800:	e031      	b.n	8007866 <qStateMachine_Run+0x102>
        exec = ( parent->qPrivate.xPublic.NextState == current->qPrivate.Composite.rootState ) && ( qTrue == parent->qPrivate.Active) ;
 8007802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007804:	6a21      	ldr	r1, [r4, #32]
 8007806:	2500      	movs	r5, #0
 8007808:	428a      	cmp	r2, r1
 800780a:	d104      	bne.n	8007816 <qStateMachine_Run+0xb2>
 800780c:	335c      	adds	r3, #92	; 0x5c
 800780e:	781d      	ldrb	r5, [r3, #0]
 8007810:	3d01      	subs	r5, #1
 8007812:	426b      	negs	r3, r5
 8007814:	415d      	adcs	r5, r3
        if( ( qTrue == current->qPrivate.Active ) &&  ( qFalse == exec ) ){
 8007816:	0023      	movs	r3, r4
 8007818:	335c      	adds	r3, #92	; 0x5c
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d107      	bne.n	8007832 <qStateMachine_Run+0xce>
 8007822:	2d00      	cmp	r5, #0
 8007824:	d105      	bne.n	8007832 <qStateMachine_Run+0xce>
            qStateMachine_ExecStateIfAvailable(  current, current->qPrivate.xPublic.NextState, QSM_SIGNAL_EXIT ); /*execute exit action*/
 8007826:	2203      	movs	r2, #3
 8007828:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800782a:	4252      	negs	r2, r2
 800782c:	0020      	movs	r0, r4
 800782e:	f7ff ff19 	bl	8007664 <qStateMachine_ExecStateIfAvailable>
        if( ( qFalse == current->qPrivate.Active ) &&  ( qTrue == exec ) ){
 8007832:	9b00      	ldr	r3, [sp, #0]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d107      	bne.n	800784a <qStateMachine_Run+0xe6>
 800783a:	2d01      	cmp	r5, #1
 800783c:	d105      	bne.n	800784a <qStateMachine_Run+0xe6>
            qStateMachine_ExecStateIfAvailable(  current, current->qPrivate.xPublic.NextState, QSM_SIGNAL_ENTRY ); /*execute entry action*/
 800783e:	2202      	movs	r2, #2
 8007840:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007842:	4252      	negs	r2, r2
 8007844:	0020      	movs	r0, r4
 8007846:	f7ff ff0d 	bl	8007664 <qStateMachine_ExecStateIfAvailable>
        current->qPrivate.Active = exec;
 800784a:	9b00      	ldr	r3, [sp, #0]
 800784c:	b2ea      	uxtb	r2, r5
 800784e:	701a      	strb	r2, [r3, #0]
    if( qTrue == exec ){
 8007850:	2d01      	cmp	r5, #1
 8007852:	d0ad      	beq.n	80077b0 <qStateMachine_Run+0x4c>
                    current = current->qPrivate.Composite.head; /* we have visited the fsm and its nested subtree. Now, it's same-level fsm turn */                   
 8007854:	69a4      	ldr	r4, [r4, #24]
 8007856:	e79b      	b.n	8007790 <qStateMachine_Run+0x2c>
        obj->qPrivate.xPublic.PreviousState = obj->qPrivate.xPublic.LastState ; 
 8007858:	6463      	str	r3, [r4, #68]	; 0x44
        obj->qPrivate.xPublic.PreviousReturnStatus = obj->qPrivate.xPublic.LastReturnStatus;
 800785a:	0023      	movs	r3, r4
 800785c:	3356      	adds	r3, #86	; 0x56
 800785e:	881a      	ldrh	r2, [r3, #0]
 8007860:	3b02      	subs	r3, #2
 8007862:	801a      	strh	r2, [r3, #0]
        qStateMachine_ExecStateIfAvailable( obj, CurrentState, QSM_SIGNAL_ENTRY);
 8007864:	2202      	movs	r2, #2
            qStateMachine_ExecStateIfAvailable( obj, CurrentState, QSM_SIGNAL_EXIT ); 
 8007866:	4252      	negs	r2, r2
 8007868:	0029      	movs	r1, r5
 800786a:	0020      	movs	r0, r4
 800786c:	f7ff fefa 	bl	8007664 <qStateMachine_ExecStateIfAvailable>
 8007870:	e7f0      	b.n	8007854 <qStateMachine_Run+0xf0>
            parent = (qSM_t*)obj->qPrivate.xPublic.Parent; /*MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed*/
 8007872:	6da3      	ldr	r3, [r4, #88]	; 0x58
            if( NULL != parent ){/*check if the current fsm its a child*/
 8007874:	2b00      	cmp	r3, #0
 8007876:	d0ba      	beq.n	80077ee <qStateMachine_Run+0x8a>
                if( ( QSM_SIGNAL_ENTRY != parent->qPrivate.xPublic.Signal ) && ( QSM_SIGNAL_EXIT != parent->qPrivate.xPublic.Signal ) ){
 8007878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787a:	1cda      	adds	r2, r3, #3
 800787c:	2a01      	cmp	r2, #1
 800787e:	d900      	bls.n	8007882 <qStateMachine_Run+0x11e>
                    xSignal = parent->qPrivate.xPublic.Signal; /*use the parent signal if the child doesn't have their own signal-queue*/
 8007880:	9303      	str	r3, [sp, #12]
                (void)qStateMachine_SweepTransitionTable( obj, xSignal );
 8007882:	9903      	ldr	r1, [sp, #12]
 8007884:	e7b0      	b.n	80077e8 <qStateMachine_Run+0x84>
}
 8007886:	b005      	add	sp, #20
 8007888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800788a:	46c0      	nop			; (mov r8, r8)
 800788c:	20000700 	.word	0x20000700
 8007890:	200006d8 	.word	0x200006d8

08007894 <qIOUtil_DiscardWhitespaces>:
static size_t qIOUtil_xBase_U32toA( qUINT32_t num, char* str, qUINT8_t base );
static char qIOUtil_NibbleToX( qUINT8_t value );
static const char * qIOUtil_DiscardWhitespaces( const char *s );
static const char * qIOUtil_CheckStrSign( const char *s, int *sgn );

static const char * qIOUtil_DiscardWhitespaces( const char *s ){
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	0004      	movs	r4, r0
    while( 0 != isspace( (int)*s ) ){
 8007898:	2508      	movs	r5, #8
 800789a:	f003 ff2d 	bl	800b6f8 <__locale_ctype_ptr>
 800789e:	7823      	ldrb	r3, [r4, #0]
 80078a0:	18c0      	adds	r0, r0, r3
 80078a2:	7843      	ldrb	r3, [r0, #1]
 80078a4:	422b      	tst	r3, r5
 80078a6:	d101      	bne.n	80078ac <qIOUtil_DiscardWhitespaces+0x18>
        s++; /*discard whitespaces*/ /*MISRAC2004-17.4_a deviation allowed*/ 
    }    
    return s;
}
 80078a8:	0020      	movs	r0, r4
 80078aa:	bd70      	pop	{r4, r5, r6, pc}
        s++; /*discard whitespaces*/ /*MISRAC2004-17.4_a deviation allowed*/ 
 80078ac:	3401      	adds	r4, #1
 80078ae:	e7f4      	b.n	800789a <qIOUtil_DiscardWhitespaces+0x6>

080078b0 <qIOUtil_StrChr>:
            RetValue =(char*)s; /*MISRAC2012-Rule-11.8 deviation allowed*/
            /*cstat +MISRAC2012-Rule-11.8*/
            break;
        }
        --maxlen;
    }while( ( '\0' != ( *s++ ) ) && ( maxlen > 0u ) );
 80078b0:	1882      	adds	r2, r0, r2
        if ((int)(*s) == c){
 80078b2:	7803      	ldrb	r3, [r0, #0]
 80078b4:	428b      	cmp	r3, r1
 80078b6:	d005      	beq.n	80078c4 <qIOUtil_StrChr+0x14>
    }while( ( '\0' != ( *s++ ) ) && ( maxlen > 0u ) );
 80078b8:	3001      	adds	r0, #1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <qIOUtil_StrChr+0x16>
 80078be:	4290      	cmp	r0, r2
 80078c0:	d1f7      	bne.n	80078b2 <qIOUtil_StrChr+0x2>
    char *RetValue = NULL;
 80078c2:	2000      	movs	r0, #0
    return RetValue;
}
 80078c4:	4770      	bx	lr
    char *RetValue = NULL;
 80078c6:	0018      	movs	r0, r3
    return RetValue;
 80078c8:	e7fc      	b.n	80078c4 <qIOUtil_StrChr+0x14>

080078ca <qIOUtil_StrLen>:
*/
size_t qIOUtil_StrLen( const char* str, size_t maxlen ){
    size_t count;

    if( ( NULL == str ) || ( (size_t)0 == maxlen ) ){
        count = 0;
 80078ca:	1e03      	subs	r3, r0, #0
    if( ( NULL == str ) || ( (size_t)0 == maxlen ) ){
 80078cc:	d002      	beq.n	80078d4 <qIOUtil_StrLen+0xa>
        count = 0;
 80078ce:	2300      	movs	r3, #0
    if( ( NULL == str ) || ( (size_t)0 == maxlen ) ){
 80078d0:	4299      	cmp	r1, r3
 80078d2:	d102      	bne.n	80078da <qIOUtil_StrLen+0x10>
            maxlen--;
            str++;
        }        
    }
    return count;
}
 80078d4:	0018      	movs	r0, r3
 80078d6:	4770      	bx	lr
            count++;
 80078d8:	3301      	adds	r3, #1
        while( ( '\0' != *str ) && ( maxlen > (size_t)0 ) ) {
 80078da:	5cc2      	ldrb	r2, [r0, r3]
 80078dc:	2a00      	cmp	r2, #0
 80078de:	d0f9      	beq.n	80078d4 <qIOUtil_StrLen+0xa>
 80078e0:	4299      	cmp	r1, r3
 80078e2:	d1f9      	bne.n	80078d8 <qIOUtil_StrLen+0xe>
 80078e4:	e7f6      	b.n	80078d4 <qIOUtil_StrLen+0xa>

080078e6 <qIOUtil_StrlCpy>:

Return value:

  The length of src
*/
size_t qIOUtil_StrlCpy( char * dst, const char * src, size_t maxlen ){
 80078e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e8:	000e      	movs	r6, r1
    const size_t srclen = qIOUtil_StrLen( src, Q_IOUTIL_MAX_STRLEN );
 80078ea:	2180      	movs	r1, #128	; 0x80
size_t qIOUtil_StrlCpy( char * dst, const char * src, size_t maxlen ){
 80078ec:	0005      	movs	r5, r0
    const size_t srclen = qIOUtil_StrLen( src, Q_IOUTIL_MAX_STRLEN );
 80078ee:	0089      	lsls	r1, r1, #2
 80078f0:	0030      	movs	r0, r6
size_t qIOUtil_StrlCpy( char * dst, const char * src, size_t maxlen ){
 80078f2:	0014      	movs	r4, r2
    const size_t srclen = qIOUtil_StrLen( src, Q_IOUTIL_MAX_STRLEN );
 80078f4:	f7ff ffe9 	bl	80078ca <qIOUtil_StrLen>

    if( ( srclen + 1u ) < maxlen ){
 80078f8:	1c42      	adds	r2, r0, #1
    const size_t srclen = qIOUtil_StrLen( src, Q_IOUTIL_MAX_STRLEN );
 80078fa:	0007      	movs	r7, r0
    if( ( srclen + 1u ) < maxlen ){
 80078fc:	42a2      	cmp	r2, r4
 80078fe:	d205      	bcs.n	800790c <qIOUtil_StrlCpy+0x26>
        (void)memcpy( dst, src, srclen + 1u );
 8007900:	0031      	movs	r1, r6
 8007902:	0028      	movs	r0, r5
 8007904:	f003 ff18 	bl	800b738 <memcpy>
    }
    else{
        /*nothing to do here*/
    }
    return srclen;
}
 8007908:	0038      	movs	r0, r7
 800790a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( 0u != maxlen ) {
 800790c:	2c00      	cmp	r4, #0
 800790e:	d0fb      	beq.n	8007908 <qIOUtil_StrlCpy+0x22>
        (void)memcpy( dst, src, maxlen - 1u );
 8007910:	3c01      	subs	r4, #1
 8007912:	0022      	movs	r2, r4
 8007914:	0031      	movs	r1, r6
 8007916:	0028      	movs	r0, r5
 8007918:	f003 ff0e 	bl	800b738 <memcpy>
        dst[ maxlen-1u ] = '\0';
 800791c:	2300      	movs	r3, #0
 800791e:	552b      	strb	r3, [r5, r4]
    return srclen;
 8007920:	e7f2      	b.n	8007908 <qIOUtil_StrlCpy+0x22>

08007922 <qIOUtil_SwapBytes>:
    /*cstat -MISRAC2012-Rule-11.5 -CERT-EXP36-C_b*/
    qUINT8_t *p = Data, tmp; /*MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed*/
    /*cstat +MISRAC2012-Rule-11.5 +CERT-EXP36-C_b*/
    size_t lo, hi;
    hi = n - 1u;
    for( lo = 0u ; hi > lo ; lo++ ){
 8007922:	0003      	movs	r3, r0
void qIOUtil_SwapBytes( void *Data, const size_t n ){
 8007924:	b510      	push	{r4, lr}
    hi = n - 1u;
 8007926:	3901      	subs	r1, #1
    for( lo = 0u ; hi > lo ; lo++ ){
 8007928:	1a1a      	subs	r2, r3, r0
 800792a:	4291      	cmp	r1, r2
 800792c:	d800      	bhi.n	8007930 <qIOUtil_SwapBytes+0xe>
        tmp = p[lo];
        p[lo] = p[hi];
        p[hi] = tmp;
        hi--;
    }
}
 800792e:	bd10      	pop	{r4, pc}
        tmp = p[lo];
 8007930:	781a      	ldrb	r2, [r3, #0]
        p[lo] = p[hi];
 8007932:	5c44      	ldrb	r4, [r0, r1]
 8007934:	701c      	strb	r4, [r3, #0]
        p[hi] = tmp;
 8007936:	5442      	strb	r2, [r0, r1]
 8007938:	3301      	adds	r3, #1
        hi--;
 800793a:	3901      	subs	r1, #1
 800793c:	e7f4      	b.n	8007928 <qIOUtil_SwapBytes+0x6>

0800793e <qIOUtil_xBase_U32toA.part.1>:
static size_t qIOUtil_xBase_U32toA( qUINT32_t num, char* str, qUINT8_t base ){
 800793e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007940:	000d      	movs	r5, r1
 8007942:	0017      	movs	r7, r2
 8007944:	000c      	movs	r4, r1
 8007946:	1b66      	subs	r6, r4, r5
        while( 0uL != num ){ /*Process individual digits*/
 8007948:	2800      	cmp	r0, #0
 800794a:	d105      	bne.n	8007958 <qIOUtil_xBase_U32toA.part.1+0x1a>
        qIOUtil_SwapBytes( str, i );/*Reverse the string*/
 800794c:	0028      	movs	r0, r5
 800794e:	0031      	movs	r1, r6
 8007950:	f7ff ffe7 	bl	8007922 <qIOUtil_SwapBytes>
}
 8007954:	0030      	movs	r0, r6
 8007956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007958:	0039      	movs	r1, r7
 800795a:	f7f8 fc77 	bl	800024c <__aeabi_uidivmod>
 800795e:	b2ce      	uxtb	r6, r1
            str[i++] = ( rem > 9uL )? (char)((qUINT8_t)(rem - 10uL) + 'A') : (char)((qUINT8_t)rem + '0');
 8007960:	0032      	movs	r2, r6
 8007962:	3230      	adds	r2, #48	; 0x30
 8007964:	b2d2      	uxtb	r2, r2
 8007966:	2909      	cmp	r1, #9
 8007968:	d901      	bls.n	800796e <qIOUtil_xBase_U32toA.part.1+0x30>
 800796a:	3637      	adds	r6, #55	; 0x37
 800796c:	b2f2      	uxtb	r2, r6
 800796e:	7022      	strb	r2, [r4, #0]
 8007970:	3401      	adds	r4, #1
 8007972:	e7e8      	b.n	8007946 <qIOUtil_xBase_U32toA.part.1+0x8>

08007974 <qIOUtil_OutputString>:
    - fcn : The basic output byte function
    - pStorage : The storage pointer passed to fcn
    - s: The string to be written
    - AIP : Auto-Increment the storage-pointer
*/
void qIOUtil_OutputString( qPutChar_t fcn, void* pStorage, const char *s, qBool_t AIP ){
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	0006      	movs	r6, r0
 8007978:	000d      	movs	r5, r1
 800797a:	0014      	movs	r4, r2
    size_t i = 0u;
    /*cstat -MISRAC2012-Rule-11.5 -CERT-EXP36-C_b*/
    char *xPtr = pStorage; /*MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed*/
    /*cstat +MISRAC2012-Rule-11.5 +CERT-EXP36-C_b*/
    if( qTrue == AIP ){
 800797c:	2b01      	cmp	r3, #1
 800797e:	d10b      	bne.n	8007998 <qIOUtil_OutputString+0x24>
        while( '\0' != *s ){
 8007980:	7821      	ldrb	r1, [r4, #0]
 8007982:	2900      	cmp	r1, #0
 8007984:	d100      	bne.n	8007988 <qIOUtil_OutputString+0x14>
    else{
        while( '\0' != *s ){
            fcn( pStorage, *s++ );
        }
    }
}
 8007986:	bd70      	pop	{r4, r5, r6, pc}
            fcn( &xPtr[i] ,  *s++ );
 8007988:	0028      	movs	r0, r5
 800798a:	3401      	adds	r4, #1
 800798c:	47b0      	blx	r6
 800798e:	3501      	adds	r5, #1
 8007990:	e7f6      	b.n	8007980 <qIOUtil_OutputString+0xc>
            fcn( pStorage, *s++ );
 8007992:	0028      	movs	r0, r5
 8007994:	3401      	adds	r4, #1
 8007996:	47b0      	blx	r6
        while( '\0' != *s ){
 8007998:	7821      	ldrb	r1, [r4, #0]
 800799a:	2900      	cmp	r1, #0
 800799c:	d1f9      	bne.n	8007992 <qIOUtil_OutputString+0x1e>
 800799e:	e7f2      	b.n	8007986 <qIOUtil_OutputString+0x12>

080079a0 <qIOUtil_PrintXData>:
/*============================================================================*/
void qIOUtil_PrintXData( qPutChar_t fcn, void* pStorage, void *Data, size_t n ){
 80079a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079a2:	0005      	movs	r5, r0
 80079a4:	000e      	movs	r6, r1
 80079a6:	0014      	movs	r4, r2
    qUINT8_t *pdat =(qUINT8_t*)Data;  /*MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed*/
    /*cstat +MISRAC2012-Rule-11.5 +CERT-EXP36-C_b*/
    size_t i;
    for( i = 0u ; i < n ; i++ ){
        fcn( pStorage, qIOUtil_NibbleToX( pdat[i] >> 4u ) );   /*MISRAC2004-17.4_b deviation allowed*/ 
        fcn( pStorage, qIOUtil_NibbleToX( pdat[i] & 0x0Fu ) ); /*MISRAC2004-17.4_b deviation allowed*/ 
 80079a8:	270f      	movs	r7, #15
 80079aa:	18d3      	adds	r3, r2, r3
 80079ac:	9301      	str	r3, [sp, #4]
    for( i = 0u ; i < n ; i++ ){
 80079ae:	9b01      	ldr	r3, [sp, #4]
 80079b0:	42a3      	cmp	r3, r4
 80079b2:	d106      	bne.n	80079c2 <qIOUtil_PrintXData+0x22>
        fcn( pStorage, ' ');
    }
    fcn( pStorage, '\r' );
 80079b4:	0030      	movs	r0, r6
 80079b6:	210d      	movs	r1, #13
 80079b8:	47a8      	blx	r5
    fcn( pStorage, '\n' );
 80079ba:	0030      	movs	r0, r6
 80079bc:	210a      	movs	r1, #10
 80079be:	47a8      	blx	r5
}
 80079c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        fcn( pStorage, qIOUtil_NibbleToX( pdat[i] >> 4u ) );   /*MISRAC2004-17.4_b deviation allowed*/ 
 80079c2:	7823      	ldrb	r3, [r4, #0]
 80079c4:	091b      	lsrs	r3, r3, #4
    ch = (char)( (qUINT8_t)(value & 0x0Fu) + '0' );
 80079c6:	0019      	movs	r1, r3
 80079c8:	3130      	adds	r1, #48	; 0x30
    return (char) ((ch > '9') ? (char)(ch + 7) : ch);
 80079ca:	2939      	cmp	r1, #57	; 0x39
 80079cc:	d901      	bls.n	80079d2 <qIOUtil_PrintXData+0x32>
 80079ce:	3337      	adds	r3, #55	; 0x37
 80079d0:	0019      	movs	r1, r3
        fcn( pStorage, qIOUtil_NibbleToX( pdat[i] >> 4u ) );   /*MISRAC2004-17.4_b deviation allowed*/ 
 80079d2:	0030      	movs	r0, r6
 80079d4:	47a8      	blx	r5
        fcn( pStorage, qIOUtil_NibbleToX( pdat[i] & 0x0Fu ) ); /*MISRAC2004-17.4_b deviation allowed*/ 
 80079d6:	7823      	ldrb	r3, [r4, #0]
 80079d8:	403b      	ands	r3, r7
    ch = (char)( (qUINT8_t)(value & 0x0Fu) + '0' );
 80079da:	0019      	movs	r1, r3
 80079dc:	3130      	adds	r1, #48	; 0x30
    return (char) ((ch > '9') ? (char)(ch + 7) : ch);
 80079de:	2939      	cmp	r1, #57	; 0x39
 80079e0:	d901      	bls.n	80079e6 <qIOUtil_PrintXData+0x46>
 80079e2:	3337      	adds	r3, #55	; 0x37
 80079e4:	0019      	movs	r1, r3
        fcn( pStorage, qIOUtil_NibbleToX( pdat[i] & 0x0Fu ) ); /*MISRAC2004-17.4_b deviation allowed*/ 
 80079e6:	0030      	movs	r0, r6
 80079e8:	47a8      	blx	r5
        fcn( pStorage, ' ');
 80079ea:	2120      	movs	r1, #32
 80079ec:	0030      	movs	r0, r6
 80079ee:	47a8      	blx	r5
 80079f0:	3401      	adds	r4, #1
 80079f2:	e7dc      	b.n	80079ae <qIOUtil_PrintXData+0xe>

080079f4 <qIOUtil_XtoU32>:

Return value:

  The numeric value uint32_t
*/
qUINT32_t qIOUtil_XtoU32( const char *s ) {
 80079f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079f6:	0007      	movs	r7, r0
    qUINT32_t val = 0uL;
 80079f8:	1e05      	subs	r5, r0, #0
    qUINT8_t xByte;
    qUINT8_t nparsed = 0u;
    if( NULL != s ){
 80079fa:	d035      	beq.n	8007a68 <qIOUtil_XtoU32+0x74>
    qUINT8_t nparsed = 0u;
 80079fc:	2600      	movs	r6, #0
    qUINT32_t val = 0uL;
 80079fe:	0035      	movs	r5, r6
 8007a00:	e026      	b.n	8007a50 <qIOUtil_XtoU32+0x5c>
        while ( ( *s != '\0' ) && ( nparsed < 8u) ) { /*loop until the end of the string or the number of parsed chars exceeds the 32bit notation*/
            xByte = (qUINT8_t)toupper( (int)*s++ ); /*get the hex char, considerate only upper case*/ /*MISRAC2004-17.4_a deviation allowed*/ 
 8007a02:	f003 fe79 	bl	800b6f8 <__locale_ctype_ptr>
 8007a06:	2203      	movs	r2, #3
 8007a08:	1900      	adds	r0, r0, r4
 8007a0a:	7843      	ldrb	r3, [r0, #1]
 8007a0c:	3701      	adds	r7, #1
 8007a0e:	4013      	ands	r3, r2
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d100      	bne.n	8007a16 <qIOUtil_XtoU32+0x22>
 8007a14:	3c20      	subs	r4, #32
            if( 0 != isxdigit( (int)xByte ) ){ /*if is a valid hex digit*/
 8007a16:	f003 fe6f 	bl	800b6f8 <__locale_ctype_ptr>
 8007a1a:	23ff      	movs	r3, #255	; 0xff
 8007a1c:	4023      	ands	r3, r4
 8007a1e:	3301      	adds	r3, #1
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	5cc2      	ldrb	r2, [r0, r3]
 8007a24:	2344      	movs	r3, #68	; 0x44
 8007a26:	421a      	tst	r2, r3
 8007a28:	d018      	beq.n	8007a5c <qIOUtil_XtoU32+0x68>
            xByte = (qUINT8_t)toupper( (int)*s++ ); /*get the hex char, considerate only upper case*/ /*MISRAC2004-17.4_a deviation allowed*/ 
 8007a2a:	b2e4      	uxtb	r4, r4
                nparsed++; /*increase the parsed char count*/
                if ( ( (char)xByte >= '0' ) && ( (char)xByte <= '9') ){
 8007a2c:	0023      	movs	r3, r4
 8007a2e:	3b30      	subs	r3, #48	; 0x30
                nparsed++; /*increase the parsed char count*/
 8007a30:	3601      	adds	r6, #1
                if ( ( (char)xByte >= '0' ) && ( (char)xByte <= '9') ){
 8007a32:	b2db      	uxtb	r3, r3
                nparsed++; /*increase the parsed char count*/
 8007a34:	b2f6      	uxtb	r6, r6
                if ( ( (char)xByte >= '0' ) && ( (char)xByte <= '9') ){
 8007a36:	2b09      	cmp	r3, #9
 8007a38:	d906      	bls.n	8007a48 <qIOUtil_XtoU32+0x54>
                    xByte = (qUINT8_t)( xByte - (qUINT8_t)48u ); /* '48u' = '0' -> make the conversion in the 0-9 range*/ 
                } 
                else if ( ( (char)xByte >= 'A' ) && ( (char)xByte <='F') ){
 8007a3a:	0022      	movs	r2, r4
 8007a3c:	3a41      	subs	r2, #65	; 0x41
 8007a3e:	0023      	movs	r3, r4
 8007a40:	2a05      	cmp	r2, #5
 8007a42:	d801      	bhi.n	8007a48 <qIOUtil_XtoU32+0x54>
                    xByte = (qUINT8_t)( xByte - (qUINT8_t)75u );  /* 75u = 'A' + 10 -> make the conversion in the A-F range*/        
 8007a44:	3b4b      	subs	r3, #75	; 0x4b
 8007a46:	b2db      	uxtb	r3, r3
                }     
                else{
                    /*nothing to do */
                }     
                val = (qUINT32_t)((qUINT32_t)(val << 4uL) | ((qUINT32_t)xByte & 0xFuL));  /*add the corresponding nibble to the output*/                
 8007a48:	220f      	movs	r2, #15
 8007a4a:	012d      	lsls	r5, r5, #4
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	431d      	orrs	r5, r3
        while ( ( *s != '\0' ) && ( nparsed < 8u) ) { /*loop until the end of the string or the number of parsed chars exceeds the 32bit notation*/
 8007a50:	783c      	ldrb	r4, [r7, #0]
 8007a52:	2c00      	cmp	r4, #0
 8007a54:	d008      	beq.n	8007a68 <qIOUtil_XtoU32+0x74>
 8007a56:	2e07      	cmp	r6, #7
 8007a58:	d9d3      	bls.n	8007a02 <qIOUtil_XtoU32+0xe>
 8007a5a:	e005      	b.n	8007a68 <qIOUtil_XtoU32+0x74>
            }
            else if( 0 != isspace( (int)xByte ) ){
 8007a5c:	f003 fe4c 	bl	800b6f8 <__locale_ctype_ptr>
 8007a60:	9b01      	ldr	r3, [sp, #4]
 8007a62:	5cc3      	ldrb	r3, [r0, r3]
 8007a64:	071b      	lsls	r3, r3, #28
 8007a66:	d4f3      	bmi.n	8007a50 <qIOUtil_XtoU32+0x5c>
                break;  /*not valid chars break the conversion*/       
            }
        }
    }
    return val;
}
 8007a68:	0028      	movs	r0, r5
 8007a6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08007a6c <qIOUtil_AtoF>:
    a double(qFloat64_t) value.
    If no valid conversion could be performed, the function returns zero (0.0).
    If the converted value would be out of the range of representable values by
    a double(qFloat64_t), it causes undefined behavior
*/
qFloat64_t qIOUtil_AtoF( const char *s ){
 8007a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a6e:	b085      	sub	sp, #20
    #if ( Q_ATOF_FULL == 1 )
        int power2, powersign = 1;
        qFloat64_t power = 1.0, efactor;
    #endif
   
    s = qIOUtil_DiscardWhitespaces( s );
 8007a70:	f7ff ff10 	bl	8007894 <qIOUtil_DiscardWhitespaces>
    if ('-' == *s){ /*if negative found*/
 8007a74:	7803      	ldrb	r3, [r0, #0]
    s = qIOUtil_DiscardWhitespaces( s );
 8007a76:	0004      	movs	r4, r0
    if ('-' == *s){ /*if negative found*/
 8007a78:	2b2d      	cmp	r3, #45	; 0x2d
 8007a7a:	d115      	bne.n	8007aa8 <qIOUtil_AtoF+0x3c>
        *sgn = -1; /*set the sign*/
 8007a7c:	2001      	movs	r0, #1
        ++s; /*move to next*/ /*MISRAC2004-17.4_a deviation allowed*/ 
 8007a7e:	3401      	adds	r4, #1
        *sgn = -1; /*set the sign*/
 8007a80:	4240      	negs	r0, r0
    s = qIOUtil_CheckStrSign( s, &sgn );
    /*cstat -CERT-FLP36-C*/
    fact = ( qFloat64_t )sgn; /*CERT-FLP36-C deviation allowed*/
 8007a82:	f7fb f903 	bl	8002c8c <__aeabi_i2d>
    qBool_t point_seen = qFalse;
 8007a86:	2300      	movs	r3, #0
    qFloat64_t rez = 0.0, fact;
 8007a88:	2600      	movs	r6, #0
 8007a8a:	2700      	movs	r7, #0
    fact = ( qFloat64_t )sgn; /*CERT-FLP36-C deviation allowed*/
 8007a8c:	9000      	str	r0, [sp, #0]
 8007a8e:	9101      	str	r1, [sp, #4]
    qBool_t point_seen = qFalse;
 8007a90:	9303      	str	r3, [sp, #12]

    while( '\0' != (c=*s) ) { /*MISRAC2004-17.4_a deviation allowed*/ 
 8007a92:	7825      	ldrb	r5, [r4, #0]
 8007a94:	2d00      	cmp	r5, #0
 8007a96:	d10d      	bne.n	8007ab4 <qIOUtil_AtoF+0x48>
            }	
	    }
    }    
    return power * rez * fact;   
    #else
        return rez * fact;
 8007a98:	9a00      	ldr	r2, [sp, #0]
 8007a9a:	9b01      	ldr	r3, [sp, #4]
 8007a9c:	0030      	movs	r0, r6
 8007a9e:	0039      	movs	r1, r7
 8007aa0:	f7fa fb3a 	bl	8002118 <__aeabi_dmul>
    #endif      
}
 8007aa4:	b005      	add	sp, #20
 8007aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ++s; /*plus sign ignored, move to next*/  /*MISRAC2004-17.4_a deviation allowed*/ 
 8007aa8:	3b2b      	subs	r3, #43	; 0x2b
 8007aaa:	425a      	negs	r2, r3
 8007aac:	4153      	adcs	r3, r2
    int sgn = 1;
 8007aae:	2001      	movs	r0, #1
        ++s; /*plus sign ignored, move to next*/  /*MISRAC2004-17.4_a deviation allowed*/ 
 8007ab0:	18e4      	adds	r4, r4, r3
 8007ab2:	e7e6      	b.n	8007a82 <qIOUtil_AtoF+0x16>
        if (c == '.'){
 8007ab4:	2d2e      	cmp	r5, #46	; 0x2e
 8007ab6:	d029      	beq.n	8007b0c <qIOUtil_AtoF+0xa0>
        else if ( 0 != isdigit( (int)c ) ){
 8007ab8:	f003 fe1e 	bl	800b6f8 <__locale_ctype_ptr>
 8007abc:	1940      	adds	r0, r0, r5
 8007abe:	7843      	ldrb	r3, [r0, #1]
 8007ac0:	075b      	lsls	r3, r3, #29
 8007ac2:	d5e9      	bpl.n	8007a98 <qIOUtil_AtoF+0x2c>
            if ( qTrue == point_seen ){
 8007ac4:	9b03      	ldr	r3, [sp, #12]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d107      	bne.n	8007ada <qIOUtil_AtoF+0x6e>
                fact *= 0.1;
 8007aca:	9800      	ldr	r0, [sp, #0]
 8007acc:	9901      	ldr	r1, [sp, #4]
 8007ace:	4a11      	ldr	r2, [pc, #68]	; (8007b14 <qIOUtil_AtoF+0xa8>)
 8007ad0:	4b11      	ldr	r3, [pc, #68]	; (8007b18 <qIOUtil_AtoF+0xac>)
 8007ad2:	f7fa fb21 	bl	8002118 <__aeabi_dmul>
 8007ad6:	9000      	str	r0, [sp, #0]
 8007ad8:	9101      	str	r1, [sp, #4]
            rez = rez * 10.0 + ( (double)c ) - ( (double)'0' ); /*CERT-FLP36-C deviation allowed*/
 8007ada:	2200      	movs	r2, #0
 8007adc:	4b0f      	ldr	r3, [pc, #60]	; (8007b1c <qIOUtil_AtoF+0xb0>)
 8007ade:	0030      	movs	r0, r6
 8007ae0:	0039      	movs	r1, r7
 8007ae2:	f7fa fb19 	bl	8002118 <__aeabi_dmul>
 8007ae6:	0006      	movs	r6, r0
 8007ae8:	0028      	movs	r0, r5
 8007aea:	000f      	movs	r7, r1
 8007aec:	f7fb f908 	bl	8002d00 <__aeabi_ui2d>
 8007af0:	0002      	movs	r2, r0
 8007af2:	000b      	movs	r3, r1
 8007af4:	0030      	movs	r0, r6
 8007af6:	0039      	movs	r1, r7
 8007af8:	f7f9 fbe8 	bl	80012cc <__aeabi_dadd>
 8007afc:	2200      	movs	r2, #0
 8007afe:	4b08      	ldr	r3, [pc, #32]	; (8007b20 <qIOUtil_AtoF+0xb4>)
 8007b00:	f7fa fd7c 	bl	80025fc <__aeabi_dsub>
 8007b04:	0006      	movs	r6, r0
 8007b06:	000f      	movs	r7, r1
        s++;
 8007b08:	3401      	adds	r4, #1
 8007b0a:	e7c2      	b.n	8007a92 <qIOUtil_AtoF+0x26>
            point_seen = qTrue; 
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	9303      	str	r3, [sp, #12]
 8007b10:	e7fa      	b.n	8007b08 <qIOUtil_AtoF+0x9c>
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	9999999a 	.word	0x9999999a
 8007b18:	3fb99999 	.word	0x3fb99999
 8007b1c:	40240000 	.word	0x40240000
 8007b20:	40480000 	.word	0x40480000

08007b24 <qIOUtil_AtoI>:
an int, it causes undefined behavior.
*/
int qIOUtil_AtoI( const char *s ){
	int res = 0; /*holds the resulting integer*/
    int sgn = 1; /*only to hold the sign*/
    int RetValue = 0;
 8007b24:	2300      	movs	r3, #0
int qIOUtil_AtoI( const char *s ){
 8007b26:	b570      	push	{r4, r5, r6, lr}

    if( NULL != s ){
 8007b28:	4298      	cmp	r0, r3
 8007b2a:	d00f      	beq.n	8007b4c <qIOUtil_AtoI+0x28>
        s = qIOUtil_DiscardWhitespaces( s );
 8007b2c:	f7ff feb2 	bl	8007894 <qIOUtil_DiscardWhitespaces>
    if ('-' == *s){ /*if negative found*/
 8007b30:	7802      	ldrb	r2, [r0, #0]
 8007b32:	2a2d      	cmp	r2, #45	; 0x2d
 8007b34:	d10c      	bne.n	8007b50 <qIOUtil_AtoI+0x2c>
        *sgn = -1; /*set the sign*/
 8007b36:	2101      	movs	r1, #1
        ++s; /*move to next*/ /*MISRAC2004-17.4_a deviation allowed*/ 
 8007b38:	3001      	adds	r0, #1
        *sgn = -1; /*set the sign*/
 8007b3a:	4249      	negs	r1, r1
	int res = 0; /*holds the resulting integer*/
 8007b3c:	2300      	movs	r3, #0
        s = qIOUtil_CheckStrSign( s, &sgn );
        while( '\0' != *s ){ /*iterate until null char is found*/
            if ( ( *s < '0' ) || ( *s > '9' ) ){
                break; 
            }
            res = res * 10 + ((int)*s)- ((int)'0'); /*if the char is digit, compute the resulting integer*/
 8007b3e:	250a      	movs	r5, #10
        while( '\0' != *s ){ /*iterate until null char is found*/
 8007b40:	7802      	ldrb	r2, [r0, #0]
 8007b42:	0014      	movs	r4, r2
 8007b44:	3c30      	subs	r4, #48	; 0x30
 8007b46:	2c09      	cmp	r4, #9
 8007b48:	d908      	bls.n	8007b5c <qIOUtil_AtoI+0x38>
            ++s; /*MISRAC2004-17.4_a deviation allowed*/ 
        }
        RetValue =  sgn * res; /*return the computed integer with sign*/
 8007b4a:	434b      	muls	r3, r1
    }
    return RetValue;
}
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	bd70      	pop	{r4, r5, r6, pc}
        ++s; /*plus sign ignored, move to next*/  /*MISRAC2004-17.4_a deviation allowed*/ 
 8007b50:	3a2b      	subs	r2, #43	; 0x2b
 8007b52:	4253      	negs	r3, r2
 8007b54:	415a      	adcs	r2, r3
    int sgn = 1; /*only to hold the sign*/
 8007b56:	2101      	movs	r1, #1
        ++s; /*plus sign ignored, move to next*/  /*MISRAC2004-17.4_a deviation allowed*/ 
 8007b58:	1880      	adds	r0, r0, r2
 8007b5a:	e7ef      	b.n	8007b3c <qIOUtil_AtoI+0x18>
            res = res * 10 + ((int)*s)- ((int)'0'); /*if the char is digit, compute the resulting integer*/
 8007b5c:	436b      	muls	r3, r5
 8007b5e:	189b      	adds	r3, r3, r2
 8007b60:	3b30      	subs	r3, #48	; 0x30
            ++s; /*MISRAC2004-17.4_a deviation allowed*/ 
 8007b62:	3001      	adds	r0, #1
 8007b64:	e7ec      	b.n	8007b40 <qIOUtil_AtoI+0x1c>

08007b66 <qIOUtil_ItoA>:

Return value:

  A pointer to the resulting null-terminated string, same as parameter str
*/
char* qIOUtil_ItoA( qINT32_t num, char* str, qUINT8_t base ){
 8007b66:	b570      	push	{r4, r5, r6, lr}
 8007b68:	1e0d      	subs	r5, r1, #0
    size_t i = 0u;
    if( NULL != str ){
 8007b6a:	d012      	beq.n	8007b92 <qIOUtil_ItoA+0x2c>
    size_t i = 0u;
 8007b6c:	2400      	movs	r4, #0
        if( num < 0 ){ 
 8007b6e:	42a0      	cmp	r0, r4
 8007b70:	da05      	bge.n	8007b7e <qIOUtil_ItoA+0x18>
            if( 10u == base ){ /*handle negative numbers only with 10-base*/
 8007b72:	2a0a      	cmp	r2, #10
 8007b74:	d102      	bne.n	8007b7c <qIOUtil_ItoA+0x16>
                str[i++] = '-';/*put the sign at the begining*/ /*MISRAC2004-17.4_b deviation allowed*/
 8007b76:	232d      	movs	r3, #45	; 0x2d
 8007b78:	3401      	adds	r4, #1
 8007b7a:	700b      	strb	r3, [r1, #0]
            } 
            num = -num;
 8007b7c:	4240      	negs	r0, r0
        }
        i += qIOUtil_xBase_U32toA( (qUINT32_t)num, &str[i], base ); /*make the unsigned conversion without the null terminator*/   /*MISRAC2004-17.4_b deviation allowed*/ 
 8007b7e:	192c      	adds	r4, r5, r4
    if( ( 0uL == num ) || ( 0u == base ) ){ /* Handle 0 explicitly, otherwise empty string is printed for 0 */
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d008      	beq.n	8007b96 <qIOUtil_ItoA+0x30>
 8007b84:	2a00      	cmp	r2, #0
 8007b86:	d006      	beq.n	8007b96 <qIOUtil_ItoA+0x30>
 8007b88:	0021      	movs	r1, r4
 8007b8a:	f7ff fed8 	bl	800793e <qIOUtil_xBase_U32toA.part.1>
        str[i] = '\0'; /*Append string terminator*/ /*MISRAC2004-17.4_b deviation allowed*/
 8007b8e:	2300      	movs	r3, #0
 8007b90:	5423      	strb	r3, [r4, r0]
    }
    return str;
}
 8007b92:	0028      	movs	r0, r5
 8007b94:	bd70      	pop	{r4, r5, r6, pc}
        str[i++] = '0';  /*MISRAC2004-17.4_b deviation allowed*/        
 8007b96:	2330      	movs	r3, #48	; 0x30
 8007b98:	2001      	movs	r0, #1
 8007b9a:	7023      	strb	r3, [r4, #0]
 8007b9c:	e7f7      	b.n	8007b8e <qIOUtil_ItoA+0x28>
	...

08007ba0 <qIOUtil_IsInf>:
    qTrue is argument has an infinite value, otherwise qFalse
*/
qBool_t qIOUtil_IsInf( qFloat32_t f ){
    qUINT32_t u = 0uL;
    (void) memcpy( &u, &f, sizeof(u) );
    return ( ( 0x7f800000uL == u ) || ( 0xff800000uL == u ) )? qTrue : qFalse;
 8007ba0:	4b03      	ldr	r3, [pc, #12]	; (8007bb0 <qIOUtil_IsInf+0x10>)
 8007ba2:	0040      	lsls	r0, r0, #1
 8007ba4:	0840      	lsrs	r0, r0, #1
 8007ba6:	18c0      	adds	r0, r0, r3
 8007ba8:	4243      	negs	r3, r0
 8007baa:	4158      	adcs	r0, r3
 8007bac:	b2c0      	uxtb	r0, r0
}
 8007bae:	4770      	bx	lr
 8007bb0:	80800000 	.word	0x80800000

08007bb4 <qIOUtil_IsNan>:
    qTrue is argument is NaN, otherwise qFalse
*/
qBool_t qIOUtil_IsNan( qFloat32_t f ){
    qUINT32_t u = 0uL;
    (void) memcpy( &u, &f, sizeof(u) );
    return ( ( ( u & 0x7F800000uL ) ==  0x7F800000uL ) && ( 0uL != (u & 0x7FFFFFuL) ) )? qTrue : qFalse;
 8007bb4:	23ff      	movs	r3, #255	; 0xff
 8007bb6:	05db      	lsls	r3, r3, #23
 8007bb8:	0019      	movs	r1, r3
 8007bba:	2200      	movs	r2, #0
 8007bbc:	4001      	ands	r1, r0
 8007bbe:	4299      	cmp	r1, r3
 8007bc0:	d103      	bne.n	8007bca <qIOUtil_IsNan+0x16>
 8007bc2:	0240      	lsls	r0, r0, #9
 8007bc4:	0002      	movs	r2, r0
 8007bc6:	1e50      	subs	r0, r2, #1
 8007bc8:	4182      	sbcs	r2, r0
 8007bca:	b2d0      	uxtb	r0, r2
}
 8007bcc:	4770      	bx	lr
	...

08007bd0 <qIOUtil_FtoA>:
char* qIOUtil_FtoA( qFloat32_t num, char *str, qUINT8_t precision ){ /*limited to precision=10*/
 8007bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bd2:	1c05      	adds	r5, r0, #0
 8007bd4:	000c      	movs	r4, r1
 8007bd6:	0017      	movs	r7, r2
    if( NULL != str ){
 8007bd8:	2900      	cmp	r1, #0
 8007bda:	d02b      	beq.n	8007c34 <qIOUtil_FtoA+0x64>
        if( ( num >= 0.0f ) && ( num < 1.0E-38 ) ){ /*handle the 0.0f*/
 8007bdc:	2100      	movs	r1, #0
 8007bde:	f7f8 fba9 	bl	8000334 <__aeabi_fcmpge>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d010      	beq.n	8007c08 <qIOUtil_FtoA+0x38>
 8007be6:	1c28      	adds	r0, r5, #0
 8007be8:	f7fb f8bc 	bl	8002d64 <__aeabi_f2d>
 8007bec:	4a41      	ldr	r2, [pc, #260]	; (8007cf4 <qIOUtil_FtoA+0x124>)
 8007bee:	4b42      	ldr	r3, [pc, #264]	; (8007cf8 <qIOUtil_FtoA+0x128>)
 8007bf0:	f7f8 fb48 	bl	8000284 <__aeabi_dcmplt>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d007      	beq.n	8007c08 <qIOUtil_FtoA+0x38>
            str[0]='0';  /*MISRAC2004-17.4_b deviation allowed*/
 8007bf8:	2330      	movs	r3, #48	; 0x30
            str[1]='.';  /*MISRAC2004-17.4_b deviation allowed*/
 8007bfa:	222e      	movs	r2, #46	; 0x2e
            str[0]='0';  /*MISRAC2004-17.4_b deviation allowed*/
 8007bfc:	7023      	strb	r3, [r4, #0]
            str[2]='n';  /*MISRAC2004-17.4_b deviation allowed*/ 
 8007bfe:	70a3      	strb	r3, [r4, #2]
            str[3]='\0'; /*MISRAC2004-17.4_b deviation allowed*/
 8007c00:	2300      	movs	r3, #0
            str[1]='a';  /*MISRAC2004-17.4_b deviation allowed*/
 8007c02:	7062      	strb	r2, [r4, #1]
            str[3]='\0'; /*MISRAC2004-17.4_b deviation allowed*/
 8007c04:	70e3      	strb	r3, [r4, #3]
 8007c06:	e015      	b.n	8007c34 <qIOUtil_FtoA+0x64>
        else if( qTrue == qIOUtil_IsInf(num) ){ /*handle the infinity*/
 8007c08:	1c28      	adds	r0, r5, #0
 8007c0a:	f7ff ffc9 	bl	8007ba0 <qIOUtil_IsInf>
 8007c0e:	2801      	cmp	r0, #1
 8007c10:	d112      	bne.n	8007c38 <qIOUtil_FtoA+0x68>
            str[0] = ( num > 0.0f )? '+' : '-'; /*MISRAC2004-17.4_b deviation allowed*/
 8007c12:	2100      	movs	r1, #0
 8007c14:	1c28      	adds	r0, r5, #0
 8007c16:	f7f8 fb83 	bl	8000320 <__aeabi_fcmpgt>
 8007c1a:	232b      	movs	r3, #43	; 0x2b
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d100      	bne.n	8007c22 <qIOUtil_FtoA+0x52>
 8007c20:	3302      	adds	r3, #2
 8007c22:	7023      	strb	r3, [r4, #0]
            str[1]='i';  /*MISRAC2004-17.4_b deviation allowed*/
 8007c24:	2369      	movs	r3, #105	; 0x69
 8007c26:	7063      	strb	r3, [r4, #1]
            str[2]='n';  /*MISRAC2004-17.4_b deviation allowed*/
 8007c28:	3305      	adds	r3, #5
 8007c2a:	70a3      	strb	r3, [r4, #2]
            str[3]='f';  /*MISRAC2004-17.4_b deviation allowed*/
 8007c2c:	3b08      	subs	r3, #8
 8007c2e:	70e3      	strb	r3, [r4, #3]
            str[4]='\0'; /*MISRAC2004-17.4_b deviation allowed*/  
 8007c30:	2300      	movs	r3, #0
 8007c32:	7123      	strb	r3, [r4, #4]
}
 8007c34:	0020      	movs	r0, r4
 8007c36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        else if( qTrue == qIOUtil_IsNan(num) ){ /*handle the NAN*/
 8007c38:	1c28      	adds	r0, r5, #0
 8007c3a:	f7ff ffbb 	bl	8007bb4 <qIOUtil_IsNan>
 8007c3e:	2801      	cmp	r0, #1
 8007c40:	d103      	bne.n	8007c4a <qIOUtil_FtoA+0x7a>
            str[0]='n';  /*MISRAC2004-17.4_b deviation allowed*/
 8007c42:	236e      	movs	r3, #110	; 0x6e
            str[1]='a';  /*MISRAC2004-17.4_b deviation allowed*/
 8007c44:	2261      	movs	r2, #97	; 0x61
            str[0]='n';  /*MISRAC2004-17.4_b deviation allowed*/
 8007c46:	7023      	strb	r3, [r4, #0]
 8007c48:	e7d9      	b.n	8007bfe <qIOUtil_FtoA+0x2e>
            if( num < 0.0f ){ /*handle the negative numbers*/
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	1c28      	adds	r0, r5, #0
 8007c4e:	f7f8 fb53 	bl	80002f8 <__aeabi_fcmplt>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d036      	beq.n	8007cc4 <qIOUtil_FtoA+0xf4>
                num = -num; /*leave it positive for the convert method*/
 8007c56:	2380      	movs	r3, #128	; 0x80
 8007c58:	061b      	lsls	r3, r3, #24
 8007c5a:	18ed      	adds	r5, r5, r3
                str[i++] = '-'; /*add the negative sign*/
 8007c5c:	232d      	movs	r3, #45	; 0x2d
 8007c5e:	7023      	strb	r3, [r4, #0]
 8007c60:	3b2c      	subs	r3, #44	; 0x2c
 8007c62:	9300      	str	r3, [sp, #0]
            intPart = (qUINT32_t)num; /*get the integer parts*/
 8007c64:	1c28      	adds	r0, r5, #0
 8007c66:	f7f8 fb8f 	bl	8000388 <__aeabi_f2uiz>
            i += qIOUtil_xBase_U32toA( intPart, &str[i], 10u ); /*convert the integer part in decimal form*/
 8007c6a:	9b00      	ldr	r3, [sp, #0]
            intPart = (qUINT32_t)num; /*get the integer parts*/
 8007c6c:	0006      	movs	r6, r0
            i += qIOUtil_xBase_U32toA( intPart, &str[i], 10u ); /*convert the integer part in decimal form*/
 8007c6e:	18e1      	adds	r1, r4, r3
    if( ( 0uL == num ) || ( 0u == base ) ){ /* Handle 0 explicitly, otherwise empty string is printed for 0 */
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d029      	beq.n	8007cc8 <qIOUtil_FtoA+0xf8>
 8007c74:	220a      	movs	r2, #10
 8007c76:	f7ff fe62 	bl	800793e <qIOUtil_xBase_U32toA.part.1>
            i += qIOUtil_xBase_U32toA( intPart, &str[i], 10u ); /*convert the integer part in decimal form*/
 8007c7a:	9b00      	ldr	r3, [sp, #0]
 8007c7c:	181b      	adds	r3, r3, r0
 8007c7e:	9300      	str	r3, [sp, #0]
            if( precision > 0u ){ /*decimal part*/
 8007c80:	2f00      	cmp	r7, #0
 8007c82:	d01b      	beq.n	8007cbc <qIOUtil_FtoA+0xec>
 8007c84:	1c3b      	adds	r3, r7, #0
 8007c86:	2f0a      	cmp	r7, #10
 8007c88:	d900      	bls.n	8007c8c <qIOUtil_FtoA+0xbc>
 8007c8a:	230a      	movs	r3, #10
 8007c8c:	b2db      	uxtb	r3, r3
            num -= (qFloat32_t)intPart; /*get the floating-point part subtracting the integer part from the original value*/ /*CERT-FLP36-C deviation allowed*/
 8007c8e:	0030      	movs	r0, r6
 8007c90:	9301      	str	r3, [sp, #4]
 8007c92:	f7f9 fadb 	bl	800124c <__aeabi_ui2f>
 8007c96:	1c01      	adds	r1, r0, #0
 8007c98:	1c28      	adds	r0, r5, #0
 8007c9a:	f7f9 f8f3 	bl	8000e84 <__aeabi_fsub>
 8007c9e:	9b00      	ldr	r3, [sp, #0]
                while( 0u != precision-- ){ /*convert until precision reached*/
 8007ca0:	9f01      	ldr	r7, [sp, #4]
 8007ca2:	18e5      	adds	r5, r4, r3
                str[i++] = '.'; /*place decimal point*/ /*MISRAC2004-17.4_b deviation allowed*/
 8007ca4:	232e      	movs	r3, #46	; 0x2e
 8007ca6:	702b      	strb	r3, [r5, #0]
                while( 0u != precision-- ){ /*convert until precision reached*/
 8007ca8:	3f01      	subs	r7, #1
 8007caa:	b2ff      	uxtb	r7, r7
 8007cac:	3501      	adds	r5, #1
 8007cae:	2fff      	cmp	r7, #255	; 0xff
 8007cb0:	d10e      	bne.n	8007cd0 <qIOUtil_FtoA+0x100>
 8007cb2:	9b01      	ldr	r3, [sp, #4]
 8007cb4:	9a00      	ldr	r2, [sp, #0]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	18d3      	adds	r3, r2, r3
 8007cba:	9300      	str	r3, [sp, #0]
            str[i] = '\0'; /*put the null char*/ /*MISRAC2004-17.4_b deviation allowed*/
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	9a00      	ldr	r2, [sp, #0]
 8007cc0:	54a3      	strb	r3, [r4, r2]
 8007cc2:	e7b7      	b.n	8007c34 <qIOUtil_FtoA+0x64>
    size_t i = 0u;
 8007cc4:	9000      	str	r0, [sp, #0]
 8007cc6:	e7cd      	b.n	8007c64 <qIOUtil_FtoA+0x94>
        str[i++] = '0';  /*MISRAC2004-17.4_b deviation allowed*/        
 8007cc8:	2330      	movs	r3, #48	; 0x30
 8007cca:	2001      	movs	r0, #1
 8007ccc:	700b      	strb	r3, [r1, #0]
 8007cce:	e7d4      	b.n	8007c7a <qIOUtil_FtoA+0xaa>
                    num *= 10.0f;  /*start moving the floating-point part one by one multiplying by 10*/
 8007cd0:	490a      	ldr	r1, [pc, #40]	; (8007cfc <qIOUtil_FtoA+0x12c>)
 8007cd2:	f7f8 ffa5 	bl	8000c20 <__aeabi_fmul>
 8007cd6:	1c06      	adds	r6, r0, #0
                    c = (char)num; /*get the bcd byte*/
 8007cd8:	f7f8 fb56 	bl	8000388 <__aeabi_f2uiz>
 8007cdc:	b2c0      	uxtb	r0, r0
                    str[i++] = (char)((qUINT8_t)c + '0' ); /*convert to ASCII and put it inside the buffer*/
 8007cde:	0003      	movs	r3, r0
 8007ce0:	3330      	adds	r3, #48	; 0x30
 8007ce2:	702b      	strb	r3, [r5, #0]
                    num -= (qFloat32_t)c; /*Subtract the processed floating-point digit*/
 8007ce4:	f7f9 fab2 	bl	800124c <__aeabi_ui2f>
 8007ce8:	1c01      	adds	r1, r0, #0
 8007cea:	1c30      	adds	r0, r6, #0
 8007cec:	f7f9 f8ca 	bl	8000e84 <__aeabi_fsub>
 8007cf0:	e7da      	b.n	8007ca8 <qIOUtil_FtoA+0xd8>
 8007cf2:	46c0      	nop			; (mov r8, r8)
 8007cf4:	9daa78e4 	.word	0x9daa78e4
 8007cf8:	380b38fb 	.word	0x380b38fb
 8007cfc:	41200000 	.word	0x41200000

08007d00 <qOS_DummyTask_Callback>:
#endif

/*========================== Shared Private Method ===========================*/
void qOS_DummyTask_Callback( qEvent_t e ){
    (void)e; /*unused*/
}
 8007d00:	4770      	bx	lr
	...

08007d04 <qOS_PriorityQueue_ClearIndex>:
/*============================================================================*/
static void qOS_PriorityQueue_ClearIndex( qIndex_t IndexToClear ){
    qIndex_t j;
    qBase_t QueueIndex;

    kernel.QueueStack[IndexToClear].Task = NULL; /*set the position in the queue as empty*/  
 8007d04:	0002      	movs	r2, r0
 8007d06:	2100      	movs	r1, #0
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <qOS_PriorityQueue_ClearIndex+0x38>)
 8007d0a:	3211      	adds	r2, #17
 8007d0c:	00d2      	lsls	r2, r2, #3
static void qOS_PriorityQueue_ClearIndex( qIndex_t IndexToClear ){
 8007d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    kernel.QueueStack[IndexToClear].Task = NULL; /*set the position in the queue as empty*/  
 8007d10:	50d1      	str	r1, [r2, r3]
    QueueIndex = (qBase_t)kernel.QueueIndex; /*to avoid side effects*/
 8007d12:	001a      	movs	r2, r3
 8007d14:	32d8      	adds	r2, #216	; 0xd8
 8007d16:	6815      	ldr	r5, [r2, #0]
 8007d18:	00c1      	lsls	r1, r0, #3
    for( j = IndexToClear ; (qBase_t)j < QueueIndex ; j++){ 
 8007d1a:	4285      	cmp	r5, r0
 8007d1c:	dc04      	bgt.n	8007d28 <qOS_PriorityQueue_ClearIndex+0x24>
        kernel.QueueStack[j] = kernel.QueueStack[ j + (qIndex_t)1 ]; /*shift the remaining items of the queue*/
    }
    kernel.QueueIndex--;    /*decrease the index*/    
 8007d1e:	33d8      	adds	r3, #216	; 0xd8
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	3a01      	subs	r2, #1
 8007d24:	601a      	str	r2, [r3, #0]
}
 8007d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d28:	185a      	adds	r2, r3, r1
        kernel.QueueStack[j] = kernel.QueueStack[ j + (qIndex_t)1 ]; /*shift the remaining items of the queue*/
 8007d2a:	0014      	movs	r4, r2
 8007d2c:	3290      	adds	r2, #144	; 0x90
 8007d2e:	3488      	adds	r4, #136	; 0x88
 8007d30:	3001      	adds	r0, #1
 8007d32:	cac0      	ldmia	r2!, {r6, r7}
 8007d34:	c4c0      	stmia	r4!, {r6, r7}
 8007d36:	3108      	adds	r1, #8
 8007d38:	e7ef      	b.n	8007d1a <qOS_PriorityQueue_ClearIndex+0x16>
 8007d3a:	46c0      	nop			; (mov r8, r8)
 8007d3c:	20000704 	.word	0x20000704

08007d40 <qOS_ATCLI_NotifyFcn>:
    /*cstat -MISRAC2012-Rule-11.5 -CERT-EXP36-C_b*/
    (void)qATCLI_Run( (qATCLI_t*)e->TaskData ); /* MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed */
    /*cstat +MISRAC2012-Rule-11.5 +CERT-EXP36-C_b*/
}
/*============================================================================*/
static void qOS_ATCLI_NotifyFcn( qATCLI_t * const cli ){
 8007d40:	b510      	push	{r4, lr}
    qTask_t *Task;
    /*cstat -MISRAC2012-Rule-11.5 -CERT-EXP36-C_b*/
    Task = (qTask_t *)cli->qPrivate.xPublic.UserData; /* MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed */
    /*cstat +MISRAC2012-Rule-11.5 +CERT-EXP36-C_b*/
    (void)qTask_Notification_Send( Task, NULL ); /*simple notifications preferred because queued notification can be disabled en <qconfig.h> */
 8007d42:	2100      	movs	r1, #0
 8007d44:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8007d46:	f000 fd8a 	bl	800885e <qTask_Notification_Send>
}
 8007d4a:	bd10      	pop	{r4, pc}

08007d4c <qOS_ATCLI_TaskCallback>:
static void qOS_ATCLI_TaskCallback( qEvent_t  e ){ /*wrapper for the task callback */
 8007d4c:	b510      	push	{r4, lr}
    (void)qATCLI_Run( (qATCLI_t*)e->TaskData ); /* MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed */
 8007d4e:	6800      	ldr	r0, [r0, #0]
 8007d50:	f7ff fac6 	bl	80072e0 <qATCLI_Run>
}
 8007d54:	bd10      	pop	{r4, pc}
	...

08007d58 <qOS_CheckIfReady>:
    t2 = (qTask_t*)n1;
    return (qBool_t)(t1->qPrivate.Entry > t2->qPrivate.Entry);
}
#endif
/*============================================================================*/
static Q_FUNC_ATTRIBUTE_PRE qBool_t qOS_CheckIfReady( void *node, void *arg, qList_WalkStage_t stage ) Q_FUNC_ATTRIBUTE_POS{
 8007d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d5a:	0007      	movs	r7, r0
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	1e14      	subs	r4, r2, #0
    qList_t *xList;
    qTrigger_t trg;
    static qBool_t xReady = qFalse;
    qBool_t RetValue = qFalse;

    if( QLIST_WALKINIT == stage ){
 8007d60:	d13a      	bne.n	8007dd8 <qOS_CheckIfReady+0x80>
        xReady = qFalse;
 8007d62:	4b84      	ldr	r3, [pc, #528]	; (8007f74 <qOS_CheckIfReady+0x21c>)
    if( kernel.QueueIndex >= 0 ){ /*queue has elements*/
 8007d64:	4d84      	ldr	r5, [pc, #528]	; (8007f78 <qOS_CheckIfReady+0x220>)
        xReady = qFalse;
 8007d66:	701a      	strb	r2, [r3, #0]
    if( kernel.QueueIndex >= 0 ){ /*queue has elements*/
 8007d68:	002b      	movs	r3, r5
 8007d6a:	33d8      	adds	r3, #216	; 0xd8
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	da02      	bge.n	8007d78 <qOS_CheckIfReady+0x20>
    qBool_t RetValue = qFalse;
 8007d72:	2300      	movs	r3, #0
            xList = ( qTriggerNULL != xTask->qPrivate.Trigger )? &ReadyList[ xTask->qPrivate.Priority ] : SuspendedList;
            (void)qList_Insert( xList, xTask, QLIST_ATBACK );
        }
    }
    else if( QLIST_WALKEND == stage ){ 
        RetValue = xReady; 
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	e071      	b.n	8007e5c <qOS_CheckIfReady+0x104>
        qCritical_Enter();
 8007d78:	f7ff fc5a 	bl	8007630 <qCritical_Enter>
        MaxPriorityValue = kernel.QueueStack[0].Task->qPrivate.Priority;
 8007d7c:	002b      	movs	r3, r5
 8007d7e:	3388      	adds	r3, #136	; 0x88
 8007d80:	681b      	ldr	r3, [r3, #0]
    qIndex_t IndexTaskToExtract = 0u;
 8007d82:	0020      	movs	r0, r4
        MaxPriorityValue = kernel.QueueStack[0].Task->qPrivate.Priority;
 8007d84:	333d      	adds	r3, #61	; 0x3d
 8007d86:	7819      	ldrb	r1, [r3, #0]
        for( i = 1u ; ( i < (qIndex_t)Q_PRIO_QUEUE_SIZE ) ; i++){  /*walk through the queue to find the task with the highest priority*/
 8007d88:	2301      	movs	r3, #1
            if( NULL == kernel.QueueStack[i].Task ){ /* tail is reached */
 8007d8a:	00da      	lsls	r2, r3, #3
 8007d8c:	3288      	adds	r2, #136	; 0x88
 8007d8e:	58aa      	ldr	r2, [r5, r2]
 8007d90:	2a00      	cmp	r2, #0
 8007d92:	d008      	beq.n	8007da6 <qOS_CheckIfReady+0x4e>
            iPriorityValue = kernel.QueueStack[i].Task->qPrivate.Priority;
 8007d94:	323d      	adds	r2, #61	; 0x3d
 8007d96:	7812      	ldrb	r2, [r2, #0]
            if( iPriorityValue > MaxPriorityValue ){ /*check if the queued task has the max priority value*/
 8007d98:	428a      	cmp	r2, r1
 8007d9a:	d901      	bls.n	8007da0 <qOS_CheckIfReady+0x48>
 8007d9c:	0011      	movs	r1, r2
 8007d9e:	0018      	movs	r0, r3
        for( i = 1u ; ( i < (qIndex_t)Q_PRIO_QUEUE_SIZE ) ; i++){  /*walk through the queue to find the task with the highest priority*/
 8007da0:	3301      	adds	r3, #1
 8007da2:	2b0a      	cmp	r3, #10
 8007da4:	d1f1      	bne.n	8007d8a <qOS_CheckIfReady+0x32>
        kernel.QueueData = kernel.QueueStack[IndexTaskToExtract].QueueData; /*get the data from the queue*/
 8007da6:	0003      	movs	r3, r0
 8007da8:	002a      	movs	r2, r5
 8007daa:	3311      	adds	r3, #17
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	18e9      	adds	r1, r5, r3
 8007db0:	6849      	ldr	r1, [r1, #4]
        xTask = kernel.QueueStack[IndexTaskToExtract].Task; /*assign the task to the output*/
 8007db2:	58ed      	ldr	r5, [r5, r3]
        kernel.QueueData = kernel.QueueStack[IndexTaskToExtract].QueueData; /*get the data from the queue*/
 8007db4:	3208      	adds	r2, #8
 8007db6:	67d1      	str	r1, [r2, #124]	; 0x7c
        qOS_PriorityQueue_ClearIndex( IndexTaskToExtract );
 8007db8:	f7ff ffa4 	bl	8007d04 <qOS_PriorityQueue_ClearIndex>
        qCritical_Exit();
 8007dbc:	f7ff fc42 	bl	8007644 <qCritical_Exit>
            if( NULL != xTask ){  /*if we got a task from the priority queue,*/
 8007dc0:	2d00      	cmp	r5, #0
 8007dc2:	d0d6      	beq.n	8007d72 <qOS_CheckIfReady+0x1a>
                xTask->qPrivate.Trigger = byNotificationQueued; 
 8007dc4:	002b      	movs	r3, r5
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	333c      	adds	r3, #60	; 0x3c
 8007dca:	701a      	strb	r2, [r3, #0]
                _qPrivate_TaskModifyFlags( xTask, _QTASK_BIT_SHUTDOWN, qTrue ); /*wake-up the task!!*/
 8007dcc:	2140      	movs	r1, #64	; 0x40
 8007dce:	3a01      	subs	r2, #1
 8007dd0:	0028      	movs	r0, r5
 8007dd2:	f000 fd75 	bl	80088c0 <_qPrivate_TaskModifyFlags>
 8007dd6:	e7cc      	b.n	8007d72 <qOS_CheckIfReady+0x1a>
    else if( QLIST_WALKTHROUGH == stage ){
 8007dd8:	2a01      	cmp	r2, #1
 8007dda:	d000      	beq.n	8007dde <qOS_CheckIfReady+0x86>
 8007ddc:	e0c3      	b.n	8007f66 <qOS_CheckIfReady+0x20e>
            if( NULL != kernel.NotificationSpreadRequest.mode ){
 8007dde:	4e66      	ldr	r6, [pc, #408]	; (8007f78 <qOS_CheckIfReady+0x220>)
 8007de0:	0035      	movs	r5, r6
 8007de2:	35f0      	adds	r5, #240	; 0xf0
 8007de4:	682b      	ldr	r3, [r5, #0]
    qBool_t RetValue = qFalse;
 8007de6:	9300      	str	r3, [sp, #0]
            if( NULL != kernel.NotificationSpreadRequest.mode ){
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d006      	beq.n	8007dfa <qOS_CheckIfReady+0xa2>
                (void)kernel.NotificationSpreadRequest.mode( xTask, kernel.NotificationSpreadRequest.eventdata );
 8007dec:	36f4      	adds	r6, #244	; 0xf4
 8007dee:	6831      	ldr	r1, [r6, #0]
 8007df0:	4798      	blx	r3
                kernel.NotificationSpreadRequest.mode = NULL;
 8007df2:	2300      	movs	r3, #0
                RetValue = qTrue;
 8007df4:	9400      	str	r4, [sp, #0]
                kernel.NotificationSpreadRequest.mode = NULL;
 8007df6:	602b      	str	r3, [r5, #0]
                kernel.NotificationSpreadRequest.eventdata = NULL;
 8007df8:	6033      	str	r3, [r6, #0]
        if( _qPrivate_TaskGetFlag( xTask, _QTASK_BIT_SHUTDOWN) ){
 8007dfa:	2140      	movs	r1, #64	; 0x40
 8007dfc:	0038      	movs	r0, r7
 8007dfe:	f000 fd59 	bl	80088b4 <_qPrivate_TaskGetFlag>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d007      	beq.n	8007e16 <qOS_CheckIfReady+0xbe>
            if( byNotificationQueued == xTask->qPrivate.Trigger ){
 8007e06:	003c      	movs	r4, r7
 8007e08:	343c      	adds	r4, #60	; 0x3c
 8007e0a:	7823      	ldrb	r3, [r4, #0]
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d128      	bne.n	8007e62 <qOS_CheckIfReady+0x10a>
                xReady = qTrue;
 8007e10:	2201      	movs	r2, #1
 8007e12:	4b58      	ldr	r3, [pc, #352]	; (8007f74 <qOS_CheckIfReady+0x21c>)
 8007e14:	701a      	strb	r2, [r3, #0]
        (void)qList_Remove( WaitingList, NULL, QLIST_ATFRONT ); 
 8007e16:	2201      	movs	r2, #1
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4252      	negs	r2, r2
 8007e1c:	4857      	ldr	r0, [pc, #348]	; (8007f7c <qOS_CheckIfReady+0x224>)
 8007e1e:	f000 fb3e 	bl	800849e <qList_Remove>
        if( _qPrivate_TaskGetFlag( xTask, _QTASK_BIT_REMOVE_REQUEST) ){ /*check if the task get a removal request*/
 8007e22:	2180      	movs	r1, #128	; 0x80
 8007e24:	0038      	movs	r0, r7
 8007e26:	f000 fd45 	bl	80088b4 <_qPrivate_TaskGetFlag>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d100      	bne.n	8007e30 <qOS_CheckIfReady+0xd8>
 8007e2e:	e088      	b.n	8007f42 <qOS_CheckIfReady+0x1ea>
                qCritical_Enter(); 
 8007e30:	f7ff fbfe 	bl	8007630 <qCritical_Enter>
    for( i = 1u ; ( i < (qIndex_t)Q_PRIO_QUEUE_SIZE ) ; i++){ 
 8007e34:	2401      	movs	r4, #1
        if( kernel.QueueStack[ i ].Task == task ){
 8007e36:	00e3      	lsls	r3, r4, #3
 8007e38:	4a4f      	ldr	r2, [pc, #316]	; (8007f78 <qOS_CheckIfReady+0x220>)
 8007e3a:	3388      	adds	r3, #136	; 0x88
 8007e3c:	58d3      	ldr	r3, [r2, r3]
 8007e3e:	429f      	cmp	r7, r3
 8007e40:	d102      	bne.n	8007e48 <qOS_CheckIfReady+0xf0>
            qOS_PriorityQueue_ClearIndex( i );
 8007e42:	0020      	movs	r0, r4
 8007e44:	f7ff ff5e 	bl	8007d04 <qOS_PriorityQueue_ClearIndex>
    for( i = 1u ; ( i < (qIndex_t)Q_PRIO_QUEUE_SIZE ) ; i++){ 
 8007e48:	3401      	adds	r4, #1
 8007e4a:	2c0a      	cmp	r4, #10
 8007e4c:	d1f3      	bne.n	8007e36 <qOS_CheckIfReady+0xde>
                qCritical_Exit();
 8007e4e:	f7ff fbf9 	bl	8007644 <qCritical_Exit>
            _qPrivate_TaskModifyFlags( xTask, _QTASK_BIT_REMOVE_REQUEST, qFalse );  /*clear the removal request*/
 8007e52:	2200      	movs	r2, #0
 8007e54:	2180      	movs	r1, #128	; 0x80
 8007e56:	0038      	movs	r0, r7
 8007e58:	f000 fd32 	bl	80088c0 <_qPrivate_TaskModifyFlags>
    }
    else{
        (void)arg; /*arg is never used*/  /*this should never enter here*/
    }
    return RetValue;
}
 8007e5c:	9800      	ldr	r0, [sp, #0]
 8007e5e:	b005      	add	sp, #20
 8007e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    qBool_t RetValue = qFalse;
    qIteration_t TaskIterations;
    qClock_t TaskInterval;
    qBool_t DeadLineReached;
    
    if( _qPrivate_TaskGetFlag( Task, _QTASK_BIT_ENABLED ) ){ /*nested-check for timed task, check the first requirement(the task must be enabled)*/
 8007e62:	2102      	movs	r1, #2
 8007e64:	0038      	movs	r0, r7
 8007e66:	f000 fd25 	bl	80088b4 <_qPrivate_TaskGetFlag>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d01c      	beq.n	8007ea8 <qOS_CheckIfReady+0x150>
        TaskIterations = Task->qPrivate.Iterations; /*avoid side efects in the next check*/
        if( ( _qAbs( TaskIterations ) > 0 ) || ( qPeriodic == TaskIterations ) ){ /*then task should be periodic or must have available iters*/
 8007e6e:	4a44      	ldr	r2, [pc, #272]	; (8007f80 <qOS_CheckIfReady+0x228>)
        TaskIterations = Task->qPrivate.Iterations; /*avoid side efects in the next check*/
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        if( ( _qAbs( TaskIterations ) > 0 ) || ( qPeriodic == TaskIterations ) ){ /*then task should be periodic or must have available iters*/
 8007e72:	1899      	adds	r1, r3, r2
 8007e74:	4a43      	ldr	r2, [pc, #268]	; (8007f84 <qOS_CheckIfReady+0x22c>)
 8007e76:	4291      	cmp	r1, r2
 8007e78:	d904      	bls.n	8007e84 <qOS_CheckIfReady+0x12c>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	dc02      	bgt.n	8007e84 <qOS_CheckIfReady+0x12c>
 8007e7e:	3202      	adds	r2, #2
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d111      	bne.n	8007ea8 <qOS_CheckIfReady+0x150>
            TaskInterval = Task->qPrivate.timer.TV;
            DeadLineReached = qSTimer_Expired( &Task->qPrivate.timer );
 8007e84:	003d      	movs	r5, r7
            TaskInterval = Task->qPrivate.timer.TV;
 8007e86:	6abe      	ldr	r6, [r7, #40]	; 0x28
            DeadLineReached = qSTimer_Expired( &Task->qPrivate.timer );
 8007e88:	3524      	adds	r5, #36	; 0x24
 8007e8a:	0028      	movs	r0, r5
 8007e8c:	f000 fcbf 	bl	800880e <qSTimer_Expired>
            if( ( 0uL == TaskInterval ) || DeadLineReached ){ /*finally, check the time deadline*/
 8007e90:	2e00      	cmp	r6, #0
 8007e92:	d001      	beq.n	8007e98 <qOS_CheckIfReady+0x140>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	d007      	beq.n	8007ea8 <qOS_CheckIfReady+0x150>
                (void)qSTimer_Reload( &xTask->qPrivate.timer );
 8007e98:	0028      	movs	r0, r5
 8007e9a:	f000 fc8f 	bl	80087bc <qSTimer_Reload>
                xTask->qPrivate.Trigger = byTimeElapsed;      
 8007e9e:	2301      	movs	r3, #1
                xReady = qTrue;            
 8007ea0:	4a34      	ldr	r2, [pc, #208]	; (8007f74 <qOS_CheckIfReady+0x21c>)
                xTask->qPrivate.Trigger = byTimeElapsed;      
 8007ea2:	7023      	strb	r3, [r4, #0]
                xTask->qPrivate.Trigger = qTriggerNULL;
 8007ea4:	7013      	strb	r3, [r2, #0]
 8007ea6:	e7b6      	b.n	8007e16 <qOS_CheckIfReady+0xbe>
    if( NULL != Task->qPrivate.Queue){
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d033      	beq.n	8007f16 <qOS_CheckIfReady+0x1be>
        FullFlag = _qPrivate_TaskGetFlag( Task, _QTASK_BIT_QUEUE_FULL );
 8007eae:	2108      	movs	r1, #8
 8007eb0:	0038      	movs	r0, r7
 8007eb2:	f000 fcff 	bl	80088b4 <_qPrivate_TaskGetFlag>
        CountFlag = _qPrivate_TaskGetFlag( Task, _QTASK_BIT_QUEUE_COUNT );
 8007eb6:	2110      	movs	r1, #16
        FullFlag = _qPrivate_TaskGetFlag( Task, _QTASK_BIT_QUEUE_FULL );
 8007eb8:	9001      	str	r0, [sp, #4]
        CountFlag = _qPrivate_TaskGetFlag( Task, _QTASK_BIT_QUEUE_COUNT );
 8007eba:	0038      	movs	r0, r7
 8007ebc:	f000 fcfa 	bl	80088b4 <_qPrivate_TaskGetFlag>
        ReceiverFlag = _qPrivate_TaskGetFlag( Task, _QTASK_BIT_QUEUE_RECEIVER );
 8007ec0:	2104      	movs	r1, #4
        CountFlag = _qPrivate_TaskGetFlag( Task, _QTASK_BIT_QUEUE_COUNT );
 8007ec2:	0005      	movs	r5, r0
        ReceiverFlag = _qPrivate_TaskGetFlag( Task, _QTASK_BIT_QUEUE_RECEIVER );
 8007ec4:	0038      	movs	r0, r7
 8007ec6:	f000 fcf5 	bl	80088b4 <_qPrivate_TaskGetFlag>
        EmptyFlag = _qPrivate_TaskGetFlag( Task, _QTASK_BIT_QUEUE_EMPTY );
 8007eca:	2120      	movs	r1, #32
        ReceiverFlag = _qPrivate_TaskGetFlag( Task, _QTASK_BIT_QUEUE_RECEIVER );
 8007ecc:	9002      	str	r0, [sp, #8]
        EmptyFlag = _qPrivate_TaskGetFlag( Task, _QTASK_BIT_QUEUE_EMPTY );
 8007ece:	0038      	movs	r0, r7
 8007ed0:	f000 fcf0 	bl	80088b4 <_qPrivate_TaskGetFlag>
 8007ed4:	9003      	str	r0, [sp, #12]
        CurrentQueueCount = qQueue_Count( Task->qPrivate.Queue ); /*to avoid side effects*/
 8007ed6:	69f8      	ldr	r0, [r7, #28]
 8007ed8:	f000 fbe1 	bl	800869e <qQueue_Count>
 8007edc:	0004      	movs	r4, r0
        IsFull = qQueue_IsFull( Task->qPrivate.Queue ); /*to avoid side effects*/
 8007ede:	69f8      	ldr	r0, [r7, #28]
 8007ee0:	f000 fbe1 	bl	80086a6 <qQueue_IsFull>
 8007ee4:	0006      	movs	r6, r0
        IsEmpty = qQueue_IsEmpty( Task->qPrivate.Queue ); /*to avoid side effects*/
 8007ee6:	69f8      	ldr	r0, [r7, #28]
 8007ee8:	f000 fbd0 	bl	800868c <qQueue_IsEmpty>
        if( FullFlag && IsFull ){        
 8007eec:	9b01      	ldr	r3, [sp, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <qOS_CheckIfReady+0x19e>
 8007ef2:	2e00      	cmp	r6, #0
 8007ef4:	d116      	bne.n	8007f24 <qOS_CheckIfReady+0x1cc>
        else if( ( CountFlag ) && ( CurrentQueueCount >= Task->qPrivate.QueueCount ) ){
 8007ef6:	2d00      	cmp	r5, #0
 8007ef8:	d002      	beq.n	8007f00 <qOS_CheckIfReady+0x1a8>
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	429c      	cmp	r4, r3
 8007efe:	d216      	bcs.n	8007f2e <qOS_CheckIfReady+0x1d6>
        else if( ReceiverFlag && ( CurrentQueueCount > 0u ) ){    
 8007f00:	9b02      	ldr	r3, [sp, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <qOS_CheckIfReady+0x1b2>
 8007f06:	2c00      	cmp	r4, #0
 8007f08:	d113      	bne.n	8007f32 <qOS_CheckIfReady+0x1da>
        else if( EmptyFlag && IsEmpty ){
 8007f0a:	9b03      	ldr	r3, [sp, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <qOS_CheckIfReady+0x1be>
            RetValue =  byQueueEmpty;
 8007f10:	2307      	movs	r3, #7
        else if( EmptyFlag && IsEmpty ){
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d107      	bne.n	8007f26 <qOS_CheckIfReady+0x1ce>
 8007f16:	003a      	movs	r2, r7
            else if( xTask->qPrivate.Notification > (qNotifier_t)0 ){   /*last check : task with a pending notification event?*/
 8007f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1a:	323c      	adds	r2, #60	; 0x3c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00a      	beq.n	8007f36 <qOS_CheckIfReady+0x1de>
                xTask->qPrivate.Trigger = byNotificationSimple;  
 8007f20:	2303      	movs	r3, #3
 8007f22:	e002      	b.n	8007f2a <qOS_CheckIfReady+0x1d2>
            RetValue =  byQueueFull;
 8007f24:	2305      	movs	r3, #5
                xTask->qPrivate.Trigger = trg;      
 8007f26:	003a      	movs	r2, r7
 8007f28:	323c      	adds	r2, #60	; 0x3c
 8007f2a:	7013      	strb	r3, [r2, #0]
 8007f2c:	e770      	b.n	8007e10 <qOS_CheckIfReady+0xb8>
            RetValue =  byQueueCount;
 8007f2e:	2306      	movs	r3, #6
 8007f30:	e7f9      	b.n	8007f26 <qOS_CheckIfReady+0x1ce>
            RetValue = byQueueReceiver; 
 8007f32:	2304      	movs	r3, #4
 8007f34:	e7f7      	b.n	8007f26 <qOS_CheckIfReady+0x1ce>
            else if( 0uL != (QTASK_EVENTFLAGS_RMASK & xTask->qPrivate.Flags ) ){
 8007f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f38:	0b1b      	lsrs	r3, r3, #12
 8007f3a:	031b      	lsls	r3, r3, #12
 8007f3c:	d0b2      	beq.n	8007ea4 <qOS_CheckIfReady+0x14c>
                xTask->qPrivate.Trigger = byEventFlags;          
 8007f3e:	2308      	movs	r3, #8
 8007f40:	e7f3      	b.n	8007f2a <qOS_CheckIfReady+0x1d2>
            xList = ( qTriggerNULL != xTask->qPrivate.Trigger )? &ReadyList[ xTask->qPrivate.Priority ] : SuspendedList;
 8007f42:	003b      	movs	r3, r7
 8007f44:	333c      	adds	r3, #60	; 0x3c
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	480f      	ldr	r0, [pc, #60]	; (8007f88 <qOS_CheckIfReady+0x230>)
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d006      	beq.n	8007f5c <qOS_CheckIfReady+0x204>
 8007f4e:	003b      	movs	r3, r7
 8007f50:	2018      	movs	r0, #24
 8007f52:	333d      	adds	r3, #61	; 0x3d
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	4358      	muls	r0, r3
 8007f58:	4b07      	ldr	r3, [pc, #28]	; (8007f78 <qOS_CheckIfReady+0x220>)
 8007f5a:	18c0      	adds	r0, r0, r3
            (void)qList_Insert( xList, xTask, QLIST_ATBACK );
 8007f5c:	4a08      	ldr	r2, [pc, #32]	; (8007f80 <qOS_CheckIfReady+0x228>)
 8007f5e:	0039      	movs	r1, r7
 8007f60:	f000 fa63 	bl	800842a <qList_Insert>
 8007f64:	e77a      	b.n	8007e5c <qOS_CheckIfReady+0x104>
    else if( QLIST_WALKEND == stage ){ 
 8007f66:	2a02      	cmp	r2, #2
 8007f68:	d000      	beq.n	8007f6c <qOS_CheckIfReady+0x214>
 8007f6a:	e702      	b.n	8007d72 <qOS_CheckIfReady+0x1a>
        RetValue = xReady; 
 8007f6c:	4b01      	ldr	r3, [pc, #4]	; (8007f74 <qOS_CheckIfReady+0x21c>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	e700      	b.n	8007d74 <qOS_CheckIfReady+0x1c>
 8007f72:	46c0      	nop			; (mov r8, r8)
 8007f74:	200007fc 	.word	0x200007fc
 8007f78:	20000704 	.word	0x20000704
 8007f7c:	2000074c 	.word	0x2000074c
 8007f80:	7fffffff 	.word	0x7fffffff
 8007f84:	7ffffffe 	.word	0x7ffffffe
 8007f88:	20000764 	.word	0x20000764

08007f8c <qOS_Dispatch>:
static Q_FUNC_ATTRIBUTE_PRE qBool_t qOS_Dispatch( void *node, void *arg, qList_WalkStage_t stage ) Q_FUNC_ATTRIBUTE_POS{
 8007f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f8e:	0004      	movs	r4, r0
 8007f90:	000e      	movs	r6, r1
    if( QLIST_WALKTHROUGH == stage ){ /*#!OK: false-positive can be reported here*/
 8007f92:	2a01      	cmp	r2, #1
 8007f94:	d000      	beq.n	8007f98 <qOS_Dispatch+0xc>
 8007f96:	e087      	b.n	80080a8 <qOS_Dispatch+0x11c>
 8007f98:	4d5c      	ldr	r5, [pc, #368]	; (800810c <qOS_Dispatch+0x180>)
        if( NULL != xList){ /*#!OK* false-positive can be reported here*/     
 8007f9a:	2900      	cmp	r1, #0
 8007f9c:	d100      	bne.n	8007fa0 <qOS_Dispatch+0x14>
 8007f9e:	e09e      	b.n	80080de <qOS_Dispatch+0x152>
    Event = Task->qPrivate.Trigger;
 8007fa0:	0007      	movs	r7, r0
 8007fa2:	373c      	adds	r7, #60	; 0x3c
 8007fa4:	783b      	ldrb	r3, [r7, #0]
    switch( Event ){ /*take the necessary actions before dispatching, depending on the event that triggered the task*/
 8007fa6:	1e58      	subs	r0, r3, #1
    Event = Task->qPrivate.Trigger;
 8007fa8:	9301      	str	r3, [sp, #4]
    switch( Event ){ /*take the necessary actions before dispatching, depending on the event that triggered the task*/
 8007faa:	2806      	cmp	r0, #6
 8007fac:	d839      	bhi.n	8008022 <qOS_Dispatch+0x96>
 8007fae:	f7f8 f8b3 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007fb2:	8804      	.short	0x8804
 8007fb4:	83837d31 	.word	0x83837d31
 8007fb8:	83          	.byte	0x83
 8007fb9:	00          	.byte	0x00
            TaskIteration = Task->qPrivate.Iterations;
 8007fba:	6b23      	ldr	r3, [r4, #48]	; 0x30
            kernel.EventInfo.FirstIteration = ( ( TaskIteration != qPeriodic ) && ( TaskIteration < 0 ) )? qTrue : qFalse;
 8007fbc:	4a54      	ldr	r2, [pc, #336]	; (8008110 <qOS_Dispatch+0x184>)
 8007fbe:	4955      	ldr	r1, [pc, #340]	; (8008114 <qOS_Dispatch+0x188>)
 8007fc0:	1898      	adds	r0, r3, r2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	4281      	cmp	r1, r0
 8007fc6:	4152      	adcs	r2, r2
 8007fc8:	0011      	movs	r1, r2
 8007fca:	22e6      	movs	r2, #230	; 0xe6
 8007fcc:	4694      	mov	ip, r2
 8007fce:	44ac      	add	ip, r5
 8007fd0:	4662      	mov	r2, ip
 8007fd2:	7011      	strb	r1, [r2, #0]
            Task->qPrivate.Iterations = ( kernel.EventInfo.FirstIteration )? -Task->qPrivate.Iterations : Task->qPrivate.Iterations;
 8007fd4:	4a4f      	ldr	r2, [pc, #316]	; (8008114 <qOS_Dispatch+0x188>)
 8007fd6:	4290      	cmp	r0, r2
 8007fd8:	d802      	bhi.n	8007fe0 <qOS_Dispatch+0x54>
 8007fda:	425b      	negs	r3, r3
                Task->qPrivate.Iterations--; /*Decrease the iteration value*/
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	e003      	b.n	8007fe8 <qOS_Dispatch+0x5c>
            if( qPeriodic != Task->qPrivate.Iterations){
 8007fe0:	2280      	movs	r2, #128	; 0x80
 8007fe2:	0612      	lsls	r2, r2, #24
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d1f9      	bne.n	8007fdc <qOS_Dispatch+0x50>
                Task->qPrivate.Iterations--; /*Decrease the iteration value*/
 8007fe8:	6323      	str	r3, [r4, #48]	; 0x30
            kernel.EventInfo.LastIteration = (0 == Task->qPrivate.Iterations )? qTrue : qFalse; 
 8007fea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007fec:	4251      	negs	r1, r2
 8007fee:	4151      	adcs	r1, r2
 8007ff0:	002b      	movs	r3, r5
 8007ff2:	33e7      	adds	r3, #231	; 0xe7
 8007ff4:	7019      	strb	r1, [r3, #0]
            if( kernel.EventInfo.LastIteration ) {
 8007ff6:	2a00      	cmp	r2, #0
 8007ff8:	d103      	bne.n	8008002 <qOS_Dispatch+0x76>
                _qPrivate_TaskModifyFlags( Task, _QTASK_BIT_ENABLED, qFalse ); /*When the iteration value is reached, the task will be disabled*/ 
 8007ffa:	2102      	movs	r1, #2
 8007ffc:	0020      	movs	r0, r4
 8007ffe:	f000 fc5f 	bl	80088c0 <_qPrivate_TaskModifyFlags>
            kernel.EventInfo.StartDelay = qClock_GetTick() - Task->qPrivate.timer.Start;
 8008002:	4b45      	ldr	r3, [pc, #276]	; (8008118 <qOS_Dispatch+0x18c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4798      	blx	r3
 8008008:	002b      	movs	r3, r5
 800800a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800800c:	33e8      	adds	r3, #232	; 0xe8
 800800e:	1a80      	subs	r0, r0, r2
                kernel.EventInfo.EventData = qQueue_Peek( Task->qPrivate.Queue ); /*the EventData will point to the queue front-data*/
 8008010:	6018      	str	r0, [r3, #0]
 8008012:	e006      	b.n	8008022 <qOS_Dispatch+0x96>
            kernel.EventInfo.EventData = Task->qPrivate.AsyncData; /*Transfer async-data to the eventinfo structure*/
 8008014:	002b      	movs	r3, r5
 8008016:	6922      	ldr	r2, [r4, #16]
 8008018:	33e0      	adds	r3, #224	; 0xe0
 800801a:	601a      	str	r2, [r3, #0]
            Task->qPrivate.Notification--; /* = qFalse */ /*Clear the async flag*/            
 800801c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800801e:	3b01      	subs	r3, #1
 8008020:	6363      	str	r3, [r4, #52]	; 0x34
    kernel.EventInfo.Trigger = Task->qPrivate.Trigger;
 8008022:	002b      	movs	r3, r5
 8008024:	783a      	ldrb	r2, [r7, #0]
 8008026:	33e4      	adds	r3, #228	; 0xe4
    kernel.EventInfo.FirstCall = ( qFalse == _qPrivate_TaskGetFlag( Task, _QTASK_BIT_INIT) )? qTrue : qFalse;
 8008028:	2101      	movs	r1, #1
 800802a:	0020      	movs	r0, r4
    kernel.EventInfo.Trigger = Task->qPrivate.Trigger;
 800802c:	701a      	strb	r2, [r3, #0]
    kernel.EventInfo.FirstCall = ( qFalse == _qPrivate_TaskGetFlag( Task, _QTASK_BIT_INIT) )? qTrue : qFalse;
 800802e:	f000 fc41 	bl	80088b4 <_qPrivate_TaskGetFlag>
 8008032:	4243      	negs	r3, r0
 8008034:	4158      	adcs	r0, r3
 8008036:	002b      	movs	r3, r5
    kernel.EventInfo.TaskData = Task->qPrivate.TaskData;
 8008038:	0029      	movs	r1, r5
    kernel.EventInfo.FirstCall = ( qFalse == _qPrivate_TaskGetFlag( Task, _QTASK_BIT_INIT) )? qTrue : qFalse;
 800803a:	33e5      	adds	r3, #229	; 0xe5
 800803c:	7018      	strb	r0, [r3, #0]
    kernel.EventInfo.TaskData = Task->qPrivate.TaskData;
 800803e:	68e3      	ldr	r3, [r4, #12]
                if ( ( NULL != Task->qPrivate.StateMachine ) && ( qOS_DummyTask_Callback == Task->qPrivate.Callback ) ){
 8008040:	69a0      	ldr	r0, [r4, #24]
    kernel.EventInfo.TaskData = Task->qPrivate.TaskData;
 8008042:	31dc      	adds	r1, #220	; 0xdc
 8008044:	600b      	str	r3, [r1, #0]
    kernel.CurrentRunningTask = Task; /*needed for qTask_Self()*/
 8008046:	67ec      	str	r4, [r5, #124]	; 0x7c
            TaskActivities = Task->qPrivate.Callback; /*#!OK: false-positive can be reported here*/
 8008048:	6963      	ldr	r3, [r4, #20]
                if ( ( NULL != Task->qPrivate.StateMachine ) && ( qOS_DummyTask_Callback == Task->qPrivate.Callback ) ){
 800804a:	2800      	cmp	r0, #0
 800804c:	d042      	beq.n	80080d4 <qOS_Dispatch+0x148>
 800804e:	4a33      	ldr	r2, [pc, #204]	; (800811c <qOS_Dispatch+0x190>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d13f      	bne.n	80080d4 <qOS_Dispatch+0x148>
                    (void)qStateMachine_Run( Task->qPrivate.StateMachine, (void*)&kernel.EventInfo );  /*If the task has a FSM attached, just run it*/  
 8008054:	f7ff fb86 	bl	8007764 <qStateMachine_Run>
            (void)qList_Remove( xList, NULL, qList_AtFront ); /*remove the task from the ready-list*/
 8008058:	2201      	movs	r2, #1
            kernel.CurrentRunningTask = NULL;
 800805a:	2100      	movs	r1, #0
            (void)qList_Remove( xList, NULL, qList_AtFront ); /*remove the task from the ready-list*/
 800805c:	4252      	negs	r2, r2
 800805e:	0030      	movs	r0, r6
            kernel.CurrentRunningTask = NULL;
 8008060:	67e9      	str	r1, [r5, #124]	; 0x7c
            (void)qList_Remove( xList, NULL, qList_AtFront ); /*remove the task from the ready-list*/
 8008062:	f000 fa1c 	bl	800849e <qList_Remove>
            (void)qList_Insert( WaitingList, Task, QLIST_ATBACK );  /*and insert the task back to the waiting-list*/
 8008066:	4a2a      	ldr	r2, [pc, #168]	; (8008110 <qOS_Dispatch+0x184>)
 8008068:	0021      	movs	r1, r4
 800806a:	482d      	ldr	r0, [pc, #180]	; (8008120 <qOS_Dispatch+0x194>)
 800806c:	f000 f9dd 	bl	800842a <qList_Insert>
                if( byQueueReceiver == Event ){
 8008070:	9b01      	ldr	r3, [sp, #4]
 8008072:	2b04      	cmp	r3, #4
 8008074:	d102      	bne.n	800807c <qOS_Dispatch+0xf0>
                    (void)qQueue_RemoveFront( Task->qPrivate.Queue );  /*remove the data from the Queue, if the event was byQueueDequeue*/
 8008076:	69e0      	ldr	r0, [r4, #28]
 8008078:	f000 fb33 	bl	80086e2 <qQueue_RemoveFront>
            _qPrivate_TaskModifyFlags( Task, _QTASK_BIT_INIT, qTrue ); /*set the init flag*/
 800807c:	2201      	movs	r2, #1
 800807e:	0020      	movs	r0, r4
 8008080:	0011      	movs	r1, r2
 8008082:	f000 fc1d 	bl	80088c0 <_qPrivate_TaskModifyFlags>
            kernel.EventInfo.FirstIteration = qFalse;
 8008086:	002a      	movs	r2, r5
 8008088:	2300      	movs	r3, #0
 800808a:	32e6      	adds	r2, #230	; 0xe6
 800808c:	7013      	strb	r3, [r2, #0]
            kernel.EventInfo.LastIteration =  qFalse; 
 800808e:	002a      	movs	r2, r5
 8008090:	32e7      	adds	r2, #231	; 0xe7
 8008092:	7013      	strb	r3, [r2, #0]
            kernel.EventInfo.StartDelay = (qClock_t)0uL;
 8008094:	002a      	movs	r2, r5
 8008096:	32e8      	adds	r2, #232	; 0xe8
 8008098:	6013      	str	r3, [r2, #0]
                Task->qPrivate.Cycles++; /*increase the task-cycles value*/
 800809a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            kernel.EventInfo.EventData = NULL; /*clear the eventdata*/
 800809c:	35e0      	adds	r5, #224	; 0xe0
                Task->qPrivate.Cycles++; /*increase the task-cycles value*/
 800809e:	3201      	adds	r2, #1
            kernel.EventInfo.EventData = NULL; /*clear the eventdata*/
 80080a0:	602b      	str	r3, [r5, #0]
                Task->qPrivate.Cycles++; /*increase the task-cycles value*/
 80080a2:	62e2      	str	r2, [r4, #44]	; 0x2c
            Task->qPrivate.Trigger = qTriggerNULL;
 80080a4:	343c      	adds	r4, #60	; 0x3c
 80080a6:	7023      	strb	r3, [r4, #0]
}
 80080a8:	2000      	movs	r0, #0
 80080aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                kernel.EventInfo.EventData = qQueue_Peek( Task->qPrivate.Queue ); /*the EventData will point to the queue front-data*/
 80080ac:	69e0      	ldr	r0, [r4, #28]
 80080ae:	f000 fb04 	bl	80086ba <qQueue_Peek>
 80080b2:	002b      	movs	r3, r5
 80080b4:	33e0      	adds	r3, #224	; 0xe0
 80080b6:	e7ab      	b.n	8008010 <qOS_Dispatch+0x84>
                kernel.EventInfo.EventData = (void*)Task->qPrivate.Queue;  /*the EventData will point to the the linked queue*/
 80080b8:	002b      	movs	r3, r5
 80080ba:	69e2      	ldr	r2, [r4, #28]
 80080bc:	33e0      	adds	r3, #224	; 0xe0
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	e7af      	b.n	8008022 <qOS_Dispatch+0x96>
                kernel.EventInfo.EventData = kernel.QueueData; /*get the extracted data from queue*/
 80080c2:	002b      	movs	r3, r5
 80080c4:	002a      	movs	r2, r5
 80080c6:	3308      	adds	r3, #8
 80080c8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80080ca:	32e0      	adds	r2, #224	; 0xe0
 80080cc:	6011      	str	r1, [r2, #0]
                kernel.QueueData = NULL;
 80080ce:	2200      	movs	r2, #0
 80080d0:	67da      	str	r2, [r3, #124]	; 0x7c
 80080d2:	e7a6      	b.n	8008022 <qOS_Dispatch+0x96>
                else if ( NULL != TaskActivities ) {
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d0bf      	beq.n	8008058 <qOS_Dispatch+0xcc>
                    TaskActivities( &kernel.EventInfo ); /*else, just launch the callback function*/ 
 80080d8:	4812      	ldr	r0, [pc, #72]	; (8008124 <qOS_Dispatch+0x198>)
 80080da:	4798      	blx	r3
 80080dc:	e7bc      	b.n	8008058 <qOS_Dispatch+0xcc>
            kernel.EventInfo.FirstCall = (qFalse == _QKERNEL_COREFLAG_GET( kernel.Flag, _QKERNEL_BIT_FCALLIDLE ) )? qTrue : qFalse;
 80080de:	002c      	movs	r4, r5
 80080e0:	34ec      	adds	r4, #236	; 0xec
 80080e2:	6823      	ldr	r3, [r4, #0]
            kernel.EventInfo.TaskData = NULL;
 80080e4:	0028      	movs	r0, r5
            kernel.EventInfo.FirstCall = (qFalse == _QKERNEL_COREFLAG_GET( kernel.Flag, _QKERNEL_BIT_FCALLIDLE ) )? qTrue : qFalse;
 80080e6:	085b      	lsrs	r3, r3, #1
 80080e8:	439a      	bics	r2, r3
 80080ea:	002b      	movs	r3, r5
 80080ec:	33e5      	adds	r3, #229	; 0xe5
 80080ee:	701a      	strb	r2, [r3, #0]
            kernel.EventInfo.Trigger = Event;
 80080f0:	002b      	movs	r3, r5
 80080f2:	220a      	movs	r2, #10
            kernel.EventInfo.TaskData = NULL;
 80080f4:	30dc      	adds	r0, #220	; 0xdc
            kernel.EventInfo.Trigger = Event;
 80080f6:	33e4      	adds	r3, #228	; 0xe4
 80080f8:	701a      	strb	r2, [r3, #0]
            kernel.EventInfo.TaskData = NULL;
 80080fa:	6001      	str	r1, [r0, #0]
            TaskActivities( &kernel.EventInfo ); /*run the idle callback*/ 
 80080fc:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80080fe:	4798      	blx	r3
            _QKERNEL_COREFLAG_SET( kernel.Flag, _QKERNEL_BIT_FCALLIDLE );
 8008100:	2302      	movs	r3, #2
 8008102:	6822      	ldr	r2, [r4, #0]
 8008104:	4313      	orrs	r3, r2
 8008106:	6023      	str	r3, [r4, #0]
 8008108:	e7ce      	b.n	80080a8 <qOS_Dispatch+0x11c>
 800810a:	46c0      	nop			; (mov r8, r8)
 800810c:	20000704 	.word	0x20000704
 8008110:	7fffffff 	.word	0x7fffffff
 8008114:	7ffffffe 	.word	0x7ffffffe
 8008118:	20000240 	.word	0x20000240
 800811c:	08007d01 	.word	0x08007d01
 8008120:	2000074c 	.word	0x2000074c
 8008124:	200007e0 	.word	0x200007e0

08008128 <qOS_Setup>:
    void qOS_Setup( const qGetTickFcn_t TickProvider, const qTimingBase_t BaseTimming, qTaskFcn_t IdleCallback ){
 8008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812a:	0005      	movs	r5, r0
    qList_Initialize( SuspendedList );
 800812c:	481b      	ldr	r0, [pc, #108]	; (800819c <qOS_Setup+0x74>)
    void qOS_Setup( const qGetTickFcn_t TickProvider, const qTimingBase_t BaseTimming, qTaskFcn_t IdleCallback ){
 800812e:	0016      	movs	r6, r2
 8008130:	1c0f      	adds	r7, r1, #0
    qList_Initialize( SuspendedList );
 8008132:	f000 f940 	bl	80083b6 <qList_Initialize>
    qList_Initialize( WaitingList );
 8008136:	481a      	ldr	r0, [pc, #104]	; (80081a0 <qOS_Setup+0x78>)
 8008138:	f000 f93d 	bl	80083b6 <qList_Initialize>
        qList_Initialize( &ReadyList[ i ] );
 800813c:	4c19      	ldr	r4, [pc, #100]	; (80081a4 <qOS_Setup+0x7c>)
 800813e:	0020      	movs	r0, r4
 8008140:	f000 f939 	bl	80083b6 <qList_Initialize>
 8008144:	4818      	ldr	r0, [pc, #96]	; (80081a8 <qOS_Setup+0x80>)
 8008146:	f000 f936 	bl	80083b6 <qList_Initialize>
 800814a:	4818      	ldr	r0, [pc, #96]	; (80081ac <qOS_Setup+0x84>)
 800814c:	f000 f933 	bl	80083b6 <qList_Initialize>
        qClock_SetTimeBase( BaseTimming );
 8008150:	1c38      	adds	r0, r7, #0
 8008152:	f7ff fa2d 	bl	80075b0 <qClock_SetTimeBase>
    kernel.IDLECallback = IdleCallback;
 8008156:	2200      	movs	r2, #0
            kernel.QueueStack[i].Task = NULL;  /*set the priority queue as empty*/  
 8008158:	0013      	movs	r3, r2
    kernel.IDLECallback = IdleCallback;
 800815a:	67a6      	str	r6, [r4, #120]	; 0x78
            kernel.QueueStack[i].Task = NULL;  /*set the priority queue as empty*/  
 800815c:	0011      	movs	r1, r2
 800815e:	3188      	adds	r1, #136	; 0x88
 8008160:	1861      	adds	r1, r4, r1
 8008162:	3208      	adds	r2, #8
 8008164:	600b      	str	r3, [r1, #0]
        for( i = 0u ; i < (qIndex_t)Q_PRIO_QUEUE_SIZE ; i++){
 8008166:	2a50      	cmp	r2, #80	; 0x50
 8008168:	d1f8      	bne.n	800815c <qOS_Setup+0x34>
        kernel.QueueIndex = -1;     
 800816a:	0022      	movs	r2, r4
 800816c:	2101      	movs	r1, #1
 800816e:	32d8      	adds	r2, #216	; 0xd8
 8008170:	4249      	negs	r1, r1
 8008172:	6011      	str	r1, [r2, #0]
        kernel.QueueData = NULL;
 8008174:	0022      	movs	r2, r4
 8008176:	3208      	adds	r2, #8
 8008178:	67d3      	str	r3, [r2, #124]	; 0x7c
        kernel.NotificationSpreadRequest.mode = NULL;
 800817a:	0022      	movs	r2, r4
 800817c:	32f0      	adds	r2, #240	; 0xf0
 800817e:	6013      	str	r3, [r2, #0]
        kernel.NotificationSpreadRequest.eventdata = NULL;
 8008180:	0022      	movs	r2, r4
 8008182:	32f4      	adds	r2, #244	; 0xf4
 8008184:	6013      	str	r3, [r2, #0]
    kernel.Flag = 0uL; /*clear all the core flags*/
 8008186:	0022      	movs	r2, r4
 8008188:	32ec      	adds	r2, #236	; 0xec
 800818a:	6013      	str	r3, [r2, #0]
    qClock_SetTickProvider( TickProvider );
 800818c:	0028      	movs	r0, r5
        kernel.ReleaseSchedCallback = NULL;
 800818e:	1d22      	adds	r2, r4, #4
 8008190:	67d3      	str	r3, [r2, #124]	; 0x7c
    kernel.CurrentRunningTask = NULL;
 8008192:	67e3      	str	r3, [r4, #124]	; 0x7c
    qClock_SetTickProvider( TickProvider );
 8008194:	f7ff fa12 	bl	80075bc <qClock_SetTickProvider>
}
 8008198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800819a:	46c0      	nop			; (mov r8, r8)
 800819c:	20000764 	.word	0x20000764
 80081a0:	2000074c 	.word	0x2000074c
 80081a4:	20000704 	.word	0x20000704
 80081a8:	2000071c 	.word	0x2000071c
 80081ac:	20000734 	.word	0x20000734

080081b0 <qOS_Get_TaskRunning>:
    return kernel.CurrentRunningTask; /*get the handle of the current running task*/
 80081b0:	4b01      	ldr	r3, [pc, #4]	; (80081b8 <qOS_Get_TaskRunning+0x8>)
 80081b2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
}
 80081b4:	4770      	bx	lr
 80081b6:	46c0      	nop			; (mov r8, r8)
 80081b8:	20000704 	.word	0x20000704

080081bc <qOS_Add_Task>:
qBool_t qOS_Add_Task( qTask_t * const Task, qTaskFcn_t CallbackFcn, qPriority_t Priority, qTime_t Time, qIteration_t nExecutions, qState_t InitialState, void* arg ){
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	0004      	movs	r4, r0
    qBool_t RetValue = qFalse;
 80081c0:	2000      	movs	r0, #0
qBool_t qOS_Add_Task( qTask_t * const Task, qTaskFcn_t CallbackFcn, qPriority_t Priority, qTime_t Time, qIteration_t nExecutions, qState_t InitialState, void* arg ){
 80081c2:	0017      	movs	r7, r2
 80081c4:	aa06      	add	r2, sp, #24
 80081c6:	ca20      	ldmia	r2!, {r5}
 80081c8:	7816      	ldrb	r6, [r2, #0]
    if( ( NULL != Task ) ) {
 80081ca:	4284      	cmp	r4, r0
 80081cc:	d030      	beq.n	8008230 <qOS_Add_Task+0x74>
        (void)qSTimer_Set( &Task->qPrivate.timer, Time );
 80081ce:	0020      	movs	r0, r4
        Task->qPrivate.Callback = CallbackFcn;
 80081d0:	6161      	str	r1, [r4, #20]
        (void)qSTimer_Set( &Task->qPrivate.timer, Time );
 80081d2:	3024      	adds	r0, #36	; 0x24
 80081d4:	1c19      	adds	r1, r3, #0
 80081d6:	f000 fafd 	bl	80087d4 <qSTimer_Set>
        Task->qPrivate.TaskData = arg;
 80081da:	9b08      	ldr	r3, [sp, #32]
 80081dc:	60e3      	str	r3, [r4, #12]
                                  ( (qPriority_t)Q_PRIORITY_LEVELS - (qPriority_t)1u ) : 
 80081de:	1c3b      	adds	r3, r7, #0
 80081e0:	2f02      	cmp	r7, #2
 80081e2:	d900      	bls.n	80081e6 <qOS_Add_Task+0x2a>
 80081e4:	2302      	movs	r3, #2
        Task->qPrivate.Priority = ( Priority > ((qPriority_t)Q_PRIORITY_LEVELS - (qPriority_t)1u) )? 
 80081e6:	0022      	movs	r2, r4
 80081e8:	323d      	adds	r2, #61	; 0x3d
 80081ea:	7013      	strb	r3, [r2, #0]
        Task->qPrivate.Iterations = ( qPeriodic == nExecutions )? qPeriodic : -nExecutions;    
 80081ec:	2280      	movs	r2, #128	; 0x80
 80081ee:	002b      	movs	r3, r5
 80081f0:	0612      	lsls	r2, r2, #24
 80081f2:	4295      	cmp	r5, r2
 80081f4:	d000      	beq.n	80081f8 <qOS_Add_Task+0x3c>
 80081f6:	426b      	negs	r3, r5
 80081f8:	6323      	str	r3, [r4, #48]	; 0x30
        Task->qPrivate.Trigger = qTriggerNULL;
 80081fa:	0023      	movs	r3, r4
        Task->qPrivate.Notification = 0uL;
 80081fc:	2500      	movs	r5, #0
        Task->qPrivate.Trigger = qTriggerNULL;
 80081fe:	333c      	adds	r3, #60	; 0x3c
        Task->qPrivate.Notification = 0uL;
 8008200:	6365      	str	r5, [r4, #52]	; 0x34
        _qPrivate_TaskModifyFlags( Task,
 8008202:	002a      	movs	r2, r5
        Task->qPrivate.Trigger = qTriggerNULL;
 8008204:	701d      	strb	r5, [r3, #0]
        _qPrivate_TaskModifyFlags( Task,
 8008206:	21bd      	movs	r1, #189	; 0xbd
 8008208:	0020      	movs	r0, r4
 800820a:	f000 fb59 	bl	80088c0 <_qPrivate_TaskModifyFlags>
        _qPrivate_TaskModifyFlags( Task, _QTASK_BIT_SHUTDOWN | _QTASK_BIT_ENABLED, qTrue );  /*task will be awaken and enabled*/ 
 800820e:	2201      	movs	r2, #1
 8008210:	2142      	movs	r1, #66	; 0x42
 8008212:	0020      	movs	r0, r4
 8008214:	f000 fb54 	bl	80088c0 <_qPrivate_TaskModifyFlags>
        qTask_Set_State( Task, InitialState );
 8008218:	0031      	movs	r1, r6
 800821a:	0020      	movs	r0, r4
 800821c:	f000 fb59 	bl	80088d2 <qTask_Set_State>
            Task->qPrivate.Cycles = 0uL;
 8008220:	62e5      	str	r5, [r4, #44]	; 0x2c
            Task->qPrivate.Queue = NULL;
 8008222:	61e5      	str	r5, [r4, #28]
            Task->qPrivate.StateMachine = NULL;
 8008224:	61a5      	str	r5, [r4, #24]
        RetValue = qList_Insert( WaitingList, Task, qList_AtBack ); 
 8008226:	4a03      	ldr	r2, [pc, #12]	; (8008234 <qOS_Add_Task+0x78>)
 8008228:	0021      	movs	r1, r4
 800822a:	4803      	ldr	r0, [pc, #12]	; (8008238 <qOS_Add_Task+0x7c>)
 800822c:	f000 f8fd 	bl	800842a <qList_Insert>
}
 8008230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	7fffffff 	.word	0x7fffffff
 8008238:	2000074c 	.word	0x2000074c

0800823c <qOS_Add_EventTask>:
qBool_t qOS_Add_EventTask( qTask_t * const Task, qTaskFcn_t CallbackFcn, qPriority_t Priority, void* arg ){
 800823c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return qOS_Add_Task( Task, CallbackFcn, Priority, qTimeImmediate, qSingleShot, qDisabled, arg );
 800823e:	9302      	str	r3, [sp, #8]
 8008240:	2300      	movs	r3, #0
 8008242:	9301      	str	r3, [sp, #4]
 8008244:	3301      	adds	r3, #1
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	2300      	movs	r3, #0
 800824a:	f7ff ffb7 	bl	80081bc <qOS_Add_Task>
}
 800824e:	b005      	add	sp, #20
 8008250:	bd00      	pop	{pc}
	...

08008254 <qOS_Add_StateMachineTask>:
                            qState_t InitialTaskState, void *arg ){
 8008254:	b530      	push	{r4, r5, lr}
 8008256:	b085      	sub	sp, #20
 8008258:	001c      	movs	r4, r3
 800825a:	ab0d      	add	r3, sp, #52	; 0x34
 800825c:	0005      	movs	r5, r0
 800825e:	781b      	ldrb	r3, [r3, #0]
    if( ( NULL != StateMachine ) && ( NULL != InitState ) ){
 8008260:	2c00      	cmp	r4, #0
 8008262:	d102      	bne.n	800826a <qOS_Add_StateMachineTask+0x16>
    qBool_t RetValue = qFalse;
 8008264:	2000      	movs	r0, #0
}
 8008266:	b005      	add	sp, #20
 8008268:	bd30      	pop	{r4, r5, pc}
    if( ( NULL != StateMachine ) && ( NULL != InitState ) ){
 800826a:	9808      	ldr	r0, [sp, #32]
 800826c:	2800      	cmp	r0, #0
 800826e:	d0f9      	beq.n	8008264 <qOS_Add_StateMachineTask+0x10>
        if ( qTrue == qOS_Add_Task( Task, qOS_DummyTask_Callback, Priority, Time, qPeriodic, InitialTaskState, arg ) ){
 8008270:	9301      	str	r3, [sp, #4]
 8008272:	2380      	movs	r3, #128	; 0x80
 8008274:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008276:	061b      	lsls	r3, r3, #24
 8008278:	9002      	str	r0, [sp, #8]
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	0028      	movs	r0, r5
 800827e:	1c13      	adds	r3, r2, #0
 8008280:	000a      	movs	r2, r1
 8008282:	4909      	ldr	r1, [pc, #36]	; (80082a8 <qOS_Add_StateMachineTask+0x54>)
 8008284:	f7ff ff9a 	bl	80081bc <qOS_Add_Task>
 8008288:	2801      	cmp	r0, #1
 800828a:	d1eb      	bne.n	8008264 <qOS_Add_StateMachineTask+0x10>
            RetValue = qStateMachine_Setup( StateMachine, InitState, SuccessState, FailureState, UnexpectedState, BeforeAnyState );
 800828c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008294:	9908      	ldr	r1, [sp, #32]
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	0020      	movs	r0, r4
 800829a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800829c:	f7ff fa0a 	bl	80076b4 <qStateMachine_Setup>
            Task->qPrivate.StateMachine = StateMachine;
 80082a0:	61ac      	str	r4, [r5, #24]
            StateMachine->qPrivate.Owner = Task;
 80082a2:	6165      	str	r5, [r4, #20]
 80082a4:	e7df      	b.n	8008266 <qOS_Add_StateMachineTask+0x12>
 80082a6:	46c0      	nop			; (mov r8, r8)
 80082a8:	08007d01 	.word	0x08007d01

080082ac <qOS_Add_ATCLITask>:
qBool_t qOS_Add_ATCLITask( qTask_t * const Task, qATCLI_t *cli, qPriority_t Priority ){    
 80082ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    qBool_t RetValue = qFalse;
 80082ae:	2300      	movs	r3, #0
    if( NULL != cli ){
 80082b0:	4299      	cmp	r1, r3
 80082b2:	d00b      	beq.n	80082cc <qOS_Add_ATCLITask+0x20>
        cli->qPrivate.xNotifyFcn = &qOS_ATCLI_NotifyFcn;
 80082b4:	4c07      	ldr	r4, [pc, #28]	; (80082d4 <qOS_Add_ATCLITask+0x28>)
        cli->qPrivate.xPublic.UserData = Task;
 80082b6:	66c8      	str	r0, [r1, #108]	; 0x6c
        cli->qPrivate.xNotifyFcn = &qOS_ATCLI_NotifyFcn;
 80082b8:	61cc      	str	r4, [r1, #28]
        RetValue =  qOS_Add_Task( Task, qOS_ATCLI_TaskCallback, Priority, qTimeImmediate, qSingleShot, qDisabled, cli );
 80082ba:	9301      	str	r3, [sp, #4]
 80082bc:	3301      	adds	r3, #1
 80082be:	9102      	str	r1, [sp, #8]
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	4905      	ldr	r1, [pc, #20]	; (80082d8 <qOS_Add_ATCLITask+0x2c>)
 80082c4:	2300      	movs	r3, #0
 80082c6:	f7ff ff79 	bl	80081bc <qOS_Add_Task>
 80082ca:	0003      	movs	r3, r0
}
 80082cc:	0018      	movs	r0, r3
 80082ce:	b004      	add	sp, #16
 80082d0:	bd10      	pop	{r4, pc}
 80082d2:	46c0      	nop			; (mov r8, r8)
 80082d4:	08007d41 	.word	0x08007d41
 80082d8:	08007d4d 	.word	0x08007d4d

080082dc <qOS_Run>:
void qOS_Run( void ){
 80082dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        while( qFalse == _QKERNEL_COREFLAG_GET( kernel.Flag, _QKERNEL_BIT_RELEASESCHED ) ); /*scheduling end-point*/ 
 80082de:	2704      	movs	r7, #4
        if( qList_ForEach( WaitingList, qOS_CheckIfReady, NULL, QLIST_FORWARD, NULL ) ){ /*check for ready tasks in the waiting-list*/
 80082e0:	2200      	movs	r2, #0
 80082e2:	4e27      	ldr	r6, [pc, #156]	; (8008380 <qOS_Run+0xa4>)
 80082e4:	9200      	str	r2, [sp, #0]
 80082e6:	4b27      	ldr	r3, [pc, #156]	; (8008384 <qOS_Run+0xa8>)
 80082e8:	4927      	ldr	r1, [pc, #156]	; (8008388 <qOS_Run+0xac>)
 80082ea:	0030      	movs	r0, r6
 80082ec:	f000 f91c 	bl	8008528 <qList_ForEach>
 80082f0:	4c26      	ldr	r4, [pc, #152]	; (800838c <qOS_Run+0xb0>)
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d03c      	beq.n	8008370 <qOS_Run+0x94>
 80082f6:	4d26      	ldr	r5, [pc, #152]	; (8008390 <qOS_Run+0xb4>)
                if( xList->size > (size_t)0 ){ /*check for a non-empty target list */
 80082f8:	696b      	ldr	r3, [r5, #20]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d007      	beq.n	800830e <qOS_Run+0x32>
                    (void)qList_ForEach( xList, qOS_Dispatch, xList, QLIST_FORWARD, NULL ); /*dispatch every task in the current ready-list*/
 80082fe:	2300      	movs	r3, #0
 8008300:	002a      	movs	r2, r5
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	4923      	ldr	r1, [pc, #140]	; (8008394 <qOS_Run+0xb8>)
 8008306:	4b1f      	ldr	r3, [pc, #124]	; (8008384 <qOS_Run+0xa8>)
 8008308:	0028      	movs	r0, r5
 800830a:	f000 f90d 	bl	8008528 <qList_ForEach>
            }while( (qIndex_t)0 != xPriorityListIndex-- ); /*move to the next ready-list*/
 800830e:	4b22      	ldr	r3, [pc, #136]	; (8008398 <qOS_Run+0xbc>)
 8008310:	3d18      	subs	r5, #24
 8008312:	429d      	cmp	r5, r3
 8008314:	d1f0      	bne.n	80082f8 <qOS_Run+0x1c>
        if( SuspendedList->size > (size_t)0 ){  /*check for a non-empty suspended-list*/
 8008316:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008318:	2b00      	cmp	r3, #0
 800831a:	d004      	beq.n	8008326 <qOS_Run+0x4a>
            (void)qList_Move( WaitingList, SuspendedList, qList_AtBack ); /*move the remaining suspended tasks to the waiting-list*/
 800831c:	4a1f      	ldr	r2, [pc, #124]	; (800839c <qOS_Run+0xc0>)
 800831e:	4920      	ldr	r1, [pc, #128]	; (80083a0 <qOS_Run+0xc4>)
 8008320:	0030      	movs	r0, r6
 8008322:	f000 f939 	bl	8008598 <qList_Move>
        while( qFalse == _QKERNEL_COREFLAG_GET( kernel.Flag, _QKERNEL_BIT_RELEASESCHED ) ); /*scheduling end-point*/ 
 8008326:	0023      	movs	r3, r4
 8008328:	33ec      	adds	r3, #236	; 0xec
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	423a      	tst	r2, r7
 800832e:	d0d7      	beq.n	80082e0 <qOS_Run+0x4>
    _QKERNEL_COREFLAG_CLEAR( kernel.Flag, _QKERNEL_BIT_INIT ); 
 8008330:	2201      	movs	r2, #1
 8008332:	6819      	ldr	r1, [r3, #0]
    kernel.EventInfo.TaskData = NULL;
 8008334:	0020      	movs	r0, r4
    _QKERNEL_COREFLAG_CLEAR( kernel.Flag, _QKERNEL_BIT_INIT ); 
 8008336:	4391      	bics	r1, r2
 8008338:	6019      	str	r1, [r3, #0]
    _QKERNEL_COREFLAG_CLEAR( kernel.Flag, _QKERNEL_BIT_RELEASESCHED );  
 800833a:	6819      	ldr	r1, [r3, #0]
    kernel.EventInfo.TaskData = NULL;
 800833c:	30dc      	adds	r0, #220	; 0xdc
    _QKERNEL_COREFLAG_CLEAR( kernel.Flag, _QKERNEL_BIT_RELEASESCHED );  
 800833e:	43b9      	bics	r1, r7
 8008340:	6019      	str	r1, [r3, #0]
    kernel.EventInfo.FirstCall = ( qFalse == _QKERNEL_COREFLAG_GET( kernel.Flag, _QKERNEL_BIT_FCALLRELEASED ) )? qTrue : qFalse;    
 8008342:	681b      	ldr	r3, [r3, #0]
    kernel.EventInfo.Trigger = bySchedulingRelease;
 8008344:	2109      	movs	r1, #9
    kernel.EventInfo.FirstCall = ( qFalse == _QKERNEL_COREFLAG_GET( kernel.Flag, _QKERNEL_BIT_FCALLRELEASED ) )? qTrue : qFalse;    
 8008346:	08db      	lsrs	r3, r3, #3
 8008348:	439a      	bics	r2, r3
 800834a:	0023      	movs	r3, r4
 800834c:	33e5      	adds	r3, #229	; 0xe5
 800834e:	701a      	strb	r2, [r3, #0]
    kernel.EventInfo.Trigger = bySchedulingRelease;
 8008350:	0022      	movs	r2, r4
 8008352:	32e4      	adds	r2, #228	; 0xe4
 8008354:	7011      	strb	r1, [r2, #0]
    kernel.EventInfo.TaskData = NULL;
 8008356:	2200      	movs	r2, #0
    kernel.EventInfo.Trigger = bySchedulingRelease;
 8008358:	1d23      	adds	r3, r4, #4
    if( NULL != kernel.ReleaseSchedCallback ){
 800835a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    kernel.EventInfo.TaskData = NULL;
 800835c:	6002      	str	r2, [r0, #0]
    if( NULL != kernel.ReleaseSchedCallback ){
 800835e:	4293      	cmp	r3, r2
 8008360:	d000      	beq.n	8008364 <qOS_Run+0x88>
        Callback( &kernel.EventInfo ); /*some low-end compilers cant deal with function-pointers inside structs*/
 8008362:	4798      	blx	r3
    _QKERNEL_COREFLAG_SET( kernel.Flag, _QKERNEL_BIT_FCALLIDLE ); /*MISRAC2012-Rule-11.3 allowed*/
 8008364:	2302      	movs	r3, #2
 8008366:	34ec      	adds	r4, #236	; 0xec
 8008368:	6822      	ldr	r2, [r4, #0]
 800836a:	4313      	orrs	r3, r2
 800836c:	6023      	str	r3, [r4, #0]
}
 800836e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            if( NULL != kernel.IDLECallback ){ /*check if the idle-task is available*/
 8008370:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0cf      	beq.n	8008316 <qOS_Run+0x3a>
                (void)qOS_Dispatch( NULL, NULL, QLIST_WALKTHROUGH ); /*special call to dispatch idle-task already hardcoded in the kernel*/
 8008376:	2201      	movs	r2, #1
 8008378:	0001      	movs	r1, r0
 800837a:	f7ff fe07 	bl	8007f8c <qOS_Dispatch>
 800837e:	e7ca      	b.n	8008316 <qOS_Run+0x3a>
 8008380:	2000074c 	.word	0x2000074c
 8008384:	080083af 	.word	0x080083af
 8008388:	08007d59 	.word	0x08007d59
 800838c:	20000704 	.word	0x20000704
 8008390:	20000734 	.word	0x20000734
 8008394:	08007f8d 	.word	0x08007f8d
 8008398:	200006ec 	.word	0x200006ec
 800839c:	7fffffff 	.word	0x7fffffff
 80083a0:	20000764 	.word	0x20000764

080083a4 <qList_ChangeContainer>:
    return RetValue;
}
/*=========================================================*/
static qBool_t qList_ChangeContainer( void *node, void *newcontainer, qList_WalkStage_t stage ){
    qList_Node_t *xNode;
    if( qList_WalkThrough == stage ){
 80083a4:	2a01      	cmp	r2, #1
 80083a6:	d100      	bne.n	80083aa <qList_ChangeContainer+0x6>
        /*cstat -MISRAC2012-Rule-11.5 -CERT-EXP36-C_b*/ 
        xNode = (qList_Node_t*)node; /* MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed */
        /*cstat +MISRAC2012-Rule-11.5 +CERT-EXP36-C_b*/
        xNode->container = newcontainer;
 80083a8:	6081      	str	r1, [r0, #8]
    }
    return qFalse;
}
 80083aa:	2000      	movs	r0, #0
 80083ac:	4770      	bx	lr

080083ae <_qNode_Forward>:
    }
    return RetValue;
}
/*=========================================================*/
qList_Node_t* _qNode_Forward( const qList_Node_t *const node ){
    return node->next;
 80083ae:	6800      	ldr	r0, [r0, #0]
}
 80083b0:	4770      	bx	lr

080083b2 <_qNode_Backward>:
/*=========================================================*/
qList_Node_t* _qNode_Backward( const qList_Node_t *const node){
    return node->prev;
 80083b2:	6840      	ldr	r0, [r0, #4]
}
 80083b4:	4770      	bx	lr

080083b6 <qList_Initialize>:
    if( NULL != list ){
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d003      	beq.n	80083c2 <qList_Initialize+0xc>
        list->head = NULL;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60c3      	str	r3, [r0, #12]
        list->tail = NULL;
 80083be:	6103      	str	r3, [r0, #16]
        list->size = 0u;
 80083c0:	6143      	str	r3, [r0, #20]
}
 80083c2:	4770      	bx	lr

080083c4 <qList_RemoveItself>:
qBool_t qList_RemoveItself( void * const node ){
 80083c4:	1e03      	subs	r3, r0, #0
    if( NULL != node ){
 80083c6:	d010      	beq.n	80083ea <qList_RemoveItself+0x26>
        if( NULL != toRemove->container ){
 80083c8:	6882      	ldr	r2, [r0, #8]
    qBool_t RetValue = qFalse;
 80083ca:	1e10      	subs	r0, r2, #0
        if( NULL != toRemove->container ){
 80083cc:	d00d      	beq.n	80083ea <qList_RemoveItself+0x26>
            if( toRemove == list->head ){
 80083ce:	68d1      	ldr	r1, [r2, #12]
 80083d0:	4299      	cmp	r1, r3
 80083d2:	d10e      	bne.n	80083f2 <qList_RemoveItself+0x2e>
    list->head = removed->next;
 80083d4:	6819      	ldr	r1, [r3, #0]
 80083d6:	60d1      	str	r1, [r2, #12]
    if( NULL == list->head ){
 80083d8:	2900      	cmp	r1, #0
 80083da:	d107      	bne.n	80083ec <qList_RemoveItself+0x28>
        list->tail = list->head;
 80083dc:	6111      	str	r1, [r2, #16]
            list->size--;
 80083de:	6951      	ldr	r1, [r2, #20]
            RetValue = qTrue;
 80083e0:	2001      	movs	r0, #1
            list->size--;
 80083e2:	3901      	subs	r1, #1
 80083e4:	6151      	str	r1, [r2, #20]
            toRemove->container = NULL;
 80083e6:	2200      	movs	r2, #0
 80083e8:	609a      	str	r2, [r3, #8]
}
 80083ea:	4770      	bx	lr
        list->head->prev = NULL;    
 80083ec:	2000      	movs	r0, #0
 80083ee:	6048      	str	r0, [r1, #4]
 80083f0:	e7f5      	b.n	80083de <qList_RemoveItself+0x1a>
            else if( toRemove == list->tail ){
 80083f2:	6910      	ldr	r0, [r2, #16]
 80083f4:	6859      	ldr	r1, [r3, #4]
 80083f6:	4298      	cmp	r0, r3
 80083f8:	d107      	bne.n	800840a <qList_RemoveItself+0x46>
    list->tail = removed->prev;
 80083fa:	6111      	str	r1, [r2, #16]
    if( NULL == list->tail ){
 80083fc:	2900      	cmp	r1, #0
 80083fe:	d101      	bne.n	8008404 <qList_RemoveItself+0x40>
        list->head = list->tail;
 8008400:	60d1      	str	r1, [r2, #12]
 8008402:	e7ec      	b.n	80083de <qList_RemoveItself+0x1a>
        list->tail->next = NULL;    
 8008404:	2000      	movs	r0, #0
 8008406:	6008      	str	r0, [r1, #0]
 8008408:	e7e9      	b.n	80083de <qList_RemoveItself+0x1a>
                toRemove->prev->next = toRemove->next;
 800840a:	6818      	ldr	r0, [r3, #0]
 800840c:	6008      	str	r0, [r1, #0]
                if( NULL != toRemove->next ){
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	2800      	cmp	r0, #0
 8008412:	d0e4      	beq.n	80083de <qList_RemoveItself+0x1a>
                    toRemove->next->prev = toRemove->prev;
 8008414:	6041      	str	r1, [r0, #4]
 8008416:	e7e2      	b.n	80083de <qList_RemoveItself+0x1a>

08008418 <qList_IsMember>:
qBool_t qList_IsMember( qList_t * const list, void * const node ){
 8008418:	0002      	movs	r2, r0
    qBool_t RetValue = qFalse;
 800841a:	1e08      	subs	r0, r1, #0
    if( NULL != node ){
 800841c:	d004      	beq.n	8008428 <qList_IsMember+0x10>
        if( list  == (qList_t*)xNode->container ){ /* MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed */
 800841e:	688b      	ldr	r3, [r1, #8]
 8008420:	1a9b      	subs	r3, r3, r2
 8008422:	4258      	negs	r0, r3
 8008424:	4158      	adcs	r0, r3
    qBool_t RetValue = qFalse;
 8008426:	b2c0      	uxtb	r0, r0
}
 8008428:	4770      	bx	lr

0800842a <qList_Insert>:
qBool_t qList_Insert( qList_t *const list, void * const node, const qList_Position_t position ){
 800842a:	b570      	push	{r4, r5, r6, lr}
    qBool_t RetValue = qFalse;
 800842c:	0003      	movs	r3, r0
qBool_t qList_Insert( qList_t *const list, void * const node, const qList_Position_t position ){
 800842e:	0005      	movs	r5, r0
 8008430:	000c      	movs	r4, r1
 8008432:	0016      	movs	r6, r2
    if( ( NULL != list ) && ( NULL != node ) && ( position >= (qList_Position_t)(-1) ) ){    
 8008434:	2800      	cmp	r0, #0
 8008436:	d01c      	beq.n	8008472 <qList_Insert+0x48>
    qBool_t RetValue = qFalse;
 8008438:	1e0b      	subs	r3, r1, #0
    if( ( NULL != list ) && ( NULL != node ) && ( position >= (qList_Position_t)(-1) ) ){    
 800843a:	d01a      	beq.n	8008472 <qList_Insert+0x48>
    qBool_t RetValue = qFalse;
 800843c:	2300      	movs	r3, #0
    if( ( NULL != list ) && ( NULL != node ) && ( position >= (qList_Position_t)(-1) ) ){    
 800843e:	1c72      	adds	r2, r6, #1
 8008440:	db17      	blt.n	8008472 <qList_Insert+0x48>
        if( qFalse == qList_IsMember( list, node )){
 8008442:	f7ff ffe9 	bl	8008418 <qList_IsMember>
    qBool_t RetValue = qFalse;
 8008446:	2300      	movs	r3, #0
        if( qFalse == qList_IsMember( list, node )){
 8008448:	4298      	cmp	r0, r3
 800844a:	d112      	bne.n	8008472 <qList_Insert+0x48>
            if( NULL == list->head ){ /*list is empty*/
 800844c:	68eb      	ldr	r3, [r5, #12]
    xNode->prev = NULL;
 800844e:	6060      	str	r0, [r4, #4]
    xNode->next = NULL;
 8008450:	6020      	str	r0, [r4, #0]
    xNode->container = NULL;
 8008452:	60a0      	str	r0, [r4, #8]
 8008454:	696a      	ldr	r2, [r5, #20]
            if( NULL == list->head ){ /*list is empty*/
 8008456:	2b00      	cmp	r3, #0
 8008458:	d102      	bne.n	8008460 <qList_Insert+0x36>
                list->head = newnode; 
 800845a:	60ec      	str	r4, [r5, #12]
    list->tail = node;
 800845c:	612c      	str	r4, [r5, #16]
 800845e:	e004      	b.n	800846a <qList_Insert+0x40>
            else if( qList_AtFront == position ){
 8008460:	1c71      	adds	r1, r6, #1
 8008462:	d108      	bne.n	8008476 <qList_Insert+0x4c>
    node->next = list->head;
 8008464:	6023      	str	r3, [r4, #0]
    list->head->prev = node;
 8008466:	605c      	str	r4, [r3, #4]
    list->head = node;
 8008468:	60ec      	str	r4, [r5, #12]
            newnode->container = list;
 800846a:	2301      	movs	r3, #1
            list->size++;
 800846c:	3201      	adds	r2, #1
 800846e:	616a      	str	r2, [r5, #20]
            newnode->container = list;
 8008470:	60a5      	str	r5, [r4, #8]
}
 8008472:	0018      	movs	r0, r3
 8008474:	bd70      	pop	{r4, r5, r6, pc}
            else if( position >= ( (qList_Position_t)list->size - 1 ) ){
 8008476:	1e51      	subs	r1, r2, #1
 8008478:	428e      	cmp	r6, r1
 800847a:	db05      	blt.n	8008488 <qList_Insert+0x5e>
    list->tail->next = node;
 800847c:	692b      	ldr	r3, [r5, #16]
 800847e:	601c      	str	r4, [r3, #0]
    node->prev = list->tail;
 8008480:	6063      	str	r3, [r4, #4]
 8008482:	e7eb      	b.n	800845c <qList_Insert+0x32>
        iPos++;
 8008484:	000b      	movs	r3, r1
 8008486:	3001      	adds	r0, #1
 8008488:	6819      	ldr	r1, [r3, #0]
    for( iNode = list->head ; ( iPos < (qBase_t)position ) && ( NULL != iNode->next ) ; iNode = iNode->next ){
 800848a:	4286      	cmp	r6, r0
 800848c:	dd01      	ble.n	8008492 <qList_Insert+0x68>
 800848e:	2900      	cmp	r1, #0
 8008490:	d1f8      	bne.n	8008484 <qList_Insert+0x5a>
                newnode->next = iNode->next;  /*  NEW -> (i+1)NODE */
 8008492:	6021      	str	r1, [r4, #0]
                iNode->next->prev = newnode;  /*  NEW <- (i+1)NODE  */
 8008494:	6819      	ldr	r1, [r3, #0]
                newnode->prev = iNode;        /*  iNODE <- NEW */
 8008496:	6063      	str	r3, [r4, #4]
                iNode->next->prev = newnode;  /*  NEW <- (i+1)NODE  */
 8008498:	604c      	str	r4, [r1, #4]
                iNode->next = newnode;        /*  iNODE -> NEW */  
 800849a:	601c      	str	r4, [r3, #0]
 800849c:	e7e5      	b.n	800846a <qList_Insert+0x40>

0800849e <qList_Remove>:
void* qList_Remove( qList_t * const list, void * const node, const qList_Position_t position ){
 800849e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ( NULL != list->head ) && ( position >= (qList_Position_t)(-1) ) ){
 80084a0:	68c6      	ldr	r6, [r0, #12]
void* qList_Remove( qList_t * const list, void * const node, const qList_Position_t position ){
 80084a2:	0005      	movs	r5, r0
 80084a4:	000c      	movs	r4, r1
 80084a6:	0017      	movs	r7, r2
    if( ( NULL != list->head ) && ( position >= (qList_Position_t)(-1) ) ){
 80084a8:	2e00      	cmp	r6, #0
 80084aa:	d102      	bne.n	80084b2 <qList_Remove+0x14>
    qList_Node_t *removed = NULL;
 80084ac:	2400      	movs	r4, #0
}
 80084ae:	0020      	movs	r0, r4
 80084b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( ( NULL != list->head ) && ( position >= (qList_Position_t)(-1) ) ){
 80084b2:	1c53      	adds	r3, r2, #1
 80084b4:	dbfa      	blt.n	80084ac <qList_Remove+0xe>
        if ( qList_IsMember( list, node ) ){
 80084b6:	f7ff ffaf 	bl	8008418 <qList_IsMember>
 80084ba:	2800      	cmp	r0, #0
 80084bc:	d005      	beq.n	80084ca <qList_Remove+0x2c>
            if( qList_RemoveItself( node ) ){
 80084be:	0020      	movs	r0, r4
 80084c0:	f7ff ff80 	bl	80083c4 <qList_RemoveItself>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d1f2      	bne.n	80084ae <qList_Remove+0x10>
 80084c8:	e7f0      	b.n	80084ac <qList_Remove+0xe>
 80084ca:	696b      	ldr	r3, [r5, #20]
        else if( position <= (qList_Position_t)0 ){
 80084cc:	2f00      	cmp	r7, #0
 80084ce:	dc0c      	bgt.n	80084ea <qList_Remove+0x4c>
    list->head = removed->next;
 80084d0:	6832      	ldr	r2, [r6, #0]
 80084d2:	60ea      	str	r2, [r5, #12]
    if( NULL == list->head ){
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	d106      	bne.n	80084e6 <qList_Remove+0x48>
        list->tail = list->head;
 80084d8:	612a      	str	r2, [r5, #16]
            removed->container = NULL;
 80084da:	2200      	movs	r2, #0
            list->size--;
 80084dc:	3b01      	subs	r3, #1
            removed->container = NULL;
 80084de:	60b2      	str	r2, [r6, #8]
 80084e0:	0034      	movs	r4, r6
            list->size--;
 80084e2:	616b      	str	r3, [r5, #20]
 80084e4:	e7e3      	b.n	80084ae <qList_Remove+0x10>
        list->head->prev = NULL;    
 80084e6:	6050      	str	r0, [r2, #4]
 80084e8:	e7f7      	b.n	80084da <qList_Remove+0x3c>
        else if( position > ( (qList_Position_t)list->size - 1 ) ){
 80084ea:	42bb      	cmp	r3, r7
 80084ec:	dc0c      	bgt.n	8008508 <qList_Remove+0x6a>
    removed = list->tail;
 80084ee:	692c      	ldr	r4, [r5, #16]
    list->tail = removed->prev;
 80084f0:	6862      	ldr	r2, [r4, #4]
 80084f2:	612a      	str	r2, [r5, #16]
    if( NULL == list->tail ){
 80084f4:	2a00      	cmp	r2, #0
 80084f6:	d105      	bne.n	8008504 <qList_Remove+0x66>
        list->head = list->tail;
 80084f8:	60ea      	str	r2, [r5, #12]
            removed->container = NULL;
 80084fa:	2200      	movs	r2, #0
            list->size--;
 80084fc:	3b01      	subs	r3, #1
            removed->container = NULL;
 80084fe:	60a2      	str	r2, [r4, #8]
            list->size--;
 8008500:	616b      	str	r3, [r5, #20]
 8008502:	e7d4      	b.n	80084ae <qList_Remove+0x10>
        list->tail->next = NULL;    
 8008504:	6010      	str	r0, [r2, #0]
 8008506:	e7f8      	b.n	80084fa <qList_Remove+0x5c>
            LastIndex = ( (qBase_t)position - 1 );
 8008508:	3f01      	subs	r7, #1
 800850a:	6834      	ldr	r4, [r6, #0]
    for( iNode = list->head ; ( iPos < (qBase_t)position ) && ( NULL != iNode->next ) ; iNode = iNode->next ){
 800850c:	4287      	cmp	r7, r0
 800850e:	dd01      	ble.n	8008514 <qList_Remove+0x76>
 8008510:	2c00      	cmp	r4, #0
 8008512:	d106      	bne.n	8008522 <qList_Remove+0x84>
            iNode->next = removed->next;
 8008514:	6822      	ldr	r2, [r4, #0]
 8008516:	6032      	str	r2, [r6, #0]
            if( NULL != removed->next ){
 8008518:	6821      	ldr	r1, [r4, #0]
 800851a:	2900      	cmp	r1, #0
 800851c:	d0ed      	beq.n	80084fa <qList_Remove+0x5c>
                iNode->next->prev = iNode;
 800851e:	6056      	str	r6, [r2, #4]
 8008520:	e7eb      	b.n	80084fa <qList_Remove+0x5c>
        iPos++;
 8008522:	3001      	adds	r0, #1
 8008524:	0026      	movs	r6, r4
 8008526:	e7f0      	b.n	800850a <qList_Remove+0x6c>

08008528 <qList_ForEach>:
qBool_t qList_ForEach( qList_t *const list, const qList_NodeFcn_t Fcn, void *arg, qList_Direction_t dir, void *NodeOffset ){
 8008528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800852a:	4684      	mov	ip, r0
 800852c:	001e      	movs	r6, r3
 800852e:	000d      	movs	r5, r1
 8008530:	0017      	movs	r7, r2
 8008532:	9b08      	ldr	r3, [sp, #32]
    if( ( NULL != list ) && ( NULL != Fcn ) && ( ( &QLIST_FORWARD == dir ) || ( &QLIST_BACKWARD == dir) ) ){
 8008534:	2800      	cmp	r0, #0
 8008536:	d021      	beq.n	800857c <qList_ForEach+0x54>
    qBool_t RetValue = qFalse;
 8008538:	1e08      	subs	r0, r1, #0
    if( ( NULL != list ) && ( NULL != Fcn ) && ( ( &QLIST_FORWARD == dir ) || ( &QLIST_BACKWARD == dir) ) ){
 800853a:	d01f      	beq.n	800857c <qList_ForEach+0x54>
 800853c:	4a14      	ldr	r2, [pc, #80]	; (8008590 <qList_ForEach+0x68>)
 800853e:	4296      	cmp	r6, r2
 8008540:	d003      	beq.n	800854a <qList_ForEach+0x22>
 8008542:	4914      	ldr	r1, [pc, #80]	; (8008594 <qList_ForEach+0x6c>)
    qBool_t RetValue = qFalse;
 8008544:	2000      	movs	r0, #0
    if( ( NULL != list ) && ( NULL != Fcn ) && ( ( &QLIST_FORWARD == dir ) || ( &QLIST_BACKWARD == dir) ) ){
 8008546:	428e      	cmp	r6, r1
 8008548:	d118      	bne.n	800857c <qList_ForEach+0x54>
        if ( NULL != list->head ){  /*walk the list only if it has items*/
 800854a:	4661      	mov	r1, ip
 800854c:	68cc      	ldr	r4, [r1, #12]
    qBool_t RetValue = qFalse;
 800854e:	1e20      	subs	r0, r4, #0
        if ( NULL != list->head ){  /*walk the list only if it has items*/
 8008550:	d014      	beq.n	800857c <qList_ForEach+0x54>
            adjacent = ( &QLIST_FORWARD == dir )? list->head : list->tail; /*select starting point*/
 8008552:	4296      	cmp	r6, r2
 8008554:	d000      	beq.n	8008558 <qList_ForEach+0x30>
 8008556:	690c      	ldr	r4, [r1, #16]
            if( NULL != NodeOffset){ /*offset request?*/
 8008558:	2b00      	cmp	r3, #0
 800855a:	d003      	beq.n	8008564 <qList_ForEach+0x3c>
                if( iNode->container == list ){ /*the offset belongs to the list?*/
 800855c:	689a      	ldr	r2, [r3, #8]
 800855e:	4594      	cmp	ip, r2
 8008560:	d100      	bne.n	8008564 <qList_ForEach+0x3c>
 8008562:	001c      	movs	r4, r3
            RetValue = Fcn( NULL, arg, qList_WalkInit ); /*run initial stage before looping through list*/
 8008564:	2200      	movs	r2, #0
 8008566:	0039      	movs	r1, r7
 8008568:	0010      	movs	r0, r2
 800856a:	47a8      	blx	r5
                    if( RetValue ){ /*check if the last node handling breaks the loop*/
 800856c:	2800      	cmp	r0, #0
 800856e:	d105      	bne.n	800857c <qList_ForEach+0x54>
                for( iNode = adjacent; NULL != iNode; iNode = adjacent ){ /*loop the list*/
 8008570:	2c00      	cmp	r4, #0
 8008572:	d104      	bne.n	800857e <qList_ForEach+0x56>
                    RetValue = Fcn( NULL, arg, qList_WalkEnd ); 
 8008574:	2202      	movs	r2, #2
 8008576:	0039      	movs	r1, r7
 8008578:	0020      	movs	r0, r4
 800857a:	47a8      	blx	r5
}
 800857c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                    adjacent = dir( iNode ); /*Save the adjacent node if the current node changes its links. */
 800857e:	0020      	movs	r0, r4
 8008580:	47b0      	blx	r6
                    RetValue = Fcn( iNode, arg, qList_WalkThrough ); /*perform action over the node*/
 8008582:	2201      	movs	r2, #1
                    adjacent = dir( iNode ); /*Save the adjacent node if the current node changes its links. */
 8008584:	9001      	str	r0, [sp, #4]
                    RetValue = Fcn( iNode, arg, qList_WalkThrough ); /*perform action over the node*/
 8008586:	0039      	movs	r1, r7
 8008588:	0020      	movs	r0, r4
 800858a:	47a8      	blx	r5
                for( iNode = adjacent; NULL != iNode; iNode = adjacent ){ /*loop the list*/
 800858c:	9c01      	ldr	r4, [sp, #4]
 800858e:	e7ed      	b.n	800856c <qList_ForEach+0x44>
 8008590:	080083af 	.word	0x080083af
 8008594:	080083b3 	.word	0x080083b3

08008598 <qList_Move>:
qBool_t qList_Move( qList_t *const destination, qList_t *const source, const qList_Position_t position ){
 8008598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800859a:	b085      	sub	sp, #20
 800859c:	0004      	movs	r4, r0
 800859e:	000d      	movs	r5, r1
 80085a0:	9203      	str	r2, [sp, #12]
    if( ( NULL != destination ) && ( NULL != source ) && ( position >= (qList_Position_t)(-1) )  ) {    
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d026      	beq.n	80085f4 <qList_Move+0x5c>
    qBool_t RetValue = qFalse;
 80085a6:	1e08      	subs	r0, r1, #0
    if( ( NULL != destination ) && ( NULL != source ) && ( position >= (qList_Position_t)(-1) )  ) {    
 80085a8:	d024      	beq.n	80085f4 <qList_Move+0x5c>
 80085aa:	0013      	movs	r3, r2
    qBool_t RetValue = qFalse;
 80085ac:	2000      	movs	r0, #0
    if( ( NULL != destination ) && ( NULL != source ) && ( position >= (qList_Position_t)(-1) )  ) {    
 80085ae:	3301      	adds	r3, #1
 80085b0:	db20      	blt.n	80085f4 <qList_Move+0x5c>
        if( NULL != source->head){ /*source has items*/
 80085b2:	68cb      	ldr	r3, [r1, #12]
 80085b4:	0006      	movs	r6, r0
 80085b6:	4283      	cmp	r3, r0
 80085b8:	d01c      	beq.n	80085f4 <qList_Move+0x5c>
            (void)qList_ForEach( source, qList_ChangeContainer, destination, QLIST_FORWARD, NULL );          
 80085ba:	9000      	str	r0, [sp, #0]
 80085bc:	4b1a      	ldr	r3, [pc, #104]	; (8008628 <qList_Move+0x90>)
 80085be:	0022      	movs	r2, r4
 80085c0:	491a      	ldr	r1, [pc, #104]	; (800862c <qList_Move+0x94>)
 80085c2:	0028      	movs	r0, r5
 80085c4:	f7ff ffb0 	bl	8008528 <qList_ForEach>
            if( NULL == destination->head ){ /*destination is empty*/
 80085c8:	68e3      	ldr	r3, [r4, #12]
 80085ca:	68ea      	ldr	r2, [r5, #12]
 80085cc:	6929      	ldr	r1, [r5, #16]
 80085ce:	6960      	ldr	r0, [r4, #20]
 80085d0:	42b3      	cmp	r3, r6
 80085d2:	d102      	bne.n	80085da <qList_Move+0x42>
                destination->head = source->head;
 80085d4:	60e2      	str	r2, [r4, #12]
                destination->tail = source->tail;
 80085d6:	6121      	str	r1, [r4, #16]
 80085d8:	e005      	b.n	80085e6 <qList_Move+0x4e>
            else if( qList_AtFront == position ){
 80085da:	9f03      	ldr	r7, [sp, #12]
 80085dc:	3701      	adds	r7, #1
 80085de:	d10b      	bne.n	80085f8 <qList_Move+0x60>
                source->tail->next = destination->head;
 80085e0:	600b      	str	r3, [r1, #0]
                destination->head->prev = source->tail;
 80085e2:	6059      	str	r1, [r3, #4]
                destination->head = source->head;
 80085e4:	60e2      	str	r2, [r4, #12]
            destination->size += source->size;
 80085e6:	696b      	ldr	r3, [r5, #20]
 80085e8:	18c0      	adds	r0, r0, r3
 80085ea:	6160      	str	r0, [r4, #20]
            qList_Initialize( source ); /*clean up source*/
 80085ec:	0028      	movs	r0, r5
 80085ee:	f7ff fee2 	bl	80083b6 <qList_Initialize>
            RetValue = qTrue;
 80085f2:	2001      	movs	r0, #1
}
 80085f4:	b005      	add	sp, #20
 80085f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if( position >= ( (qList_Position_t)destination->size - 1 ) ){
 80085f8:	1e47      	subs	r7, r0, #1
 80085fa:	46bc      	mov	ip, r7
 80085fc:	9f03      	ldr	r7, [sp, #12]
 80085fe:	45bc      	cmp	ip, r7
 8008600:	dc05      	bgt.n	800860e <qList_Move+0x76>
                destination->tail->next = source->head;
 8008602:	6923      	ldr	r3, [r4, #16]
 8008604:	601a      	str	r2, [r3, #0]
                source->head->prev = destination->tail;
 8008606:	6053      	str	r3, [r2, #4]
 8008608:	e7e5      	b.n	80085d6 <qList_Move+0x3e>
        iPos++;
 800860a:	4663      	mov	r3, ip
 800860c:	3601      	adds	r6, #1
 800860e:	681f      	ldr	r7, [r3, #0]
 8008610:	46bc      	mov	ip, r7
    for( iNode = list->head ; ( iPos < (qBase_t)position ) && ( NULL != iNode->next ) ; iNode = iNode->next ){
 8008612:	9f03      	ldr	r7, [sp, #12]
 8008614:	42b7      	cmp	r7, r6
 8008616:	dd02      	ble.n	800861e <qList_Move+0x86>
 8008618:	4667      	mov	r7, ip
 800861a:	2f00      	cmp	r7, #0
 800861c:	d1f5      	bne.n	800860a <qList_Move+0x72>
                source->tail->next = iNode->next; 
 800861e:	4666      	mov	r6, ip
 8008620:	600e      	str	r6, [r1, #0]
                source->head->prev = iNode;
 8008622:	6053      	str	r3, [r2, #4]
                iNode->next = source->head;
 8008624:	601a      	str	r2, [r3, #0]
 8008626:	e7de      	b.n	80085e6 <qList_Move+0x4e>
 8008628:	080083af 	.word	0x080083af
 800862c:	080083a5 	.word	0x080083a5

08008630 <qQueue_IsReady>:
static void qQueue_MoveReader( qQueue_t * const obj );
static void qQueue_CopyDataFromQueue( qQueue_t * const obj, void * const pvBuffer );


qBool_t qQueue_IsReady( const qQueue_t * const obj ){
    qBool_t RetValue = qFalse;
 8008630:	1e03      	subs	r3, r0, #0
    if( NULL != obj ){
 8008632:	d003      	beq.n	800863c <qQueue_IsReady+0xc>
        if( NULL != obj->qPrivate.head ){
 8008634:	6803      	ldr	r3, [r0, #0]
 8008636:	1e58      	subs	r0, r3, #1
 8008638:	4183      	sbcs	r3, r0
    qBool_t RetValue = qFalse;
 800863a:	b2db      	uxtb	r3, r3
            RetValue = qTrue;
        }
    }
    return RetValue;
}
 800863c:	0018      	movs	r0, r3
 800863e:	4770      	bx	lr

08008640 <qQueue_Reset>:
 
Parameters:

    - obj : a pointer to the Queue object
*/
void qQueue_Reset( qQueue_t * const obj ){
 8008640:	b510      	push	{r4, lr}
 8008642:	1e04      	subs	r4, r0, #0
    if ( NULL != obj ){
 8008644:	d00f      	beq.n	8008666 <qQueue_Reset+0x26>
        qCritical_Enter();
 8008646:	f7fe fff3 	bl	8007630 <qCritical_Enter>
        obj->qPrivate.tail = obj->qPrivate.head + ( obj->qPrivate.ItemsCount * obj->qPrivate.ItemSize ); 
 800864a:	69a1      	ldr	r1, [r4, #24]
 800864c:	6963      	ldr	r3, [r4, #20]
 800864e:	6822      	ldr	r2, [r4, #0]
 8008650:	434b      	muls	r3, r1
 8008652:	18d0      	adds	r0, r2, r3
 8008654:	6060      	str	r0, [r4, #4]
        obj->qPrivate.ItemsWaiting = 0u;
 8008656:	2000      	movs	r0, #0
        obj->qPrivate.writer = obj->qPrivate.head;
        obj->qPrivate.reader = obj->qPrivate.head + ( ( obj->qPrivate.ItemsCount - 1u ) * obj->qPrivate.ItemSize );
 8008658:	1a5b      	subs	r3, r3, r1
 800865a:	18d3      	adds	r3, r2, r3
        obj->qPrivate.ItemsWaiting = 0u;
 800865c:	6120      	str	r0, [r4, #16]
        obj->qPrivate.writer = obj->qPrivate.head;
 800865e:	60a2      	str	r2, [r4, #8]
        obj->qPrivate.reader = obj->qPrivate.head + ( ( obj->qPrivate.ItemsCount - 1u ) * obj->qPrivate.ItemSize );
 8008660:	60e3      	str	r3, [r4, #12]
        qCritical_Exit();
 8008662:	f7fe ffef 	bl	8007644 <qCritical_Exit>
    }
}
 8008666:	bd10      	pop	{r4, pc}

08008668 <qQueue_Setup>:
qBool_t qQueue_Setup( qQueue_t * const obj, void* DataArea, size_t ItemSize, size_t ItemsCount ){
 8008668:	b510      	push	{r4, lr}
    qBool_t RetValue = qFalse;
 800866a:	1e04      	subs	r4, r0, #0
    if( ( NULL != obj ) && ( NULL != DataArea ) && ( ItemSize > 0u ) && ( ItemsCount > 0u) ){
 800866c:	d00c      	beq.n	8008688 <qQueue_Setup+0x20>
    qBool_t RetValue = qFalse;
 800866e:	1e0c      	subs	r4, r1, #0
    if( ( NULL != obj ) && ( NULL != DataArea ) && ( ItemSize > 0u ) && ( ItemsCount > 0u) ){
 8008670:	d00a      	beq.n	8008688 <qQueue_Setup+0x20>
    qBool_t RetValue = qFalse;
 8008672:	2400      	movs	r4, #0
    if( ( NULL != obj ) && ( NULL != DataArea ) && ( ItemSize > 0u ) && ( ItemsCount > 0u) ){
 8008674:	42a2      	cmp	r2, r4
 8008676:	d007      	beq.n	8008688 <qQueue_Setup+0x20>
 8008678:	42a3      	cmp	r3, r4
 800867a:	d005      	beq.n	8008688 <qQueue_Setup+0x20>
        obj->qPrivate.ItemsCount = ItemsCount;   /* Initialise the queue members*/
 800867c:	6143      	str	r3, [r0, #20]
        obj->qPrivate.ItemSize = ItemSize;
 800867e:	6182      	str	r2, [r0, #24]
        obj->qPrivate.head = DataArea; /* MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed */
 8008680:	6001      	str	r1, [r0, #0]
        qQueue_Reset( obj );
 8008682:	f7ff ffdd 	bl	8008640 <qQueue_Reset>
        RetValue = qTrue;
 8008686:	3401      	adds	r4, #1
}
 8008688:	0020      	movs	r0, r4
 800868a:	bd10      	pop	{r4, pc}

0800868c <qQueue_IsEmpty>:
Return value:

    qTrue if the Queue is empty, qFalse if it is not.
 */
qBool_t qQueue_IsEmpty( const qQueue_t * const obj ){
    qBool_t RetValue = qTrue;
 800868c:	2301      	movs	r3, #1
    if( NULL != obj ){
 800868e:	2800      	cmp	r0, #0
 8008690:	d003      	beq.n	800869a <qQueue_IsEmpty+0xe>
        if( obj->qPrivate.ItemsWaiting == 0u ){
 8008692:	6903      	ldr	r3, [r0, #16]
 8008694:	4258      	negs	r0, r3
 8008696:	4143      	adcs	r3, r0
    qBool_t RetValue = qTrue;
 8008698:	b2db      	uxtb	r3, r3
        else{
            RetValue = qFalse;
        }  
    }
    return RetValue;   
}
 800869a:	0018      	movs	r0, r3
 800869c:	4770      	bx	lr

0800869e <qQueue_Count>:

    The number of elements in the queue
 */
size_t qQueue_Count( const qQueue_t * const obj ){
    size_t RetValue = 0u;
    if ( NULL != obj ){
 800869e:	2800      	cmp	r0, #0
 80086a0:	d000      	beq.n	80086a4 <qQueue_Count+0x6>
        RetValue = obj->qPrivate.ItemsWaiting;
 80086a2:	6900      	ldr	r0, [r0, #16]
    } 
    return RetValue;
}
 80086a4:	4770      	bx	lr

080086a6 <qQueue_IsFull>:

    qTrue if the Queue is full, qFalse if it is not.
 */
/*============================================================================*/
qBool_t qQueue_IsFull( const qQueue_t * const obj ){
    qBool_t RetValue = qFalse;
 80086a6:	1e03      	subs	r3, r0, #0
    if( NULL != obj ){
 80086a8:	d005      	beq.n	80086b6 <qQueue_IsFull+0x10>
        if( obj->qPrivate.ItemsWaiting == obj->qPrivate.ItemsCount ){
 80086aa:	6902      	ldr	r2, [r0, #16]
 80086ac:	6943      	ldr	r3, [r0, #20]
 80086ae:	1a9b      	subs	r3, r3, r2
 80086b0:	4258      	negs	r0, r3
 80086b2:	4143      	adcs	r3, r0
    qBool_t RetValue = qFalse;
 80086b4:	b2db      	uxtb	r3, r3
            RetValue = qTrue;
        }
    }
    return RetValue;
}
 80086b6:	0018      	movs	r0, r3
 80086b8:	4770      	bx	lr

080086ba <qQueue_Peek>:
  
Return value:

    Pointer to the data, or NULL if there is nothing in the queue
 */
void* qQueue_Peek( const qQueue_t * const obj ){
 80086ba:	b570      	push	{r4, r5, r6, lr}
 80086bc:	0005      	movs	r5, r0
    qUINT8_t *RetValue = NULL;
 80086be:	1e04      	subs	r4, r0, #0
    if( NULL != obj ){
 80086c0:	d00d      	beq.n	80086de <qQueue_Peek+0x24>
        if( obj->qPrivate.ItemsWaiting > 0u ){
 80086c2:	6903      	ldr	r3, [r0, #16]
    qUINT8_t *RetValue = NULL;
 80086c4:	1e1c      	subs	r4, r3, #0
        if( obj->qPrivate.ItemsWaiting > 0u ){
 80086c6:	d00a      	beq.n	80086de <qQueue_Peek+0x24>
            qCritical_Enter();
 80086c8:	f7fe ffb2 	bl	8007630 <qCritical_Enter>
            /*cstat -MISRAC2012-Rule-11.5 -CERT-EXP36-C_b*/
            RetValue = (void*)( obj->qPrivate.reader + obj->qPrivate.ItemSize );  /*MISRAC2012-Rule-11.8 allowed*/ /* MISRAC2012-Rule-11.5,CERT-EXP36-C_b deviation allowed */
 80086cc:	68eb      	ldr	r3, [r5, #12]
 80086ce:	69aa      	ldr	r2, [r5, #24]
 80086d0:	189c      	adds	r4, r3, r2
            /*cstat +MISRAC2012-Rule-11.5 +CERT-EXP36-C_b*/
            if( RetValue >= obj->qPrivate.tail ){
 80086d2:	686b      	ldr	r3, [r5, #4]
 80086d4:	42a3      	cmp	r3, r4
 80086d6:	d800      	bhi.n	80086da <qQueue_Peek+0x20>
                RetValue = obj->qPrivate.head;
 80086d8:	682c      	ldr	r4, [r5, #0]
            }
            qCritical_Exit();
 80086da:	f7fe ffb3 	bl	8007644 <qCritical_Exit>
        }
    }
    return (void*)RetValue;
}
 80086de:	0020      	movs	r0, r4
 80086e0:	bd70      	pop	{r4, r5, r6, pc}

080086e2 <qQueue_RemoveFront>:
  
Return value:

    qTrue if data was removed from the Queue, otherwise returns qFalse
 */
qBool_t qQueue_RemoveFront( qQueue_t * const obj ){
 80086e2:	b510      	push	{r4, lr}
 80086e4:	1e04      	subs	r4, r0, #0
    qBool_t RetValue = qFalse;
    if( NULL != obj ){
 80086e6:	d014      	beq.n	8008712 <qQueue_RemoveFront+0x30>
        if( obj->qPrivate.ItemsWaiting > 0u ){
 80086e8:	6903      	ldr	r3, [r0, #16]
    qBool_t RetValue = qFalse;
 80086ea:	2000      	movs	r0, #0
        if( obj->qPrivate.ItemsWaiting > 0u ){
 80086ec:	4283      	cmp	r3, r0
 80086ee:	d010      	beq.n	8008712 <qQueue_RemoveFront+0x30>
            qCritical_Enter();
 80086f0:	f7fe ff9e 	bl	8007630 <qCritical_Enter>
    }
    obj->qPrivate.ItemsWaiting++;
}
/*==================================================================================*/
static void qQueue_MoveReader( qQueue_t * const obj ){
    obj->qPrivate.reader += obj->qPrivate.ItemSize;
 80086f4:	68e3      	ldr	r3, [r4, #12]
 80086f6:	69a2      	ldr	r2, [r4, #24]
 80086f8:	189b      	adds	r3, r3, r2
    if( obj->qPrivate.reader >= obj->qPrivate.tail ){
 80086fa:	6862      	ldr	r2, [r4, #4]
    obj->qPrivate.reader += obj->qPrivate.ItemSize;
 80086fc:	60e3      	str	r3, [r4, #12]
    if( obj->qPrivate.reader >= obj->qPrivate.tail ){
 80086fe:	4293      	cmp	r3, r2
 8008700:	d301      	bcc.n	8008706 <qQueue_RemoveFront+0x24>
        obj->qPrivate.reader = obj->qPrivate.head;
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	60e3      	str	r3, [r4, #12]
            --( obj->qPrivate.ItemsWaiting ); /* remove the data. */
 8008706:	6923      	ldr	r3, [r4, #16]
 8008708:	3b01      	subs	r3, #1
 800870a:	6123      	str	r3, [r4, #16]
            qCritical_Exit();
 800870c:	f7fe ff9a 	bl	8007644 <qCritical_Exit>
            RetValue = qTrue;
 8008710:	2001      	movs	r0, #1
}
 8008712:	bd10      	pop	{r4, pc}

08008714 <qQueue_Receive>:
  
Return value:

    qTrue if data was retrieved from the Queue, otherwise returns qFalse
*/
qBool_t qQueue_Receive( qQueue_t * const obj, void *dest ){
 8008714:	b570      	push	{r4, r5, r6, lr}
 8008716:	0004      	movs	r4, r0
 8008718:	000d      	movs	r5, r1
    qBool_t RetValue = qFalse;
    size_t ItemsWaiting;
    if( NULL != obj ){
 800871a:	2800      	cmp	r0, #0
 800871c:	d018      	beq.n	8008750 <qQueue_Receive+0x3c>
        ItemsWaiting = obj->qPrivate.ItemsWaiting; /*to avoid side effects*/
 800871e:	6903      	ldr	r3, [r0, #16]
    qBool_t RetValue = qFalse;
 8008720:	2000      	movs	r0, #0
        if( ItemsWaiting > 0u ){
 8008722:	4283      	cmp	r3, r0
 8008724:	d014      	beq.n	8008750 <qQueue_Receive+0x3c>
            qCritical_Enter();
 8008726:	f7fe ff83 	bl	8007630 <qCritical_Enter>
    obj->qPrivate.reader += obj->qPrivate.ItemSize;
 800872a:	68e3      	ldr	r3, [r4, #12]
 800872c:	69a2      	ldr	r2, [r4, #24]
    if( obj->qPrivate.reader >= obj->qPrivate.tail ){
 800872e:	6861      	ldr	r1, [r4, #4]
    obj->qPrivate.reader += obj->qPrivate.ItemSize;
 8008730:	189b      	adds	r3, r3, r2
 8008732:	60e3      	str	r3, [r4, #12]
    if( obj->qPrivate.reader >= obj->qPrivate.tail ){
 8008734:	428b      	cmp	r3, r1
 8008736:	d301      	bcc.n	800873c <qQueue_Receive+0x28>
        obj->qPrivate.reader = obj->qPrivate.head;
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	60e3      	str	r3, [r4, #12]
    (void) memcpy( (void*) pvBuffer, (void*)obj->qPrivate.reader, obj->qPrivate.ItemSize );  /*MISRAC2012-Rule-11.8 allowed*/
 800873c:	68e1      	ldr	r1, [r4, #12]
 800873e:	0028      	movs	r0, r5
 8008740:	f002 fffa 	bl	800b738 <memcpy>
            qQueue_CopyDataFromQueue( obj, dest );
            obj->qPrivate.ItemsWaiting--; /* remove the data. */
 8008744:	6923      	ldr	r3, [r4, #16]
 8008746:	3b01      	subs	r3, #1
 8008748:	6123      	str	r3, [r4, #16]
            qCritical_Exit();
 800874a:	f7fe ff7b 	bl	8007644 <qCritical_Exit>
            RetValue = qTrue;
 800874e:	2001      	movs	r0, #1
        }        
    }
    return RetValue;
}
 8008750:	bd70      	pop	{r4, r5, r6, pc}

08008752 <qQueue_SendGeneric>:
  
Return value:

    qTrue on successful add, qFalse if not added
*/
qBool_t qQueue_SendGeneric( qQueue_t * const obj, void *ItemToQueue, qQueue_Mode_t InsertMode ){
 8008752:	b570      	push	{r4, r5, r6, lr}
 8008754:	0004      	movs	r4, r0
 8008756:	000d      	movs	r5, r1
 8008758:	0016      	movs	r6, r2
    qBool_t RetValue = qFalse;
    if( ( NULL != obj ) && ( InsertMode <= 1u ) ){
 800875a:	2800      	cmp	r0, #0
 800875c:	d01e      	beq.n	800879c <qQueue_SendGeneric+0x4a>
    qBool_t RetValue = qFalse;
 800875e:	2000      	movs	r0, #0
    if( ( NULL != obj ) && ( InsertMode <= 1u ) ){
 8008760:	2a01      	cmp	r2, #1
 8008762:	d81b      	bhi.n	800879c <qQueue_SendGeneric+0x4a>
        if( obj->qPrivate.ItemsWaiting < obj->qPrivate.ItemsCount ){ /* Is there room on the queue?*/
 8008764:	6923      	ldr	r3, [r4, #16]
 8008766:	6962      	ldr	r2, [r4, #20]
 8008768:	4293      	cmp	r3, r2
 800876a:	d217      	bcs.n	800879c <qQueue_SendGeneric+0x4a>
            qCritical_Enter();
 800876c:	f7fe ff60 	bl	8007630 <qCritical_Enter>
 8008770:	69a2      	ldr	r2, [r4, #24]
        (void) memcpy( (void*) obj->qPrivate.writer, ItemToQueue, obj->qPrivate.ItemSize );  /*MISRAC2012-Rule-11.8 allowed*/
 8008772:	0029      	movs	r1, r5
    if( QUEUE_SEND_TO_BACK == xPosition ){
 8008774:	2e00      	cmp	r6, #0
 8008776:	d112      	bne.n	800879e <qQueue_SendGeneric+0x4c>
        (void) memcpy( (void*) obj->qPrivate.writer, ItemToQueue, obj->qPrivate.ItemSize );  /*MISRAC2012-Rule-11.8 allowed*/
 8008778:	68a0      	ldr	r0, [r4, #8]
 800877a:	f002 ffdd 	bl	800b738 <memcpy>
        obj->qPrivate.writer += obj->qPrivate.ItemSize;
 800877e:	68a3      	ldr	r3, [r4, #8]
 8008780:	69a2      	ldr	r2, [r4, #24]
 8008782:	189b      	adds	r3, r3, r2
        if( obj->qPrivate.writer >= obj->qPrivate.tail ){
 8008784:	6862      	ldr	r2, [r4, #4]
        obj->qPrivate.writer += obj->qPrivate.ItemSize;
 8008786:	60a3      	str	r3, [r4, #8]
        if( obj->qPrivate.writer >= obj->qPrivate.tail ){
 8008788:	4293      	cmp	r3, r2
 800878a:	d301      	bcc.n	8008790 <qQueue_SendGeneric+0x3e>
            obj->qPrivate.writer = obj->qPrivate.head;
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	60a3      	str	r3, [r4, #8]
    obj->qPrivate.ItemsWaiting++;
 8008790:	6923      	ldr	r3, [r4, #16]
 8008792:	3301      	adds	r3, #1
 8008794:	6123      	str	r3, [r4, #16]
            qQueue_CopyDataToQueue( obj, ItemToQueue, (qBool_t)InsertMode );
            qCritical_Exit();
 8008796:	f7fe ff55 	bl	8007644 <qCritical_Exit>
            RetValue = qTrue;
 800879a:	2001      	movs	r0, #1
        }
    }
    return RetValue;   
}
 800879c:	bd70      	pop	{r4, r5, r6, pc}
        (void) memcpy( (void*) obj->qPrivate.reader, ItemToQueue, obj->qPrivate.ItemSize );  /*MISRAC2012-Rule-11.8 allowed*/
 800879e:	68e0      	ldr	r0, [r4, #12]
 80087a0:	f002 ffca 	bl	800b738 <memcpy>
        obj->qPrivate.reader -= obj->qPrivate.ItemSize;
 80087a4:	69a3      	ldr	r3, [r4, #24]
 80087a6:	68e2      	ldr	r2, [r4, #12]
 80087a8:	425b      	negs	r3, r3
        if( obj->qPrivate.reader < obj->qPrivate.head ){
 80087aa:	6821      	ldr	r1, [r4, #0]
        obj->qPrivate.reader -= obj->qPrivate.ItemSize;
 80087ac:	18d2      	adds	r2, r2, r3
 80087ae:	60e2      	str	r2, [r4, #12]
        if( obj->qPrivate.reader < obj->qPrivate.head ){
 80087b0:	428a      	cmp	r2, r1
 80087b2:	d2ed      	bcs.n	8008790 <qQueue_SendGeneric+0x3e>
            obj->qPrivate.reader = ( obj->qPrivate.tail - obj->qPrivate.ItemSize ); 
 80087b4:	6862      	ldr	r2, [r4, #4]
 80087b6:	18d3      	adds	r3, r2, r3
 80087b8:	60e3      	str	r3, [r4, #12]
 80087ba:	e7e9      	b.n	8008790 <qQueue_SendGeneric+0x3e>

080087bc <qSTimer_Reload>:

Return value:

    Returns qTrue on success, otherwise, returns qFalse.
*/
qBool_t qSTimer_Reload( qSTimer_t * const obj ){
 80087bc:	b510      	push	{r4, lr}
 80087be:	1e04      	subs	r4, r0, #0
    qBool_t RetValue = qFalse;
    if( NULL != obj ){
 80087c0:	d004      	beq.n	80087cc <qSTimer_Reload+0x10>
        obj->Start = qClock_GetTick();
 80087c2:	4b03      	ldr	r3, [pc, #12]	; (80087d0 <qSTimer_Reload+0x14>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4798      	blx	r3
 80087c8:	6020      	str	r0, [r4, #0]
        RetValue = qTrue;
 80087ca:	2001      	movs	r0, #1
    }
    return RetValue;
}
 80087cc:	bd10      	pop	{r4, pc}
 80087ce:	46c0      	nop			; (mov r8, r8)
 80087d0:	20000240 	.word	0x20000240

080087d4 <qSTimer_Set>:

Return value:

    Returns qTrue on success, otherwise, returns qFalse.
*/
qBool_t qSTimer_Set( qSTimer_t * const obj, const qTime_t Time ){
 80087d4:	b570      	push	{r4, r5, r6, lr}
 80087d6:	0004      	movs	r4, r0
 80087d8:	1c0d      	adds	r5, r1, #0
    qBool_t RetValue = qFalse;
    if( qSTimer_Reload( obj ) ){
 80087da:	f7ff ffef 	bl	80087bc <qSTimer_Reload>
    qBool_t RetValue = qFalse;
 80087de:	2300      	movs	r3, #0
    if( qSTimer_Reload( obj ) ){
 80087e0:	4298      	cmp	r0, r3
 80087e2:	d004      	beq.n	80087ee <qSTimer_Set+0x1a>
        obj->TV  = qClock_Convert2Clock(Time); /*set the STimer time in epochs*/
 80087e4:	1c28      	adds	r0, r5, #0
 80087e6:	f7fe fef5 	bl	80075d4 <qClock_Convert2Clock>
        RetValue = qTrue;
 80087ea:	2301      	movs	r3, #1
        obj->TV  = qClock_Convert2Clock(Time); /*set the STimer time in epochs*/
 80087ec:	6060      	str	r0, [r4, #4]
    }
    return RetValue;
}
 80087ee:	0018      	movs	r0, r3
 80087f0:	bd70      	pop	{r4, r5, r6, pc}

080087f2 <qSTimer_Disarm>:
Parameters:

    - obj : A pointer to the STimer object.  
*/
void qSTimer_Disarm( qSTimer_t * const obj ){
    if( NULL != obj ){
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d002      	beq.n	80087fc <qSTimer_Disarm+0xa>
        obj->TV = QSTIMER_DISARM_VALUE;
 80087f6:	2300      	movs	r3, #0
 80087f8:	6043      	str	r3, [r0, #4]
        obj->Start = QSTIMER_DISARM_VALUE;
 80087fa:	6003      	str	r3, [r0, #0]
    }
}
 80087fc:	4770      	bx	lr

080087fe <qSTimer_Status>:
Return value:

    qTrue when armed, otherwise qFalse when disarmed
*/
qBool_t qSTimer_Status( const qSTimer_t * const obj ){
    qBool_t RetValue = qFalse;
 80087fe:	1e03      	subs	r3, r0, #0
    if( NULL != obj ){
 8008800:	d003      	beq.n	800880a <qSTimer_Status+0xc>
        RetValue =  ( obj->TV != QSTIMER_DISARM_VALUE )? qTrue : qFalse;
 8008802:	6843      	ldr	r3, [r0, #4]
 8008804:	1e58      	subs	r0, r3, #1
 8008806:	4183      	sbcs	r3, r0
 8008808:	b2db      	uxtb	r3, r3
    } 
    return RetValue;
}
 800880a:	0018      	movs	r0, r3
 800880c:	4770      	bx	lr

0800880e <qSTimer_Expired>:
qBool_t qSTimer_Expired( const qSTimer_t * const obj ){
 800880e:	b510      	push	{r4, lr}
 8008810:	1e04      	subs	r4, r0, #0
    if( NULL != obj ){
 8008812:	d008      	beq.n	8008826 <qSTimer_Expired+0x18>
        if( QSTIMER_ARMED == qSTimer_Status( obj ) ){
 8008814:	f7ff fff3 	bl	80087fe <qSTimer_Status>
 8008818:	0003      	movs	r3, r0
    qBool_t RetValue = qFalse;
 800881a:	2000      	movs	r0, #0
        if( QSTIMER_ARMED == qSTimer_Status( obj ) ){
 800881c:	2b01      	cmp	r3, #1
 800881e:	d102      	bne.n	8008826 <qSTimer_Expired+0x18>
            RetValue = qClock_TimeDeadlineCheck( obj->Start, obj->TV );
 8008820:	cc03      	ldmia	r4!, {r0, r1}
 8008822:	f7fe fef7 	bl	8007614 <qClock_TimeDeadlineCheck>
}
 8008826:	bd10      	pop	{r4, pc}

08008828 <qSTimer_FreeRun>:
qBool_t qSTimer_FreeRun( qSTimer_t * const obj, const qTime_t Time ){
 8008828:	b570      	push	{r4, r5, r6, lr}
 800882a:	0005      	movs	r5, r0
 800882c:	1c0e      	adds	r6, r1, #0
    if( NULL != obj ){ 
 800882e:	2800      	cmp	r0, #0
 8008830:	d101      	bne.n	8008836 <qSTimer_FreeRun+0xe>
    qBool_t RetValue = qFalse;
 8008832:	2000      	movs	r0, #0
 8008834:	e00d      	b.n	8008852 <qSTimer_FreeRun+0x2a>
        if( QSTIMER_ARMED == qSTimer_Status( obj ) ){ 
 8008836:	f7ff ffe2 	bl	80087fe <qSTimer_Status>
 800883a:	0004      	movs	r4, r0
 800883c:	2801      	cmp	r0, #1
 800883e:	d109      	bne.n	8008854 <qSTimer_FreeRun+0x2c>
            if( qSTimer_Expired( obj ) ){
 8008840:	0028      	movs	r0, r5
 8008842:	f7ff ffe4 	bl	800880e <qSTimer_Expired>
 8008846:	2800      	cmp	r0, #0
 8008848:	d0f3      	beq.n	8008832 <qSTimer_FreeRun+0xa>
                qSTimer_Disarm( obj ); 
 800884a:	0028      	movs	r0, r5
 800884c:	f7ff ffd1 	bl	80087f2 <qSTimer_Disarm>
                RetValue = qTrue;
 8008850:	0020      	movs	r0, r4
}
 8008852:	bd70      	pop	{r4, r5, r6, pc}
            (void)qSTimer_Set( obj, Time ); 
 8008854:	1c31      	adds	r1, r6, #0
 8008856:	0028      	movs	r0, r5
 8008858:	f7ff ffbc 	bl	80087d4 <qSTimer_Set>
 800885c:	e7e9      	b.n	8008832 <qSTimer_FreeRun+0xa>

0800885e <qTask_Notification_Send>:

Return value:

    qTrue on success. Otherwise qFalse.
*/ 
qBool_t qTask_Notification_Send( qTask_t * const Task, void* eventdata){
 800885e:	1e03      	subs	r3, r0, #0
    qBool_t RetValue = qFalse;
    if( NULL != Task ){
 8008860:	d008      	beq.n	8008874 <qTask_Notification_Send+0x16>
        if( Task->qPrivate.Notification < QMAX_NOTIFICATION_VALUE ){
 8008862:	6b42      	ldr	r2, [r0, #52]	; 0x34
    qBool_t RetValue = qFalse;
 8008864:	2000      	movs	r0, #0
        if( Task->qPrivate.Notification < QMAX_NOTIFICATION_VALUE ){
 8008866:	3201      	adds	r2, #1
 8008868:	d004      	beq.n	8008874 <qTask_Notification_Send+0x16>
            Task->qPrivate.Notification++;
 800886a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
            Task->qPrivate.AsyncData = eventdata;
 800886c:	6119      	str	r1, [r3, #16]
            Task->qPrivate.Notification++;
 800886e:	3201      	adds	r2, #1
 8008870:	635a      	str	r2, [r3, #52]	; 0x34
            RetValue = qTrue;
 8008872:	3001      	adds	r0, #1
        }
    }
    return RetValue;
}
 8008874:	4770      	bx	lr

08008876 <qTask_Set_Data>:
Return value:

    A void pointer to the task data.
*/
void qTask_Set_Data( qTask_t * const Task, void* arg ){
    if( NULL != Task ){
 8008876:	2800      	cmp	r0, #0
 8008878:	d000      	beq.n	800887c <qTask_Set_Data+0x6>
        Task->qPrivate.TaskData = arg;
 800887a:	60c1      	str	r1, [r0, #12]
    }
}
 800887c:	4770      	bx	lr

0800887e <qTask_Self>:
Return value:

    A pointer to the current running task.
    NULL when the OS scheduler it's in a busy state or when IDLE Task is running.
*/
qTask_t* qTask_Self( void ){
 800887e:	b510      	push	{r4, lr}
    return qOS_Get_TaskRunning();
 8008880:	f7ff fc96 	bl	80081b0 <qOS_Get_TaskRunning>
}
 8008884:	bd10      	pop	{r4, pc}

08008886 <qTask_EventFlags_Check>:
Return value:

    qTrue if the condition is meet, otherwise return qFalse.

*/
qBool_t qTask_EventFlags_Check( qTask_t * const Task, qTask_Flag_t FlagsToCheck, qBool_t ClearOnExit, qBool_t CheckForAll ){
 8008886:	b530      	push	{r4, r5, lr}
    qBool_t RetValue = qFalse;
 8008888:	1e05      	subs	r5, r0, #0
    qTask_Flag_t CurrentEventBits;
    if( NULL != Task){
 800888a:	d011      	beq.n	80088b0 <qTask_EventFlags_Check+0x2a>
        FlagsToCheck &= QTASK_EVENTFLAGS_RMASK;
 800888c:	0b09      	lsrs	r1, r1, #12
        CurrentEventBits = Task->qPrivate.Flags & QTASK_EVENTFLAGS_RMASK;
 800888e:	6b84      	ldr	r4, [r0, #56]	; 0x38
        FlagsToCheck &= QTASK_EVENTFLAGS_RMASK;
 8008890:	0309      	lsls	r1, r1, #12
 8008892:	400c      	ands	r4, r1
        if( qFalse == CheckForAll ){
 8008894:	2b00      	cmp	r3, #0
 8008896:	d108      	bne.n	80088aa <qTask_EventFlags_Check+0x24>
    qBool_t RetValue = qFalse;
 8008898:	1e25      	subs	r5, r4, #0
            if( (CurrentEventBits & FlagsToCheck) != (qTask_Flag_t)0 ){
 800889a:	d009      	beq.n	80088b0 <qTask_EventFlags_Check+0x2a>
 800889c:	2501      	movs	r5, #1
        else{
            if( (CurrentEventBits & FlagsToCheck) == FlagsToCheck ){
                RetValue = qTrue;
            }        
        }
        if( ( qTrue == RetValue )  && ( qTrue == ClearOnExit ) ){
 800889e:	42aa      	cmp	r2, r5
 80088a0:	d106      	bne.n	80088b0 <qTask_EventFlags_Check+0x2a>
            Task->qPrivate.Flags &= ~FlagsToCheck;
 80088a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80088a4:	438b      	bics	r3, r1
 80088a6:	6383      	str	r3, [r0, #56]	; 0x38
 80088a8:	e002      	b.n	80088b0 <qTask_EventFlags_Check+0x2a>
    qBool_t RetValue = qFalse;
 80088aa:	2500      	movs	r5, #0
            if( (CurrentEventBits & FlagsToCheck) == FlagsToCheck ){
 80088ac:	42a1      	cmp	r1, r4
 80088ae:	d0f5      	beq.n	800889c <qTask_EventFlags_Check+0x16>
        }
    }
    return RetValue;
}
 80088b0:	0028      	movs	r0, r5
 80088b2:	bd30      	pop	{r4, r5, pc}

080088b4 <_qPrivate_TaskGetFlag>:
   PRIVATE : THIS FUNCTIONS ARE NOT INTENDED FOR THE USER USAGE
*******************************************************************************/
/*============================================================================*/
qBool_t _qPrivate_TaskGetFlag( const qTask_t * const Task, qUINT32_t flag){
	qUINT32_t xBit;
	xBit = Task->qPrivate.Flags & flag;
 80088b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80088b6:	4008      	ands	r0, r1
	return (( xBit != 0uL )? qTrue : qFalse);
 80088b8:	1e41      	subs	r1, r0, #1
 80088ba:	4188      	sbcs	r0, r1
 80088bc:	b2c0      	uxtb	r0, r0
}
 80088be:	4770      	bx	lr

080088c0 <_qPrivate_TaskModifyFlags>:
/*============================================================================*/
void _qPrivate_TaskModifyFlags( qTask_t * const Task, qUINT32_t flags, qBool_t value){
    if( qTrue == value ){
        Task->qPrivate.Flags |= flags; /*Set bits*/
 80088c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if( qTrue == value ){
 80088c2:	2a01      	cmp	r2, #1
 80088c4:	d102      	bne.n	80088cc <_qPrivate_TaskModifyFlags+0xc>
        Task->qPrivate.Flags |= flags; /*Set bits*/
 80088c6:	4319      	orrs	r1, r3
 80088c8:	6381      	str	r1, [r0, #56]	; 0x38
    }
    else{
        Task->qPrivate.Flags &= ~flags; /*Clear bits*/
    }
}
 80088ca:	4770      	bx	lr
        Task->qPrivate.Flags &= ~flags; /*Clear bits*/
 80088cc:	438b      	bics	r3, r1
 80088ce:	6383      	str	r3, [r0, #56]	; 0x38
}
 80088d0:	e7fb      	b.n	80088ca <_qPrivate_TaskModifyFlags+0xa>

080088d2 <qTask_Set_State>:
void qTask_Set_State(qTask_t * const Task, const qState_t State){
 80088d2:	b510      	push	{r4, lr}
 80088d4:	000a      	movs	r2, r1
 80088d6:	1e04      	subs	r4, r0, #0
    if( NULL != Task ){
 80088d8:	d013      	beq.n	8008902 <qTask_Set_State+0x30>
        switch( State ){
 80088da:	2903      	cmp	r1, #3
 80088dc:	d811      	bhi.n	8008902 <qTask_Set_State+0x30>
 80088de:	0008      	movs	r0, r1
 80088e0:	f7f7 fc1a 	bl	8000118 <__gnu_thumb1_case_uqi>
 80088e4:	10150202 	.word	0x10150202
	xBit = Task->qPrivate.Flags & flag;
 80088e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	return (( xBit != 0uL )? qTrue : qFalse);
 80088ea:	079b      	lsls	r3, r3, #30
                if( State != (qState_t)_qPrivate_TaskGetFlag( Task, _QTASK_BIT_ENABLED ) ){ 
 80088ec:	0fdb      	lsrs	r3, r3, #31
 80088ee:	4299      	cmp	r1, r3
 80088f0:	d007      	beq.n	8008902 <qTask_Set_State+0x30>
                    _qPrivate_TaskModifyFlags( Task, _QTASK_BIT_ENABLED, (qBool_t)State );
 80088f2:	0020      	movs	r0, r4
 80088f4:	2102      	movs	r1, #2
 80088f6:	f7ff ffe3 	bl	80088c0 <_qPrivate_TaskModifyFlags>
                    (void)qSTimer_Reload( &Task->qPrivate.timer );
 80088fa:	0020      	movs	r0, r4
 80088fc:	3024      	adds	r0, #36	; 0x24
 80088fe:	f7ff ff5d 	bl	80087bc <qSTimer_Reload>
}
 8008902:	bd10      	pop	{r4, pc}
        Task->qPrivate.Flags &= ~flags; /*Clear bits*/
 8008904:	2240      	movs	r2, #64	; 0x40
 8008906:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008908:	4393      	bics	r3, r2
        Task->qPrivate.Flags |= flags; /*Set bits*/
 800890a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800890c:	e7f9      	b.n	8008902 <qTask_Set_State+0x30>
        Task->qPrivate.Flags |= flags; /*Set bits*/
 800890e:	2340      	movs	r3, #64	; 0x40
 8008910:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008912:	4313      	orrs	r3, r2
 8008914:	e7f9      	b.n	800890a <qTask_Set_State+0x38>

08008916 <qTask_Attach_Queue>:
qBool_t qTask_Attach_Queue( qTask_t * const Task, qQueue_t * const Queue, const qQueueLinkMode_t Mode, const qUINT16_t arg ){
 8008916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008918:	0006      	movs	r6, r0
 800891a:	000d      	movs	r5, r1
 800891c:	0017      	movs	r7, r2
 800891e:	001c      	movs	r4, r3
    qBool_t RetValue = qFalse;
 8008920:	1e08      	subs	r0, r1, #0
    if( ( NULL != Queue ) && ( NULL != Task ) ){
 8008922:	d017      	beq.n	8008954 <qTask_Attach_Queue+0x3e>
    qBool_t RetValue = qFalse;
 8008924:	1e30      	subs	r0, r6, #0
    if( ( NULL != Queue ) && ( NULL != Task ) ){
 8008926:	d015      	beq.n	8008954 <qTask_Attach_Queue+0x3e>
    qBool_t RetValue = qFalse;
 8008928:	2000      	movs	r0, #0
        if( NULL != Queue->qPrivate.head ) {
 800892a:	680b      	ldr	r3, [r1, #0]
 800892c:	4283      	cmp	r3, r0
 800892e:	d011      	beq.n	8008954 <qTask_Attach_Queue+0x3e>
            _qPrivate_TaskModifyFlags( Task, Mode & _QTASK_QUEUEFLAGS_MASK, (( arg != 0u )? qATTACH :qDETACH) );
 8008930:	0022      	movs	r2, r4
 8008932:	213c      	movs	r1, #60	; 0x3c
 8008934:	1e53      	subs	r3, r2, #1
 8008936:	419a      	sbcs	r2, r3
 8008938:	4039      	ands	r1, r7
 800893a:	b2d2      	uxtb	r2, r2
 800893c:	0030      	movs	r0, r6
 800893e:	f7ff ffbf 	bl	80088c0 <_qPrivate_TaskModifyFlags>
            if( Mode == qQUEUE_COUNT ){
 8008942:	2f10      	cmp	r7, #16
 8008944:	d100      	bne.n	8008948 <qTask_Attach_Queue+0x32>
                Task->qPrivate.QueueCount = arg; /*if mode is qQUEUE_COUNT, use their arg value as count*/
 8008946:	6234      	str	r4, [r6, #32]
            Task->qPrivate.Queue = ( arg > 0u )? Queue : NULL; /*reject, no valid arg input*/
 8008948:	1e63      	subs	r3, r4, #1
 800894a:	419c      	sbcs	r4, r3
            RetValue = qTrue;
 800894c:	2001      	movs	r0, #1
            Task->qPrivate.Queue = ( arg > 0u )? Queue : NULL; /*reject, no valid arg input*/
 800894e:	4264      	negs	r4, r4
 8008950:	4025      	ands	r5, r4
 8008952:	61f5      	str	r5, [r6, #28]
}
 8008954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008956 <qTask_EventFlags_Modify>:
void qTask_EventFlags_Modify( qTask_t * const Task, qTask_Flag_t flags, qBool_t action ){
 8008956:	b510      	push	{r4, lr}
    if( NULL != Task ){
 8008958:	2800      	cmp	r0, #0
 800895a:	d003      	beq.n	8008964 <qTask_EventFlags_Modify+0xe>
        FlagsToSet = flags & QTASK_EVENTFLAGS_RMASK;
 800895c:	0b09      	lsrs	r1, r1, #12
 800895e:	0309      	lsls	r1, r1, #12
        _qPrivate_TaskModifyFlags( Task, FlagsToSet, action );
 8008960:	f7ff ffae 	bl	80088c0 <_qPrivate_TaskModifyFlags>
}
 8008964:	bd10      	pop	{r4, pc}
	...

08008968 <_qtrace_func>:

static qPutChar_t qDebug = NULL;
char qTrace_PublicBuffer[Q_DEBUGTRACE_BUFSIZE] = {0};

/*============================================================================*/
void _qtrace_func( const char *loc, const char* fcn, const char *varname, const char* varvalue, void* Pointer, size_t BlockSize ){
 8008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( NULL != qDebug ){ /*trace only if the output-function is defined*/
 800896a:	4c1d      	ldr	r4, [pc, #116]	; (80089e0 <_qtrace_func+0x78>)
void _qtrace_func( const char *loc, const char* fcn, const char *varname, const char* varvalue, void* Pointer, size_t BlockSize ){
 800896c:	4684      	mov	ip, r0
    if( NULL != qDebug ){ /*trace only if the output-function is defined*/
 800896e:	6820      	ldr	r0, [r4, #0]
void _qtrace_func( const char *loc, const char* fcn, const char *varname, const char* varvalue, void* Pointer, size_t BlockSize ){
 8008970:	000e      	movs	r6, r1
 8008972:	0017      	movs	r7, r2
 8008974:	001d      	movs	r5, r3
    if( NULL != qDebug ){ /*trace only if the output-function is defined*/
 8008976:	2800      	cmp	r0, #0
 8008978:	d022      	beq.n	80089c0 <_qtrace_func+0x58>
        qIOUtil_OutputString( qDebug, NULL, loc, qFalse ); /*print out the line location*/
 800897a:	2300      	movs	r3, #0
 800897c:	4662      	mov	r2, ip
 800897e:	0019      	movs	r1, r3
 8008980:	f7fe fff8 	bl	8007974 <qIOUtil_OutputString>
        if( NULL != fcn ){ /*print out the function if available*/
 8008984:	2e00      	cmp	r6, #0
 8008986:	d00d      	beq.n	80089a4 <_qtrace_func+0x3c>
            qDebug( NULL, '@' );
 8008988:	2140      	movs	r1, #64	; 0x40
 800898a:	2000      	movs	r0, #0
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	4798      	blx	r3
            qIOUtil_OutputString( qDebug, NULL, fcn, qFalse ); 
 8008990:	2300      	movs	r3, #0
 8008992:	6820      	ldr	r0, [r4, #0]
 8008994:	0019      	movs	r1, r3
 8008996:	0032      	movs	r2, r6
 8008998:	f7fe ffec 	bl	8007974 <qIOUtil_OutputString>
            qDebug( NULL, ' ' );
 800899c:	2120      	movs	r1, #32
 800899e:	2000      	movs	r0, #0
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	4798      	blx	r3
        }
        qIOUtil_OutputString( qDebug, NULL, varname, qFalse );
 80089a4:	2300      	movs	r3, #0
 80089a6:	003a      	movs	r2, r7
 80089a8:	0019      	movs	r1, r3
 80089aa:	6820      	ldr	r0, [r4, #0]
 80089ac:	f7fe ffe2 	bl	8007974 <qIOUtil_OutputString>
        if( NULL == varvalue ){ /*if varvalue is not defined, the call must correspond to memory tracing*/
 80089b0:	2d00      	cmp	r5, #0
 80089b2:	d106      	bne.n	80089c2 <_qtrace_func+0x5a>
            qIOUtil_PrintXData( qDebug, NULL, Pointer, BlockSize ); /*print out the memory in hex format*/
 80089b4:	9b07      	ldr	r3, [sp, #28]
 80089b6:	9a06      	ldr	r2, [sp, #24]
 80089b8:	0029      	movs	r1, r5
 80089ba:	6820      	ldr	r0, [r4, #0]
 80089bc:	f7fe fff0 	bl	80079a0 <qIOUtil_PrintXData>
            qIOUtil_OutputString( qDebug, NULL, varvalue, qFalse );
            qDebug( NULL, '\r' );
            qDebug( NULL, '\n' );
        }
    }
}
 80089c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            qIOUtil_OutputString( qDebug, NULL, varvalue, qFalse );
 80089c2:	2300      	movs	r3, #0
 80089c4:	002a      	movs	r2, r5
 80089c6:	0019      	movs	r1, r3
 80089c8:	6820      	ldr	r0, [r4, #0]
 80089ca:	f7fe ffd3 	bl	8007974 <qIOUtil_OutputString>
            qDebug( NULL, '\r' );
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	210d      	movs	r1, #13
 80089d2:	2000      	movs	r0, #0
 80089d4:	4798      	blx	r3
            qDebug( NULL, '\n' );
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	210a      	movs	r1, #10
 80089da:	2000      	movs	r0, #0
 80089dc:	4798      	blx	r3
}
 80089de:	e7ef      	b.n	80089c0 <_qtrace_func+0x58>
 80089e0:	20000800 	.word	0x20000800

080089e4 <qTrace_Set_OutputFcn>:

    - fcn : The basic output byte function

*/ 
void qTrace_Set_OutputFcn( qPutChar_t fcn ){
    qDebug = fcn;
 80089e4:	4b01      	ldr	r3, [pc, #4]	; (80089ec <qTrace_Set_OutputFcn+0x8>)
 80089e6:	6018      	str	r0, [r3, #0]
}
 80089e8:	4770      	bx	lr
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	20000800 	.word	0x20000800

080089f0 <AT_Callback_Help>:
/*============================================================================*/
/**
 *@brief Show the available commands
 *@test at+help?
 */
static qATCLI_Response_t AT_Callback_Help( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 80089f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089f2:	0004      	movs	r4, r0
 80089f4:	b093      	sub	sp, #76	; 0x4c
	qATCLI_Command_t *Command;
	char buf[70];
	qATCLI_CmdIterate(&ATCommandParser, qTrue);
 80089f6:	2101      	movs	r1, #1
 80089f8:	4817      	ldr	r0, [pc, #92]	; (8008a58 <AT_Callback_Help+0x68>)
 80089fa:	f7fe fb65 	bl	80070c8 <qATCLI_CmdIterate>
	parser->puts("*****************************************************************\r\n");
 80089fe:	4817      	ldr	r0, [pc, #92]	; (8008a5c <AT_Callback_Help+0x6c>)
 8008a00:	6863      	ldr	r3, [r4, #4]
 8008a02:	4798      	blx	r3
	parser->puts("|                     AT Command Line                           |\r\n");
 8008a04:	4816      	ldr	r0, [pc, #88]	; (8008a60 <AT_Callback_Help+0x70>)
 8008a06:	6863      	ldr	r3, [r4, #4]
 8008a08:	4798      	blx	r3
	parser->puts("-----------------------------------------------------------------\r\n");
 8008a0a:	4e16      	ldr	r6, [pc, #88]	; (8008a64 <AT_Callback_Help+0x74>)
 8008a0c:	6863      	ldr	r3, [r4, #4]
 8008a0e:	0030      	movs	r0, r6
 8008a10:	4798      	blx	r3
	sprintf(buf,"| %-12s | %-46s |\r\n","Command","Function");
 8008a12:	4f15      	ldr	r7, [pc, #84]	; (8008a68 <AT_Callback_Help+0x78>)
 8008a14:	4b15      	ldr	r3, [pc, #84]	; (8008a6c <AT_Callback_Help+0x7c>)
 8008a16:	4a16      	ldr	r2, [pc, #88]	; (8008a70 <AT_Callback_Help+0x80>)
 8008a18:	0039      	movs	r1, r7
 8008a1a:	4668      	mov	r0, sp
 8008a1c:	f002 fe9e 	bl	800b75c <siprintf>
	parser->puts(buf);
 8008a20:	4668      	mov	r0, sp
 8008a22:	6863      	ldr	r3, [r4, #4]
 8008a24:	4798      	blx	r3
	parser->puts("-----------------------------------------------------------------\r\n");
 8008a26:	0030      	movs	r0, r6
	while ( NULL != ( Command = qATCLI_CmdIterate( &ATCommandParser, qFalse ) ) ){
		sprintf(parser->Output,"| %-12s | %-46s |\r\n", Command->Text, (char*)Command->param);
		parser->puts(parser->Output);
 8008a28:	6863      	ldr	r3, [r4, #4]
 8008a2a:	4798      	blx	r3
	while ( NULL != ( Command = qATCLI_CmdIterate( &ATCommandParser, qFalse ) ) ){
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	480a      	ldr	r0, [pc, #40]	; (8008a58 <AT_Callback_Help+0x68>)
 8008a30:	f7fe fb4a 	bl	80070c8 <qATCLI_CmdIterate>
 8008a34:	1e05      	subs	r5, r0, #0
 8008a36:	d107      	bne.n	8008a48 <AT_Callback_Help+0x58>
	}
	parser->puts("-----------------------------------------------------------------\r\n");
 8008a38:	0030      	movs	r0, r6
 8008a3a:	6863      	ldr	r3, [r4, #4]
 8008a3c:	4798      	blx	r3
	parser->Output[0] = '\0' ;
	return QATCLI_OK;
}
 8008a3e:	2001      	movs	r0, #1
	parser->Output[0] = '\0' ;
 8008a40:	68a3      	ldr	r3, [r4, #8]
 8008a42:	701d      	strb	r5, [r3, #0]
}
 8008a44:	b013      	add	sp, #76	; 0x4c
 8008a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(parser->Output,"| %-12s | %-46s |\r\n", Command->Text, (char*)Command->param);
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	686a      	ldr	r2, [r5, #4]
 8008a4c:	0039      	movs	r1, r7
 8008a4e:	68a0      	ldr	r0, [r4, #8]
 8008a50:	f002 fe84 	bl	800b75c <siprintf>
		parser->puts(parser->Output);
 8008a54:	68a0      	ldr	r0, [r4, #8]
 8008a56:	e7e7      	b.n	8008a28 <AT_Callback_Help+0x38>
 8008a58:	20000828 	.word	0x20000828
 8008a5c:	0800c7e1 	.word	0x0800c7e1
 8008a60:	0800c825 	.word	0x0800c825
 8008a64:	0800c869 	.word	0x0800c869
 8008a68:	0800c8be 	.word	0x0800c8be
 8008a6c:	0800c8ad 	.word	0x0800c8ad
 8008a70:	0800c8b6 	.word	0x0800c8b6

08008a74 <AT_Callback_Save>:
 *@test at+save
 * */
static qATCLI_Response_t AT_Callback_Save( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
	qATCLI_Response_t RetValue = QATCLI_ERROR;

	switch( param->Type ){
 8008a74:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_Save( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008a76:	b510      	push	{r4, lr}
	switch( param->Type ){
 8008a78:	8b8b      	ldrh	r3, [r1, #28]
 8008a7a:	0092      	lsls	r2, r2, #2
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d010      	beq.n	8008aa2 <AT_Callback_Save+0x2e>
 8008a80:	2280      	movs	r2, #128	; 0x80
 8008a82:	0112      	lsls	r2, r2, #4
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d111      	bne.n	8008aac <AT_Callback_Save+0x38>
	case QATCLI_CMDTYPE_ACT: /*< AT+cmd */
		qTask_EventFlags_Modify(&TaskApplicationFSM, QEVENTFLAG_01, 0);
 8008a88:	2180      	movs	r1, #128	; 0x80
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	0149      	lsls	r1, r1, #5
 8008a8e:	4808      	ldr	r0, [pc, #32]	; (8008ab0 <AT_Callback_Save+0x3c>)
 8008a90:	f7ff ff61 	bl	8008956 <qTask_EventFlags_Modify>
		BSP_FLASH_WRITE(BSP_FLASH_INIT_ADDR_RESERVED_DATA_CONF, &AppData_Config,sizeof(AppData_Config));
 8008a94:	22a4      	movs	r2, #164	; 0xa4
 8008a96:	4907      	ldr	r1, [pc, #28]	; (8008ab4 <AT_Callback_Save+0x40>)
 8008a98:	4807      	ldr	r0, [pc, #28]	; (8008ab8 <AT_Callback_Save+0x44>)
 8008a9a:	f001 ff3e 	bl	800a91a <WSQ_Flash_Write>

		RetValue = QATCLI_OK;
		break;
	case QATCLI_CMDTYPE_TEST:
		sprintf(parser->Output,"%s",AT_CMD_STR_SAVE);
		RetValue = QATCLI_OK;
 8008a9e:	2001      	movs	r0, #1
		break;
	default : break;
	}
	return RetValue;
}
 8008aa0:	bd10      	pop	{r4, pc}
		sprintf(parser->Output,"%s",AT_CMD_STR_SAVE);
 8008aa2:	4906      	ldr	r1, [pc, #24]	; (8008abc <AT_Callback_Save+0x48>)
 8008aa4:	6880      	ldr	r0, [r0, #8]
 8008aa6:	f002 fe87 	bl	800b7b8 <strcpy>
 8008aaa:	e7f8      	b.n	8008a9e <AT_Callback_Save+0x2a>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8008aac:	4804      	ldr	r0, [pc, #16]	; (8008ac0 <AT_Callback_Save+0x4c>)
 8008aae:	e7f7      	b.n	8008aa0 <AT_Callback_Save+0x2c>
 8008ab0:	20001f74 	.word	0x20001f74
 8008ab4:	20000184 	.word	0x20000184
 8008ab8:	08080000 	.word	0x08080000
 8008abc:	0800d28a 	.word	0x0800d28a
 8008ac0:	ffff8001 	.word	0xffff8001

08008ac4 <AT_Callback_ResetFactory>:
	switch( param->Type ){
 8008ac4:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_ResetFactory( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008ac6:	b510      	push	{r4, lr}
	switch( param->Type ){
 8008ac8:	8b8b      	ldrh	r3, [r1, #28]
 8008aca:	0092      	lsls	r2, r2, #2
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d010      	beq.n	8008af2 <AT_Callback_ResetFactory+0x2e>
 8008ad0:	2280      	movs	r2, #128	; 0x80
 8008ad2:	0112      	lsls	r2, r2, #4
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d111      	bne.n	8008afc <AT_Callback_ResetFactory+0x38>
		BSP_FLASH_RESTORE(BSP_FLASH_INIT_ADDR_RESERVED_DATA_CONF,sizeof(AppData_Config));
 8008ad8:	21a4      	movs	r1, #164	; 0xa4
 8008ada:	4809      	ldr	r0, [pc, #36]	; (8008b00 <AT_Callback_ResetFactory+0x3c>)
 8008adc:	f001 fef3 	bl	800a8c6 <WSQ_RestoreDataFlash>
		CounterKeepAlive = 0;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	4908      	ldr	r1, [pc, #32]	; (8008b04 <AT_Callback_ResetFactory+0x40>)
		BSP_FLASH_WRITE(BSP_FLASH_INIT_ADDR_RESERVED_DATA_CONF + sizeof(AppData_Config) + 4 ,&CounterKeepAlive,1 ); /*APP_POS_FLASH_COUNT_KEEP_ALIVE*/
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	4808      	ldr	r0, [pc, #32]	; (8008b08 <AT_Callback_ResetFactory+0x44>)
		CounterKeepAlive = 0;
 8008ae8:	600b      	str	r3, [r1, #0]
		BSP_FLASH_WRITE(BSP_FLASH_INIT_ADDR_RESERVED_DATA_CONF + sizeof(AppData_Config) + 4 ,&CounterKeepAlive,1 ); /*APP_POS_FLASH_COUNT_KEEP_ALIVE*/
 8008aea:	f001 ff16 	bl	800a91a <WSQ_Flash_Write>
		RetValue = QATCLI_OK;
 8008aee:	2001      	movs	r0, #1
}
 8008af0:	bd10      	pop	{r4, pc}
		sprintf(parser->Output,"%s",AT_CMD_STR_RESETF);
 8008af2:	4906      	ldr	r1, [pc, #24]	; (8008b0c <AT_Callback_ResetFactory+0x48>)
 8008af4:	6880      	ldr	r0, [r0, #8]
 8008af6:	f002 fe5f 	bl	800b7b8 <strcpy>
 8008afa:	e7f8      	b.n	8008aee <AT_Callback_ResetFactory+0x2a>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8008afc:	4804      	ldr	r0, [pc, #16]	; (8008b10 <AT_Callback_ResetFactory+0x4c>)
 8008afe:	e7f7      	b.n	8008af0 <AT_Callback_ResetFactory+0x2c>
 8008b00:	08080000 	.word	0x08080000
 8008b04:	200006ac 	.word	0x200006ac
 8008b08:	080800a8 	.word	0x080800a8
 8008b0c:	0800d280 	.word	0x0800d280
 8008b10:	ffff8001 	.word	0xffff8001

08008b14 <AT_Callback_IdDevice>:
	switch( param->Type ){
 8008b14:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_IdDevice( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008b16:	b510      	push	{r4, lr}
	switch( param->Type ){
 8008b18:	8b8b      	ldrh	r3, [r1, #28]
 8008b1a:	0092      	lsls	r2, r2, #2
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d017      	beq.n	8008b50 <AT_Callback_IdDevice+0x3c>
 8008b20:	2280      	movs	r2, #128	; 0x80
 8008b22:	00d2      	lsls	r2, r2, #3
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d00a      	beq.n	8008b3e <AT_Callback_IdDevice+0x2a>
 8008b28:	2280      	movs	r2, #128	; 0x80
 8008b2a:	0052      	lsls	r2, r2, #1
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d116      	bne.n	8008b5e <AT_Callback_IdDevice+0x4a>
		AppData_Config.idDevice = param->GetArgInt(1) ;
 8008b30:	68cb      	ldr	r3, [r1, #12]
 8008b32:	2001      	movs	r0, #1
 8008b34:	4798      	blx	r3
 8008b36:	4b0b      	ldr	r3, [pc, #44]	; (8008b64 <AT_Callback_IdDevice+0x50>)
 8008b38:	339e      	adds	r3, #158	; 0x9e
 8008b3a:	7018      	strb	r0, [r3, #0]
 8008b3c:	e006      	b.n	8008b4c <AT_Callback_IdDevice+0x38>
		sprintf( parser->Output, "%u", AppData_Config.idDevice);
 8008b3e:	4b09      	ldr	r3, [pc, #36]	; (8008b64 <AT_Callback_IdDevice+0x50>)
 8008b40:	4909      	ldr	r1, [pc, #36]	; (8008b68 <AT_Callback_IdDevice+0x54>)
 8008b42:	339e      	adds	r3, #158	; 0x9e
 8008b44:	781a      	ldrb	r2, [r3, #0]
 8008b46:	6880      	ldr	r0, [r0, #8]
 8008b48:	f002 fe08 	bl	800b75c <siprintf>
		RetValue = QATCLI_OK;
 8008b4c:	2001      	movs	r0, #1
}
 8008b4e:	bd10      	pop	{r4, pc}
		sprintf(parser->Output,"%s%s",AT_CMD_STR_IDEV,"=device\n"
 8008b50:	4b06      	ldr	r3, [pc, #24]	; (8008b6c <AT_Callback_IdDevice+0x58>)
 8008b52:	4a07      	ldr	r2, [pc, #28]	; (8008b70 <AT_Callback_IdDevice+0x5c>)
 8008b54:	4907      	ldr	r1, [pc, #28]	; (8008b74 <AT_Callback_IdDevice+0x60>)
 8008b56:	6880      	ldr	r0, [r0, #8]
 8008b58:	f002 fe00 	bl	800b75c <siprintf>
 8008b5c:	e7f6      	b.n	8008b4c <AT_Callback_IdDevice+0x38>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8008b5e:	4806      	ldr	r0, [pc, #24]	; (8008b78 <AT_Callback_IdDevice+0x64>)
 8008b60:	e7f5      	b.n	8008b4e <AT_Callback_IdDevice+0x3a>
 8008b62:	46c0      	nop			; (mov r8, r8)
 8008b64:	20000184 	.word	0x20000184
 8008b68:	0800c92a 	.word	0x0800c92a
 8008b6c:	0800c92d 	.word	0x0800c92d
 8008b70:	0800c9f1 	.word	0x0800c9f1
 8008b74:	0800d5e7 	.word	0x0800d5e7
 8008b78:	ffff8001 	.word	0xffff8001

08008b7c <AT_Callback_OnlySendLocation>:
	switch( param->Type ){
 8008b7c:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_OnlySendLocation( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008b7e:	b510      	push	{r4, lr}
	switch( param->Type ){
 8008b80:	8b8b      	ldrh	r3, [r1, #28]
 8008b82:	0092      	lsls	r2, r2, #2
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d010      	beq.n	8008baa <AT_Callback_OnlySendLocation+0x2e>
 8008b88:	2280      	movs	r2, #128	; 0x80
		RetValue = QATCLI_NORESPONSE;
 8008b8a:	2000      	movs	r0, #0
	switch( param->Type ){
 8008b8c:	00d2      	lsls	r2, r2, #3
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00a      	beq.n	8008ba8 <AT_Callback_OnlySendLocation+0x2c>
 8008b92:	2280      	movs	r2, #128	; 0x80
 8008b94:	0052      	lsls	r2, r2, #1
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d10e      	bne.n	8008bb8 <AT_Callback_OnlySendLocation+0x3c>
			AppData_Config.onlySendLocation = param->GetArgInt(1) ;
 8008b9a:	68cb      	ldr	r3, [r1, #12]
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	4798      	blx	r3
 8008ba0:	4b06      	ldr	r3, [pc, #24]	; (8008bbc <AT_Callback_OnlySendLocation+0x40>)
 8008ba2:	337d      	adds	r3, #125	; 0x7d
 8008ba4:	7018      	strb	r0, [r3, #0]
		RetValue = QATCLI_OK;
 8008ba6:	2001      	movs	r0, #1
}
 8008ba8:	bd10      	pop	{r4, pc}
		sprintf(parser->Output,"%s%s",AT_CMD_STR_ONLYLOC,"=enable[0-1]");
 8008baa:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <AT_Callback_OnlySendLocation+0x44>)
 8008bac:	4a05      	ldr	r2, [pc, #20]	; (8008bc4 <AT_Callback_OnlySendLocation+0x48>)
 8008bae:	4906      	ldr	r1, [pc, #24]	; (8008bc8 <AT_Callback_OnlySendLocation+0x4c>)
 8008bb0:	6880      	ldr	r0, [r0, #8]
 8008bb2:	f002 fdd3 	bl	800b75c <siprintf>
 8008bb6:	e7f6      	b.n	8008ba6 <AT_Callback_OnlySendLocation+0x2a>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8008bb8:	4804      	ldr	r0, [pc, #16]	; (8008bcc <AT_Callback_OnlySendLocation+0x50>)
 8008bba:	e7f5      	b.n	8008ba8 <AT_Callback_OnlySendLocation+0x2c>
 8008bbc:	20000184 	.word	0x20000184
 8008bc0:	0800c9fa 	.word	0x0800c9fa
 8008bc4:	0800ca07 	.word	0x0800ca07
 8008bc8:	0800d5e7 	.word	0x0800d5e7
 8008bcc:	ffff8001 	.word	0xffff8001

08008bd0 <AT_Callback_RepeatPayload>:
	switch( param->Type ){
 8008bd0:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_RepeatPayload( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008bd2:	b510      	push	{r4, lr}
	switch( param->Type ){
 8008bd4:	8b8b      	ldrh	r3, [r1, #28]
 8008bd6:	0092      	lsls	r2, r2, #2
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d010      	beq.n	8008bfe <AT_Callback_RepeatPayload+0x2e>
 8008bdc:	2280      	movs	r2, #128	; 0x80
		RetValue = QATCLI_NORESPONSE;
 8008bde:	2000      	movs	r0, #0
	switch( param->Type ){
 8008be0:	00d2      	lsls	r2, r2, #3
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d00a      	beq.n	8008bfc <AT_Callback_RepeatPayload+0x2c>
 8008be6:	2280      	movs	r2, #128	; 0x80
 8008be8:	0052      	lsls	r2, r2, #1
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d10e      	bne.n	8008c0c <AT_Callback_RepeatPayload+0x3c>
			AppData_Config.redundanciaIsActive = param->GetArgInt(1) ;
 8008bee:	68cb      	ldr	r3, [r1, #12]
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	4798      	blx	r3
 8008bf4:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <AT_Callback_RepeatPayload+0x40>)
 8008bf6:	3340      	adds	r3, #64	; 0x40
 8008bf8:	7018      	strb	r0, [r3, #0]
		RetValue = QATCLI_OK;
 8008bfa:	2001      	movs	r0, #1
}
 8008bfc:	bd10      	pop	{r4, pc}
		sprintf(parser->Output,"%s%s",AT_CMD_STR_REPEAT,"=enable[0-1]");
 8008bfe:	4b05      	ldr	r3, [pc, #20]	; (8008c14 <AT_Callback_RepeatPayload+0x44>)
 8008c00:	4a05      	ldr	r2, [pc, #20]	; (8008c18 <AT_Callback_RepeatPayload+0x48>)
 8008c02:	4906      	ldr	r1, [pc, #24]	; (8008c1c <AT_Callback_RepeatPayload+0x4c>)
 8008c04:	6880      	ldr	r0, [r0, #8]
 8008c06:	f002 fda9 	bl	800b75c <siprintf>
 8008c0a:	e7f6      	b.n	8008bfa <AT_Callback_RepeatPayload+0x2a>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8008c0c:	4804      	ldr	r0, [pc, #16]	; (8008c20 <AT_Callback_RepeatPayload+0x50>)
 8008c0e:	e7f5      	b.n	8008bfc <AT_Callback_RepeatPayload+0x2c>
 8008c10:	20000184 	.word	0x20000184
 8008c14:	0800c9fa 	.word	0x0800c9fa
 8008c18:	0800d276 	.word	0x0800d276
 8008c1c:	0800d5e7 	.word	0x0800d5e7
 8008c20:	ffff8001 	.word	0xffff8001

08008c24 <AT_Callback_Accelerometer>:
	switch( param->Type ){
 8008c24:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_Accelerometer( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008c26:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch( param->Type ){
 8008c28:	8b8b      	ldrh	r3, [r1, #28]
static qATCLI_Response_t AT_Callback_Accelerometer( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	000d      	movs	r5, r1
	switch( param->Type ){
 8008c2e:	0092      	lsls	r2, r2, #2
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d051      	beq.n	8008cd8 <AT_Callback_Accelerometer+0xb4>
 8008c34:	2280      	movs	r2, #128	; 0x80
		RetValue = QATCLI_NORESPONSE;
 8008c36:	2000      	movs	r0, #0
	switch( param->Type ){
 8008c38:	00d2      	lsls	r2, r2, #3
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d02c      	beq.n	8008c98 <AT_Callback_Accelerometer+0x74>
 8008c3e:	2280      	movs	r2, #128	; 0x80
 8008c40:	0052      	lsls	r2, r2, #1
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d154      	bne.n	8008cf0 <AT_Callback_Accelerometer+0xcc>
		AppData_Config.accelerometer.IsActive = param->GetArgInt(2) ;
 8008c46:	68cb      	ldr	r3, [r1, #12]
 8008c48:	3002      	adds	r0, #2
 8008c4a:	4798      	blx	r3
 8008c4c:	4c29      	ldr	r4, [pc, #164]	; (8008cf4 <AT_Callback_Accelerometer+0xd0>)
 8008c4e:	0023      	movs	r3, r4
 8008c50:	3368      	adds	r3, #104	; 0x68
 8008c52:	7018      	strb	r0, [r3, #0]
		if( (AppData_Config.accelerometer.vibration.IsActive = (param->GetArgInt(1) == 1)) ){  /*vibración*/
 8008c54:	68eb      	ldr	r3, [r5, #12]
 8008c56:	2001      	movs	r0, #1
 8008c58:	4798      	blx	r3
 8008c5a:	1e43      	subs	r3, r0, #1
 8008c5c:	425a      	negs	r2, r3
 8008c5e:	4153      	adcs	r3, r2
 8008c60:	0022      	movs	r2, r4
		AppData_Config.accelerometer.IsActive = param->GetArgInt(2) ;
 8008c62:	0027      	movs	r7, r4
		if( (AppData_Config.accelerometer.vibration.IsActive = (param->GetArgInt(1) == 1)) ){  /*vibración*/
 8008c64:	324a      	adds	r2, #74	; 0x4a
		AppData_Config.accelerometer.IsActive = param->GetArgInt(2) ;
 8008c66:	3708      	adds	r7, #8
		if( (AppData_Config.accelerometer.vibration.IsActive = (param->GetArgInt(1) == 1)) ){  /*vibración*/
 8008c68:	7013      	strb	r3, [r2, #0]
 8008c6a:	2801      	cmp	r0, #1
 8008c6c:	d116      	bne.n	8008c9c <AT_Callback_Accelerometer+0x78>
			AppData_Config.accelerometer.vibration.low = param->GetArgFlt(5);
 8008c6e:	692b      	ldr	r3, [r5, #16]
 8008c70:	2005      	movs	r0, #5
 8008c72:	4798      	blx	r3
 8008c74:	f7f7 fb88 	bl	8000388 <__aeabi_f2uiz>
 8008c78:	1da3      	adds	r3, r4, #6
 8008c7a:	87d8      	strh	r0, [r3, #62]	; 0x3e
			AppData_Config.accelerometer.vibration.med = param->GetArgFlt(4);
 8008c7c:	692b      	ldr	r3, [r5, #16]
 8008c7e:	2004      	movs	r0, #4
 8008c80:	4798      	blx	r3
 8008c82:	f7f7 fb81 	bl	8000388 <__aeabi_f2uiz>
			AppData_Config.accelerometer.vibration.high = param->GetArgFlt(3);
 8008c86:	692b      	ldr	r3, [r5, #16]
			AppData_Config.accelerometer.vibration.med = param->GetArgFlt(4);
 8008c88:	87f8      	strh	r0, [r7, #62]	; 0x3e
			AppData_Config.accelerometer.vibration.high = param->GetArgFlt(3);
 8008c8a:	2003      	movs	r0, #3
 8008c8c:	4798      	blx	r3
 8008c8e:	f7f7 fb7b 	bl	8000388 <__aeabi_f2uiz>
 8008c92:	3448      	adds	r4, #72	; 0x48
 8008c94:	8020      	strh	r0, [r4, #0]
		RetValue = QATCLI_OK;
 8008c96:	2001      	movs	r0, #1
}
 8008c98:	b005      	add	sp, #20
 8008c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if( (AppData_Config.accelerometer.inclination.IsActive = (param->GetArgInt(1) == 2) ) ){ /*inclinación*/
 8008c9c:	68eb      	ldr	r3, [r5, #12]
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	4798      	blx	r3
 8008ca2:	1e83      	subs	r3, r0, #2
 8008ca4:	4259      	negs	r1, r3
 8008ca6:	414b      	adcs	r3, r1
 8008ca8:	0021      	movs	r1, r4
 8008caa:	3164      	adds	r1, #100	; 0x64
 8008cac:	0002      	movs	r2, r0
 8008cae:	700b      	strb	r3, [r1, #0]
 8008cb0:	2001      	movs	r0, #1
 8008cb2:	2a02      	cmp	r2, #2
 8008cb4:	d1f0      	bne.n	8008c98 <AT_Callback_Accelerometer+0x74>
			AppData_Config.accelerometer.inclination.x.ThresholdHigh = param->GetArgFlt(3);
 8008cb6:	692b      	ldr	r3, [r5, #16]
 8008cb8:	3002      	adds	r0, #2
 8008cba:	4798      	blx	r3
			AppData_Config.accelerometer.inclination.x.ThresholdLow = param->GetArgFlt(4);
 8008cbc:	692b      	ldr	r3, [r5, #16]
			AppData_Config.accelerometer.inclination.x.ThresholdHigh = param->GetArgFlt(3);
 8008cbe:	64e0      	str	r0, [r4, #76]	; 0x4c
			AppData_Config.accelerometer.inclination.x.ThresholdLow = param->GetArgFlt(4);
 8008cc0:	2004      	movs	r0, #4
 8008cc2:	4798      	blx	r3
			AppData_Config.accelerometer.inclination.y.ThresholdHigh = param->GetArgFlt(5);
 8008cc4:	692b      	ldr	r3, [r5, #16]
			AppData_Config.accelerometer.inclination.x.ThresholdLow = param->GetArgFlt(4);
 8008cc6:	6520      	str	r0, [r4, #80]	; 0x50
			AppData_Config.accelerometer.inclination.y.ThresholdHigh = param->GetArgFlt(5);
 8008cc8:	2005      	movs	r0, #5
 8008cca:	4798      	blx	r3
			AppData_Config.accelerometer.inclination.y.ThresholdLow = param->GetArgFlt(6);
 8008ccc:	692b      	ldr	r3, [r5, #16]
			AppData_Config.accelerometer.inclination.y.ThresholdHigh = param->GetArgFlt(5);
 8008cce:	65a0      	str	r0, [r4, #88]	; 0x58
			AppData_Config.accelerometer.inclination.y.ThresholdLow = param->GetArgFlt(6);
 8008cd0:	2006      	movs	r0, #6
 8008cd2:	4798      	blx	r3
 8008cd4:	65e0      	str	r0, [r4, #92]	; 0x5c
 8008cd6:	e7de      	b.n	8008c96 <AT_Callback_Accelerometer+0x72>
		sprintf(parser->Output,"%s%s%s%s%s",AT_CMD_STR_AXL,"=mode,enable,high,med,low\n",AT_CMD_STR_AXL,"=enable,mode,xthresholdhigh,xthresholdlow,ythresholdhigh,ythresholdlow","mode[1-2] 1-> vibration , 2-> inclination \n xthreshold[0-360]  , ythreshold [0-360]");
 8008cd8:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <AT_Callback_Accelerometer+0xd4>)
 8008cda:	4a08      	ldr	r2, [pc, #32]	; (8008cfc <AT_Callback_Accelerometer+0xd8>)
 8008cdc:	9302      	str	r3, [sp, #8]
 8008cde:	4b08      	ldr	r3, [pc, #32]	; (8008d00 <AT_Callback_Accelerometer+0xdc>)
 8008ce0:	9200      	str	r2, [sp, #0]
 8008ce2:	9301      	str	r3, [sp, #4]
 8008ce4:	4907      	ldr	r1, [pc, #28]	; (8008d04 <AT_Callback_Accelerometer+0xe0>)
 8008ce6:	4b08      	ldr	r3, [pc, #32]	; (8008d08 <AT_Callback_Accelerometer+0xe4>)
 8008ce8:	6880      	ldr	r0, [r0, #8]
 8008cea:	f002 fd37 	bl	800b75c <siprintf>
 8008cee:	e7d2      	b.n	8008c96 <AT_Callback_Accelerometer+0x72>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8008cf0:	4806      	ldr	r0, [pc, #24]	; (8008d0c <AT_Callback_Accelerometer+0xe8>)
 8008cf2:	e7d1      	b.n	8008c98 <AT_Callback_Accelerometer+0x74>
 8008cf4:	20000184 	.word	0x20000184
 8008cf8:	0800c611 	.word	0x0800c611
 8008cfc:	0800c60a 	.word	0x0800c60a
 8008d00:	0800c665 	.word	0x0800c665
 8008d04:	0800d5e1 	.word	0x0800d5e1
 8008d08:	0800c5ef 	.word	0x0800c5ef
 8008d0c:	ffff8001 	.word	0xffff8001

08008d10 <AT_Callback_Rcz>:
	switch( param->Type ){
 8008d10:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_Rcz( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008d12:	b510      	push	{r4, lr}
	switch( param->Type ){
 8008d14:	8b8b      	ldrh	r3, [r1, #28]
 8008d16:	0092      	lsls	r2, r2, #2
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00f      	beq.n	8008d3c <AT_Callback_Rcz+0x2c>
 8008d1c:	2280      	movs	r2, #128	; 0x80
		RetValue = QATCLI_NORESPONSE;
 8008d1e:	2000      	movs	r0, #0
	switch( param->Type ){
 8008d20:	00d2      	lsls	r2, r2, #3
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d009      	beq.n	8008d3a <AT_Callback_Rcz+0x2a>
 8008d26:	2280      	movs	r2, #128	; 0x80
 8008d28:	0052      	lsls	r2, r2, #1
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d10d      	bne.n	8008d4a <AT_Callback_Rcz+0x3a>
			AppData_Config.RCZ = param->GetArgInt(1) ;
 8008d2e:	68cb      	ldr	r3, [r1, #12]
 8008d30:	3001      	adds	r0, #1
 8008d32:	4798      	blx	r3
 8008d34:	4b06      	ldr	r3, [pc, #24]	; (8008d50 <AT_Callback_Rcz+0x40>)
 8008d36:	6758      	str	r0, [r3, #116]	; 0x74
		RetValue = QATCLI_OK;
 8008d38:	2001      	movs	r0, #1
}
 8008d3a:	bd10      	pop	{r4, pc}
		sprintf(parser->Output,"%s%s",AT_CMD_STR_RCZ,"=zone[0-6]");
 8008d3c:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <AT_Callback_Rcz+0x44>)
 8008d3e:	4a06      	ldr	r2, [pc, #24]	; (8008d58 <AT_Callback_Rcz+0x48>)
 8008d40:	4906      	ldr	r1, [pc, #24]	; (8008d5c <AT_Callback_Rcz+0x4c>)
 8008d42:	6880      	ldr	r0, [r0, #8]
 8008d44:	f002 fd0a 	bl	800b75c <siprintf>
 8008d48:	e7f6      	b.n	8008d38 <AT_Callback_Rcz+0x28>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8008d4a:	4805      	ldr	r0, [pc, #20]	; (8008d60 <AT_Callback_Rcz+0x50>)
 8008d4c:	e7f5      	b.n	8008d3a <AT_Callback_Rcz+0x2a>
 8008d4e:	46c0      	nop			; (mov r8, r8)
 8008d50:	20000184 	.word	0x20000184
 8008d54:	0800cb06 	.word	0x0800cb06
 8008d58:	0800cb11 	.word	0x0800cb11
 8008d5c:	0800d5e7 	.word	0x0800d5e7
 8008d60:	ffff8001 	.word	0xffff8001

08008d64 <AT_Callback_Pulsation>:
	switch( param->Type ){
 8008d64:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_Pulsation( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008d66:	b570      	push	{r4, r5, r6, lr}
	switch( param->Type ){
 8008d68:	8b8b      	ldrh	r3, [r1, #28]
static qATCLI_Response_t AT_Callback_Pulsation( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008d6a:	000d      	movs	r5, r1
	switch( param->Type ){
 8008d6c:	0092      	lsls	r2, r2, #2
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d028      	beq.n	8008dc4 <AT_Callback_Pulsation+0x60>
 8008d72:	2280      	movs	r2, #128	; 0x80
		RetValue = QATCLI_NORESPONSE;
 8008d74:	2000      	movs	r0, #0
	switch( param->Type ){
 8008d76:	00d2      	lsls	r2, r2, #3
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d022      	beq.n	8008dc2 <AT_Callback_Pulsation+0x5e>
 8008d7c:	2280      	movs	r2, #128	; 0x80
 8008d7e:	0052      	lsls	r2, r2, #1
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d126      	bne.n	8008dd2 <AT_Callback_Pulsation+0x6e>
			AppData_Config.NumPulsation = param->GetArgInt(1) ;
 8008d84:	68cb      	ldr	r3, [r1, #12]
 8008d86:	3001      	adds	r0, #1
 8008d88:	4798      	blx	r3
 8008d8a:	4c13      	ldr	r4, [pc, #76]	; (8008dd8 <AT_Callback_Pulsation+0x74>)
 8008d8c:	0023      	movs	r3, r4
 8008d8e:	337c      	adds	r3, #124	; 0x7c
 8008d90:	7018      	strb	r0, [r3, #0]
			AppData_Config.Pulsation_1.rgb = param->GetArgInt(2) ;
 8008d92:	68eb      	ldr	r3, [r5, #12]
 8008d94:	2002      	movs	r0, #2
 8008d96:	4798      	blx	r3
 8008d98:	0023      	movs	r3, r4
 8008d9a:	3378      	adds	r3, #120	; 0x78
 8008d9c:	7018      	strb	r0, [r3, #0]
			AppData_Config.Pulsation_2.rgb = param->GetArgInt(3) ;
 8008d9e:	68eb      	ldr	r3, [r5, #12]
 8008da0:	2003      	movs	r0, #3
 8008da2:	4798      	blx	r3
 8008da4:	0023      	movs	r3, r4
 8008da6:	3379      	adds	r3, #121	; 0x79
 8008da8:	7018      	strb	r0, [r3, #0]
			AppData_Config.Pulsation_3.rgb = param->GetArgInt(4) ;
 8008daa:	68eb      	ldr	r3, [r5, #12]
 8008dac:	2004      	movs	r0, #4
 8008dae:	4798      	blx	r3
 8008db0:	0023      	movs	r3, r4
 8008db2:	337a      	adds	r3, #122	; 0x7a
 8008db4:	7018      	strb	r0, [r3, #0]
			AppData_Config.Pulsation_Cancel.rgb = param->GetArgInt(5) ;
 8008db6:	68eb      	ldr	r3, [r5, #12]
 8008db8:	2005      	movs	r0, #5
 8008dba:	4798      	blx	r3
 8008dbc:	347b      	adds	r4, #123	; 0x7b
 8008dbe:	7020      	strb	r0, [r4, #0]
		RetValue = QATCLI_OK;
 8008dc0:	2001      	movs	r0, #1
}
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(parser->Output,"%s%s",AT_CMD_STR_PULSED,"=num event[0-3],Color Ev1,Color Ev2,Color Ev3,Color Cancel\n"
 8008dc4:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <AT_Callback_Pulsation+0x78>)
 8008dc6:	4a06      	ldr	r2, [pc, #24]	; (8008de0 <AT_Callback_Pulsation+0x7c>)
 8008dc8:	4906      	ldr	r1, [pc, #24]	; (8008de4 <AT_Callback_Pulsation+0x80>)
 8008dca:	6880      	ldr	r0, [r0, #8]
 8008dcc:	f002 fcc6 	bl	800b75c <siprintf>
 8008dd0:	e7f6      	b.n	8008dc0 <AT_Callback_Pulsation+0x5c>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8008dd2:	4805      	ldr	r0, [pc, #20]	; (8008de8 <AT_Callback_Pulsation+0x84>)
 8008dd4:	e7f5      	b.n	8008dc2 <AT_Callback_Pulsation+0x5e>
 8008dd6:	46c0      	nop			; (mov r8, r8)
 8008dd8:	20000184 	.word	0x20000184
 8008ddc:	0800ca21 	.word	0x0800ca21
 8008de0:	0800cafc 	.word	0x0800cafc
 8008de4:	0800d5e7 	.word	0x0800d5e7
 8008de8:	ffff8001 	.word	0xffff8001

08008dec <AT_Callback_Downlink>:
	switch( param->Type ){
 8008dec:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_Downlink( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008dee:	b510      	push	{r4, lr}
	switch( param->Type ){
 8008df0:	8b8b      	ldrh	r3, [r1, #28]
 8008df2:	0092      	lsls	r2, r2, #2
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d010      	beq.n	8008e1a <AT_Callback_Downlink+0x2e>
 8008df8:	2280      	movs	r2, #128	; 0x80
		RetValue = QATCLI_NORESPONSE;
 8008dfa:	2000      	movs	r0, #0
	switch( param->Type ){
 8008dfc:	00d2      	lsls	r2, r2, #3
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d00a      	beq.n	8008e18 <AT_Callback_Downlink+0x2c>
 8008e02:	2280      	movs	r2, #128	; 0x80
 8008e04:	0052      	lsls	r2, r2, #1
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d10e      	bne.n	8008e28 <AT_Callback_Downlink+0x3c>
			AppData_Config.downlinkIsActive = param->GetArgInt(1) ;
 8008e0a:	68cb      	ldr	r3, [r1, #12]
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	4798      	blx	r3
 8008e10:	4b06      	ldr	r3, [pc, #24]	; (8008e2c <AT_Callback_Downlink+0x40>)
 8008e12:	3341      	adds	r3, #65	; 0x41
 8008e14:	7018      	strb	r0, [r3, #0]
		RetValue = QATCLI_OK;
 8008e16:	2001      	movs	r0, #1
}
 8008e18:	bd10      	pop	{r4, pc}
		sprintf(parser->Output,"%s%s",AT_CMD_STR_DL,"=enable[0-1]");
 8008e1a:	4b05      	ldr	r3, [pc, #20]	; (8008e30 <AT_Callback_Downlink+0x44>)
 8008e1c:	4a05      	ldr	r2, [pc, #20]	; (8008e34 <AT_Callback_Downlink+0x48>)
 8008e1e:	4906      	ldr	r1, [pc, #24]	; (8008e38 <AT_Callback_Downlink+0x4c>)
 8008e20:	6880      	ldr	r0, [r0, #8]
 8008e22:	f002 fc9b 	bl	800b75c <siprintf>
 8008e26:	e7f6      	b.n	8008e16 <AT_Callback_Downlink+0x2a>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8008e28:	4804      	ldr	r0, [pc, #16]	; (8008e3c <AT_Callback_Downlink+0x50>)
 8008e2a:	e7f5      	b.n	8008e18 <AT_Callback_Downlink+0x2c>
 8008e2c:	20000184 	.word	0x20000184
 8008e30:	0800c9fa 	.word	0x0800c9fa
 8008e34:	0800c7d4 	.word	0x0800c7d4
 8008e38:	0800d5e7 	.word	0x0800d5e7
 8008e3c:	ffff8001 	.word	0xffff8001

08008e40 <AT_Callback_AlwaysReport>:
	switch( param->Type ){
 8008e40:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_AlwaysReport( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008e42:	b510      	push	{r4, lr}
	switch( param->Type ){
 8008e44:	8b8b      	ldrh	r3, [r1, #28]
 8008e46:	0092      	lsls	r2, r2, #2
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d010      	beq.n	8008e6e <AT_Callback_AlwaysReport+0x2e>
 8008e4c:	2280      	movs	r2, #128	; 0x80
		RetValue = QATCLI_NORESPONSE;
 8008e4e:	2000      	movs	r0, #0
	switch( param->Type ){
 8008e50:	00d2      	lsls	r2, r2, #3
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d00a      	beq.n	8008e6c <AT_Callback_AlwaysReport+0x2c>
 8008e56:	2280      	movs	r2, #128	; 0x80
 8008e58:	0052      	lsls	r2, r2, #1
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d10e      	bne.n	8008e7c <AT_Callback_AlwaysReport+0x3c>
			AppData_Config.alwaysSendReportIsActive = param->GetArgInt(1) ;
 8008e5e:	68cb      	ldr	r3, [r1, #12]
 8008e60:	3001      	adds	r0, #1
 8008e62:	4798      	blx	r3
 8008e64:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <AT_Callback_AlwaysReport+0x40>)
 8008e66:	333f      	adds	r3, #63	; 0x3f
 8008e68:	7018      	strb	r0, [r3, #0]
		RetValue = QATCLI_OK;
 8008e6a:	2001      	movs	r0, #1
}
 8008e6c:	bd10      	pop	{r4, pc}
		sprintf(parser->Output,"%s%s",AT_CMD_STR_ALWAYS,"=enable[0-1]");
 8008e6e:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <AT_Callback_AlwaysReport+0x44>)
 8008e70:	4a05      	ldr	r2, [pc, #20]	; (8008e88 <AT_Callback_AlwaysReport+0x48>)
 8008e72:	4906      	ldr	r1, [pc, #24]	; (8008e8c <AT_Callback_AlwaysReport+0x4c>)
 8008e74:	6880      	ldr	r0, [r0, #8]
 8008e76:	f002 fc71 	bl	800b75c <siprintf>
 8008e7a:	e7f6      	b.n	8008e6a <AT_Callback_AlwaysReport+0x2a>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8008e7c:	4804      	ldr	r0, [pc, #16]	; (8008e90 <AT_Callback_AlwaysReport+0x50>)
 8008e7e:	e7f5      	b.n	8008e6c <AT_Callback_AlwaysReport+0x2c>
 8008e80:	20000184 	.word	0x20000184
 8008e84:	0800c9fa 	.word	0x0800c9fa
 8008e88:	0800c712 	.word	0x0800c712
 8008e8c:	0800d5e7 	.word	0x0800d5e7
 8008e90:	ffff8001 	.word	0xffff8001

08008e94 <AT_Callback_WiFi>:
	switch( param->Type ){
 8008e94:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_WiFi( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008e96:	b510      	push	{r4, lr}
	switch( param->Type ){
 8008e98:	8b8b      	ldrh	r3, [r1, #28]
 8008e9a:	0092      	lsls	r2, r2, #2
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d010      	beq.n	8008ec2 <AT_Callback_WiFi+0x2e>
 8008ea0:	2280      	movs	r2, #128	; 0x80
		RetValue = QATCLI_NORESPONSE;
 8008ea2:	2000      	movs	r0, #0
	switch( param->Type ){
 8008ea4:	00d2      	lsls	r2, r2, #3
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d00a      	beq.n	8008ec0 <AT_Callback_WiFi+0x2c>
 8008eaa:	2280      	movs	r2, #128	; 0x80
 8008eac:	0052      	lsls	r2, r2, #1
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d10e      	bne.n	8008ed0 <AT_Callback_WiFi+0x3c>
			AppData_Config.WIFI_LocIsActive = param->GetArgInt(1) ;
 8008eb2:	68cb      	ldr	r3, [r1, #12]
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	4798      	blx	r3
 8008eb8:	4b06      	ldr	r3, [pc, #24]	; (8008ed4 <AT_Callback_WiFi+0x40>)
 8008eba:	333e      	adds	r3, #62	; 0x3e
 8008ebc:	7018      	strb	r0, [r3, #0]
		RetValue = QATCLI_OK;
 8008ebe:	2001      	movs	r0, #1
}
 8008ec0:	bd10      	pop	{r4, pc}
		sprintf(parser->Output,"%s%s",AT_CMD_STR_WIFI,"=enable[0-1]");
 8008ec2:	4b05      	ldr	r3, [pc, #20]	; (8008ed8 <AT_Callback_WiFi+0x44>)
 8008ec4:	4a05      	ldr	r2, [pc, #20]	; (8008edc <AT_Callback_WiFi+0x48>)
 8008ec6:	4906      	ldr	r1, [pc, #24]	; (8008ee0 <AT_Callback_WiFi+0x4c>)
 8008ec8:	6880      	ldr	r0, [r0, #8]
 8008eca:	f002 fc47 	bl	800b75c <siprintf>
 8008ece:	e7f6      	b.n	8008ebe <AT_Callback_WiFi+0x2a>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8008ed0:	4804      	ldr	r0, [pc, #16]	; (8008ee4 <AT_Callback_WiFi+0x50>)
 8008ed2:	e7f5      	b.n	8008ec0 <AT_Callback_WiFi+0x2c>
 8008ed4:	20000184 	.word	0x20000184
 8008ed8:	0800c9fa 	.word	0x0800c9fa
 8008edc:	0800d2f1 	.word	0x0800d2f1
 8008ee0:	0800d5e7 	.word	0x0800d5e7
 8008ee4:	ffff8001 	.word	0xffff8001

08008ee8 <AT_Callback_Gps>:
	switch( param->Type ){
 8008ee8:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_Gps( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008eea:	b510      	push	{r4, lr}
	switch( param->Type ){
 8008eec:	8b8b      	ldrh	r3, [r1, #28]
 8008eee:	0092      	lsls	r2, r2, #2
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d010      	beq.n	8008f16 <AT_Callback_Gps+0x2e>
 8008ef4:	2280      	movs	r2, #128	; 0x80
		RetValue = QATCLI_NORESPONSE;
 8008ef6:	2000      	movs	r0, #0
	switch( param->Type ){
 8008ef8:	00d2      	lsls	r2, r2, #3
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00a      	beq.n	8008f14 <AT_Callback_Gps+0x2c>
 8008efe:	2280      	movs	r2, #128	; 0x80
 8008f00:	0052      	lsls	r2, r2, #1
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d10e      	bne.n	8008f24 <AT_Callback_Gps+0x3c>
			AppData_Config.GPS_LocIsActive = param->GetArgInt(1) ;
 8008f06:	68cb      	ldr	r3, [r1, #12]
 8008f08:	3001      	adds	r0, #1
 8008f0a:	4798      	blx	r3
 8008f0c:	4b06      	ldr	r3, [pc, #24]	; (8008f28 <AT_Callback_Gps+0x40>)
 8008f0e:	333d      	adds	r3, #61	; 0x3d
 8008f10:	7018      	strb	r0, [r3, #0]
		RetValue = QATCLI_OK;
 8008f12:	2001      	movs	r0, #1
}
 8008f14:	bd10      	pop	{r4, pc}
		sprintf(parser->Output,"%s%s",AT_CMD_STR_GPS,"=enable[0-1]");
 8008f16:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <AT_Callback_Gps+0x44>)
 8008f18:	4a05      	ldr	r2, [pc, #20]	; (8008f30 <AT_Callback_Gps+0x48>)
 8008f1a:	4906      	ldr	r1, [pc, #24]	; (8008f34 <AT_Callback_Gps+0x4c>)
 8008f1c:	6880      	ldr	r0, [r0, #8]
 8008f1e:	f002 fc1d 	bl	800b75c <siprintf>
 8008f22:	e7f6      	b.n	8008f12 <AT_Callback_Gps+0x2a>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8008f24:	4804      	ldr	r0, [pc, #16]	; (8008f38 <AT_Callback_Gps+0x50>)
 8008f26:	e7f5      	b.n	8008f14 <AT_Callback_Gps+0x2c>
 8008f28:	20000184 	.word	0x20000184
 8008f2c:	0800c9fa 	.word	0x0800c9fa
 8008f30:	0800c7da 	.word	0x0800c7da
 8008f34:	0800d5e7 	.word	0x0800d5e7
 8008f38:	ffff8001 	.word	0xffff8001

08008f3c <AT_Callback_AirQ>:
	switch( param->Type ){
 8008f3c:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_AirQ( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008f3e:	b570      	push	{r4, r5, r6, lr}
	switch( param->Type ){
 8008f40:	8b8b      	ldrh	r3, [r1, #28]
static qATCLI_Response_t AT_Callback_AirQ( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008f42:	000c      	movs	r4, r1
	switch( param->Type ){
 8008f44:	0092      	lsls	r2, r2, #2
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d019      	beq.n	8008f7e <AT_Callback_AirQ+0x42>
 8008f4a:	2280      	movs	r2, #128	; 0x80
		RetValue = QATCLI_NORESPONSE;
 8008f4c:	2000      	movs	r0, #0
	switch( param->Type ){
 8008f4e:	00d2      	lsls	r2, r2, #3
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d013      	beq.n	8008f7c <AT_Callback_AirQ+0x40>
 8008f54:	2280      	movs	r2, #128	; 0x80
 8008f56:	0052      	lsls	r2, r2, #1
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d117      	bne.n	8008f8c <AT_Callback_AirQ+0x50>
			AppData_Config.airquality.IsActive = param->GetArgInt(1) ;
 8008f5c:	68cb      	ldr	r3, [r1, #12]
 8008f5e:	3001      	adds	r0, #1
 8008f60:	4798      	blx	r3
 8008f62:	4d0b      	ldr	r5, [pc, #44]	; (8008f90 <AT_Callback_AirQ+0x54>)
 8008f64:	002b      	movs	r3, r5
 8008f66:	3338      	adds	r3, #56	; 0x38
 8008f68:	7018      	strb	r0, [r3, #0]
			AppData_Config.airquality.ThresholdHigh  = param->GetArgFlt(2) ;
 8008f6a:	6923      	ldr	r3, [r4, #16]
 8008f6c:	2002      	movs	r0, #2
 8008f6e:	4798      	blx	r3
			AppData_Config.airquality.ThresholdLow = param->GetArgFlt(3) ;
 8008f70:	6923      	ldr	r3, [r4, #16]
			AppData_Config.airquality.ThresholdHigh  = param->GetArgFlt(2) ;
 8008f72:	6328      	str	r0, [r5, #48]	; 0x30
			AppData_Config.airquality.ThresholdLow = param->GetArgFlt(3) ;
 8008f74:	2003      	movs	r0, #3
 8008f76:	4798      	blx	r3
 8008f78:	6368      	str	r0, [r5, #52]	; 0x34
		RetValue = QATCLI_OK;
 8008f7a:	2001      	movs	r0, #1
}
 8008f7c:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(parser->Output,"%s%s",AT_CMD_STR_AIRQ,"=enable[0-1],max[0-4095],min[0-4095]");
 8008f7e:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <AT_Callback_AirQ+0x58>)
 8008f80:	4a05      	ldr	r2, [pc, #20]	; (8008f98 <AT_Callback_AirQ+0x5c>)
 8008f82:	4906      	ldr	r1, [pc, #24]	; (8008f9c <AT_Callback_AirQ+0x60>)
 8008f84:	6880      	ldr	r0, [r0, #8]
 8008f86:	f002 fbe9 	bl	800b75c <siprintf>
 8008f8a:	e7f6      	b.n	8008f7a <AT_Callback_AirQ+0x3e>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8008f8c:	4804      	ldr	r0, [pc, #16]	; (8008fa0 <AT_Callback_AirQ+0x64>)
 8008f8e:	e7f5      	b.n	8008f7c <AT_Callback_AirQ+0x40>
 8008f90:	20000184 	.word	0x20000184
 8008f94:	0800c6e5 	.word	0x0800c6e5
 8008f98:	0800c70a 	.word	0x0800c70a
 8008f9c:	0800d5e7 	.word	0x0800d5e7
 8008fa0:	ffff8001 	.word	0xffff8001

08008fa4 <AT_Callback_Hum_Temp>:
	switch( param->Type ){
 8008fa4:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_Hum_Temp( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008fa6:	b570      	push	{r4, r5, r6, lr}
	switch( param->Type ){
 8008fa8:	8b8b      	ldrh	r3, [r1, #28]
static qATCLI_Response_t AT_Callback_Hum_Temp( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8008faa:	000d      	movs	r5, r1
	switch( param->Type ){
 8008fac:	0092      	lsls	r2, r2, #2
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d031      	beq.n	8009016 <AT_Callback_Hum_Temp+0x72>
 8008fb2:	2280      	movs	r2, #128	; 0x80
		RetValue = QATCLI_NORESPONSE;
 8008fb4:	2000      	movs	r0, #0
	switch( param->Type ){
 8008fb6:	00d2      	lsls	r2, r2, #3
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d01b      	beq.n	8008ff4 <AT_Callback_Hum_Temp+0x50>
 8008fbc:	2280      	movs	r2, #128	; 0x80
 8008fbe:	0052      	lsls	r2, r2, #1
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d12f      	bne.n	8009024 <AT_Callback_Hum_Temp+0x80>
		AppData_Config.humidity.IsActive = AppData_Config.temperature.IsActive = param->GetArgInt(2);
 8008fc4:	68cb      	ldr	r3, [r1, #12]
 8008fc6:	3002      	adds	r0, #2
 8008fc8:	4798      	blx	r3
 8008fca:	4e17      	ldr	r6, [pc, #92]	; (8009028 <AT_Callback_Hum_Temp+0x84>)
 8008fcc:	b2c0      	uxtb	r0, r0
 8008fce:	1c73      	adds	r3, r6, #1
 8008fd0:	77d8      	strb	r0, [r3, #31]
 8008fd2:	0033      	movs	r3, r6
 8008fd4:	332c      	adds	r3, #44	; 0x2c
 8008fd6:	7018      	strb	r0, [r3, #0]
		if(param->GetArgInt(1) == 1){  /*Humidity*/
 8008fd8:	68eb      	ldr	r3, [r5, #12]
 8008fda:	2001      	movs	r0, #1
 8008fdc:	4798      	blx	r3
 8008fde:	2801      	cmp	r0, #1
 8008fe0:	d109      	bne.n	8008ff6 <AT_Callback_Hum_Temp+0x52>
			AppData_Config.humidity.ThresholdHigh  = param->GetArgFlt(3) ;
 8008fe2:	692b      	ldr	r3, [r5, #16]
 8008fe4:	2003      	movs	r0, #3
 8008fe6:	4798      	blx	r3
			AppData_Config.humidity.ThresholdLow = param->GetArgFlt(4) ;
 8008fe8:	692b      	ldr	r3, [r5, #16]
			AppData_Config.humidity.ThresholdHigh  = param->GetArgFlt(3) ;
 8008fea:	6270      	str	r0, [r6, #36]	; 0x24
			AppData_Config.humidity.ThresholdLow = param->GetArgFlt(4) ;
 8008fec:	2004      	movs	r0, #4
 8008fee:	4798      	blx	r3
 8008ff0:	62b0      	str	r0, [r6, #40]	; 0x28
		RetValue = QATCLI_OK;
 8008ff2:	2001      	movs	r0, #1
}
 8008ff4:	bd70      	pop	{r4, r5, r6, pc}
		}else if(param->GetArgInt(1) == 2){ /*temperature*/
 8008ff6:	68eb      	ldr	r3, [r5, #12]
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	4798      	blx	r3
 8008ffc:	0003      	movs	r3, r0
 8008ffe:	2001      	movs	r0, #1
 8009000:	2b02      	cmp	r3, #2
 8009002:	d1f7      	bne.n	8008ff4 <AT_Callback_Hum_Temp+0x50>
			AppData_Config.temperature.ThresholdHigh  = param->GetArgFlt(3) ;
 8009004:	692b      	ldr	r3, [r5, #16]
 8009006:	3002      	adds	r0, #2
 8009008:	4798      	blx	r3
			AppData_Config.temperature.ThresholdLow = param->GetArgFlt(4) ;
 800900a:	692b      	ldr	r3, [r5, #16]
			AppData_Config.temperature.ThresholdHigh  = param->GetArgFlt(3) ;
 800900c:	61b0      	str	r0, [r6, #24]
			AppData_Config.temperature.ThresholdLow = param->GetArgFlt(4) ;
 800900e:	2004      	movs	r0, #4
 8009010:	4798      	blx	r3
 8009012:	61f0      	str	r0, [r6, #28]
 8009014:	e7ed      	b.n	8008ff2 <AT_Callback_Hum_Temp+0x4e>
		sprintf(parser->Output,"%s%s",AT_CMD_STR_HT,"=channel[1->HR - 2->T],enable[0-1],max,min [HR: 10 - 90 T:-40 - 90]");
 8009016:	4b05      	ldr	r3, [pc, #20]	; (800902c <AT_Callback_Hum_Temp+0x88>)
 8009018:	4a05      	ldr	r2, [pc, #20]	; (8009030 <AT_Callback_Hum_Temp+0x8c>)
 800901a:	4906      	ldr	r1, [pc, #24]	; (8009034 <AT_Callback_Hum_Temp+0x90>)
 800901c:	6880      	ldr	r0, [r0, #8]
 800901e:	f002 fb9d 	bl	800b75c <siprintf>
 8009022:	e7e6      	b.n	8008ff2 <AT_Callback_Hum_Temp+0x4e>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8009024:	4804      	ldr	r0, [pc, #16]	; (8009038 <AT_Callback_Hum_Temp+0x94>)
 8009026:	e7e5      	b.n	8008ff4 <AT_Callback_Hum_Temp+0x50>
 8009028:	20000184 	.word	0x20000184
 800902c:	0800c8d2 	.word	0x0800c8d2
 8009030:	0800c916 	.word	0x0800c916
 8009034:	0800d5e7 	.word	0x0800d5e7
 8009038:	ffff8001 	.word	0xffff8001

0800903c <AT_Callback_Di>:
	switch( param->Type ){
 800903c:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_Di( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 800903e:	b570      	push	{r4, r5, r6, lr}
	switch( param->Type ){
 8009040:	8b8b      	ldrh	r3, [r1, #28]
static qATCLI_Response_t AT_Callback_Di( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8009042:	000c      	movs	r4, r1
	switch( param->Type ){
 8009044:	0092      	lsls	r2, r2, #2
 8009046:	4293      	cmp	r3, r2
 8009048:	d01b      	beq.n	8009082 <AT_Callback_Di+0x46>
 800904a:	2280      	movs	r2, #128	; 0x80
				RetValue = QATCLI_NORESPONSE;
 800904c:	2000      	movs	r0, #0
	switch( param->Type ){
 800904e:	00d2      	lsls	r2, r2, #3
 8009050:	4293      	cmp	r3, r2
 8009052:	d01d      	beq.n	8009090 <AT_Callback_Di+0x54>
 8009054:	2280      	movs	r2, #128	; 0x80
 8009056:	0052      	lsls	r2, r2, #1
 8009058:	4293      	cmp	r3, r2
 800905a:	d12d      	bne.n	80090b8 <AT_Callback_Di+0x7c>
		if(param->GetArgInt(1) == 1){
 800905c:	68cb      	ldr	r3, [r1, #12]
 800905e:	2001      	movs	r0, #1
 8009060:	4798      	blx	r3
 8009062:	68e3      	ldr	r3, [r4, #12]
 8009064:	2801      	cmp	r0, #1
 8009066:	d114      	bne.n	8009092 <AT_Callback_Di+0x56>
				AppData_Config.DI_1  =  (AppDataCfg_DiMode_t)(param->GetArgInt(2) > 3 ? 0 :param->GetArgInt(2));
 8009068:	3001      	adds	r0, #1
 800906a:	4798      	blx	r3
 800906c:	2300      	movs	r3, #0
 800906e:	2803      	cmp	r0, #3
 8009070:	dc03      	bgt.n	800907a <AT_Callback_Di+0x3e>
 8009072:	68e3      	ldr	r3, [r4, #12]
 8009074:	2002      	movs	r0, #2
 8009076:	4798      	blx	r3
 8009078:	b2c3      	uxtb	r3, r0
 800907a:	4a10      	ldr	r2, [pc, #64]	; (80090bc <AT_Callback_Di+0x80>)
 800907c:	3270      	adds	r2, #112	; 0x70
			AppData_Config.DI_2  =  (AppDataCfg_DiMode_t)(param->GetArgInt(2) > 3 ? 0 :param->GetArgInt(2));
 800907e:	7013      	strb	r3, [r2, #0]
 8009080:	e005      	b.n	800908e <AT_Callback_Di+0x52>
		sprintf(parser->Output,"%s%s",AT_CMD_STR_DI,"=channel[1-2],edge[0-3]\nedge:\nAPPDATACFG_DI_DISABLE = 0\nAPPDATACFG_DI_RISING = 1\nAPPDATACFG_DI_FALLING = 2\nAPPDATACFG_DI_BOTH = 3\n");
 8009082:	4b0f      	ldr	r3, [pc, #60]	; (80090c0 <AT_Callback_Di+0x84>)
 8009084:	4a0f      	ldr	r2, [pc, #60]	; (80090c4 <AT_Callback_Di+0x88>)
 8009086:	4910      	ldr	r1, [pc, #64]	; (80090c8 <AT_Callback_Di+0x8c>)
 8009088:	6880      	ldr	r0, [r0, #8]
 800908a:	f002 fb67 	bl	800b75c <siprintf>
			AppData_Config.DI_2  =  (AppDataCfg_DiMode_t)(param->GetArgInt(2) > 3 ? 0 :param->GetArgInt(2));
 800908e:	2001      	movs	r0, #1
}
 8009090:	bd70      	pop	{r4, r5, r6, pc}
		}else if(param->GetArgInt(1) == 2){
 8009092:	2001      	movs	r0, #1
 8009094:	4798      	blx	r3
 8009096:	0005      	movs	r5, r0
 8009098:	2001      	movs	r0, #1
 800909a:	2d02      	cmp	r5, #2
 800909c:	d1f8      	bne.n	8009090 <AT_Callback_Di+0x54>
			AppData_Config.DI_2  =  (AppDataCfg_DiMode_t)(param->GetArgInt(2) > 3 ? 0 :param->GetArgInt(2));
 800909e:	68e3      	ldr	r3, [r4, #12]
 80090a0:	0028      	movs	r0, r5
 80090a2:	4798      	blx	r3
 80090a4:	2300      	movs	r3, #0
 80090a6:	2803      	cmp	r0, #3
 80090a8:	dc03      	bgt.n	80090b2 <AT_Callback_Di+0x76>
 80090aa:	68e3      	ldr	r3, [r4, #12]
 80090ac:	0028      	movs	r0, r5
 80090ae:	4798      	blx	r3
 80090b0:	b2c3      	uxtb	r3, r0
 80090b2:	4a02      	ldr	r2, [pc, #8]	; (80090bc <AT_Callback_Di+0x80>)
 80090b4:	3271      	adds	r2, #113	; 0x71
 80090b6:	e7e2      	b.n	800907e <AT_Callback_Di+0x42>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 80090b8:	4804      	ldr	r0, [pc, #16]	; (80090cc <AT_Callback_Di+0x90>)
 80090ba:	e7e9      	b.n	8009090 <AT_Callback_Di+0x54>
 80090bc:	20000184 	.word	0x20000184
 80090c0:	0800c741 	.word	0x0800c741
 80090c4:	0800c7c4 	.word	0x0800c7c4
 80090c8:	0800d5e7 	.word	0x0800d5e7
 80090cc:	ffff8001 	.word	0xffff8001

080090d0 <AT_Callback_Adc>:
	switch( param->Type ){
 80090d0:	2380      	movs	r3, #128	; 0x80
static qATCLI_Response_t AT_Callback_Adc( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 80090d2:	b570      	push	{r4, r5, r6, lr}
	switch( param->Type ){
 80090d4:	8b8a      	ldrh	r2, [r1, #28]
static qATCLI_Response_t AT_Callback_Adc( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 80090d6:	000d      	movs	r5, r1
	switch( param->Type ){
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	429a      	cmp	r2, r3
 80090dc:	d030      	beq.n	8009140 <AT_Callback_Adc+0x70>
 80090de:	2180      	movs	r1, #128	; 0x80
		RetValue = QATCLI_NORESPONSE;
 80090e0:	2400      	movs	r4, #0
	switch( param->Type ){
 80090e2:	00c9      	lsls	r1, r1, #3
 80090e4:	428a      	cmp	r2, r1
 80090e6:	d016      	beq.n	8009116 <AT_Callback_Adc+0x46>
 80090e8:	3b01      	subs	r3, #1
 80090ea:	3bff      	subs	r3, #255	; 0xff
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d12e      	bne.n	800914e <AT_Callback_Adc+0x7e>
		if(param->GetArgInt(1) == 1){
 80090f0:	68eb      	ldr	r3, [r5, #12]
 80090f2:	2001      	movs	r0, #1
 80090f4:	4798      	blx	r3
 80090f6:	68eb      	ldr	r3, [r5, #12]
 80090f8:	0004      	movs	r4, r0
 80090fa:	2801      	cmp	r0, #1
 80090fc:	d10d      	bne.n	800911a <AT_Callback_Adc+0x4a>
			AppData_Config.adc1.IsActive = param->GetArgInt(2) ;
 80090fe:	2002      	movs	r0, #2
 8009100:	4798      	blx	r3
 8009102:	4e14      	ldr	r6, [pc, #80]	; (8009154 <AT_Callback_Adc+0x84>)
			AppData_Config.adc1.ThresholdHigh  = param->GetArgFlt(3) ;
 8009104:	692b      	ldr	r3, [r5, #16]
			AppData_Config.adc1.IsActive = param->GetArgInt(2) ;
 8009106:	7230      	strb	r0, [r6, #8]
			AppData_Config.adc1.ThresholdHigh  = param->GetArgFlt(3) ;
 8009108:	2003      	movs	r0, #3
 800910a:	4798      	blx	r3
			AppData_Config.adc1.ThresholdLow = param->GetArgFlt(4) ;
 800910c:	692b      	ldr	r3, [r5, #16]
			AppData_Config.adc1.ThresholdHigh  = param->GetArgFlt(3) ;
 800910e:	6030      	str	r0, [r6, #0]
			AppData_Config.adc1.ThresholdLow = param->GetArgFlt(4) ;
 8009110:	2004      	movs	r0, #4
 8009112:	4798      	blx	r3
 8009114:	6070      	str	r0, [r6, #4]
}
 8009116:	0020      	movs	r0, r4
 8009118:	bd70      	pop	{r4, r5, r6, pc}
		}else if(param->GetArgInt(1) == 2){
 800911a:	2001      	movs	r0, #1
 800911c:	4798      	blx	r3
 800911e:	2401      	movs	r4, #1
 8009120:	2802      	cmp	r0, #2
 8009122:	d1f8      	bne.n	8009116 <AT_Callback_Adc+0x46>
			AppData_Config.adc2.IsActive = param->GetArgInt(2) ;
 8009124:	68eb      	ldr	r3, [r5, #12]
 8009126:	4798      	blx	r3
 8009128:	4c0a      	ldr	r4, [pc, #40]	; (8009154 <AT_Callback_Adc+0x84>)
 800912a:	7520      	strb	r0, [r4, #20]
			AppData_Config.adc2.ThresholdHigh  = param->GetArgFlt(3) ;
 800912c:	692b      	ldr	r3, [r5, #16]
 800912e:	2003      	movs	r0, #3
 8009130:	4798      	blx	r3
			AppData_Config.adc2.ThresholdLow = param->GetArgFlt(4) ;
 8009132:	692b      	ldr	r3, [r5, #16]
			AppData_Config.adc2.ThresholdHigh  = param->GetArgFlt(3) ;
 8009134:	60e0      	str	r0, [r4, #12]
			AppData_Config.adc2.ThresholdLow = param->GetArgFlt(4) ;
 8009136:	2004      	movs	r0, #4
 8009138:	4798      	blx	r3
 800913a:	6120      	str	r0, [r4, #16]
		RetValue = QATCLI_OK;
 800913c:	2401      	movs	r4, #1
		break;
 800913e:	e7ea      	b.n	8009116 <AT_Callback_Adc+0x46>
		sprintf(parser->Output,"%s%s",AT_CMD_STR_ADC,"=channel[1-2],enable[0-1],max[0-4095],min[0-4095]");
 8009140:	4b05      	ldr	r3, [pc, #20]	; (8009158 <AT_Callback_Adc+0x88>)
 8009142:	4a06      	ldr	r2, [pc, #24]	; (800915c <AT_Callback_Adc+0x8c>)
 8009144:	4906      	ldr	r1, [pc, #24]	; (8009160 <AT_Callback_Adc+0x90>)
 8009146:	6880      	ldr	r0, [r0, #8]
 8009148:	f002 fb08 	bl	800b75c <siprintf>
 800914c:	e7f6      	b.n	800913c <AT_Callback_Adc+0x6c>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 800914e:	4c05      	ldr	r4, [pc, #20]	; (8009164 <AT_Callback_Adc+0x94>)
 8009150:	e7e1      	b.n	8009116 <AT_Callback_Adc+0x46>
 8009152:	46c0      	nop			; (mov r8, r8)
 8009154:	20000184 	.word	0x20000184
 8009158:	0800c6ac 	.word	0x0800c6ac
 800915c:	0800c6de 	.word	0x0800c6de
 8009160:	0800d5e7 	.word	0x0800d5e7
 8009164:	ffff8001 	.word	0xffff8001

08009168 <AT_Callback_Batt>:
	switch( param->Type ){
 8009168:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_Batt( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 800916a:	b570      	push	{r4, r5, r6, lr}
	switch( param->Type ){
 800916c:	8b8b      	ldrh	r3, [r1, #28]
static qATCLI_Response_t AT_Callback_Batt( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 800916e:	000d      	movs	r5, r1
	switch( param->Type ){
 8009170:	0092      	lsls	r2, r2, #2
 8009172:	4293      	cmp	r3, r2
 8009174:	d015      	beq.n	80091a2 <AT_Callback_Batt+0x3a>
 8009176:	2280      	movs	r2, #128	; 0x80
		RetValue = QATCLI_OK;
 8009178:	2001      	movs	r0, #1
	switch( param->Type ){
 800917a:	00d2      	lsls	r2, r2, #3
 800917c:	4293      	cmp	r3, r2
 800917e:	d00f      	beq.n	80091a0 <AT_Callback_Batt+0x38>
 8009180:	2280      	movs	r2, #128	; 0x80
 8009182:	0052      	lsls	r2, r2, #1
 8009184:	4293      	cmp	r3, r2
 8009186:	d113      	bne.n	80091b0 <AT_Callback_Batt+0x48>
		AppData_Config.LowBattSoc = param->GetArgInt(1) ;
 8009188:	68cb      	ldr	r3, [r1, #12]
 800918a:	4798      	blx	r3
 800918c:	4c09      	ldr	r4, [pc, #36]	; (80091b4 <AT_Callback_Batt+0x4c>)
 800918e:	0023      	movs	r3, r4
 8009190:	333c      	adds	r3, #60	; 0x3c
 8009192:	7018      	strb	r0, [r3, #0]
		AppData_Config.LowBattmV = param->GetArgInt(2) ;
 8009194:	68eb      	ldr	r3, [r5, #12]
 8009196:	2002      	movs	r0, #2
 8009198:	4798      	blx	r3
 800919a:	34a0      	adds	r4, #160	; 0xa0
 800919c:	8020      	strh	r0, [r4, #0]
		RetValue = QATCLI_OK;
 800919e:	2001      	movs	r0, #1
}
 80091a0:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(parser->Output,"%s%s",AT_CMD_STR_BATT,"=soc[0-100],mvolt[2700-4200]");
 80091a2:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <AT_Callback_Batt+0x50>)
 80091a4:	4a05      	ldr	r2, [pc, #20]	; (80091bc <AT_Callback_Batt+0x54>)
 80091a6:	4906      	ldr	r1, [pc, #24]	; (80091c0 <AT_Callback_Batt+0x58>)
 80091a8:	6880      	ldr	r0, [r0, #8]
 80091aa:	f002 fad7 	bl	800b75c <siprintf>
 80091ae:	e7f6      	b.n	800919e <AT_Callback_Batt+0x36>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 80091b0:	4804      	ldr	r0, [pc, #16]	; (80091c4 <AT_Callback_Batt+0x5c>)
 80091b2:	e7f5      	b.n	80091a0 <AT_Callback_Batt+0x38>
 80091b4:	20000184 	.word	0x20000184
 80091b8:	0800c71c 	.word	0x0800c71c
 80091bc:	0800c739 	.word	0x0800c739
 80091c0:	0800d5e7 	.word	0x0800d5e7
 80091c4:	ffff8001 	.word	0xffff8001

080091c8 <AT_Callback_Id>:
	switch( param->Type ){
 80091c8:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_Id( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 80091ca:	b510      	push	{r4, lr}
	switch( param->Type ){
 80091cc:	8b8b      	ldrh	r3, [r1, #28]
 80091ce:	0092      	lsls	r2, r2, #2
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d00a      	beq.n	80091ea <AT_Callback_Id+0x22>
 80091d4:	2280      	movs	r2, #128	; 0x80
 80091d6:	00d2      	lsls	r2, r2, #3
 80091d8:	4293      	cmp	r3, r2
 80091da:	d10b      	bne.n	80091f4 <AT_Callback_Id+0x2c>
		sprintf(parser->Output,"%s\r\n",AppData_Config.Id_module);
 80091dc:	4a06      	ldr	r2, [pc, #24]	; (80091f8 <AT_Callback_Id+0x30>)
 80091de:	4907      	ldr	r1, [pc, #28]	; (80091fc <AT_Callback_Id+0x34>)
 80091e0:	6880      	ldr	r0, [r0, #8]
 80091e2:	f002 fabb 	bl	800b75c <siprintf>
		RetValue = QATCLI_OK;
 80091e6:	2001      	movs	r0, #1
}
 80091e8:	bd10      	pop	{r4, pc}
		sprintf(parser->Output,"%s","8 digits size");
 80091ea:	4905      	ldr	r1, [pc, #20]	; (8009200 <AT_Callback_Id+0x38>)
 80091ec:	6880      	ldr	r0, [r0, #8]
 80091ee:	f002 fae3 	bl	800b7b8 <strcpy>
 80091f2:	e7f8      	b.n	80091e6 <AT_Callback_Id+0x1e>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 80091f4:	4803      	ldr	r0, [pc, #12]	; (8009204 <AT_Callback_Id+0x3c>)
 80091f6:	e7f7      	b.n	80091e8 <AT_Callback_Id+0x20>
 80091f8:	20000202 	.word	0x20000202
 80091fc:	0800cbd4 	.word	0x0800cbd4
 8009200:	0800c91c 	.word	0x0800c91c
 8009204:	ffff8001 	.word	0xffff8001

08009208 <AT_Callback_Pac>:
	switch( param->Type ){
 8009208:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_Pac( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 800920a:	b510      	push	{r4, lr}
	switch( param->Type ){
 800920c:	8b8b      	ldrh	r3, [r1, #28]
 800920e:	0092      	lsls	r2, r2, #2
 8009210:	4293      	cmp	r3, r2
 8009212:	d00a      	beq.n	800922a <AT_Callback_Pac+0x22>
 8009214:	2280      	movs	r2, #128	; 0x80
 8009216:	00d2      	lsls	r2, r2, #3
 8009218:	4293      	cmp	r3, r2
 800921a:	d10b      	bne.n	8009234 <AT_Callback_Pac+0x2c>
		sprintf(parser->Output,"%s\r\n",AppData_Config.Pac_module);
 800921c:	4a06      	ldr	r2, [pc, #24]	; (8009238 <AT_Callback_Pac+0x30>)
 800921e:	4907      	ldr	r1, [pc, #28]	; (800923c <AT_Callback_Pac+0x34>)
 8009220:	6880      	ldr	r0, [r0, #8]
 8009222:	f002 fa9b 	bl	800b75c <siprintf>
		RetValue = QATCLI_OK;
 8009226:	2001      	movs	r0, #1
}
 8009228:	bd10      	pop	{r4, pc}
		sprintf(parser->Output,"%s","16 digits size");
 800922a:	4905      	ldr	r1, [pc, #20]	; (8009240 <AT_Callback_Pac+0x38>)
 800922c:	6880      	ldr	r0, [r0, #8]
 800922e:	f002 fac3 	bl	800b7b8 <strcpy>
 8009232:	e7f8      	b.n	8009226 <AT_Callback_Pac+0x1e>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8009234:	4803      	ldr	r0, [pc, #12]	; (8009244 <AT_Callback_Pac+0x3c>)
 8009236:	e7f7      	b.n	8009228 <AT_Callback_Pac+0x20>
 8009238:	2000020e 	.word	0x2000020e
 800923c:	0800cbd4 	.word	0x0800cbd4
 8009240:	0800ca12 	.word	0x0800ca12
 8009244:	ffff8001 	.word	0xffff8001

08009248 <AT_Callback_DoCtrl>:
	switch( param->Type ){
 8009248:	2280      	movs	r2, #128	; 0x80
STATIC qATCLI_Response_t AT_Callback_DoCtrl( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 800924a:	b510      	push	{r4, lr}
	switch( param->Type ){
 800924c:	8b8b      	ldrh	r3, [r1, #28]
 800924e:	0092      	lsls	r2, r2, #2
 8009250:	4293      	cmp	r3, r2
 8009252:	d01a      	beq.n	800928a <AT_Callback_DoCtrl+0x42>
 8009254:	2280      	movs	r2, #128	; 0x80
 8009256:	00d2      	lsls	r2, r2, #3
 8009258:	4293      	cmp	r3, r2
 800925a:	d00d      	beq.n	8009278 <AT_Callback_DoCtrl+0x30>
 800925c:	2280      	movs	r2, #128	; 0x80
 800925e:	0052      	lsls	r2, r2, #1
 8009260:	4293      	cmp	r3, r2
 8009262:	d119      	bne.n	8009298 <AT_Callback_DoCtrl+0x50>
		AppData_Config.DoCtrl = param->GetArgInt(1) ;
 8009264:	68cb      	ldr	r3, [r1, #12]
 8009266:	2001      	movs	r0, #1
 8009268:	4798      	blx	r3
 800926a:	4b0c      	ldr	r3, [pc, #48]	; (800929c <AT_Callback_DoCtrl+0x54>)
 800926c:	b2c0      	uxtb	r0, r0
 800926e:	339f      	adds	r3, #159	; 0x9f
 8009270:	7018      	strb	r0, [r3, #0]
		BSP_GPIO_WRITE_OUT_CTL(AppData_Config.DoCtrl);
 8009272:	f001 fc9d 	bl	800abb0 <WSQ_GPIO_WriteOutputCtrl>
 8009276:	e006      	b.n	8009286 <AT_Callback_DoCtrl+0x3e>
		sprintf( parser->Output, "%d", AppData_Config.DoCtrl);
 8009278:	4b08      	ldr	r3, [pc, #32]	; (800929c <AT_Callback_DoCtrl+0x54>)
 800927a:	4909      	ldr	r1, [pc, #36]	; (80092a0 <AT_Callback_DoCtrl+0x58>)
 800927c:	339f      	adds	r3, #159	; 0x9f
 800927e:	781a      	ldrb	r2, [r3, #0]
 8009280:	6880      	ldr	r0, [r0, #8]
 8009282:	f002 fa6b 	bl	800b75c <siprintf>
		RetValue = QATCLI_OK;
 8009286:	2001      	movs	r0, #1
}
 8009288:	bd10      	pop	{r4, pc}
		sprintf(parser->Output,"%s%s",AT_CMD_STR_GPO,"=enable[0-1]");
 800928a:	4b06      	ldr	r3, [pc, #24]	; (80092a4 <AT_Callback_DoCtrl+0x5c>)
 800928c:	4a06      	ldr	r2, [pc, #24]	; (80092a8 <AT_Callback_DoCtrl+0x60>)
 800928e:	4907      	ldr	r1, [pc, #28]	; (80092ac <AT_Callback_DoCtrl+0x64>)
 8009290:	6880      	ldr	r0, [r0, #8]
 8009292:	f002 fa63 	bl	800b75c <siprintf>
 8009296:	e7f6      	b.n	8009286 <AT_Callback_DoCtrl+0x3e>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8009298:	4805      	ldr	r0, [pc, #20]	; (80092b0 <AT_Callback_DoCtrl+0x68>)
 800929a:	e7f5      	b.n	8009288 <AT_Callback_DoCtrl+0x40>
 800929c:	20000184 	.word	0x20000184
 80092a0:	0800c7ca 	.word	0x0800c7ca
 80092a4:	0800c9fa 	.word	0x0800c9fa
 80092a8:	0800c7cd 	.word	0x0800c7cd
 80092ac:	0800d5e7 	.word	0x0800d5e7
 80092b0:	ffff8001 	.word	0xffff8001

080092b4 <AT_Callback_Read>:
	switch( param->Type ){
 80092b4:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_Read( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 80092b6:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch( param->Type ){
 80092b8:	8b8b      	ldrh	r3, [r1, #28]
static qATCLI_Response_t AT_Callback_Read( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 80092ba:	b0b1      	sub	sp, #196	; 0xc4
 80092bc:	0004      	movs	r4, r0
	switch( param->Type ){
 80092be:	0092      	lsls	r2, r2, #2
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d100      	bne.n	80092c6 <AT_Callback_Read+0x12>
 80092c4:	e3ca      	b.n	8009a5c <AT_Callback_Read+0x7a8>
 80092c6:	2280      	movs	r2, #128	; 0x80
 80092c8:	00d2      	lsls	r2, r2, #3
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d016      	beq.n	80092fc <AT_Callback_Read+0x48>
 80092ce:	2280      	movs	r2, #128	; 0x80
 80092d0:	0052      	lsls	r2, r2, #1
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d000      	beq.n	80092d8 <AT_Callback_Read+0x24>
 80092d6:	e3c6      	b.n	8009a66 <AT_Callback_Read+0x7b2>
			if( param->GetArgInt(1) == 1){
 80092d8:	68cb      	ldr	r3, [r1, #12]
 80092da:	2001      	movs	r0, #1
 80092dc:	4798      	blx	r3
		RetValue = QATCLI_OK;
 80092de:	2401      	movs	r4, #1
			if( param->GetArgInt(1) == 1){
 80092e0:	42a0      	cmp	r0, r4
 80092e2:	d105      	bne.n	80092f0 <AT_Callback_Read+0x3c>
				qTask_EventFlags_Modify(&TaskApplicationFSM, QEVENTFLAG_01, 1);
 80092e4:	2180      	movs	r1, #128	; 0x80
 80092e6:	0022      	movs	r2, r4
 80092e8:	0149      	lsls	r1, r1, #5
 80092ea:	4803      	ldr	r0, [pc, #12]	; (80092f8 <AT_Callback_Read+0x44>)
 80092ec:	f7ff fb33 	bl	8008956 <qTask_EventFlags_Modify>
}
 80092f0:	0020      	movs	r0, r4
 80092f2:	b031      	add	sp, #196	; 0xc4
 80092f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092f6:	46c0      	nop			; (mov r8, r8)
 80092f8:	20001f74 	.word	0x20001f74
				(uint16_t)AppData_Config.adc1.ThresholdHigh,
 80092fc:	4dfa      	ldr	r5, [pc, #1000]	; (80096e8 <AT_Callback_Read+0x434>)
				AppData_Config.DI_1,
 80092fe:	002e      	movs	r6, r5
				(uint16_t)AppData_Config.adc1.ThresholdHigh,
 8009300:	6828      	ldr	r0, [r5, #0]
 8009302:	f7f7 f841 	bl	8000388 <__aeabi_f2uiz>
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 8009306:	7a2b      	ldrb	r3, [r5, #8]
				AppData_Config.DI_1,
 8009308:	3670      	adds	r6, #112	; 0x70
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 800930a:	932f      	str	r3, [sp, #188]	; 0xbc
 800930c:	4bf7      	ldr	r3, [pc, #988]	; (80096ec <AT_Callback_Read+0x438>)
 800930e:	b287      	uxth	r7, r0
 8009310:	932d      	str	r3, [sp, #180]	; 0xb4
 8009312:	4bf7      	ldr	r3, [pc, #988]	; (80096f0 <AT_Callback_Read+0x43c>)
 8009314:	932c      	str	r3, [sp, #176]	; 0xb0
 8009316:	4bf7      	ldr	r3, [pc, #988]	; (80096f4 <AT_Callback_Read+0x440>)
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	932b      	str	r3, [sp, #172]	; 0xac
 800931c:	7833      	ldrb	r3, [r6, #0]
 800931e:	932a      	str	r3, [sp, #168]	; 0xa8
 8009320:	4bf5      	ldr	r3, [pc, #980]	; (80096f8 <AT_Callback_Read+0x444>)
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	9329      	str	r3, [sp, #164]	; 0xa4
 8009326:	4bf5      	ldr	r3, [pc, #980]	; (80096fc <AT_Callback_Read+0x448>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	9328      	str	r3, [sp, #160]	; 0xa0
 800932c:	4bf4      	ldr	r3, [pc, #976]	; (8009700 <AT_Callback_Read+0x44c>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	9327      	str	r3, [sp, #156]	; 0x9c
 8009332:	4bf4      	ldr	r3, [pc, #976]	; (8009704 <AT_Callback_Read+0x450>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	9326      	str	r3, [sp, #152]	; 0x98
 8009338:	4bf3      	ldr	r3, [pc, #972]	; (8009708 <AT_Callback_Read+0x454>)
 800933a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800933c:	9325      	str	r3, [sp, #148]	; 0x94
 800933e:	4bf3      	ldr	r3, [pc, #972]	; (800970c <AT_Callback_Read+0x458>)
 8009340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009342:	9324      	str	r3, [sp, #144]	; 0x90
 8009344:	4bf2      	ldr	r3, [pc, #968]	; (8009710 <AT_Callback_Read+0x45c>)
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	9323      	str	r3, [sp, #140]	; 0x8c
 800934a:	4bf2      	ldr	r3, [pc, #968]	; (8009714 <AT_Callback_Read+0x460>)
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	9322      	str	r3, [sp, #136]	; 0x88
				(uint16_t)AppData_Config.accelerometer.inclination.y.ThresholdLow,
 8009350:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8009352:	f7f7 f819 	bl	8000388 <__aeabi_f2uiz>
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 8009356:	b280      	uxth	r0, r0
 8009358:	9021      	str	r0, [sp, #132]	; 0x84
				(uint16_t)AppData_Config.accelerometer.inclination.y.ThresholdHigh,
 800935a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800935c:	f7f7 f814 	bl	8000388 <__aeabi_f2uiz>
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 8009360:	b280      	uxth	r0, r0
 8009362:	9020      	str	r0, [sp, #128]	; 0x80
				(uint16_t)AppData_Config.accelerometer.inclination.x.ThresholdLow,
 8009364:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8009366:	f7f7 f80f 	bl	8000388 <__aeabi_f2uiz>
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 800936a:	b280      	uxth	r0, r0
 800936c:	901f      	str	r0, [sp, #124]	; 0x7c
				(uint16_t)AppData_Config.accelerometer.inclination.x.ThresholdHigh,
 800936e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8009370:	f7f7 f80a 	bl	8000388 <__aeabi_f2uiz>
				AppData_Config.accelerometer.inclination.IsActive,  // mode inclinación
 8009374:	002b      	movs	r3, r5
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 8009376:	b280      	uxth	r0, r0
 8009378:	901e      	str	r0, [sp, #120]	; 0x78
				AppData_Config.accelerometer.inclination.IsActive,  // mode inclinación
 800937a:	3364      	adds	r3, #100	; 0x64
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	931d      	str	r3, [sp, #116]	; 0x74
 8009380:	4be5      	ldr	r3, [pc, #916]	; (8009718 <AT_Callback_Read+0x464>)
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	931c      	str	r3, [sp, #112]	; 0x70
 8009386:	4be5      	ldr	r3, [pc, #916]	; (800971c <AT_Callback_Read+0x468>)
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	931b      	str	r3, [sp, #108]	; 0x6c
 800938c:	4be4      	ldr	r3, [pc, #912]	; (8009720 <AT_Callback_Read+0x46c>)
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	931a      	str	r3, [sp, #104]	; 0x68
 8009392:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009394:	9319      	str	r3, [sp, #100]	; 0x64
 8009396:	4be3      	ldr	r3, [pc, #908]	; (8009724 <AT_Callback_Read+0x470>)
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	9318      	str	r3, [sp, #96]	; 0x60
 800939c:	4be2      	ldr	r3, [pc, #904]	; (8009728 <AT_Callback_Read+0x474>)
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80093a2:	4be2      	ldr	r3, [pc, #904]	; (800972c <AT_Callback_Read+0x478>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	9316      	str	r3, [sp, #88]	; 0x58
 80093a8:	4be1      	ldr	r3, [pc, #900]	; (8009730 <AT_Callback_Read+0x47c>)
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	9315      	str	r3, [sp, #84]	; 0x54
 80093ae:	4be1      	ldr	r3, [pc, #900]	; (8009734 <AT_Callback_Read+0x480>)
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	9314      	str	r3, [sp, #80]	; 0x50
 80093b4:	4be0      	ldr	r3, [pc, #896]	; (8009738 <AT_Callback_Read+0x484>)
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80093ba:	4be0      	ldr	r3, [pc, #896]	; (800973c <AT_Callback_Read+0x488>)
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	9312      	str	r3, [sp, #72]	; 0x48
 80093c0:	4bdf      	ldr	r3, [pc, #892]	; (8009740 <AT_Callback_Read+0x48c>)
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	9311      	str	r3, [sp, #68]	; 0x44
 80093c6:	4bdf      	ldr	r3, [pc, #892]	; (8009744 <AT_Callback_Read+0x490>)
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	9310      	str	r3, [sp, #64]	; 0x40
 80093cc:	4bde      	ldr	r3, [pc, #888]	; (8009748 <AT_Callback_Read+0x494>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80093d2:	4bde      	ldr	r3, [pc, #888]	; (800974c <AT_Callback_Read+0x498>)
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	930e      	str	r3, [sp, #56]	; 0x38
 80093d8:	4bdd      	ldr	r3, [pc, #884]	; (8009750 <AT_Callback_Read+0x49c>)
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	930d      	str	r3, [sp, #52]	; 0x34
				(uint16_t)AppData_Config.airquality.ThresholdLow,
 80093de:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80093e0:	f7f6 ffd2 	bl	8000388 <__aeabi_f2uiz>
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 80093e4:	b280      	uxth	r0, r0
 80093e6:	900c      	str	r0, [sp, #48]	; 0x30
				(uint16_t)AppData_Config.airquality.ThresholdHigh,
 80093e8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80093ea:	f7f6 ffcd 	bl	8000388 <__aeabi_f2uiz>
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 80093ee:	4bd9      	ldr	r3, [pc, #868]	; (8009754 <AT_Callback_Read+0x4a0>)
 80093f0:	b280      	uxth	r0, r0
 80093f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	930a      	str	r3, [sp, #40]	; 0x28
				(uint16_t)AppData_Config.humidity.ThresholdLow,
 80093f8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80093fa:	f7f6 ffc5 	bl	8000388 <__aeabi_f2uiz>
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 80093fe:	b280      	uxth	r0, r0
 8009400:	9009      	str	r0, [sp, #36]	; 0x24
				(uint16_t)AppData_Config.humidity.ThresholdHigh,
 8009402:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009404:	f7f6 ffc0 	bl	8000388 <__aeabi_f2uiz>
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 8009408:	4bd3      	ldr	r3, [pc, #844]	; (8009758 <AT_Callback_Read+0x4a4>)
 800940a:	b280      	uxth	r0, r0
 800940c:	9008      	str	r0, [sp, #32]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	9307      	str	r3, [sp, #28]
				(uint16_t)AppData_Config.temperature.ThresholdLow,
 8009412:	69e8      	ldr	r0, [r5, #28]
 8009414:	f7f6 ffb8 	bl	8000388 <__aeabi_f2uiz>
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 8009418:	b280      	uxth	r0, r0
 800941a:	9006      	str	r0, [sp, #24]
				(uint16_t)AppData_Config.temperature.ThresholdHigh,
 800941c:	69a8      	ldr	r0, [r5, #24]
 800941e:	f7f6 ffb3 	bl	8000388 <__aeabi_f2uiz>
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 8009422:	4bce      	ldr	r3, [pc, #824]	; (800975c <AT_Callback_Read+0x4a8>)
 8009424:	b280      	uxth	r0, r0
 8009426:	9005      	str	r0, [sp, #20]
 8009428:	7fdb      	ldrb	r3, [r3, #31]
 800942a:	9304      	str	r3, [sp, #16]
				(uint16_t)AppData_Config.adc2.ThresholdLow,
 800942c:	6928      	ldr	r0, [r5, #16]
 800942e:	f7f6 ffab 	bl	8000388 <__aeabi_f2uiz>
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 8009432:	b280      	uxth	r0, r0
 8009434:	9003      	str	r0, [sp, #12]
				(uint16_t)AppData_Config.adc2.ThresholdHigh,
 8009436:	68e8      	ldr	r0, [r5, #12]
 8009438:	f7f6 ffa6 	bl	8000388 <__aeabi_f2uiz>
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 800943c:	b280      	uxth	r0, r0
 800943e:	9002      	str	r0, [sp, #8]
 8009440:	7d2b      	ldrb	r3, [r5, #20]
 8009442:	9301      	str	r3, [sp, #4]
				(uint16_t)AppData_Config.adc1.ThresholdLow,
 8009444:	6868      	ldr	r0, [r5, #4]
 8009446:	f7f6 ff9f 	bl	8000388 <__aeabi_f2uiz>
		sprintf(parser->Output,"ADC=%d,%u,%u,%d,%u,%u,TEMP=%d,%u,%u,HUM=%d,%u,%u,AQ=%d,%u,%u,FLAGS=%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,TIME=%d,%d,%d,AXL=%d,%u,%u,%u,%u,%d,%u,%u,%u,COLOR=%d,%d,%d,%d,DI=%d,%d,ID=%s,PAC=%s\r\n",
 800944a:	b280      	uxth	r0, r0
 800944c:	9000      	str	r0, [sp, #0]
 800944e:	003b      	movs	r3, r7
 8009450:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8009452:	49c3      	ldr	r1, [pc, #780]	; (8009760 <AT_Callback_Read+0x4ac>)
 8009454:	68a0      	ldr	r0, [r4, #8]
 8009456:	f002 f981 	bl	800b75c <siprintf>
		qDebug_Decimal(AppData_Config.DI_1 );
 800945a:	4fc2      	ldr	r7, [pc, #776]	; (8009764 <AT_Callback_Read+0x4b0>)
 800945c:	7830      	ldrb	r0, [r6, #0]
 800945e:	220a      	movs	r2, #10
 8009460:	0039      	movs	r1, r7
 8009462:	2400      	movs	r4, #0
 8009464:	f7fe fb7f 	bl	8007b66 <qIOUtil_ItoA>
 8009468:	4ebf      	ldr	r6, [pc, #764]	; (8009768 <AT_Callback_Read+0x4b4>)
 800946a:	0003      	movs	r3, r0
 800946c:	4abf      	ldr	r2, [pc, #764]	; (800976c <AT_Callback_Read+0x4b8>)
 800946e:	0021      	movs	r1, r4
 8009470:	0030      	movs	r0, r6
 8009472:	9401      	str	r4, [sp, #4]
 8009474:	9400      	str	r4, [sp, #0]
 8009476:	f7ff fa77 	bl	8008968 <_qtrace_func>
		qDebug_Decimal(	AppData_Config.DI_2);
 800947a:	4b9e      	ldr	r3, [pc, #632]	; (80096f4 <AT_Callback_Read+0x440>)
 800947c:	220a      	movs	r2, #10
 800947e:	7818      	ldrb	r0, [r3, #0]
 8009480:	0039      	movs	r1, r7
 8009482:	f7fe fb70 	bl	8007b66 <qIOUtil_ItoA>
 8009486:	4aba      	ldr	r2, [pc, #744]	; (8009770 <AT_Callback_Read+0x4bc>)
 8009488:	0003      	movs	r3, r0
 800948a:	0021      	movs	r1, r4
 800948c:	0030      	movs	r0, r6
 800948e:	9401      	str	r4, [sp, #4]
 8009490:	9400      	str	r4, [sp, #0]
 8009492:	f7ff fa69 	bl	8008968 <_qtrace_func>
		qDebug_Decimal(	AppData_Config.GPS_LocIsActive );
 8009496:	4bac      	ldr	r3, [pc, #688]	; (8009748 <AT_Callback_Read+0x494>)
 8009498:	220a      	movs	r2, #10
 800949a:	7818      	ldrb	r0, [r3, #0]
 800949c:	0039      	movs	r1, r7
 800949e:	f7fe fb62 	bl	8007b66 <qIOUtil_ItoA>
 80094a2:	4ab4      	ldr	r2, [pc, #720]	; (8009774 <AT_Callback_Read+0x4c0>)
 80094a4:	0003      	movs	r3, r0
 80094a6:	0021      	movs	r1, r4
 80094a8:	0030      	movs	r0, r6
 80094aa:	9401      	str	r4, [sp, #4]
 80094ac:	9400      	str	r4, [sp, #0]
 80094ae:	f7ff fa5b 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.LowBattSoc );
 80094b2:	4ba7      	ldr	r3, [pc, #668]	; (8009750 <AT_Callback_Read+0x49c>)
 80094b4:	220a      	movs	r2, #10
 80094b6:	7818      	ldrb	r0, [r3, #0]
 80094b8:	0039      	movs	r1, r7
 80094ba:	f7fe fb54 	bl	8007b66 <qIOUtil_ItoA>
 80094be:	4aae      	ldr	r2, [pc, #696]	; (8009778 <AT_Callback_Read+0x4c4>)
 80094c0:	0003      	movs	r3, r0
 80094c2:	0021      	movs	r1, r4
 80094c4:	0030      	movs	r0, r6
 80094c6:	9401      	str	r4, [sp, #4]
 80094c8:	9400      	str	r4, [sp, #0]
 80094ca:	f7ff fa4d 	bl	8008968 <_qtrace_func>
		qDebug_Decimal(AppData_Config.NumPulsation );;
 80094ce:	4b98      	ldr	r3, [pc, #608]	; (8009730 <AT_Callback_Read+0x47c>)
 80094d0:	220a      	movs	r2, #10
 80094d2:	7818      	ldrb	r0, [r3, #0]
 80094d4:	0039      	movs	r1, r7
 80094d6:	f7fe fb46 	bl	8007b66 <qIOUtil_ItoA>
 80094da:	4aa8      	ldr	r2, [pc, #672]	; (800977c <AT_Callback_Read+0x4c8>)
 80094dc:	0003      	movs	r3, r0
 80094de:	0021      	movs	r1, r4
 80094e0:	0030      	movs	r0, r6
 80094e2:	9401      	str	r4, [sp, #4]
 80094e4:	9400      	str	r4, [sp, #0]
 80094e6:	f7ff fa3f 	bl	8008968 <_qtrace_func>
		qDebug_Decimal(  	AppData_Config.Pulsation_1.rgb );
 80094ea:	4b86      	ldr	r3, [pc, #536]	; (8009704 <AT_Callback_Read+0x450>)
 80094ec:	220a      	movs	r2, #10
 80094ee:	7818      	ldrb	r0, [r3, #0]
 80094f0:	0039      	movs	r1, r7
 80094f2:	f7fe fb38 	bl	8007b66 <qIOUtil_ItoA>
 80094f6:	4aa2      	ldr	r2, [pc, #648]	; (8009780 <AT_Callback_Read+0x4cc>)
 80094f8:	0003      	movs	r3, r0
 80094fa:	0021      	movs	r1, r4
 80094fc:	0030      	movs	r0, r6
 80094fe:	9401      	str	r4, [sp, #4]
 8009500:	9400      	str	r4, [sp, #0]
 8009502:	f7ff fa31 	bl	8008968 <_qtrace_func>
		qDebug_Decimal(  	AppData_Config.Pulsation_2.rgb );
 8009506:	4b7e      	ldr	r3, [pc, #504]	; (8009700 <AT_Callback_Read+0x44c>)
 8009508:	220a      	movs	r2, #10
 800950a:	7818      	ldrb	r0, [r3, #0]
 800950c:	0039      	movs	r1, r7
 800950e:	f7fe fb2a 	bl	8007b66 <qIOUtil_ItoA>
 8009512:	4a9c      	ldr	r2, [pc, #624]	; (8009784 <AT_Callback_Read+0x4d0>)
 8009514:	0003      	movs	r3, r0
 8009516:	0021      	movs	r1, r4
 8009518:	0030      	movs	r0, r6
 800951a:	9401      	str	r4, [sp, #4]
 800951c:	9400      	str	r4, [sp, #0]
 800951e:	f7ff fa23 	bl	8008968 <_qtrace_func>
		qDebug_Decimal(	AppData_Config.Pulsation_3.rgb );
 8009522:	4b76      	ldr	r3, [pc, #472]	; (80096fc <AT_Callback_Read+0x448>)
 8009524:	220a      	movs	r2, #10
 8009526:	7818      	ldrb	r0, [r3, #0]
 8009528:	0039      	movs	r1, r7
 800952a:	f7fe fb1c 	bl	8007b66 <qIOUtil_ItoA>
 800952e:	4a96      	ldr	r2, [pc, #600]	; (8009788 <AT_Callback_Read+0x4d4>)
 8009530:	0003      	movs	r3, r0
 8009532:	0021      	movs	r1, r4
 8009534:	0030      	movs	r0, r6
 8009536:	9401      	str	r4, [sp, #4]
 8009538:	9400      	str	r4, [sp, #0]
 800953a:	f7ff fa15 	bl	8008968 <_qtrace_func>
		qDebug_Decimal(  	AppData_Config.Pulsation_Cancel.rgb );
 800953e:	4b6e      	ldr	r3, [pc, #440]	; (80096f8 <AT_Callback_Read+0x444>)
 8009540:	220a      	movs	r2, #10
 8009542:	7818      	ldrb	r0, [r3, #0]
 8009544:	0039      	movs	r1, r7
 8009546:	f7fe fb0e 	bl	8007b66 <qIOUtil_ItoA>
 800954a:	4a90      	ldr	r2, [pc, #576]	; (800978c <AT_Callback_Read+0x4d8>)
 800954c:	0003      	movs	r3, r0
 800954e:	0021      	movs	r1, r4
 8009550:	0030      	movs	r0, r6
 8009552:	9401      	str	r4, [sp, #4]
 8009554:	9400      	str	r4, [sp, #0]
 8009556:	f7ff fa07 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.RCZ );
 800955a:	220a      	movs	r2, #10
 800955c:	0039      	movs	r1, r7
 800955e:	6f68      	ldr	r0, [r5, #116]	; 0x74
 8009560:	f7fe fb01 	bl	8007b66 <qIOUtil_ItoA>
 8009564:	4a8a      	ldr	r2, [pc, #552]	; (8009790 <AT_Callback_Read+0x4dc>)
 8009566:	0003      	movs	r3, r0
 8009568:	0021      	movs	r1, r4
 800956a:	0030      	movs	r0, r6
 800956c:	9401      	str	r4, [sp, #4]
 800956e:	9400      	str	r4, [sp, #0]
 8009570:	f7ff f9fa 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.WIFI_LocIsActive);
 8009574:	4b73      	ldr	r3, [pc, #460]	; (8009744 <AT_Callback_Read+0x490>)
 8009576:	220a      	movs	r2, #10
 8009578:	7818      	ldrb	r0, [r3, #0]
 800957a:	0039      	movs	r1, r7
 800957c:	f7fe faf3 	bl	8007b66 <qIOUtil_ItoA>
 8009580:	4a84      	ldr	r2, [pc, #528]	; (8009794 <AT_Callback_Read+0x4e0>)
 8009582:	0003      	movs	r3, r0
 8009584:	0021      	movs	r1, r4
 8009586:	0030      	movs	r0, r6
 8009588:	9401      	str	r4, [sp, #4]
 800958a:	9400      	str	r4, [sp, #0]
 800958c:	f7ff f9ec 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.accelerometer.IsActive);
 8009590:	002b      	movs	r3, r5
 8009592:	3368      	adds	r3, #104	; 0x68
 8009594:	7818      	ldrb	r0, [r3, #0]
 8009596:	220a      	movs	r2, #10
 8009598:	0039      	movs	r1, r7
 800959a:	f7fe fae4 	bl	8007b66 <qIOUtil_ItoA>
 800959e:	4a7e      	ldr	r2, [pc, #504]	; (8009798 <AT_Callback_Read+0x4e4>)
 80095a0:	0003      	movs	r3, r0
 80095a2:	0021      	movs	r1, r4
 80095a4:	0030      	movs	r0, r6
 80095a6:	9401      	str	r4, [sp, #4]
 80095a8:	9400      	str	r4, [sp, #0]
 80095aa:	f7ff f9dd 	bl	8008968 <_qtrace_func>
		qDebug_Float( 	AppData_Config.accelerometer.inclination.x.ThresholdLow );
 80095ae:	220a      	movs	r2, #10
 80095b0:	0039      	movs	r1, r7
 80095b2:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80095b4:	f7fe fb0c 	bl	8007bd0 <qIOUtil_FtoA>
 80095b8:	4a78      	ldr	r2, [pc, #480]	; (800979c <AT_Callback_Read+0x4e8>)
 80095ba:	0003      	movs	r3, r0
 80095bc:	0021      	movs	r1, r4
 80095be:	0030      	movs	r0, r6
 80095c0:	9401      	str	r4, [sp, #4]
 80095c2:	9400      	str	r4, [sp, #0]
 80095c4:	f7ff f9d0 	bl	8008968 <_qtrace_func>
		qDebug_Float( 	AppData_Config.accelerometer.inclination.x.ThresholdHigh);
 80095c8:	220a      	movs	r2, #10
 80095ca:	0039      	movs	r1, r7
 80095cc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80095ce:	f7fe faff 	bl	8007bd0 <qIOUtil_FtoA>
 80095d2:	4a73      	ldr	r2, [pc, #460]	; (80097a0 <AT_Callback_Read+0x4ec>)
 80095d4:	0003      	movs	r3, r0
 80095d6:	0021      	movs	r1, r4
 80095d8:	0030      	movs	r0, r6
 80095da:	9401      	str	r4, [sp, #4]
 80095dc:	9400      	str	r4, [sp, #0]
 80095de:	f7ff f9c3 	bl	8008968 <_qtrace_func>
		qDebug_Float(  	AppData_Config.accelerometer.inclination.y.ThresholdLow );
 80095e2:	220a      	movs	r2, #10
 80095e4:	0039      	movs	r1, r7
 80095e6:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80095e8:	f7fe faf2 	bl	8007bd0 <qIOUtil_FtoA>
 80095ec:	4a6d      	ldr	r2, [pc, #436]	; (80097a4 <AT_Callback_Read+0x4f0>)
 80095ee:	0003      	movs	r3, r0
 80095f0:	0021      	movs	r1, r4
 80095f2:	0030      	movs	r0, r6
 80095f4:	9401      	str	r4, [sp, #4]
 80095f6:	9400      	str	r4, [sp, #0]
 80095f8:	f7ff f9b6 	bl	8008968 <_qtrace_func>
		qDebug_Float(  	AppData_Config.accelerometer.inclination.y.ThresholdHigh );
 80095fc:	220a      	movs	r2, #10
 80095fe:	0039      	movs	r1, r7
 8009600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009602:	f7fe fae5 	bl	8007bd0 <qIOUtil_FtoA>
 8009606:	4a68      	ldr	r2, [pc, #416]	; (80097a8 <AT_Callback_Read+0x4f4>)
 8009608:	0003      	movs	r3, r0
 800960a:	0021      	movs	r1, r4
 800960c:	0030      	movs	r0, r6
 800960e:	9401      	str	r4, [sp, #4]
 8009610:	9400      	str	r4, [sp, #0]
 8009612:	f7ff f9a9 	bl	8008968 <_qtrace_func>
		qDebug_Float( 	AppData_Config.accelerometer.vibration.IsActive );
 8009616:	4b3f      	ldr	r3, [pc, #252]	; (8009714 <AT_Callback_Read+0x460>)
 8009618:	7818      	ldrb	r0, [r3, #0]
 800961a:	f7f7 fe17 	bl	800124c <__aeabi_ui2f>
 800961e:	220a      	movs	r2, #10
 8009620:	0039      	movs	r1, r7
 8009622:	f7fe fad5 	bl	8007bd0 <qIOUtil_FtoA>
 8009626:	4a61      	ldr	r2, [pc, #388]	; (80097ac <AT_Callback_Read+0x4f8>)
 8009628:	0003      	movs	r3, r0
 800962a:	0021      	movs	r1, r4
 800962c:	0030      	movs	r0, r6
 800962e:	9401      	str	r4, [sp, #4]
 8009630:	9400      	str	r4, [sp, #0]
 8009632:	f7ff f999 	bl	8008968 <_qtrace_func>
		qDebug_Float( 	AppData_Config.accelerometer.vibration.high);
 8009636:	4b36      	ldr	r3, [pc, #216]	; (8009710 <AT_Callback_Read+0x45c>)
 8009638:	8818      	ldrh	r0, [r3, #0]
 800963a:	f7f7 fe07 	bl	800124c <__aeabi_ui2f>
 800963e:	220a      	movs	r2, #10
 8009640:	0039      	movs	r1, r7
 8009642:	f7fe fac5 	bl	8007bd0 <qIOUtil_FtoA>
 8009646:	4a5a      	ldr	r2, [pc, #360]	; (80097b0 <AT_Callback_Read+0x4fc>)
 8009648:	0003      	movs	r3, r0
 800964a:	0021      	movs	r1, r4
 800964c:	0030      	movs	r0, r6
 800964e:	9401      	str	r4, [sp, #4]
 8009650:	9400      	str	r4, [sp, #0]
 8009652:	f7ff f989 	bl	8008968 <_qtrace_func>
		qDebug_Float(  	AppData_Config.accelerometer.vibration.med);
 8009656:	4b2d      	ldr	r3, [pc, #180]	; (800970c <AT_Callback_Read+0x458>)
 8009658:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 800965a:	f7f7 fdf7 	bl	800124c <__aeabi_ui2f>
 800965e:	220a      	movs	r2, #10
 8009660:	0039      	movs	r1, r7
 8009662:	f7fe fab5 	bl	8007bd0 <qIOUtil_FtoA>
 8009666:	4a53      	ldr	r2, [pc, #332]	; (80097b4 <AT_Callback_Read+0x500>)
 8009668:	0003      	movs	r3, r0
 800966a:	0021      	movs	r1, r4
 800966c:	0030      	movs	r0, r6
 800966e:	9401      	str	r4, [sp, #4]
 8009670:	9400      	str	r4, [sp, #0]
 8009672:	f7ff f979 	bl	8008968 <_qtrace_func>
		qDebug_Float(  	AppData_Config.accelerometer.vibration.low );
 8009676:	4b24      	ldr	r3, [pc, #144]	; (8009708 <AT_Callback_Read+0x454>)
 8009678:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 800967a:	f7f7 fde7 	bl	800124c <__aeabi_ui2f>
 800967e:	220a      	movs	r2, #10
 8009680:	0039      	movs	r1, r7
 8009682:	f7fe faa5 	bl	8007bd0 <qIOUtil_FtoA>
 8009686:	4a4c      	ldr	r2, [pc, #304]	; (80097b8 <AT_Callback_Read+0x504>)
 8009688:	0003      	movs	r3, r0
 800968a:	0021      	movs	r1, r4
 800968c:	0030      	movs	r0, r6
 800968e:	9401      	str	r4, [sp, #4]
 8009690:	9400      	str	r4, [sp, #0]
 8009692:	f7ff f969 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.adc1.IsActive );
 8009696:	220a      	movs	r2, #10
 8009698:	0039      	movs	r1, r7
 800969a:	7a28      	ldrb	r0, [r5, #8]
 800969c:	f7fe fa63 	bl	8007b66 <qIOUtil_ItoA>
 80096a0:	4a46      	ldr	r2, [pc, #280]	; (80097bc <AT_Callback_Read+0x508>)
 80096a2:	0003      	movs	r3, r0
 80096a4:	0021      	movs	r1, r4
 80096a6:	0030      	movs	r0, r6
 80096a8:	9401      	str	r4, [sp, #4]
 80096aa:	9400      	str	r4, [sp, #0]
 80096ac:	f7ff f95c 	bl	8008968 <_qtrace_func>
		qDebug_Float( 	AppData_Config.adc1.ThresholdLow );
 80096b0:	220a      	movs	r2, #10
 80096b2:	0039      	movs	r1, r7
 80096b4:	6868      	ldr	r0, [r5, #4]
 80096b6:	f7fe fa8b 	bl	8007bd0 <qIOUtil_FtoA>
 80096ba:	4a41      	ldr	r2, [pc, #260]	; (80097c0 <AT_Callback_Read+0x50c>)
 80096bc:	0003      	movs	r3, r0
 80096be:	0021      	movs	r1, r4
 80096c0:	0030      	movs	r0, r6
 80096c2:	9401      	str	r4, [sp, #4]
 80096c4:	9400      	str	r4, [sp, #0]
 80096c6:	f7ff f94f 	bl	8008968 <_qtrace_func>
		qDebug_Float(  	AppData_Config.adc1.ThresholdHigh );
 80096ca:	220a      	movs	r2, #10
 80096cc:	0039      	movs	r1, r7
 80096ce:	6828      	ldr	r0, [r5, #0]
 80096d0:	f7fe fa7e 	bl	8007bd0 <qIOUtil_FtoA>
 80096d4:	4a3b      	ldr	r2, [pc, #236]	; (80097c4 <AT_Callback_Read+0x510>)
 80096d6:	0003      	movs	r3, r0
 80096d8:	0021      	movs	r1, r4
 80096da:	0030      	movs	r0, r6
 80096dc:	9401      	str	r4, [sp, #4]
 80096de:	9400      	str	r4, [sp, #0]
 80096e0:	f7ff f942 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.adc2.IsActive );
 80096e4:	220a      	movs	r2, #10
 80096e6:	e06f      	b.n	80097c8 <AT_Callback_Read+0x514>
 80096e8:	20000184 	.word	0x20000184
 80096ec:	2000020e 	.word	0x2000020e
 80096f0:	20000202 	.word	0x20000202
 80096f4:	200001f5 	.word	0x200001f5
 80096f8:	200001ff 	.word	0x200001ff
 80096fc:	200001fe 	.word	0x200001fe
 8009700:	200001fd 	.word	0x200001fd
 8009704:	200001fc 	.word	0x200001fc
 8009708:	2000018a 	.word	0x2000018a
 800970c:	2000018c 	.word	0x2000018c
 8009710:	200001cc 	.word	0x200001cc
 8009714:	200001ce 	.word	0x200001ce
 8009718:	200001f2 	.word	0x200001f2
 800971c:	200001f1 	.word	0x200001f1
 8009720:	200001f0 	.word	0x200001f0
 8009724:	20000223 	.word	0x20000223
 8009728:	20000222 	.word	0x20000222
 800972c:	20000201 	.word	0x20000201
 8009730:	20000200 	.word	0x20000200
 8009734:	200001f3 	.word	0x200001f3
 8009738:	200001c5 	.word	0x200001c5
 800973c:	200001c4 	.word	0x200001c4
 8009740:	200001c3 	.word	0x200001c3
 8009744:	200001c2 	.word	0x200001c2
 8009748:	200001c1 	.word	0x200001c1
 800974c:	20000224 	.word	0x20000224
 8009750:	200001c0 	.word	0x200001c0
 8009754:	200001bc 	.word	0x200001bc
 8009758:	200001b0 	.word	0x200001b0
 800975c:	20000185 	.word	0x20000185
 8009760:	0800cb18 	.word	0x0800cb18
 8009764:	20000804 	.word	0x20000804
 8009768:	0800d709 	.word	0x0800d709
 800976c:	0800cbd9 	.word	0x0800cbd9
 8009770:	0800cbee 	.word	0x0800cbee
 8009774:	0800cc03 	.word	0x0800cc03
 8009778:	0800cc23 	.word	0x0800cc23
 800977c:	0800cc3e 	.word	0x0800cc3e
 8009780:	0800cc5b 	.word	0x0800cc5b
 8009784:	0800cc7b 	.word	0x0800cc7b
 8009788:	0800cc9b 	.word	0x0800cc9b
 800978c:	0800ccbb 	.word	0x0800ccbb
 8009790:	0800cce0 	.word	0x0800cce0
 8009794:	0800ccf4 	.word	0x0800ccf4
 8009798:	0800cd15 	.word	0x0800cd15
 800979c:	0800cd3c 	.word	0x0800cd3c
 80097a0:	0800cd75 	.word	0x0800cd75
 80097a4:	0800cdaf 	.word	0x0800cdaf
 80097a8:	0800cde8 	.word	0x0800cde8
 80097ac:	0800ce22 	.word	0x0800ce22
 80097b0:	0800ce53 	.word	0x0800ce53
 80097b4:	0800ce80 	.word	0x0800ce80
 80097b8:	0800ceac 	.word	0x0800ceac
 80097bc:	0800ced8 	.word	0x0800ced8
 80097c0:	0800cef6 	.word	0x0800cef6
 80097c4:	0800cf18 	.word	0x0800cf18
 80097c8:	0039      	movs	r1, r7
 80097ca:	7d28      	ldrb	r0, [r5, #20]
 80097cc:	f7fe f9cb 	bl	8007b66 <qIOUtil_ItoA>
 80097d0:	4aa6      	ldr	r2, [pc, #664]	; (8009a6c <AT_Callback_Read+0x7b8>)
 80097d2:	0003      	movs	r3, r0
 80097d4:	0021      	movs	r1, r4
 80097d6:	0030      	movs	r0, r6
 80097d8:	9401      	str	r4, [sp, #4]
 80097da:	9400      	str	r4, [sp, #0]
 80097dc:	f7ff f8c4 	bl	8008968 <_qtrace_func>
		qDebug_Float(  	AppData_Config.adc2.ThresholdLow );
 80097e0:	220a      	movs	r2, #10
 80097e2:	0039      	movs	r1, r7
 80097e4:	6928      	ldr	r0, [r5, #16]
 80097e6:	f7fe f9f3 	bl	8007bd0 <qIOUtil_FtoA>
 80097ea:	4aa1      	ldr	r2, [pc, #644]	; (8009a70 <AT_Callback_Read+0x7bc>)
 80097ec:	0003      	movs	r3, r0
 80097ee:	0021      	movs	r1, r4
 80097f0:	0030      	movs	r0, r6
 80097f2:	9401      	str	r4, [sp, #4]
 80097f4:	9400      	str	r4, [sp, #0]
 80097f6:	f7ff f8b7 	bl	8008968 <_qtrace_func>
		qDebug_Float(  	AppData_Config.adc2.ThresholdHigh );
 80097fa:	220a      	movs	r2, #10
 80097fc:	0039      	movs	r1, r7
 80097fe:	68e8      	ldr	r0, [r5, #12]
 8009800:	f7fe f9e6 	bl	8007bd0 <qIOUtil_FtoA>
 8009804:	4a9b      	ldr	r2, [pc, #620]	; (8009a74 <AT_Callback_Read+0x7c0>)
 8009806:	0003      	movs	r3, r0
 8009808:	0021      	movs	r1, r4
 800980a:	0030      	movs	r0, r6
 800980c:	9401      	str	r4, [sp, #4]
 800980e:	9400      	str	r4, [sp, #0]
 8009810:	f7ff f8aa 	bl	8008968 <_qtrace_func>
		qDebug_Decimal(  	AppData_Config.airquality.IsActive );
 8009814:	4b98      	ldr	r3, [pc, #608]	; (8009a78 <AT_Callback_Read+0x7c4>)
 8009816:	220a      	movs	r2, #10
 8009818:	7818      	ldrb	r0, [r3, #0]
 800981a:	0039      	movs	r1, r7
 800981c:	f7fe f9a3 	bl	8007b66 <qIOUtil_ItoA>
 8009820:	4a96      	ldr	r2, [pc, #600]	; (8009a7c <AT_Callback_Read+0x7c8>)
 8009822:	0003      	movs	r3, r0
 8009824:	0021      	movs	r1, r4
 8009826:	0030      	movs	r0, r6
 8009828:	9401      	str	r4, [sp, #4]
 800982a:	9400      	str	r4, [sp, #0]
 800982c:	f7ff f89c 	bl	8008968 <_qtrace_func>
		qDebug_Float( 	AppData_Config.airquality.ThresholdLow );
 8009830:	220a      	movs	r2, #10
 8009832:	0039      	movs	r1, r7
 8009834:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8009836:	f7fe f9cb 	bl	8007bd0 <qIOUtil_FtoA>
 800983a:	4a91      	ldr	r2, [pc, #580]	; (8009a80 <AT_Callback_Read+0x7cc>)
 800983c:	0003      	movs	r3, r0
 800983e:	0021      	movs	r1, r4
 8009840:	0030      	movs	r0, r6
 8009842:	9401      	str	r4, [sp, #4]
 8009844:	9400      	str	r4, [sp, #0]
 8009846:	f7ff f88f 	bl	8008968 <_qtrace_func>
		qDebug_Float( 	AppData_Config.airquality.ThresholdHigh );
 800984a:	220a      	movs	r2, #10
 800984c:	0039      	movs	r1, r7
 800984e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8009850:	f7fe f9be 	bl	8007bd0 <qIOUtil_FtoA>
 8009854:	4a8b      	ldr	r2, [pc, #556]	; (8009a84 <AT_Callback_Read+0x7d0>)
 8009856:	0003      	movs	r3, r0
 8009858:	0021      	movs	r1, r4
 800985a:	0030      	movs	r0, r6
 800985c:	9401      	str	r4, [sp, #4]
 800985e:	9400      	str	r4, [sp, #0]
 8009860:	f7ff f882 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.alwaysSendReportIsActive );
 8009864:	4b88      	ldr	r3, [pc, #544]	; (8009a88 <AT_Callback_Read+0x7d4>)
 8009866:	220a      	movs	r2, #10
 8009868:	7818      	ldrb	r0, [r3, #0]
 800986a:	0039      	movs	r1, r7
 800986c:	f7fe f97b 	bl	8007b66 <qIOUtil_ItoA>
 8009870:	4a86      	ldr	r2, [pc, #536]	; (8009a8c <AT_Callback_Read+0x7d8>)
 8009872:	0003      	movs	r3, r0
 8009874:	0021      	movs	r1, r4
 8009876:	0030      	movs	r0, r6
 8009878:	9401      	str	r4, [sp, #4]
 800987a:	9400      	str	r4, [sp, #0]
 800987c:	f7ff f874 	bl	8008968 <_qtrace_func>
		qDebug_Decimal(  	AppData_Config.downlinkIsActive );
 8009880:	4b83      	ldr	r3, [pc, #524]	; (8009a90 <AT_Callback_Read+0x7dc>)
 8009882:	220a      	movs	r2, #10
 8009884:	7818      	ldrb	r0, [r3, #0]
 8009886:	0039      	movs	r1, r7
 8009888:	f7fe f96d 	bl	8007b66 <qIOUtil_ItoA>
 800988c:	4a81      	ldr	r2, [pc, #516]	; (8009a94 <AT_Callback_Read+0x7e0>)
 800988e:	0003      	movs	r3, r0
 8009890:	0021      	movs	r1, r4
 8009892:	0030      	movs	r0, r6
 8009894:	9401      	str	r4, [sp, #4]
 8009896:	9400      	str	r4, [sp, #0]
 8009898:	f7ff f866 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.humidity.IsActive );
 800989c:	4b7e      	ldr	r3, [pc, #504]	; (8009a98 <AT_Callback_Read+0x7e4>)
 800989e:	220a      	movs	r2, #10
 80098a0:	7818      	ldrb	r0, [r3, #0]
 80098a2:	0039      	movs	r1, r7
 80098a4:	f7fe f95f 	bl	8007b66 <qIOUtil_ItoA>
 80098a8:	4a7c      	ldr	r2, [pc, #496]	; (8009a9c <AT_Callback_Read+0x7e8>)
 80098aa:	0003      	movs	r3, r0
 80098ac:	0021      	movs	r1, r4
 80098ae:	0030      	movs	r0, r6
 80098b0:	9401      	str	r4, [sp, #4]
 80098b2:	9400      	str	r4, [sp, #0]
 80098b4:	f7ff f858 	bl	8008968 <_qtrace_func>
		qDebug_Float( 	AppData_Config.humidity.ThresholdLow );
 80098b8:	220a      	movs	r2, #10
 80098ba:	0039      	movs	r1, r7
 80098bc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80098be:	f7fe f987 	bl	8007bd0 <qIOUtil_FtoA>
 80098c2:	4a77      	ldr	r2, [pc, #476]	; (8009aa0 <AT_Callback_Read+0x7ec>)
 80098c4:	0003      	movs	r3, r0
 80098c6:	0021      	movs	r1, r4
 80098c8:	0030      	movs	r0, r6
 80098ca:	9401      	str	r4, [sp, #4]
 80098cc:	9400      	str	r4, [sp, #0]
 80098ce:	f7ff f84b 	bl	8008968 <_qtrace_func>
		qDebug_Float(	AppData_Config.humidity.ThresholdHigh );
 80098d2:	220a      	movs	r2, #10
 80098d4:	0039      	movs	r1, r7
 80098d6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80098d8:	f7fe f97a 	bl	8007bd0 <qIOUtil_FtoA>
 80098dc:	4a71      	ldr	r2, [pc, #452]	; (8009aa4 <AT_Callback_Read+0x7f0>)
 80098de:	0003      	movs	r3, r0
 80098e0:	0021      	movs	r1, r4
 80098e2:	0030      	movs	r0, r6
 80098e4:	9401      	str	r4, [sp, #4]
 80098e6:	9400      	str	r4, [sp, #0]
 80098e8:	f7ff f83e 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.temperature.IsActive );
 80098ec:	4b6e      	ldr	r3, [pc, #440]	; (8009aa8 <AT_Callback_Read+0x7f4>)
 80098ee:	220a      	movs	r2, #10
 80098f0:	7fd8      	ldrb	r0, [r3, #31]
 80098f2:	0039      	movs	r1, r7
 80098f4:	f7fe f937 	bl	8007b66 <qIOUtil_ItoA>
 80098f8:	4a6c      	ldr	r2, [pc, #432]	; (8009aac <AT_Callback_Read+0x7f8>)
 80098fa:	0003      	movs	r3, r0
 80098fc:	0021      	movs	r1, r4
 80098fe:	0030      	movs	r0, r6
 8009900:	9401      	str	r4, [sp, #4]
 8009902:	9400      	str	r4, [sp, #0]
 8009904:	f7ff f830 	bl	8008968 <_qtrace_func>
		qDebug_Float(	AppData_Config.temperature.ThresholdLow );
 8009908:	220a      	movs	r2, #10
 800990a:	0039      	movs	r1, r7
 800990c:	69e8      	ldr	r0, [r5, #28]
 800990e:	f7fe f95f 	bl	8007bd0 <qIOUtil_FtoA>
 8009912:	4a67      	ldr	r2, [pc, #412]	; (8009ab0 <AT_Callback_Read+0x7fc>)
 8009914:	0003      	movs	r3, r0
 8009916:	0021      	movs	r1, r4
 8009918:	0030      	movs	r0, r6
 800991a:	9401      	str	r4, [sp, #4]
 800991c:	9400      	str	r4, [sp, #0]
 800991e:	f7ff f823 	bl	8008968 <_qtrace_func>
		qDebug_Float(  	AppData_Config.temperature.ThresholdHigh );
 8009922:	220a      	movs	r2, #10
 8009924:	0039      	movs	r1, r7
 8009926:	69a8      	ldr	r0, [r5, #24]
 8009928:	f7fe f952 	bl	8007bd0 <qIOUtil_FtoA>
 800992c:	4a61      	ldr	r2, [pc, #388]	; (8009ab4 <AT_Callback_Read+0x800>)
 800992e:	0003      	movs	r3, r0
 8009930:	0021      	movs	r1, r4
 8009932:	0030      	movs	r0, r6
 8009934:	9401      	str	r4, [sp, #4]
 8009936:	9400      	str	r4, [sp, #0]
 8009938:	f7ff f816 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.keepAlive );
 800993c:	4b5e      	ldr	r3, [pc, #376]	; (8009ab8 <AT_Callback_Read+0x804>)
 800993e:	220a      	movs	r2, #10
 8009940:	7818      	ldrb	r0, [r3, #0]
 8009942:	0039      	movs	r1, r7
 8009944:	f7fe f90f 	bl	8007b66 <qIOUtil_ItoA>
 8009948:	4a5c      	ldr	r2, [pc, #368]	; (8009abc <AT_Callback_Read+0x808>)
 800994a:	0003      	movs	r3, r0
 800994c:	0021      	movs	r1, r4
 800994e:	0030      	movs	r0, r6
 8009950:	9401      	str	r4, [sp, #4]
 8009952:	9400      	str	r4, [sp, #0]
 8009954:	f7ff f808 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.redundanciaIsActive);
 8009958:	4b59      	ldr	r3, [pc, #356]	; (8009ac0 <AT_Callback_Read+0x80c>)
 800995a:	220a      	movs	r2, #10
 800995c:	7818      	ldrb	r0, [r3, #0]
 800995e:	0039      	movs	r1, r7
 8009960:	f7fe f901 	bl	8007b66 <qIOUtil_ItoA>
 8009964:	4a57      	ldr	r2, [pc, #348]	; (8009ac4 <AT_Callback_Read+0x810>)
 8009966:	0003      	movs	r3, r0
 8009968:	0021      	movs	r1, r4
 800996a:	0030      	movs	r0, r6
 800996c:	9401      	str	r4, [sp, #4]
 800996e:	9400      	str	r4, [sp, #0]
 8009970:	f7fe fffa 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.time.hour );
 8009974:	4b54      	ldr	r3, [pc, #336]	; (8009ac8 <AT_Callback_Read+0x814>)
 8009976:	220a      	movs	r2, #10
 8009978:	7818      	ldrb	r0, [r3, #0]
 800997a:	0039      	movs	r1, r7
 800997c:	f7fe f8f3 	bl	8007b66 <qIOUtil_ItoA>
 8009980:	4a52      	ldr	r2, [pc, #328]	; (8009acc <AT_Callback_Read+0x818>)
 8009982:	0003      	movs	r3, r0
 8009984:	0021      	movs	r1, r4
 8009986:	0030      	movs	r0, r6
 8009988:	9401      	str	r4, [sp, #4]
 800998a:	9400      	str	r4, [sp, #0]
 800998c:	f7fe ffec 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.time.min );
 8009990:	4b4f      	ldr	r3, [pc, #316]	; (8009ad0 <AT_Callback_Read+0x81c>)
 8009992:	220a      	movs	r2, #10
 8009994:	7818      	ldrb	r0, [r3, #0]
 8009996:	0039      	movs	r1, r7
 8009998:	f7fe f8e5 	bl	8007b66 <qIOUtil_ItoA>
 800999c:	4a4d      	ldr	r2, [pc, #308]	; (8009ad4 <AT_Callback_Read+0x820>)
 800999e:	0003      	movs	r3, r0
 80099a0:	0021      	movs	r1, r4
 80099a2:	0030      	movs	r0, r6
 80099a4:	9401      	str	r4, [sp, #4]
 80099a6:	9400      	str	r4, [sp, #0]
 80099a8:	f7fe ffde 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.time.sec );
 80099ac:	4b4a      	ldr	r3, [pc, #296]	; (8009ad8 <AT_Callback_Read+0x824>)
 80099ae:	220a      	movs	r2, #10
 80099b0:	7818      	ldrb	r0, [r3, #0]
 80099b2:	0039      	movs	r1, r7
 80099b4:	f7fe f8d7 	bl	8007b66 <qIOUtil_ItoA>
 80099b8:	4a48      	ldr	r2, [pc, #288]	; (8009adc <AT_Callback_Read+0x828>)
 80099ba:	0003      	movs	r3, r0
 80099bc:	0021      	movs	r1, r4
 80099be:	0030      	movs	r0, r6
 80099c0:	9401      	str	r4, [sp, #4]
 80099c2:	9400      	str	r4, [sp, #0]
 80099c4:	f7fe ffd0 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.onlySendLocation );
 80099c8:	4b45      	ldr	r3, [pc, #276]	; (8009ae0 <AT_Callback_Read+0x82c>)
 80099ca:	220a      	movs	r2, #10
 80099cc:	7818      	ldrb	r0, [r3, #0]
 80099ce:	0039      	movs	r1, r7
 80099d0:	f7fe f8c9 	bl	8007b66 <qIOUtil_ItoA>
 80099d4:	4a43      	ldr	r2, [pc, #268]	; (8009ae4 <AT_Callback_Read+0x830>)
 80099d6:	0003      	movs	r3, r0
 80099d8:	0021      	movs	r1, r4
 80099da:	0030      	movs	r0, r6
 80099dc:	9401      	str	r4, [sp, #4]
 80099de:	9400      	str	r4, [sp, #0]
 80099e0:	f7fe ffc2 	bl	8008968 <_qtrace_func>
		qDebug_Decimal( 	AppData_Config.idDevice );
 80099e4:	4b40      	ldr	r3, [pc, #256]	; (8009ae8 <AT_Callback_Read+0x834>)
 80099e6:	220a      	movs	r2, #10
 80099e8:	7818      	ldrb	r0, [r3, #0]
 80099ea:	0039      	movs	r1, r7
 80099ec:	f7fe f8bb 	bl	8007b66 <qIOUtil_ItoA>
 80099f0:	4a3e      	ldr	r2, [pc, #248]	; (8009aec <AT_Callback_Read+0x838>)
 80099f2:	0003      	movs	r3, r0
 80099f4:	0021      	movs	r1, r4
 80099f6:	0030      	movs	r0, r6
 80099f8:	9401      	str	r4, [sp, #4]
 80099fa:	9400      	str	r4, [sp, #0]
 80099fc:	f7fe ffb4 	bl	8008968 <_qtrace_func>
		qDebug_Decimal(		AppData_Config.DoCtrl);
 8009a00:	4b3b      	ldr	r3, [pc, #236]	; (8009af0 <AT_Callback_Read+0x83c>)
 8009a02:	220a      	movs	r2, #10
 8009a04:	7818      	ldrb	r0, [r3, #0]
 8009a06:	0039      	movs	r1, r7
 8009a08:	f7fe f8ad 	bl	8007b66 <qIOUtil_ItoA>
 8009a0c:	4a39      	ldr	r2, [pc, #228]	; (8009af4 <AT_Callback_Read+0x840>)
 8009a0e:	0003      	movs	r3, r0
 8009a10:	0021      	movs	r1, r4
 8009a12:	0030      	movs	r0, r6
 8009a14:	9401      	str	r4, [sp, #4]
 8009a16:	9400      	str	r4, [sp, #0]
 8009a18:	f7fe ffa6 	bl	8008968 <_qtrace_func>
		qDebug_String(AppData_Config.Id_module);
 8009a1c:	4b36      	ldr	r3, [pc, #216]	; (8009af8 <AT_Callback_Read+0x844>)
 8009a1e:	4a37      	ldr	r2, [pc, #220]	; (8009afc <AT_Callback_Read+0x848>)
 8009a20:	0021      	movs	r1, r4
 8009a22:	0030      	movs	r0, r6
 8009a24:	9401      	str	r4, [sp, #4]
 8009a26:	9400      	str	r4, [sp, #0]
 8009a28:	f7fe ff9e 	bl	8008968 <_qtrace_func>
		qDebug_String(AppData_Config.Pac_module);
 8009a2c:	4b34      	ldr	r3, [pc, #208]	; (8009b00 <AT_Callback_Read+0x84c>)
 8009a2e:	4a35      	ldr	r2, [pc, #212]	; (8009b04 <AT_Callback_Read+0x850>)
 8009a30:	0021      	movs	r1, r4
 8009a32:	0030      	movs	r0, r6
 8009a34:	9401      	str	r4, [sp, #4]
 8009a36:	9400      	str	r4, [sp, #0]
 8009a38:	f7fe ff96 	bl	8008968 <_qtrace_func>
		qDebug_Decimal(AppData_Config.LowBattmV);
 8009a3c:	4b32      	ldr	r3, [pc, #200]	; (8009b08 <AT_Callback_Read+0x854>)
 8009a3e:	220a      	movs	r2, #10
 8009a40:	8818      	ldrh	r0, [r3, #0]
 8009a42:	0039      	movs	r1, r7
 8009a44:	f7fe f88f 	bl	8007b66 <qIOUtil_ItoA>
 8009a48:	9401      	str	r4, [sp, #4]
 8009a4a:	0003      	movs	r3, r0
 8009a4c:	9400      	str	r4, [sp, #0]
 8009a4e:	4a2f      	ldr	r2, [pc, #188]	; (8009b0c <AT_Callback_Read+0x858>)
 8009a50:	0021      	movs	r1, r4
 8009a52:	0030      	movs	r0, r6
 8009a54:	f7fe ff88 	bl	8008968 <_qtrace_func>
		RetValue = QATCLI_OK;
 8009a58:	2401      	movs	r4, #1
		break;
 8009a5a:	e449      	b.n	80092f0 <AT_Callback_Read+0x3c>
		sprintf(parser->Output,"%s",AT_CMD_STR_READ);
 8009a5c:	492c      	ldr	r1, [pc, #176]	; (8009b10 <AT_Callback_Read+0x85c>)
 8009a5e:	6880      	ldr	r0, [r0, #8]
 8009a60:	f001 feaa 	bl	800b7b8 <strcpy>
 8009a64:	e7f8      	b.n	8009a58 <AT_Callback_Read+0x7a4>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8009a66:	4c2b      	ldr	r4, [pc, #172]	; (8009b14 <AT_Callback_Read+0x860>)
 8009a68:	e442      	b.n	80092f0 <AT_Callback_Read+0x3c>
 8009a6a:	46c0      	nop			; (mov r8, r8)
 8009a6c:	0800cf3b 	.word	0x0800cf3b
 8009a70:	0800cf59 	.word	0x0800cf59
 8009a74:	0800cf7b 	.word	0x0800cf7b
 8009a78:	200001bc 	.word	0x200001bc
 8009a7c:	0800cf9e 	.word	0x0800cf9e
 8009a80:	0800cfc2 	.word	0x0800cfc2
 8009a84:	0800cfea 	.word	0x0800cfea
 8009a88:	200001c3 	.word	0x200001c3
 8009a8c:	0800d013 	.word	0x0800d013
 8009a90:	200001c5 	.word	0x200001c5
 8009a94:	0800d03c 	.word	0x0800d03c
 8009a98:	200001b0 	.word	0x200001b0
 8009a9c:	0800d05d 	.word	0x0800d05d
 8009aa0:	0800d07f 	.word	0x0800d07f
 8009aa4:	0800d0a5 	.word	0x0800d0a5
 8009aa8:	20000185 	.word	0x20000185
 8009aac:	0800d0cc 	.word	0x0800d0cc
 8009ab0:	0800d0f1 	.word	0x0800d0f1
 8009ab4:	0800d11a 	.word	0x0800d11a
 8009ab8:	200001f3 	.word	0x200001f3
 8009abc:	0800d144 	.word	0x0800d144
 8009ac0:	200001c4 	.word	0x200001c4
 8009ac4:	0800d15e 	.word	0x0800d15e
 8009ac8:	200001f0 	.word	0x200001f0
 8009acc:	0800d182 	.word	0x0800d182
 8009ad0:	200001f1 	.word	0x200001f1
 8009ad4:	0800d19c 	.word	0x0800d19c
 8009ad8:	200001f2 	.word	0x200001f2
 8009adc:	0800d1b5 	.word	0x0800d1b5
 8009ae0:	20000201 	.word	0x20000201
 8009ae4:	0800d1ce 	.word	0x0800d1ce
 8009ae8:	20000222 	.word	0x20000222
 8009aec:	0800d1ef 	.word	0x0800d1ef
 8009af0:	20000223 	.word	0x20000223
 8009af4:	0800d208 	.word	0x0800d208
 8009af8:	20000202 	.word	0x20000202
 8009afc:	0800d21f 	.word	0x0800d21f
 8009b00:	2000020e 	.word	0x2000020e
 8009b04:	0800d239 	.word	0x0800d239
 8009b08:	20000224 	.word	0x20000224
 8009b0c:	0800d254 	.word	0x0800d254
 8009b10:	0800d26e 	.word	0x0800d26e
 8009b14:	ffff8001 	.word	0xffff8001

08009b18 <AT_Callback_Time>:
static qATCLI_Response_t AT_Callback_Time( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8009b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch( param->Type ){
 8009b1a:	2280      	movs	r2, #128	; 0x80
 8009b1c:	8b8b      	ldrh	r3, [r1, #28]
static qATCLI_Response_t AT_Callback_Time( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 8009b1e:	000f      	movs	r7, r1
	switch( param->Type ){
 8009b20:	0092      	lsls	r2, r2, #2
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d03a      	beq.n	8009b9c <AT_Callback_Time+0x84>
 8009b26:	2280      	movs	r2, #128	; 0x80
 8009b28:	00d2      	lsls	r2, r2, #3
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d022      	beq.n	8009b74 <AT_Callback_Time+0x5c>
 8009b2e:	2280      	movs	r2, #128	; 0x80
 8009b30:	0052      	lsls	r2, r2, #1
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d139      	bne.n	8009baa <AT_Callback_Time+0x92>
		AppData_Config.keepAlive = param->GetArgInt(1);
 8009b36:	68cb      	ldr	r3, [r1, #12]
 8009b38:	2001      	movs	r0, #1
 8009b3a:	4798      	blx	r3
 8009b3c:	4c1c      	ldr	r4, [pc, #112]	; (8009bb0 <AT_Callback_Time+0x98>)
 8009b3e:	0023      	movs	r3, r4
 8009b40:	336f      	adds	r3, #111	; 0x6f
 8009b42:	7018      	strb	r0, [r3, #0]
		AppData_Config.time.hour = param->GetArgInt(2);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	0025      	movs	r5, r4
 8009b48:	2002      	movs	r0, #2
 8009b4a:	4798      	blx	r3
 8009b4c:	356c      	adds	r5, #108	; 0x6c
 8009b4e:	7028      	strb	r0, [r5, #0]
		AppData_Config.time.min= param->GetArgInt(3);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	0026      	movs	r6, r4
 8009b54:	2003      	movs	r0, #3
 8009b56:	4798      	blx	r3
 8009b58:	366d      	adds	r6, #109	; 0x6d
 8009b5a:	7030      	strb	r0, [r6, #0]
		AppData_Config.time.sec = param->GetArgInt(4);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2004      	movs	r0, #4
 8009b60:	4798      	blx	r3
 8009b62:	346e      	adds	r4, #110	; 0x6e
 8009b64:	b2c2      	uxtb	r2, r0
 8009b66:	7022      	strb	r2, [r4, #0]
		BSP_RTC_SET_TIME(AppData_Config.time.hour,AppData_Config.time.min,AppData_Config.time.sec,1) ;
 8009b68:	7831      	ldrb	r1, [r6, #0]
 8009b6a:	7828      	ldrb	r0, [r5, #0]
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	f001 f963 	bl	800ae38 <WSQ_RTC_SetTime>
 8009b72:	e011      	b.n	8009b98 <AT_Callback_Time+0x80>
		sprintf(parser->Output,"%d %02d:%02d:%02d",AppData_Config.keepAlive,AppData_Config.time.hour,AppData_Config.time.min,AppData_Config.time.sec);
 8009b74:	490e      	ldr	r1, [pc, #56]	; (8009bb0 <AT_Callback_Time+0x98>)
 8009b76:	000c      	movs	r4, r1
 8009b78:	000b      	movs	r3, r1
 8009b7a:	000a      	movs	r2, r1
 8009b7c:	346e      	adds	r4, #110	; 0x6e
 8009b7e:	7824      	ldrb	r4, [r4, #0]
 8009b80:	336c      	adds	r3, #108	; 0x6c
 8009b82:	326f      	adds	r2, #111	; 0x6f
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	7812      	ldrb	r2, [r2, #0]
 8009b88:	316d      	adds	r1, #109	; 0x6d
 8009b8a:	9401      	str	r4, [sp, #4]
 8009b8c:	7809      	ldrb	r1, [r1, #0]
 8009b8e:	9100      	str	r1, [sp, #0]
 8009b90:	6880      	ldr	r0, [r0, #8]
 8009b92:	4908      	ldr	r1, [pc, #32]	; (8009bb4 <AT_Callback_Time+0x9c>)
 8009b94:	f001 fde2 	bl	800b75c <siprintf>
		RetValue = QATCLI_OK;
 8009b98:	2001      	movs	r0, #1
}
 8009b9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		sprintf(parser->Output,"%s%s",AT_CMD_STR_TIME,"=keepalive[is x times h:m:s],hours[0-17],minutes[0-59],seconds[0-59]");
 8009b9c:	4b06      	ldr	r3, [pc, #24]	; (8009bb8 <AT_Callback_Time+0xa0>)
 8009b9e:	4a07      	ldr	r2, [pc, #28]	; (8009bbc <AT_Callback_Time+0xa4>)
 8009ba0:	4907      	ldr	r1, [pc, #28]	; (8009bc0 <AT_Callback_Time+0xa8>)
 8009ba2:	6880      	ldr	r0, [r0, #8]
 8009ba4:	f001 fdda 	bl	800b75c <siprintf>
 8009ba8:	e7f6      	b.n	8009b98 <AT_Callback_Time+0x80>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 8009baa:	4806      	ldr	r0, [pc, #24]	; (8009bc4 <AT_Callback_Time+0xac>)
 8009bac:	e7f5      	b.n	8009b9a <AT_Callback_Time+0x82>
 8009bae:	46c0      	nop			; (mov r8, r8)
 8009bb0:	20000184 	.word	0x20000184
 8009bb4:	0800d292 	.word	0x0800d292
 8009bb8:	0800d2a4 	.word	0x0800d2a4
 8009bbc:	0800d2e9 	.word	0x0800d2e9
 8009bc0:	0800d5e7 	.word	0x0800d5e7
 8009bc4:	ffff8001 	.word	0xffff8001

08009bc8 <AT_Command_Init>:
void AT_Command_Init(void){
 8009bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	qATCLI_Setup( &ATCommandParser, BSP_USB_PUTC,
 8009bca:	4b81      	ldr	r3, [pc, #516]	; (8009dd0 <AT_Command_Init+0x208>)
void AT_Command_Init(void){
 8009bcc:	b089      	sub	sp, #36	; 0x24
	qATCLI_Setup( &ATCommandParser, BSP_USB_PUTC,
 8009bce:	9306      	str	r3, [sp, #24]
 8009bd0:	4b80      	ldr	r3, [pc, #512]	; (8009dd4 <AT_Command_Init+0x20c>)
 8009bd2:	4c81      	ldr	r4, [pc, #516]	; (8009dd8 <AT_Command_Init+0x210>)
 8009bd4:	9305      	str	r3, [sp, #20]
 8009bd6:	4b81      	ldr	r3, [pc, #516]	; (8009ddc <AT_Command_Init+0x214>)
 8009bd8:	4a81      	ldr	r2, [pc, #516]	; (8009de0 <AT_Command_Init+0x218>)
 8009bda:	9304      	str	r3, [sp, #16]
 8009bdc:	4b81      	ldr	r3, [pc, #516]	; (8009de4 <AT_Command_Init+0x21c>)
 8009bde:	4982      	ldr	r1, [pc, #520]	; (8009de8 <AT_Command_Init+0x220>)
 8009be0:	9303      	str	r3, [sp, #12]
 8009be2:	4b82      	ldr	r3, [pc, #520]	; (8009dec <AT_Command_Init+0x224>)
 8009be4:	0020      	movs	r0, r4
 8009be6:	9302      	str	r3, [sp, #8]
 8009be8:	2380      	movs	r3, #128	; 0x80
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	4b80      	ldr	r3, [pc, #512]	; (8009df0 <AT_Command_Init+0x228>)
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_PAC,   AT_CMD_STR_PAC    ,AT_Callback_Pac, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST, "Get the node initial PAC" );
 8009bf0:	26e0      	movs	r6, #224	; 0xe0
	qATCLI_Setup( &ATCommandParser, BSP_USB_PUTC,
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	2380      	movs	r3, #128	; 0x80
 8009bf6:	f7fd f9f1 	bl	8006fdc <qATCLI_Setup>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_HELP, "at+help", AT_Callback_Help, QATCLI_CMDTYPE_ACT, "Show the available commands");
 8009bfa:	4b7e      	ldr	r3, [pc, #504]	; (8009df4 <AT_Command_Init+0x22c>)
 8009bfc:	4a7e      	ldr	r2, [pc, #504]	; (8009df8 <AT_Command_Init+0x230>)
 8009bfe:	9301      	str	r3, [sp, #4]
 8009c00:	2380      	movs	r3, #128	; 0x80
 8009c02:	011b      	lsls	r3, r3, #4
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	497d      	ldr	r1, [pc, #500]	; (8009dfc <AT_Command_Init+0x234>)
 8009c08:	4b7d      	ldr	r3, [pc, #500]	; (8009e00 <AT_Command_Init+0x238>)
 8009c0a:	0020      	movs	r0, r4
 8009c0c:	f7fd fa30 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_PAC,   AT_CMD_STR_PAC    ,AT_Callback_Pac, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST, "Get the node initial PAC" );
 8009c10:	4b7c      	ldr	r3, [pc, #496]	; (8009e04 <AT_Command_Init+0x23c>)
 8009c12:	0136      	lsls	r6, r6, #4
 8009c14:	9301      	str	r3, [sp, #4]
 8009c16:	9600      	str	r6, [sp, #0]
 8009c18:	4b7b      	ldr	r3, [pc, #492]	; (8009e08 <AT_Command_Init+0x240>)
 8009c1a:	4a7c      	ldr	r2, [pc, #496]	; (8009e0c <AT_Command_Init+0x244>)
 8009c1c:	497c      	ldr	r1, [pc, #496]	; (8009e10 <AT_Command_Init+0x248>)
 8009c1e:	0020      	movs	r0, r4
 8009c20:	f7fd fa26 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_ID,    AT_CMD_STR_ID     , AT_Callback_Id, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST, "Get the node SigFox ID" );
 8009c24:	4b7b      	ldr	r3, [pc, #492]	; (8009e14 <AT_Command_Init+0x24c>)
 8009c26:	9600      	str	r6, [sp, #0]
 8009c28:	9301      	str	r3, [sp, #4]
 8009c2a:	4a7b      	ldr	r2, [pc, #492]	; (8009e18 <AT_Command_Init+0x250>)
 8009c2c:	4b7b      	ldr	r3, [pc, #492]	; (8009e1c <AT_Command_Init+0x254>)
 8009c2e:	497c      	ldr	r1, [pc, #496]	; (8009e20 <AT_Command_Init+0x258>)
 8009c30:	0020      	movs	r0, r4
 8009c32:	f7fd fa1d 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_BATT,  AT_CMD_STR_BATT   ,AT_Callback_Batt, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x22, "Battery parameters" );
 8009c36:	4f7b      	ldr	r7, [pc, #492]	; (8009e24 <AT_Command_Init+0x25c>)
 8009c38:	4b7b      	ldr	r3, [pc, #492]	; (8009e28 <AT_Command_Init+0x260>)
 8009c3a:	9700      	str	r7, [sp, #0]
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	4a7b      	ldr	r2, [pc, #492]	; (8009e2c <AT_Command_Init+0x264>)
 8009c40:	4b7b      	ldr	r3, [pc, #492]	; (8009e30 <AT_Command_Init+0x268>)
 8009c42:	497c      	ldr	r1, [pc, #496]	; (8009e34 <AT_Command_Init+0x26c>)
 8009c44:	0020      	movs	r0, r4
 8009c46:	f7fd fa13 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_ADC,   AT_CMD_STR_ADC    , AT_Callback_Adc, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x44, " Set ADC");
 8009c4a:	4d7b      	ldr	r5, [pc, #492]	; (8009e38 <AT_Command_Init+0x270>)
 8009c4c:	4b7b      	ldr	r3, [pc, #492]	; (8009e3c <AT_Command_Init+0x274>)
 8009c4e:	9500      	str	r5, [sp, #0]
 8009c50:	9301      	str	r3, [sp, #4]
 8009c52:	4a7b      	ldr	r2, [pc, #492]	; (8009e40 <AT_Command_Init+0x278>)
 8009c54:	4b7b      	ldr	r3, [pc, #492]	; (8009e44 <AT_Command_Init+0x27c>)
 8009c56:	497c      	ldr	r1, [pc, #496]	; (8009e48 <AT_Command_Init+0x280>)
 8009c58:	0020      	movs	r0, r4
 8009c5a:	f7fd fa09 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_DI,    AT_CMD_STR_DI    , AT_Callback_Di, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x22, "Digital input ");
 8009c5e:	4b7b      	ldr	r3, [pc, #492]	; (8009e4c <AT_Command_Init+0x284>)
 8009c60:	9700      	str	r7, [sp, #0]
 8009c62:	9301      	str	r3, [sp, #4]
 8009c64:	4a7a      	ldr	r2, [pc, #488]	; (8009e50 <AT_Command_Init+0x288>)
 8009c66:	4b7b      	ldr	r3, [pc, #492]	; (8009e54 <AT_Command_Init+0x28c>)
 8009c68:	497b      	ldr	r1, [pc, #492]	; (8009e58 <AT_Command_Init+0x290>)
 8009c6a:	0020      	movs	r0, r4
 8009c6c:	f7fd fa00 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_TIME,  AT_CMD_STR_TIME   , AT_Callback_Time, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x44, "Change time report and kepp alive"); /*at+time? at+time=10,5*/
 8009c70:	4b7a      	ldr	r3, [pc, #488]	; (8009e5c <AT_Command_Init+0x294>)
 8009c72:	9500      	str	r5, [sp, #0]
 8009c74:	9301      	str	r3, [sp, #4]
 8009c76:	4a7a      	ldr	r2, [pc, #488]	; (8009e60 <AT_Command_Init+0x298>)
 8009c78:	4b7a      	ldr	r3, [pc, #488]	; (8009e64 <AT_Command_Init+0x29c>)
 8009c7a:	497b      	ldr	r1, [pc, #492]	; (8009e68 <AT_Command_Init+0x2a0>)
 8009c7c:	0020      	movs	r0, r4
 8009c7e:	f7fd f9f7 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_HT,    AT_CMD_STR_HT     , AT_Callback_Hum_Temp, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x44, " Temperature and humidity");
 8009c82:	4b7a      	ldr	r3, [pc, #488]	; (8009e6c <AT_Command_Init+0x2a4>)
 8009c84:	9500      	str	r5, [sp, #0]
 8009c86:	9301      	str	r3, [sp, #4]
 8009c88:	4a79      	ldr	r2, [pc, #484]	; (8009e70 <AT_Command_Init+0x2a8>)
 8009c8a:	4b7a      	ldr	r3, [pc, #488]	; (8009e74 <AT_Command_Init+0x2ac>)
 8009c8c:	497a      	ldr	r1, [pc, #488]	; (8009e78 <AT_Command_Init+0x2b0>)
 8009c8e:	0020      	movs	r0, r4
 8009c90:	f7fd f9ee 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_AQ,    AT_CMD_STR_AIRQ   , AT_Callback_AirQ, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x33, " Airquality");
 8009c94:	4b79      	ldr	r3, [pc, #484]	; (8009e7c <AT_Command_Init+0x2b4>)
 8009c96:	4a7a      	ldr	r2, [pc, #488]	; (8009e80 <AT_Command_Init+0x2b8>)
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	4b7a      	ldr	r3, [pc, #488]	; (8009e84 <AT_Command_Init+0x2bc>)
 8009c9c:	497a      	ldr	r1, [pc, #488]	; (8009e88 <AT_Command_Init+0x2c0>)
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	0020      	movs	r0, r4
 8009ca2:	4b7a      	ldr	r3, [pc, #488]	; (8009e8c <AT_Command_Init+0x2c4>)
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_GPS,   AT_CMD_STR_GPS    , AT_Callback_Gps, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x11, " Gps");
 8009ca4:	4d7a      	ldr	r5, [pc, #488]	; (8009e90 <AT_Command_Init+0x2c8>)
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_AQ,    AT_CMD_STR_AIRQ   , AT_Callback_AirQ, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x33, " Airquality");
 8009ca6:	f7fd f9e3 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_GPS,   AT_CMD_STR_GPS    , AT_Callback_Gps, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x11, " Gps");
 8009caa:	4b7a      	ldr	r3, [pc, #488]	; (8009e94 <AT_Command_Init+0x2cc>)
 8009cac:	9500      	str	r5, [sp, #0]
 8009cae:	9301      	str	r3, [sp, #4]
 8009cb0:	4a79      	ldr	r2, [pc, #484]	; (8009e98 <AT_Command_Init+0x2d0>)
 8009cb2:	4b7a      	ldr	r3, [pc, #488]	; (8009e9c <AT_Command_Init+0x2d4>)
 8009cb4:	497a      	ldr	r1, [pc, #488]	; (8009ea0 <AT_Command_Init+0x2d8>)
 8009cb6:	0020      	movs	r0, r4
 8009cb8:	f7fd f9da 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_WIFI,  AT_CMD_STR_WIFI   , AT_Callback_WiFi, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x11, " Wi-Fi");
 8009cbc:	4b79      	ldr	r3, [pc, #484]	; (8009ea4 <AT_Command_Init+0x2dc>)
 8009cbe:	9500      	str	r5, [sp, #0]
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	4a79      	ldr	r2, [pc, #484]	; (8009ea8 <AT_Command_Init+0x2e0>)
 8009cc4:	4b79      	ldr	r3, [pc, #484]	; (8009eac <AT_Command_Init+0x2e4>)
 8009cc6:	497a      	ldr	r1, [pc, #488]	; (8009eb0 <AT_Command_Init+0x2e8>)
 8009cc8:	0020      	movs	r0, r4
 8009cca:	f7fd f9d1 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_AR,    AT_CMD_STR_ALWAYS , AT_Callback_AlwaysReport, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x11, " always report");
 8009cce:	4b79      	ldr	r3, [pc, #484]	; (8009eb4 <AT_Command_Init+0x2ec>)
 8009cd0:	9500      	str	r5, [sp, #0]
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	4a78      	ldr	r2, [pc, #480]	; (8009eb8 <AT_Command_Init+0x2f0>)
 8009cd6:	4b79      	ldr	r3, [pc, #484]	; (8009ebc <AT_Command_Init+0x2f4>)
 8009cd8:	4979      	ldr	r1, [pc, #484]	; (8009ec0 <AT_Command_Init+0x2f8>)
 8009cda:	0020      	movs	r0, r4
 8009cdc:	f7fd f9c8 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_DL,    AT_CMD_STR_DL     , AT_Callback_Downlink, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x11, "downlink");
 8009ce0:	4b78      	ldr	r3, [pc, #480]	; (8009ec4 <AT_Command_Init+0x2fc>)
 8009ce2:	9500      	str	r5, [sp, #0]
 8009ce4:	9301      	str	r3, [sp, #4]
 8009ce6:	4a78      	ldr	r2, [pc, #480]	; (8009ec8 <AT_Command_Init+0x300>)
 8009ce8:	4b78      	ldr	r3, [pc, #480]	; (8009ecc <AT_Command_Init+0x304>)
 8009cea:	4979      	ldr	r1, [pc, #484]	; (8009ed0 <AT_Command_Init+0x308>)
 8009cec:	0020      	movs	r0, r4
 8009cee:	f7fd f9bf 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_PULS,  AT_CMD_STR_PULSED , AT_Callback_Pulsation, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x55, " NPulsation and color by event");
 8009cf2:	4b78      	ldr	r3, [pc, #480]	; (8009ed4 <AT_Command_Init+0x30c>)
 8009cf4:	4a78      	ldr	r2, [pc, #480]	; (8009ed8 <AT_Command_Init+0x310>)
 8009cf6:	9301      	str	r3, [sp, #4]
 8009cf8:	4b78      	ldr	r3, [pc, #480]	; (8009edc <AT_Command_Init+0x314>)
 8009cfa:	4979      	ldr	r1, [pc, #484]	; (8009ee0 <AT_Command_Init+0x318>)
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	0020      	movs	r0, r4
 8009d00:	4b78      	ldr	r3, [pc, #480]	; (8009ee4 <AT_Command_Init+0x31c>)
 8009d02:	f7fd f9b5 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_RCZ,   AT_CMD_STR_RCZ    , AT_Callback_Rcz, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x11, " change frequency sigfox");
 8009d06:	4b78      	ldr	r3, [pc, #480]	; (8009ee8 <AT_Command_Init+0x320>)
 8009d08:	9500      	str	r5, [sp, #0]
 8009d0a:	9301      	str	r3, [sp, #4]
 8009d0c:	4a77      	ldr	r2, [pc, #476]	; (8009eec <AT_Command_Init+0x324>)
 8009d0e:	4b78      	ldr	r3, [pc, #480]	; (8009ef0 <AT_Command_Init+0x328>)
 8009d10:	4978      	ldr	r1, [pc, #480]	; (8009ef4 <AT_Command_Init+0x32c>)
 8009d12:	0020      	movs	r0, r4
 8009d14:	f7fd f9ac 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_ACCEL, AT_CMD_STR_AXL    , AT_Callback_Accelerometer, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x74, " accelerometer");
 8009d18:	4b77      	ldr	r3, [pc, #476]	; (8009ef8 <AT_Command_Init+0x330>)
 8009d1a:	4a78      	ldr	r2, [pc, #480]	; (8009efc <AT_Command_Init+0x334>)
 8009d1c:	9301      	str	r3, [sp, #4]
 8009d1e:	4b78      	ldr	r3, [pc, #480]	; (8009f00 <AT_Command_Init+0x338>)
 8009d20:	4978      	ldr	r1, [pc, #480]	; (8009f04 <AT_Command_Init+0x33c>)
 8009d22:	9300      	str	r3, [sp, #0]
 8009d24:	0020      	movs	r0, r4
 8009d26:	4b78      	ldr	r3, [pc, #480]	; (8009f08 <AT_Command_Init+0x340>)
 8009d28:	f7fd f9a2 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_APIINFO,AT_CMD_STR_INFO  , AT_Callback_ApiInfo , QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST, "Get api info" );
 8009d2c:	4b77      	ldr	r3, [pc, #476]	; (8009f0c <AT_Command_Init+0x344>)
 8009d2e:	9600      	str	r6, [sp, #0]
 8009d30:	9301      	str	r3, [sp, #4]
 8009d32:	4a77      	ldr	r2, [pc, #476]	; (8009f10 <AT_Command_Init+0x348>)
 8009d34:	4b77      	ldr	r3, [pc, #476]	; (8009f14 <AT_Command_Init+0x34c>)
 8009d36:	4978      	ldr	r1, [pc, #480]	; (8009f18 <AT_Command_Init+0x350>)
 8009d38:	0020      	movs	r0, r4
 8009d3a:	f7fd f999 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_REDUND,AT_CMD_STR_REPEAT , AT_Callback_RepeatPayload, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x11, "redundancia");
 8009d3e:	4b77      	ldr	r3, [pc, #476]	; (8009f1c <AT_Command_Init+0x354>)
 8009d40:	9500      	str	r5, [sp, #0]
 8009d42:	9301      	str	r3, [sp, #4]
 8009d44:	4a76      	ldr	r2, [pc, #472]	; (8009f20 <AT_Command_Init+0x358>)
 8009d46:	4b77      	ldr	r3, [pc, #476]	; (8009f24 <AT_Command_Init+0x35c>)
 8009d48:	4977      	ldr	r1, [pc, #476]	; (8009f28 <AT_Command_Init+0x360>)
 8009d4a:	0020      	movs	r0, r4
 8009d4c:	f7fd f990 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_READ,  AT_CMD_STR_READ   , AT_Callback_Read, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x11 , "read all parameters" );
 8009d50:	4b76      	ldr	r3, [pc, #472]	; (8009f2c <AT_Command_Init+0x364>)
 8009d52:	9500      	str	r5, [sp, #0]
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	4a76      	ldr	r2, [pc, #472]	; (8009f30 <AT_Command_Init+0x368>)
 8009d58:	4b76      	ldr	r3, [pc, #472]	; (8009f34 <AT_Command_Init+0x36c>)
 8009d5a:	4977      	ldr	r1, [pc, #476]	; (8009f38 <AT_Command_Init+0x370>)
 8009d5c:	0020      	movs	r0, r4
 8009d5e:	f7fd f987 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_ONLY_SF,AT_CMD_STR_ONLYLOC, AT_Callback_OnlySendLocation, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x11, " only send frame");
 8009d62:	4b76      	ldr	r3, [pc, #472]	; (8009f3c <AT_Command_Init+0x374>)
 8009d64:	9500      	str	r5, [sp, #0]
 8009d66:	9301      	str	r3, [sp, #4]
 8009d68:	4a75      	ldr	r2, [pc, #468]	; (8009f40 <AT_Command_Init+0x378>)
 8009d6a:	4b76      	ldr	r3, [pc, #472]	; (8009f44 <AT_Command_Init+0x37c>)
 8009d6c:	4976      	ldr	r1, [pc, #472]	; (8009f48 <AT_Command_Init+0x380>)
 8009d6e:	0020      	movs	r0, r4
 8009d70:	f7fd f97e 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_ID_DEV,AT_CMD_STR_IDEV   , AT_Callback_IdDevice, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x11, " id device");
 8009d74:	4b75      	ldr	r3, [pc, #468]	; (8009f4c <AT_Command_Init+0x384>)
 8009d76:	9500      	str	r5, [sp, #0]
 8009d78:	9301      	str	r3, [sp, #4]
 8009d7a:	4a75      	ldr	r2, [pc, #468]	; (8009f50 <AT_Command_Init+0x388>)
 8009d7c:	4b75      	ldr	r3, [pc, #468]	; (8009f54 <AT_Command_Init+0x38c>)
 8009d7e:	4976      	ldr	r1, [pc, #472]	; (8009f58 <AT_Command_Init+0x390>)
 8009d80:	0020      	movs	r0, r4
 8009d82:	f7fd f975 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_DOCTRL,AT_CMD_STR_GPO    , AT_Callback_DoCtrl, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x11, " digital output");
 8009d86:	9500      	str	r5, [sp, #0]
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_RESETFACT, AT_CMD_STR_RESETF , AT_Callback_ResetFactory, QATCLI_CMDTYPE_ACT |QATCLI_CMDTYPE_TEST, "Reset factory");
 8009d88:	25a0      	movs	r5, #160	; 0xa0
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_DOCTRL,AT_CMD_STR_GPO    , AT_Callback_DoCtrl, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_READ | QATCLI_CMDTYPE_TEST | QATCLI_CMDTYPE_PARA | 0x11, " digital output");
 8009d8a:	4b74      	ldr	r3, [pc, #464]	; (8009f5c <AT_Command_Init+0x394>)
 8009d8c:	4a74      	ldr	r2, [pc, #464]	; (8009f60 <AT_Command_Init+0x398>)
 8009d8e:	9301      	str	r3, [sp, #4]
 8009d90:	4974      	ldr	r1, [pc, #464]	; (8009f64 <AT_Command_Init+0x39c>)
 8009d92:	4b75      	ldr	r3, [pc, #468]	; (8009f68 <AT_Command_Init+0x3a0>)
 8009d94:	0020      	movs	r0, r4
 8009d96:	f7fd f96b 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_RESETFACT, AT_CMD_STR_RESETF , AT_Callback_ResetFactory, QATCLI_CMDTYPE_ACT |QATCLI_CMDTYPE_TEST, "Reset factory");
 8009d9a:	4b74      	ldr	r3, [pc, #464]	; (8009f6c <AT_Command_Init+0x3a4>)
 8009d9c:	012d      	lsls	r5, r5, #4
 8009d9e:	9301      	str	r3, [sp, #4]
 8009da0:	9500      	str	r5, [sp, #0]
 8009da2:	4b73      	ldr	r3, [pc, #460]	; (8009f70 <AT_Command_Init+0x3a8>)
 8009da4:	4a73      	ldr	r2, [pc, #460]	; (8009f74 <AT_Command_Init+0x3ac>)
 8009da6:	4974      	ldr	r1, [pc, #464]	; (8009f78 <AT_Command_Init+0x3b0>)
 8009da8:	0020      	movs	r0, r4
 8009daa:	f7fd f961 	bl	8007070 <qATCLI_CmdSubscribe>
	qATCLI_CmdSubscribe( &ATCommandParser, &AT_SAVE, AT_CMD_STR_SAVE , AT_Callback_Save, QATCLI_CMDTYPE_ACT | QATCLI_CMDTYPE_TEST, "Save config");
 8009dae:	4b73      	ldr	r3, [pc, #460]	; (8009f7c <AT_Command_Init+0x3b4>)
 8009db0:	9500      	str	r5, [sp, #0]
 8009db2:	9301      	str	r3, [sp, #4]
 8009db4:	4a72      	ldr	r2, [pc, #456]	; (8009f80 <AT_Command_Init+0x3b8>)
 8009db6:	4b73      	ldr	r3, [pc, #460]	; (8009f84 <AT_Command_Init+0x3bc>)
 8009db8:	4973      	ldr	r1, [pc, #460]	; (8009f88 <AT_Command_Init+0x3c0>)
 8009dba:	0020      	movs	r0, r4
 8009dbc:	f7fd f958 	bl	8007070 <qATCLI_CmdSubscribe>
	qOS_Add_ATCLITask( &Task_ATParser, &ATCommandParser, qLowest_Priority );
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	0021      	movs	r1, r4
 8009dc4:	4871      	ldr	r0, [pc, #452]	; (8009f8c <AT_Command_Init+0x3c4>)
 8009dc6:	f7fe fa71 	bl	80082ac <qOS_Add_ATCLITask>
}
 8009dca:	b009      	add	sp, #36	; 0x24
 8009dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dce:	46c0      	nop			; (mov r8, r8)
 8009dd0:	0800d707 	.word	0x0800d707
 8009dd4:	0800c5d5 	.word	0x0800c5d5
 8009dd8:	20000828 	.word	0x20000828
 8009ddc:	0800c5c3 	.word	0x0800c5c3
 8009de0:	20000ad8 	.word	0x20000ad8
 8009de4:	0800c4e3 	.word	0x0800c4e3
 8009de8:	0800b4f1 	.word	0x0800b4f1
 8009dec:	0800d2f9 	.word	0x0800d2f9
 8009df0:	20000b58 	.word	0x20000b58
 8009df4:	0800d31a 	.word	0x0800d31a
 8009df8:	0800d312 	.word	0x0800d312
 8009dfc:	20000988 	.word	0x20000988
 8009e00:	080089f1 	.word	0x080089f1
 8009e04:	0800d33d 	.word	0x0800d33d
 8009e08:	08009209 	.word	0x08009209
 8009e0c:	0800d336 	.word	0x0800d336
 8009e10:	20000a00 	.word	0x20000a00
 8009e14:	0800d35c 	.word	0x0800d35c
 8009e18:	0800d356 	.word	0x0800d356
 8009e1c:	080091c9 	.word	0x080091c9
 8009e20:	200009b8 	.word	0x200009b8
 8009e24:	00000f22 	.word	0x00000f22
 8009e28:	0800d373 	.word	0x0800d373
 8009e2c:	0800c739 	.word	0x0800c739
 8009e30:	08009169 	.word	0x08009169
 8009e34:	20000910 	.word	0x20000910
 8009e38:	00000f44 	.word	0x00000f44
 8009e3c:	0800d386 	.word	0x0800d386
 8009e40:	0800c6de 	.word	0x0800c6de
 8009e44:	080090d1 	.word	0x080090d1
 8009e48:	200008b0 	.word	0x200008b0
 8009e4c:	0800d38f 	.word	0x0800d38f
 8009e50:	0800c7c4 	.word	0x0800c7c4
 8009e54:	0800903d 	.word	0x0800903d
 8009e58:	20000928 	.word	0x20000928
 8009e5c:	0800d39e 	.word	0x0800d39e
 8009e60:	0800d2e9 	.word	0x0800d2e9
 8009e64:	08009b19 	.word	0x08009b19
 8009e68:	20000aa8 	.word	0x20000aa8
 8009e6c:	0800d3c0 	.word	0x0800d3c0
 8009e70:	0800c916 	.word	0x0800c916
 8009e74:	08008fa5 	.word	0x08008fa5
 8009e78:	200009a0 	.word	0x200009a0
 8009e7c:	0800d3da 	.word	0x0800d3da
 8009e80:	0800c70a 	.word	0x0800c70a
 8009e84:	00000f33 	.word	0x00000f33
 8009e88:	200008e0 	.word	0x200008e0
 8009e8c:	08008f3d 	.word	0x08008f3d
 8009e90:	00000f11 	.word	0x00000f11
 8009e94:	0800d3e6 	.word	0x0800d3e6
 8009e98:	0800c7da 	.word	0x0800c7da
 8009e9c:	08008ee9 	.word	0x08008ee9
 8009ea0:	20000970 	.word	0x20000970
 8009ea4:	0800d3eb 	.word	0x0800d3eb
 8009ea8:	0800d2f1 	.word	0x0800d2f1
 8009eac:	08008e95 	.word	0x08008e95
 8009eb0:	20000ac0 	.word	0x20000ac0
 8009eb4:	0800d3f2 	.word	0x0800d3f2
 8009eb8:	0800c712 	.word	0x0800c712
 8009ebc:	08008e41 	.word	0x08008e41
 8009ec0:	200008f8 	.word	0x200008f8
 8009ec4:	0800d401 	.word	0x0800d401
 8009ec8:	0800c7d4 	.word	0x0800c7d4
 8009ecc:	08008ded 	.word	0x08008ded
 8009ed0:	20000940 	.word	0x20000940
 8009ed4:	0800d40a 	.word	0x0800d40a
 8009ed8:	0800cafc 	.word	0x0800cafc
 8009edc:	00000f55 	.word	0x00000f55
 8009ee0:	20000a18 	.word	0x20000a18
 8009ee4:	08008d65 	.word	0x08008d65
 8009ee8:	0800d429 	.word	0x0800d429
 8009eec:	0800cb11 	.word	0x0800cb11
 8009ef0:	08008d11 	.word	0x08008d11
 8009ef4:	20000a30 	.word	0x20000a30
 8009ef8:	0800d442 	.word	0x0800d442
 8009efc:	0800c60a 	.word	0x0800c60a
 8009f00:	00000f74 	.word	0x00000f74
 8009f04:	20000898 	.word	0x20000898
 8009f08:	08008c25 	.word	0x08008c25
 8009f0c:	0800d459 	.word	0x0800d459
 8009f10:	0800d451 	.word	0x0800d451
 8009f14:	0800a12d 	.word	0x0800a12d
 8009f18:	200008c8 	.word	0x200008c8
 8009f1c:	0800d466 	.word	0x0800d466
 8009f20:	0800d276 	.word	0x0800d276
 8009f24:	08008bd1 	.word	0x08008bd1
 8009f28:	20000a60 	.word	0x20000a60
 8009f2c:	0800d472 	.word	0x0800d472
 8009f30:	0800d26e 	.word	0x0800d26e
 8009f34:	080092b5 	.word	0x080092b5
 8009f38:	20000a48 	.word	0x20000a48
 8009f3c:	0800d486 	.word	0x0800d486
 8009f40:	0800ca07 	.word	0x0800ca07
 8009f44:	08008b7d 	.word	0x08008b7d
 8009f48:	200009e8 	.word	0x200009e8
 8009f4c:	0800d497 	.word	0x0800d497
 8009f50:	0800c9f1 	.word	0x0800c9f1
 8009f54:	08008b15 	.word	0x08008b15
 8009f58:	200009d0 	.word	0x200009d0
 8009f5c:	0800d4a2 	.word	0x0800d4a2
 8009f60:	0800c7cd 	.word	0x0800c7cd
 8009f64:	20000958 	.word	0x20000958
 8009f68:	08009249 	.word	0x08009249
 8009f6c:	0800d4b2 	.word	0x0800d4b2
 8009f70:	08008ac5 	.word	0x08008ac5
 8009f74:	0800d280 	.word	0x0800d280
 8009f78:	20000a78 	.word	0x20000a78
 8009f7c:	0800d4c0 	.word	0x0800d4c0
 8009f80:	0800d28a 	.word	0x0800d28a
 8009f84:	08008a75 	.word	0x08008a75
 8009f88:	20000a90 	.word	0x20000a90
 8009f8c:	20000d58 	.word	0x20000d58

08009f90 <AT_CLI_CustomCallback>:


void AT_CLI_CustomCallback(uint8_t * Buf , uint32_t Len){
 8009f90:	b510      	push	{r4, lr}
 8009f92:	000a      	movs	r2, r1
	(void)qATCLI_ISRHandlerBlock(&ATCommandParser, (char*)Buf, Len ); /*feed the AT CLI input*/
 8009f94:	0001      	movs	r1, r0
 8009f96:	4802      	ldr	r0, [pc, #8]	; (8009fa0 <AT_CLI_CustomCallback+0x10>)
 8009f98:	f7fd f8da 	bl	8007150 <qATCLI_ISRHandlerBlock>
}
 8009f9c:	bd10      	pop	{r4, pc}
 8009f9e:	46c0      	nop			; (mov r8, r8)
 8009fa0:	20000828 	.word	0x20000828

08009fa4 <ProjectInformation>:

void ProjectInformation(int putsUsb) {
 8009fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fa6:	4c4e      	ldr	r4, [pc, #312]	; (800a0e0 <ProjectInformation+0x13c>)
 8009fa8:	44a5      	add	sp, r4
 8009faa:	900f      	str	r0, [sp, #60]	; 0x3c
	BSP_UART_DEBUG_PUTS("=========================================\r\n");
 8009fac:	484d      	ldr	r0, [pc, #308]	; (800a0e4 <ProjectInformation+0x140>)
 8009fae:	f001 fa61 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS("iButton  ");
 8009fb2:	484d      	ldr	r0, [pc, #308]	; (800a0e8 <ProjectInformation+0x144>)
 8009fb4:	f001 fa5e 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS(StrIdDevice[AppData_Config.idDevice] );
 8009fb8:	4b4c      	ldr	r3, [pc, #304]	; (800a0ec <ProjectInformation+0x148>)
 8009fba:	4a4d      	ldr	r2, [pc, #308]	; (800a0f0 <ProjectInformation+0x14c>)
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	4d4d      	ldr	r5, [pc, #308]	; (800a0f4 <ProjectInformation+0x150>)
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	5898      	ldr	r0, [r3, r2]
 8009fc4:	f001 fa56 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS(APP_CONFIG_BUILD_VER "\r\n");
 8009fc8:	484b      	ldr	r0, [pc, #300]	; (800a0f8 <ProjectInformation+0x154>)
 8009fca:	f001 fa53 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS(INF_STRING );
 8009fce:	484b      	ldr	r0, [pc, #300]	; (800a0fc <ProjectInformation+0x158>)
 8009fd0:	f001 fa50 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS("Time Report (h:m:s) : " );
 8009fd4:	484a      	ldr	r0, [pc, #296]	; (800a100 <ProjectInformation+0x15c>)
 8009fd6:	f001 fa4d 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS(qIOUtil_ItoA(AppData_Config.time.hour , StrReportTime,10));
 8009fda:	4c4a      	ldr	r4, [pc, #296]	; (800a104 <ProjectInformation+0x160>)
 8009fdc:	4b4a      	ldr	r3, [pc, #296]	; (800a108 <ProjectInformation+0x164>)
 8009fde:	220a      	movs	r2, #10
 8009fe0:	7818      	ldrb	r0, [r3, #0]
 8009fe2:	0021      	movs	r1, r4
 8009fe4:	f7fd fdbf 	bl	8007b66 <qIOUtil_ItoA>
 8009fe8:	f001 fa44 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS(":");
 8009fec:	4e47      	ldr	r6, [pc, #284]	; (800a10c <ProjectInformation+0x168>)
	BSP_UART_DEBUG_PUTS(qIOUtil_ItoA(AppData_Config.time.min , StrReportTime,10));
	BSP_UART_DEBUG_PUTS(":");
	BSP_UART_DEBUG_PUTS(qIOUtil_ItoA(AppData_Config.time.sec , StrReportTime,10));
	BSP_UART_DEBUG_PUTS("\r\nKeep alive: ");
	BSP_UART_DEBUG_PUTS(qIOUtil_ItoA(AppData_Config.keepAlive , StrReportTime,10));
 8009fee:	002f      	movs	r7, r5
	BSP_UART_DEBUG_PUTS(":");
 8009ff0:	0030      	movs	r0, r6
 8009ff2:	f001 fa3f 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS(qIOUtil_ItoA(AppData_Config.time.min , StrReportTime,10));
 8009ff6:	4b46      	ldr	r3, [pc, #280]	; (800a110 <ProjectInformation+0x16c>)
 8009ff8:	220a      	movs	r2, #10
 8009ffa:	7818      	ldrb	r0, [r3, #0]
 8009ffc:	0021      	movs	r1, r4
 8009ffe:	f7fd fdb2 	bl	8007b66 <qIOUtil_ItoA>
 800a002:	f001 fa37 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS(":");
 800a006:	0030      	movs	r0, r6
	BSP_UART_DEBUG_PUTS(qIOUtil_ItoA(AppData_Config.time.sec , StrReportTime,10));
 800a008:	002e      	movs	r6, r5
 800a00a:	366e      	adds	r6, #110	; 0x6e
	BSP_UART_DEBUG_PUTS(":");
 800a00c:	f001 fa32 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS(qIOUtil_ItoA(AppData_Config.time.sec , StrReportTime,10));
 800a010:	220a      	movs	r2, #10
 800a012:	0021      	movs	r1, r4
 800a014:	7830      	ldrb	r0, [r6, #0]
 800a016:	f7fd fda6 	bl	8007b66 <qIOUtil_ItoA>
 800a01a:	f001 fa2b 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS(qIOUtil_ItoA(AppData_Config.keepAlive , StrReportTime,10));
 800a01e:	376f      	adds	r7, #111	; 0x6f
	BSP_UART_DEBUG_PUTS("\r\nKeep alive: ");
 800a020:	483c      	ldr	r0, [pc, #240]	; (800a114 <ProjectInformation+0x170>)
 800a022:	f001 fa27 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS(qIOUtil_ItoA(AppData_Config.keepAlive , StrReportTime,10));
 800a026:	220a      	movs	r2, #10
 800a028:	0021      	movs	r1, r4
 800a02a:	7838      	ldrb	r0, [r7, #0]
 800a02c:	f7fd fd9b 	bl	8007b66 <qIOUtil_ItoA>
 800a030:	f001 fa20 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS("\r\nDownlink: ");
	BSP_UART_DEBUG_PUTS(qIOUtil_ItoA(AppData_Config.downlinkIsActive, StrReportTime,10));
 800a034:	3541      	adds	r5, #65	; 0x41
	BSP_UART_DEBUG_PUTS("\r\nDownlink: ");
 800a036:	4838      	ldr	r0, [pc, #224]	; (800a118 <ProjectInformation+0x174>)
 800a038:	f001 fa1c 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS(qIOUtil_ItoA(AppData_Config.downlinkIsActive, StrReportTime,10));
 800a03c:	220a      	movs	r2, #10
 800a03e:	0021      	movs	r1, r4
 800a040:	7828      	ldrb	r0, [r5, #0]
 800a042:	f7fd fd90 	bl	8007b66 <qIOUtil_ItoA>
 800a046:	f001 fa15 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS("\r\n" AUT_STRING "\r\n");
 800a04a:	4834      	ldr	r0, [pc, #208]	; (800a11c <ProjectInformation+0x178>)
 800a04c:	f001 fa12 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS(__DATE__ "-" __TIME__ "\r\n");
 800a050:	4833      	ldr	r0, [pc, #204]	; (800a120 <ProjectInformation+0x17c>)
 800a052:	f001 fa0f 	bl	800b474 <WSQ_UART_DebugPutString>
	BSP_UART_DEBUG_PUTS("=========================================\r\n");
 800a056:	4823      	ldr	r0, [pc, #140]	; (800a0e4 <ProjectInformation+0x140>)
 800a058:	f001 fa0c 	bl	800b474 <WSQ_UART_DebugPutString>

	char bufferputs[500];

	if(1 == putsUsb){
 800a05c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d139      	bne.n	800a0d6 <ProjectInformation+0x132>
		sprintf(bufferputs,"%s%s%s%s\r\n%s%s%02d:%02d:%02d%s%s%s%s%s%s%s",
				"=========================================\r\n",
				"iButton  ",
				StrIdDevice[AppData_Config.idDevice] ,
 800a062:	4b22      	ldr	r3, [pc, #136]	; (800a0ec <ProjectInformation+0x148>)
		sprintf(bufferputs,"%s%s%s%s\r\n%s%s%02d:%02d:%02d%s%s%s%s%s%s%s",
 800a064:	4a22      	ldr	r2, [pc, #136]	; (800a0f0 <ProjectInformation+0x14c>)
				StrIdDevice[AppData_Config.idDevice] ,
 800a066:	781b      	ldrb	r3, [r3, #0]
		sprintf(bufferputs,"%s%s%s%s\r\n%s%s%02d:%02d:%02d%s%s%s%s%s%s%s",
 800a068:	0021      	movs	r1, r4
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	589b      	ldr	r3, [r3, r2]
 800a06e:	220a      	movs	r2, #10
 800a070:	930f      	str	r3, [sp, #60]	; 0x3c
 800a072:	4b25      	ldr	r3, [pc, #148]	; (800a108 <ProjectInformation+0x164>)
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	9310      	str	r3, [sp, #64]	; 0x40
 800a078:	4b25      	ldr	r3, [pc, #148]	; (800a110 <ProjectInformation+0x16c>)
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	9311      	str	r3, [sp, #68]	; 0x44
 800a07e:	7838      	ldrb	r0, [r7, #0]
 800a080:	7836      	ldrb	r6, [r6, #0]
 800a082:	f7fd fd70 	bl	8007b66 <qIOUtil_ItoA>
 800a086:	220a      	movs	r2, #10
 800a088:	0007      	movs	r7, r0
 800a08a:	0021      	movs	r1, r4
 800a08c:	7828      	ldrb	r0, [r5, #0]
 800a08e:	f7fd fd6a 	bl	8007b66 <qIOUtil_ItoA>
 800a092:	4b14      	ldr	r3, [pc, #80]	; (800a0e4 <ProjectInformation+0x140>)
 800a094:	900a      	str	r0, [sp, #40]	; 0x28
 800a096:	930d      	str	r3, [sp, #52]	; 0x34
 800a098:	4b21      	ldr	r3, [pc, #132]	; (800a120 <ProjectInformation+0x17c>)
 800a09a:	4a12      	ldr	r2, [pc, #72]	; (800a0e4 <ProjectInformation+0x140>)
 800a09c:	930c      	str	r3, [sp, #48]	; 0x30
 800a09e:	4b1f      	ldr	r3, [pc, #124]	; (800a11c <ProjectInformation+0x178>)
 800a0a0:	4920      	ldr	r1, [pc, #128]	; (800a124 <ProjectInformation+0x180>)
 800a0a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0a4:	4b1c      	ldr	r3, [pc, #112]	; (800a118 <ProjectInformation+0x174>)
 800a0a6:	a813      	add	r0, sp, #76	; 0x4c
 800a0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0aa:	4b1a      	ldr	r3, [pc, #104]	; (800a114 <ProjectInformation+0x170>)
 800a0ac:	9708      	str	r7, [sp, #32]
 800a0ae:	9307      	str	r3, [sp, #28]
 800a0b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0b2:	9606      	str	r6, [sp, #24]
 800a0b4:	9305      	str	r3, [sp, #20]
 800a0b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0b8:	9304      	str	r3, [sp, #16]
 800a0ba:	4b11      	ldr	r3, [pc, #68]	; (800a100 <ProjectInformation+0x15c>)
 800a0bc:	9303      	str	r3, [sp, #12]
 800a0be:	4b0f      	ldr	r3, [pc, #60]	; (800a0fc <ProjectInformation+0x158>)
 800a0c0:	9302      	str	r3, [sp, #8]
 800a0c2:	4b19      	ldr	r3, [pc, #100]	; (800a128 <ProjectInformation+0x184>)
 800a0c4:	9301      	str	r3, [sp, #4]
 800a0c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	4b07      	ldr	r3, [pc, #28]	; (800a0e8 <ProjectInformation+0x144>)
 800a0cc:	f001 fb46 	bl	800b75c <siprintf>
				qIOUtil_ItoA(AppData_Config.downlinkIsActive, StrReportTime,10),
				("\r\n" AUT_STRING "\r\n"),
				(__DATE__ "-" __TIME__ "\r\n"),
				("=========================================\r\n")
				);
		BSP_USB_PUTS((uint8_t*)bufferputs);
 800a0d0:	a813      	add	r0, sp, #76	; 0x4c
 800a0d2:	f001 fa03 	bl	800b4dc <WSQ_VCP_Print>

	}
}
 800a0d6:	2391      	movs	r3, #145	; 0x91
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	449d      	add	sp, r3
 800a0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0de:	46c0      	nop			; (mov r8, r8)
 800a0e0:	fffffdbc 	.word	0xfffffdbc
 800a0e4:	0800d4cc 	.word	0x0800d4cc
 800a0e8:	0800d4f8 	.word	0x0800d4f8
 800a0ec:	20000222 	.word	0x20000222
 800a0f0:	20000244 	.word	0x20000244
 800a0f4:	20000184 	.word	0x20000184
 800a0f8:	0800d502 	.word	0x0800d502
 800a0fc:	0800d50a 	.word	0x0800d50a
 800a100:	0800d555 	.word	0x0800d555
 800a104:	20002020 	.word	0x20002020
 800a108:	200001f0 	.word	0x200001f0
 800a10c:	0800d56c 	.word	0x0800d56c
 800a110:	200001f1 	.word	0x200001f1
 800a114:	0800d56e 	.word	0x0800d56e
 800a118:	0800d57d 	.word	0x0800d57d
 800a11c:	0800d58a 	.word	0x0800d58a
 800a120:	0800d5aa 	.word	0x0800d5aa
 800a124:	0800d5c1 	.word	0x0800d5c1
 800a128:	0800d5ec 	.word	0x0800d5ec

0800a12c <AT_Callback_ApiInfo>:
	switch( param->Type ){
 800a12c:	2280      	movs	r2, #128	; 0x80
static qATCLI_Response_t AT_Callback_ApiInfo( qATCLI_Handler_t parser, qATCLI_PreCmd_t param){
 800a12e:	b510      	push	{r4, lr}
	switch( param->Type ){
 800a130:	8b8b      	ldrh	r3, [r1, #28]
 800a132:	0092      	lsls	r2, r2, #2
 800a134:	4293      	cmp	r3, r2
 800a136:	d008      	beq.n	800a14a <AT_Callback_ApiInfo+0x1e>
 800a138:	2280      	movs	r2, #128	; 0x80
 800a13a:	00d2      	lsls	r2, r2, #3
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d10a      	bne.n	800a156 <AT_Callback_ApiInfo+0x2a>
		ProjectInformation(1);
 800a140:	2001      	movs	r0, #1
 800a142:	f7ff ff2f 	bl	8009fa4 <ProjectInformation>
		RetValue = QATCLI_NORESPONSE;
 800a146:	2000      	movs	r0, #0
}
 800a148:	bd10      	pop	{r4, pc}
		sprintf(parser->Output,"%s",AT_CMD_STR_INFO);
 800a14a:	4904      	ldr	r1, [pc, #16]	; (800a15c <AT_Callback_ApiInfo+0x30>)
 800a14c:	6880      	ldr	r0, [r0, #8]
 800a14e:	f001 fb33 	bl	800b7b8 <strcpy>
 800a152:	2001      	movs	r0, #1
 800a154:	e7f8      	b.n	800a148 <AT_Callback_ApiInfo+0x1c>
	qATCLI_Response_t RetValue = QATCLI_ERROR;
 800a156:	4802      	ldr	r0, [pc, #8]	; (800a160 <AT_Callback_ApiInfo+0x34>)
 800a158:	e7f6      	b.n	800a148 <AT_Callback_ApiInfo+0x1c>
 800a15a:	46c0      	nop			; (mov r8, r8)
 800a15c:	0800d451 	.word	0x0800d451
 800a160:	ffff8001 	.word	0xffff8001

0800a164 <Service_Sigfox_UplinkDispatcher_Callback>:

/**
 * @brief This callback is Dispatcher Payload
 * @param evendata
 * */
void Service_Sigfox_UplinkDispatcher_Callback(qEvent_t e){
 800a164:	b5f0      	push	{r4, r5, r6, r7, lr}
	static WSSFM1XRX_Return_t ret;
	static Service_SigfoxRequest_t *Service_SigfoxRequest;

	qCR_Begin{
 800a166:	2510      	movs	r5, #16
 800a168:	4c54      	ldr	r4, [pc, #336]	; (800a2bc <Service_Sigfox_UplinkDispatcher_Callback+0x158>)
void Service_Sigfox_UplinkDispatcher_Callback(qEvent_t e){
 800a16a:	b085      	sub	sp, #20
	qCR_Begin{
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	35ff      	adds	r5, #255	; 0xff
void Service_Sigfox_UplinkDispatcher_Callback(qEvent_t e){
 800a170:	9003      	str	r0, [sp, #12]
	qCR_Begin{
 800a172:	42ab      	cmp	r3, r5
 800a174:	d043      	beq.n	800a1fe <Service_Sigfox_UplinkDispatcher_Callback+0x9a>
 800a176:	dc07      	bgt.n	800a188 <Service_Sigfox_UplinkDispatcher_Callback+0x24>
 800a178:	1c5a      	adds	r2, r3, #1
 800a17a:	d010      	beq.n	800a19e <Service_Sigfox_UplinkDispatcher_Callback+0x3a>
 800a17c:	220e      	movs	r2, #14
 800a17e:	32ff      	adds	r2, #255	; 0xff
 800a180:	4293      	cmp	r3, r2
 800a182:	d02c      	beq.n	800a1de <Service_Sigfox_UplinkDispatcher_Callback+0x7a>
				qDebug_Message("WSSFM1XRX_SENT_MESSAGE");
			}
		}
		qCR_Yield;
	}qCR_End;
}
 800a184:	b005      	add	sp, #20
 800a186:	bdf0      	pop	{r4, r5, r6, r7, pc}
	qCR_Begin{
 800a188:	2291      	movs	r2, #145	; 0x91
 800a18a:	0052      	lsls	r2, r2, #1
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d043      	beq.n	800a218 <Service_Sigfox_UplinkDispatcher_Callback+0xb4>
 800a190:	223c      	movs	r2, #60	; 0x3c
 800a192:	32ff      	adds	r2, #255	; 0xff
 800a194:	4293      	cmp	r3, r2
 800a196:	d1f5      	bne.n	800a184 <Service_Sigfox_UplinkDispatcher_Callback+0x20>
	}qCR_End;
 800a198:	2301      	movs	r3, #1
 800a19a:	425b      	negs	r3, r3
 800a19c:	e086      	b.n	800a2ac <Service_Sigfox_UplinkDispatcher_Callback+0x148>
		qDebug_Message("Coroutine from Beginning Dispatcher");
 800a19e:	2100      	movs	r1, #0
 800a1a0:	4847      	ldr	r0, [pc, #284]	; (800a2c0 <Service_Sigfox_UplinkDispatcher_Callback+0x15c>)
 800a1a2:	4b48      	ldr	r3, [pc, #288]	; (800a2c4 <Service_Sigfox_UplinkDispatcher_Callback+0x160>)
 800a1a4:	9101      	str	r1, [sp, #4]
 800a1a6:	9100      	str	r1, [sp, #0]
 800a1a8:	0002      	movs	r2, r0
 800a1aa:	f7fe fbdd 	bl	8008968 <_qtrace_func>
		if(e->Trigger == byQueueCount && SigFoxData.ReadyToUplink){
 800a1ae:	9b03      	ldr	r3, [sp, #12]
 800a1b0:	7a1b      	ldrb	r3, [r3, #8]
 800a1b2:	2b06      	cmp	r3, #6
 800a1b4:	d178      	bne.n	800a2a8 <Service_Sigfox_UplinkDispatcher_Callback+0x144>
 800a1b6:	4e44      	ldr	r6, [pc, #272]	; (800a2c8 <Service_Sigfox_UplinkDispatcher_Callback+0x164>)
 800a1b8:	1db3      	adds	r3, r6, #6
 800a1ba:	7fdb      	ldrb	r3, [r3, #31]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d073      	beq.n	800a2a8 <Service_Sigfox_UplinkDispatcher_Callback+0x144>
			Service_SigfoxRequest = (Service_SigfoxRequest_t*)qQueue_Peek(e->EventData);
 800a1c0:	9b03      	ldr	r3, [sp, #12]
 800a1c2:	6858      	ldr	r0, [r3, #4]
 800a1c4:	f7fe fa79 	bl	80086ba <qQueue_Peek>
 800a1c8:	4b40      	ldr	r3, [pc, #256]	; (800a2cc <Service_Sigfox_UplinkDispatcher_Callback+0x168>)
 800a1ca:	6018      	str	r0, [r3, #0]
			if(Service_SigfoxRequest->Request == REQUEST_SEND_PAYLOAD || Service_SigfoxRequest->Request == REQUEST_SEND_PAYLOAD_DOWNLINK){
 800a1cc:	7b03      	ldrb	r3, [r0, #12]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d86a      	bhi.n	800a2a8 <Service_Sigfox_UplinkDispatcher_Callback+0x144>
	SigFoxData.WilsolService_Status = status;
 800a1d2:	230a      	movs	r3, #10
 800a1d4:	3605      	adds	r6, #5
 800a1d6:	77f3      	strb	r3, [r6, #31]
				qCR_WaitUntil( (ret = WSSFM1XRX_CheckChannels(&SigfoxModule, WAIT ))  == WSSFM1XRX_CHANN_OK || (ret == WSSFM1XRX_CHANN_NO_OK) || (ret == WSSFM1XRX_MAX_RETRIES_REACHED) );
 800a1d8:	230e      	movs	r3, #14
 800a1da:	33ff      	adds	r3, #255	; 0xff
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	493c      	ldr	r1, [pc, #240]	; (800a2d0 <Service_Sigfox_UplinkDispatcher_Callback+0x16c>)
 800a1e0:	483c      	ldr	r0, [pc, #240]	; (800a2d4 <Service_Sigfox_UplinkDispatcher_Callback+0x170>)
 800a1e2:	f7fc fcb7 	bl	8006b54 <WSSFM1XRX_CheckChannels>
 800a1e6:	2807      	cmp	r0, #7
 800a1e8:	d00f      	beq.n	800a20a <Service_Sigfox_UplinkDispatcher_Callback+0xa6>
 800a1ea:	2808      	cmp	r0, #8
 800a1ec:	d006      	beq.n	800a1fc <Service_Sigfox_UplinkDispatcher_Callback+0x98>
					qCR_WaitUntil( (WSSFM1XRX_OK_RESPONSE ==  (ret = WSSFM1XRX_ResetChannels(&SigfoxModule,WAIT) )) || (WSSFM1XRX_MAX_RETRIES_REACHED == ret ) );
 800a1ee:	280b      	cmp	r0, #11
 800a1f0:	d1c8      	bne.n	800a184 <Service_Sigfox_UplinkDispatcher_Callback+0x20>
						WSSFM1XRX_ResetModule(&SigfoxModule,WSSFM1XRX_Wait_Block);
 800a1f2:	4939      	ldr	r1, [pc, #228]	; (800a2d8 <Service_Sigfox_UplinkDispatcher_Callback+0x174>)
 800a1f4:	4837      	ldr	r0, [pc, #220]	; (800a2d4 <Service_Sigfox_UplinkDispatcher_Callback+0x170>)
 800a1f6:	f7fc fbc3 	bl	8006980 <WSSFM1XRX_ResetModule>
 800a1fa:	e7cd      	b.n	800a198 <Service_Sigfox_UplinkDispatcher_Callback+0x34>
					qCR_WaitUntil( (WSSFM1XRX_OK_RESPONSE ==  (ret = WSSFM1XRX_ResetChannels(&SigfoxModule,WAIT) )) || (WSSFM1XRX_MAX_RETRIES_REACHED == ret ) );
 800a1fc:	6025      	str	r5, [r4, #0]
 800a1fe:	4934      	ldr	r1, [pc, #208]	; (800a2d0 <Service_Sigfox_UplinkDispatcher_Callback+0x16c>)
 800a200:	4834      	ldr	r0, [pc, #208]	; (800a2d4 <Service_Sigfox_UplinkDispatcher_Callback+0x170>)
 800a202:	f7fc fcb9 	bl	8006b78 <WSSFM1XRX_ResetChannels>
 800a206:	2803      	cmp	r0, #3
 800a208:	d1f1      	bne.n	800a1ee <Service_Sigfox_UplinkDispatcher_Callback+0x8a>
	SigFoxData.WilsolService_Status = status;
 800a20a:	220c      	movs	r2, #12
 800a20c:	4b2e      	ldr	r3, [pc, #184]	; (800a2c8 <Service_Sigfox_UplinkDispatcher_Callback+0x164>)
 800a20e:	3305      	adds	r3, #5
 800a210:	77da      	strb	r2, [r3, #31]
				qCR_WaitUntil( WSSFM1XRX_OK_RESPONSE == (ret = WSSFM1XRX_SendMessage(&SigfoxModule,WAIT,Service_SigfoxRequest->Payload ,BufferTxFrame , MAX_SIZE_IBUTTON_DATA,Service_SigfoxRequest->Request)) ||
 800a212:	2391      	movs	r3, #145	; 0x91
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	6023      	str	r3, [r4, #0]
 800a218:	4d2c      	ldr	r5, [pc, #176]	; (800a2cc <Service_Sigfox_UplinkDispatcher_Callback+0x168>)
 800a21a:	4f2e      	ldr	r7, [pc, #184]	; (800a2d4 <Service_Sigfox_UplinkDispatcher_Callback+0x170>)
 800a21c:	682b      	ldr	r3, [r5, #0]
 800a21e:	492c      	ldr	r1, [pc, #176]	; (800a2d0 <Service_Sigfox_UplinkDispatcher_Callback+0x16c>)
 800a220:	7b1b      	ldrb	r3, [r3, #12]
 800a222:	0038      	movs	r0, r7
 800a224:	9301      	str	r3, [sp, #4]
 800a226:	230c      	movs	r3, #12
 800a228:	9300      	str	r3, [sp, #0]
 800a22a:	682a      	ldr	r2, [r5, #0]
 800a22c:	4b2b      	ldr	r3, [pc, #172]	; (800a2dc <Service_Sigfox_UplinkDispatcher_Callback+0x178>)
 800a22e:	f7fc fd25 	bl	8006c7c <WSSFM1XRX_SendMessage>
 800a232:	2803      	cmp	r0, #3
 800a234:	d005      	beq.n	800a242 <Service_Sigfox_UplinkDispatcher_Callback+0xde>
 800a236:	2800      	cmp	r0, #0
 800a238:	d1d9      	bne.n	800a1ee <Service_Sigfox_UplinkDispatcher_Callback+0x8a>
 800a23a:	682b      	ldr	r3, [r5, #0]
 800a23c:	7b1b      	ldrb	r3, [r3, #12]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d1a0      	bne.n	800a184 <Service_Sigfox_UplinkDispatcher_Callback+0x20>
				if(WSSFM1XRX_DL_SUCCESS == DL_DiscriminateDownLink(&SigfoxModule)){
 800a242:	0038      	movs	r0, r7
 800a244:	f7fc fcdc 	bl	8006c00 <DL_DiscriminateDownLink>
 800a248:	0001      	movs	r1, r0
 800a24a:	0038      	movs	r0, r7
 800a24c:	4d1c      	ldr	r5, [pc, #112]	; (800a2c0 <Service_Sigfox_UplinkDispatcher_Callback+0x15c>)
 800a24e:	4e24      	ldr	r6, [pc, #144]	; (800a2e0 <Service_Sigfox_UplinkDispatcher_Callback+0x17c>)
 800a250:	3020      	adds	r0, #32
 800a252:	2900      	cmp	r1, #0
 800a254:	d12c      	bne.n	800a2b0 <Service_Sigfox_UplinkDispatcher_Callback+0x14c>
					obj.StatusDownlink = 1;
 800a256:	2301      	movs	r3, #1
 800a258:	71b3      	strb	r3, [r6, #6]
					qDebug_Memory(SigfoxModule.DL_NumericFrame,WSSFM1XRX_DL_PAYLOAD_SYZE);
 800a25a:	3307      	adds	r3, #7
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	9000      	str	r0, [sp, #0]
 800a260:	000b      	movs	r3, r1
 800a262:	4a20      	ldr	r2, [pc, #128]	; (800a2e4 <Service_Sigfox_UplinkDispatcher_Callback+0x180>)
 800a264:	0028      	movs	r0, r5
 800a266:	f7fe fb7f 	bl	8008968 <_qtrace_func>
	SigFoxData.WilsolService_Status = status;
 800a26a:	270d      	movs	r7, #13
 800a26c:	4b16      	ldr	r3, [pc, #88]	; (800a2c8 <Service_Sigfox_UplinkDispatcher_Callback+0x164>)
 800a26e:	3305      	adds	r3, #5
 800a270:	77df      	strb	r7, [r3, #31]
				qQueue_RemoveFront(e->EventData);
 800a272:	9b03      	ldr	r3, [sp, #12]
 800a274:	6858      	ldr	r0, [r3, #4]
 800a276:	f7fe fa34 	bl	80086e2 <qQueue_RemoveFront>
				if(obj.PtrToTaskFSM != NULL)
 800a27a:	6830      	ldr	r0, [r6, #0]
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d002      	beq.n	800a286 <Service_Sigfox_UplinkDispatcher_Callback+0x122>
					qTask_Notification_Send(obj.PtrToTaskFSM,(void*)WSSFM1XRX_STATUS_SENT_MESSAGE);
 800a280:	0039      	movs	r1, r7
 800a282:	f7fe faec 	bl	800885e <qTask_Notification_Send>
				qDebug_Message(BufferTxFrame);
 800a286:	2600      	movs	r6, #0
 800a288:	4b14      	ldr	r3, [pc, #80]	; (800a2dc <Service_Sigfox_UplinkDispatcher_Callback+0x178>)
 800a28a:	002a      	movs	r2, r5
 800a28c:	0031      	movs	r1, r6
 800a28e:	0028      	movs	r0, r5
 800a290:	9601      	str	r6, [sp, #4]
 800a292:	9600      	str	r6, [sp, #0]
 800a294:	f7fe fb68 	bl	8008968 <_qtrace_func>
				qDebug_Message("WSSFM1XRX_SENT_MESSAGE");
 800a298:	9601      	str	r6, [sp, #4]
 800a29a:	9600      	str	r6, [sp, #0]
 800a29c:	4b12      	ldr	r3, [pc, #72]	; (800a2e8 <Service_Sigfox_UplinkDispatcher_Callback+0x184>)
 800a29e:	002a      	movs	r2, r5
 800a2a0:	0031      	movs	r1, r6
 800a2a2:	0028      	movs	r0, r5
 800a2a4:	f7fe fb60 	bl	8008968 <_qtrace_func>
		qCR_Yield;
 800a2a8:	233c      	movs	r3, #60	; 0x3c
 800a2aa:	33ff      	adds	r3, #255	; 0xff
	}qCR_End;
 800a2ac:	6023      	str	r3, [r4, #0]
}
 800a2ae:	e769      	b.n	800a184 <Service_Sigfox_UplinkDispatcher_Callback+0x20>
					obj.StatusDownlink = 0;
 800a2b0:	2100      	movs	r1, #0
					memset(SigfoxModule.DL_NumericFrame,0,WSSFM1XRX_DL_PAYLOAD_SYZE);  /*No downlink*/
 800a2b2:	2208      	movs	r2, #8
					obj.StatusDownlink = 0;
 800a2b4:	71b1      	strb	r1, [r6, #6]
					memset(SigfoxModule.DL_NumericFrame,0,WSSFM1XRX_DL_PAYLOAD_SYZE);  /*No downlink*/
 800a2b6:	f001 fa48 	bl	800b74a <memset>
 800a2ba:	e7d6      	b.n	800a26a <Service_Sigfox_UplinkDispatcher_Callback+0x106>
 800a2bc:	20000264 	.word	0x20000264
 800a2c0:	0800d709 	.word	0x0800d709
 800a2c4:	0800d6a3 	.word	0x0800d6a3
 800a2c8:	20000e54 	.word	0x20000e54
 800a2cc:	20000e50 	.word	0x20000e50
 800a2d0:	080068d1 	.word	0x080068d1
 800a2d4:	20000e98 	.word	0x20000e98
 800a2d8:	08006921 	.word	0x08006921
 800a2dc:	20000dc5 	.word	0x20000dc5
 800a2e0:	20000fdc 	.word	0x20000fdc
 800a2e4:	0800d6c7 	.word	0x0800d6c7
 800a2e8:	0800d6cc 	.word	0x0800d6cc

0800a2ec <Service_Sigfox_Run>:
	qTask_Set_State(&Task_SigFox_Service, (enable == 1 ? qEnabled : qDisabled ) );
 800a2ec:	3801      	subs	r0, #1
 800a2ee:	4241      	negs	r1, r0
 800a2f0:	4141      	adcs	r1, r0
void Service_Sigfox_Run(uint8_t enable){
 800a2f2:	b510      	push	{r4, lr}
	qTask_Set_State(&Task_SigFox_Service, (enable == 1 ? qEnabled : qDisabled ) );
 800a2f4:	b2c9      	uxtb	r1, r1
 800a2f6:	4802      	ldr	r0, [pc, #8]	; (800a300 <Service_Sigfox_Run+0x14>)
 800a2f8:	f7fe faeb 	bl	80088d2 <qTask_Set_State>
}
 800a2fc:	bd10      	pop	{r4, pc}
 800a2fe:	46c0      	nop			; (mov r8, r8)
 800a300:	20000ec4 	.word	0x20000ec4

0800a304 <Service_Sigfox_ISRHandler>:
void Service_Sigfox_ISRHandler(const char rxchar){
 800a304:	b510      	push	{r4, lr}
 800a306:	0001      	movs	r1, r0
	WSSFM1XRX_ISRRX(&SigfoxModule,rxchar);
 800a308:	4801      	ldr	r0, [pc, #4]	; (800a310 <Service_Sigfox_ISRHandler+0xc>)
 800a30a:	f7fc fb61 	bl	80069d0 <WSSFM1XRX_ISRRX>
}
 800a30e:	bd10      	pop	{r4, pc}
 800a310:	20000e98 	.word	0x20000e98

0800a314 <Service_Sigfox_Setup>:
void Service_Sigfox_Setup(WSSFM1XRX_FreqUL_t DefaultConfigRC , DigitalFcn_t Reset, DigitalFcn_t WkUp , TxFnc_t SigfoxPutc , TickReadFcn_t GetTick){
 800a314:	b570      	push	{r4, r5, r6, lr}
	SigfoxModule.StatusFlag = WSSFM1XRX_Init(&SigfoxModule,
 800a316:	2504      	movs	r5, #4
void Service_Sigfox_Setup(WSSFM1XRX_FreqUL_t DefaultConfigRC , DigitalFcn_t Reset, DigitalFcn_t WkUp , TxFnc_t SigfoxPutc , TickReadFcn_t GetTick){
 800a318:	b086      	sub	sp, #24
	SigfoxModule.StatusFlag = WSSFM1XRX_Init(&SigfoxModule,
 800a31a:	9504      	str	r5, [sp, #16]
 800a31c:	3529      	adds	r5, #41	; 0x29
 800a31e:	9503      	str	r5, [sp, #12]
 800a320:	4d15      	ldr	r5, [pc, #84]	; (800a378 <Service_Sigfox_Setup+0x64>)
 800a322:	4c16      	ldr	r4, [pc, #88]	; (800a37c <Service_Sigfox_Setup+0x68>)
 800a324:	9502      	str	r5, [sp, #8]
 800a326:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a328:	9000      	str	r0, [sp, #0]
 800a32a:	9501      	str	r5, [sp, #4]
 800a32c:	0020      	movs	r0, r4
 800a32e:	f7fc fa9f 	bl	8006870 <WSSFM1XRX_Init>
	qQueue_Setup(&SigFox_UplinkQueue, UplinkQueueMessage_Stack, sizeof(Service_SigfoxRequest_t), MAX_NUM_ELEMENT_ENQUEUE);
 800a332:	4e13      	ldr	r6, [pc, #76]	; (800a380 <Service_Sigfox_Setup+0x6c>)
	SigfoxModule.StatusFlag = WSSFM1XRX_Init(&SigfoxModule,
 800a334:	75e0      	strb	r0, [r4, #23]
	qQueue_Setup(&SigFox_UplinkQueue, UplinkQueueMessage_Stack, sizeof(Service_SigfoxRequest_t), MAX_NUM_ELEMENT_ENQUEUE);
 800a336:	230a      	movs	r3, #10
 800a338:	220f      	movs	r2, #15
 800a33a:	4912      	ldr	r1, [pc, #72]	; (800a384 <Service_Sigfox_Setup+0x70>)
 800a33c:	0030      	movs	r0, r6
 800a33e:	f7fe f993 	bl	8008668 <qQueue_Setup>
	qOS_Add_Task(&Task_SigFox_Service, Service_Sigfox_Callback, qMedium_Priority, 0.01, qPeriodic, qDisabled, NULL);
 800a342:	2380      	movs	r3, #128	; 0x80
 800a344:	2400      	movs	r4, #0
 800a346:	061b      	lsls	r3, r3, #24
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	9402      	str	r4, [sp, #8]
 800a34c:	9401      	str	r4, [sp, #4]
 800a34e:	4b0e      	ldr	r3, [pc, #56]	; (800a388 <Service_Sigfox_Setup+0x74>)
 800a350:	2201      	movs	r2, #1
 800a352:	490e      	ldr	r1, [pc, #56]	; (800a38c <Service_Sigfox_Setup+0x78>)
 800a354:	480e      	ldr	r0, [pc, #56]	; (800a390 <Service_Sigfox_Setup+0x7c>)
 800a356:	f7fd ff31 	bl	80081bc <qOS_Add_Task>
	qOS_Add_EventTask(&Task_UplinkDispatcher, Service_Sigfox_UplinkDispatcher_Callback, qHigh_Priority, NULL);
 800a35a:	4d0e      	ldr	r5, [pc, #56]	; (800a394 <Service_Sigfox_Setup+0x80>)
 800a35c:	0023      	movs	r3, r4
 800a35e:	2202      	movs	r2, #2
 800a360:	490d      	ldr	r1, [pc, #52]	; (800a398 <Service_Sigfox_Setup+0x84>)
 800a362:	0028      	movs	r0, r5
 800a364:	f7fd ff6a 	bl	800823c <qOS_Add_EventTask>
	qTask_Attach_Queue(&Task_UplinkDispatcher, &SigFox_UplinkQueue, qQUEUE_COUNT, 1);
 800a368:	2301      	movs	r3, #1
 800a36a:	2210      	movs	r2, #16
 800a36c:	0031      	movs	r1, r6
 800a36e:	0028      	movs	r0, r5
 800a370:	f7fe fad1 	bl	8008916 <qTask_Attach_Queue>
}
 800a374:	b006      	add	sp, #24
 800a376:	bd70      	pop	{r4, r5, r6, pc}
 800a378:	20000d98 	.word	0x20000d98
 800a37c:	20000e98 	.word	0x20000e98
 800a380:	20000e7c 	.word	0x20000e7c
 800a384:	20000f44 	.word	0x20000f44
 800a388:	3c23d70a 	.word	0x3c23d70a
 800a38c:	0800a409 	.word	0x0800a409
 800a390:	20000ec4 	.word	0x20000ec4
 800a394:	20000f04 	.word	0x20000f04
 800a398:	0800a165 	.word	0x0800a165

0800a39c <Service_Sigfox_Init>:
void Service_Sigfox_Init(qTask_t *PtrToTaskFSM , uint16_t FreqInFlash, uint8_t Enable , uint8_t repeat){
 800a39c:	b510      	push	{r4, lr}
	obj.PtrToTaskFSM = PtrToTaskFSM;
 800a39e:	4c08      	ldr	r4, [pc, #32]	; (800a3c0 <Service_Sigfox_Init+0x24>)
	obj.FreqInFlash = FreqInFlash;
 800a3a0:	7121      	strb	r1, [r4, #4]
	obj.StatusDownlink=0;
 800a3a2:	2100      	movs	r1, #0
	obj.Repeat = repeat;
 800a3a4:	7163      	strb	r3, [r4, #5]
	SigFoxData.ReadyToUplink = 0;
 800a3a6:	4b07      	ldr	r3, [pc, #28]	; (800a3c4 <Service_Sigfox_Init+0x28>)
	obj.PtrToTaskFSM = PtrToTaskFSM;
 800a3a8:	6020      	str	r0, [r4, #0]
	SigFoxData.ReadyToUplink = 0;
 800a3aa:	1d98      	adds	r0, r3, #6
	obj.StatusDownlink=0;
 800a3ac:	71a1      	strb	r1, [r4, #6]
	SigFoxData.ReadyToUplink = 0;
 800a3ae:	77c1      	strb	r1, [r0, #31]
	SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_MODULE_NOT_INITIALIZED;
 800a3b0:	3305      	adds	r3, #5
 800a3b2:	310f      	adds	r1, #15
	Service_Sigfox_Run(Enable);
 800a3b4:	0010      	movs	r0, r2
	SigFoxData.WilsolService_Status = WSSFM1XRX_STATUS_MODULE_NOT_INITIALIZED;
 800a3b6:	77d9      	strb	r1, [r3, #31]
	Service_Sigfox_Run(Enable);
 800a3b8:	f7ff ff98 	bl	800a2ec <Service_Sigfox_Run>
}
 800a3bc:	bd10      	pop	{r4, pc}
 800a3be:	46c0      	nop			; (mov r8, r8)
 800a3c0:	20000fdc 	.word	0x20000fdc
 800a3c4:	20000e54 	.word	0x20000e54

0800a3c8 <Service_Sigfox_GetStatus>:
	return SigFoxData.WilsolService_Status;
 800a3c8:	4b01      	ldr	r3, [pc, #4]	; (800a3d0 <Service_Sigfox_GetStatus+0x8>)
 800a3ca:	3305      	adds	r3, #5
 800a3cc:	7fd8      	ldrb	r0, [r3, #31]
}
 800a3ce:	4770      	bx	lr
 800a3d0:	20000e54 	.word	0x20000e54

0800a3d4 <Service_Sigfox_GetID>:
char* Service_Sigfox_GetID(void){
 800a3d4:	b510      	push	{r4, lr}
	strcpy(SFData.ID,SigFoxData.ID);
 800a3d6:	4c03      	ldr	r4, [pc, #12]	; (800a3e4 <Service_Sigfox_GetID+0x10>)
 800a3d8:	4903      	ldr	r1, [pc, #12]	; (800a3e8 <Service_Sigfox_GetID+0x14>)
 800a3da:	0020      	movs	r0, r4
 800a3dc:	f001 f9ec 	bl	800b7b8 <strcpy>
}
 800a3e0:	0020      	movs	r0, r4
 800a3e2:	bd10      	pop	{r4, pc}
 800a3e4:	20000df4 	.word	0x20000df4
 800a3e8:	20000e54 	.word	0x20000e54

0800a3ec <Service_Sigfox_GetPAC>:
char* Service_Sigfox_GetPAC(void){
 800a3ec:	b510      	push	{r4, lr}
	strcpy(SFData.PAC,SigFoxData.PAC);
 800a3ee:	4c04      	ldr	r4, [pc, #16]	; (800a400 <Service_Sigfox_GetPAC+0x14>)
 800a3f0:	4904      	ldr	r1, [pc, #16]	; (800a404 <Service_Sigfox_GetPAC+0x18>)
 800a3f2:	340c      	adds	r4, #12
 800a3f4:	310c      	adds	r1, #12
 800a3f6:	0020      	movs	r0, r4
 800a3f8:	f001 f9de 	bl	800b7b8 <strcpy>
}
 800a3fc:	0020      	movs	r0, r4
 800a3fe:	bd10      	pop	{r4, pc}
 800a400:	20000e1a 	.word	0x20000e1a
 800a404:	20000e54 	.word	0x20000e54

0800a408 <Service_Sigfox_Callback>:
/**
 * @brief This function run service in backgroud
 * @param evendata
 * */
void Service_Sigfox_Callback(qEvent_t e){
 800a408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Service_SigfoxRequest_t *Service_SigfoxRequest;
	static WSSFM1XRX_FreqUL_t RCZ;
	static Service_SigfoxRequest_t request;

	Service_SigfoxRequest = (Service_SigfoxRequest_t*)e->EventData;
	if(e->Trigger == byNotificationSimple &&	( Service_SigfoxRequest->Request == REQUEST_CHANGE_FREQUENCY)){
 800a40a:	7a03      	ldrb	r3, [r0, #8]
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d107      	bne.n	800a420 <Service_Sigfox_Callback+0x18>
	Service_SigfoxRequest = (Service_SigfoxRequest_t*)e->EventData;
 800a410:	6842      	ldr	r2, [r0, #4]
	if(e->Trigger == byNotificationSimple &&	( Service_SigfoxRequest->Request == REQUEST_CHANGE_FREQUENCY)){
 800a412:	7b11      	ldrb	r1, [r2, #12]
 800a414:	2902      	cmp	r1, #2
 800a416:	d103      	bne.n	800a420 <Service_Sigfox_Callback+0x18>
		request.Request = Service_SigfoxRequest->Request;
 800a418:	4b9e      	ldr	r3, [pc, #632]	; (800a694 <Service_Sigfox_Callback+0x28c>)
		request.Frequency = Service_SigfoxRequest->Frequency;
 800a41a:	7812      	ldrb	r2, [r2, #0]
		request.Request = Service_SigfoxRequest->Request;
 800a41c:	7319      	strb	r1, [r3, #12]
		request.Frequency = Service_SigfoxRequest->Frequency;
 800a41e:	701a      	strb	r2, [r3, #0]
	}

	qCR_Begin{
 800a420:	22c2      	movs	r2, #194	; 0xc2
 800a422:	4c9d      	ldr	r4, [pc, #628]	; (800a698 <Service_Sigfox_Callback+0x290>)
 800a424:	0052      	lsls	r2, r2, #1
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	4293      	cmp	r3, r2
 800a42a:	d03d      	beq.n	800a4a8 <Service_Sigfox_Callback+0xa0>
 800a42c:	dc59      	bgt.n	800a4e2 <Service_Sigfox_Callback+0xda>
 800a42e:	255e      	movs	r5, #94	; 0x5e
 800a430:	35ff      	adds	r5, #255	; 0xff
 800a432:	42ab      	cmp	r3, r5
 800a434:	d100      	bne.n	800a438 <Service_Sigfox_Callback+0x30>
 800a436:	e0fb      	b.n	800a630 <Service_Sigfox_Callback+0x228>
 800a438:	dc08      	bgt.n	800a44c <Service_Sigfox_Callback+0x44>
 800a43a:	2656      	movs	r6, #86	; 0x56
 800a43c:	36ff      	adds	r6, #255	; 0xff
 800a43e:	1c5a      	adds	r2, r3, #1
 800a440:	d100      	bne.n	800a444 <Service_Sigfox_Callback+0x3c>
 800a442:	e0dd      	b.n	800a600 <Service_Sigfox_Callback+0x1f8>
 800a444:	42b3      	cmp	r3, r6
 800a446:	d100      	bne.n	800a44a <Service_Sigfox_Callback+0x42>
 800a448:	e0e7      	b.n	800a61a <Service_Sigfox_Callback+0x212>
		qTask_Set_State(qTask_Self(),qDisabled);
		request.Request = 0xff;  /*limpiar request*/
		qCR_Yield;
	}qCR_End;

}
 800a44a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	qCR_Begin{
 800a44c:	2268      	movs	r2, #104	; 0x68
 800a44e:	32ff      	adds	r2, #255	; 0xff
 800a450:	4293      	cmp	r3, r2
 800a452:	d100      	bne.n	800a456 <Service_Sigfox_Callback+0x4e>
 800a454:	e100      	b.n	800a658 <Service_Sigfox_Callback+0x250>
 800a456:	2274      	movs	r2, #116	; 0x74
 800a458:	32ff      	adds	r2, #255	; 0xff
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d1f5      	bne.n	800a44a <Service_Sigfox_Callback+0x42>
		qCR_WaitUntil( (WSSFM1XRX_OK_RESPONSE == ( ret = WSSFM1XRX_AskFrequencyUL(&SigfoxModule, WAIT, &Frequency) ) ) ||
 800a45e:	4d8f      	ldr	r5, [pc, #572]	; (800a69c <Service_Sigfox_Callback+0x294>)
 800a460:	4e8f      	ldr	r6, [pc, #572]	; (800a6a0 <Service_Sigfox_Callback+0x298>)
 800a462:	002a      	movs	r2, r5
 800a464:	498f      	ldr	r1, [pc, #572]	; (800a6a4 <Service_Sigfox_Callback+0x29c>)
 800a466:	0030      	movs	r0, r6
 800a468:	f7fc fce4 	bl	8006e34 <WSSFM1XRX_AskFrequencyUL>
 800a46c:	2803      	cmp	r0, #3
 800a46e:	d000      	beq.n	800a472 <Service_Sigfox_Callback+0x6a>
 800a470:	e0fb      	b.n	800a66a <Service_Sigfox_Callback+0x262>
	SigFoxData.WilsolService_Status = status;
 800a472:	2205      	movs	r2, #5
 800a474:	4b8c      	ldr	r3, [pc, #560]	; (800a6a8 <Service_Sigfox_Callback+0x2a0>)
 800a476:	3305      	adds	r3, #5
 800a478:	77da      	strb	r2, [r3, #31]
		Service_SigfoxDebugDecimal(_VERBOSE_,obj.FreqInFlash); /*Frquency in flash*/
 800a47a:	4a8c      	ldr	r2, [pc, #560]	; (800a6ac <Service_Sigfox_Callback+0x2a4>)
 800a47c:	7913      	ldrb	r3, [r2, #4]
		obj.FreqInFlash = ( (obj.FreqInFlash != 0) && (obj.FreqInFlash < MAX_NUMBER_SIGFOX_FREQUENCY ) ) ? obj.FreqInFlash : SigfoxModule.Frequency;   /*flash arranca en 0 o 0xff al estar vacio*/
 800a47e:	1e59      	subs	r1, r3, #1
 800a480:	2904      	cmp	r1, #4
 800a482:	d900      	bls.n	800a486 <Service_Sigfox_Callback+0x7e>
 800a484:	7e33      	ldrb	r3, [r6, #24]
		if( (request.Request == REQUEST_CHANGE_FREQUENCY && Frequency != request.Frequency ) || (Frequency != obj.FreqInFlash) ){ /*el != es para la primera vez*/
 800a486:	4983      	ldr	r1, [pc, #524]	; (800a694 <Service_Sigfox_Callback+0x28c>)
		obj.FreqInFlash = ( (obj.FreqInFlash != 0) && (obj.FreqInFlash < MAX_NUMBER_SIGFOX_FREQUENCY ) ) ? obj.FreqInFlash : SigfoxModule.Frequency;   /*flash arranca en 0 o 0xff al estar vacio*/
 800a488:	7113      	strb	r3, [r2, #4]
		if( (request.Request == REQUEST_CHANGE_FREQUENCY && Frequency != request.Frequency ) || (Frequency != obj.FreqInFlash) ){ /*el != es para la primera vez*/
 800a48a:	7b08      	ldrb	r0, [r1, #12]
		Service_SigfoxDebugDecimal(_VERBOSE_,Frequency);
 800a48c:	782a      	ldrb	r2, [r5, #0]
		if( (request.Request == REQUEST_CHANGE_FREQUENCY && Frequency != request.Frequency ) || (Frequency != obj.FreqInFlash) ){ /*el != es para la primera vez*/
 800a48e:	2802      	cmp	r0, #2
 800a490:	d000      	beq.n	800a494 <Service_Sigfox_Callback+0x8c>
 800a492:	e0f9      	b.n	800a688 <Service_Sigfox_Callback+0x280>
 800a494:	7809      	ldrb	r1, [r1, #0]
 800a496:	428a      	cmp	r2, r1
 800a498:	d100      	bne.n	800a49c <Service_Sigfox_Callback+0x94>
 800a49a:	e0f1      	b.n	800a680 <Service_Sigfox_Callback+0x278>
 800a49c:	000a      	movs	r2, r1
			RCZ = request.Request == REQUEST_CHANGE_FREQUENCY ? request.Frequency:obj.FreqInFlash;
 800a49e:	4b84      	ldr	r3, [pc, #528]	; (800a6b0 <Service_Sigfox_Callback+0x2a8>)
 800a4a0:	701a      	strb	r2, [r3, #0]
			qCR_WaitUntil( (WSSFM1XRX_OK_RESPONSE == (ret = WSSFM1XRX_ChangeFrequencyUL(&SigfoxModule,WAIT,RCZ) )) || ( WSSFM1XRX_MAX_RETRIES_REACHED == ret) );
 800a4a2:	23c2      	movs	r3, #194	; 0xc2
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	6023      	str	r3, [r4, #0]
 800a4a8:	4b81      	ldr	r3, [pc, #516]	; (800a6b0 <Service_Sigfox_Callback+0x2a8>)
 800a4aa:	497e      	ldr	r1, [pc, #504]	; (800a6a4 <Service_Sigfox_Callback+0x29c>)
 800a4ac:	781a      	ldrb	r2, [r3, #0]
 800a4ae:	487c      	ldr	r0, [pc, #496]	; (800a6a0 <Service_Sigfox_Callback+0x298>)
 800a4b0:	f7fc fb72 	bl	8006b98 <WSSFM1XRX_ChangeFrequencyUL>
 800a4b4:	2803      	cmp	r0, #3
 800a4b6:	d000      	beq.n	800a4ba <Service_Sigfox_Callback+0xb2>
 800a4b8:	e0c0      	b.n	800a63c <Service_Sigfox_Callback+0x234>
			qCR_WaitUntil(( WSSFM1XRX_OK_RESPONSE == (ret = WSSFM1XRX_ChangeFrequencyDL(&SigfoxModule,WAIT,RCZ)) )  || ( WSSFM1XRX_MAX_RETRIES_REACHED == ret) );
 800a4ba:	23c7      	movs	r3, #199	; 0xc7
 800a4bc:	005b      	lsls	r3, r3, #1
 800a4be:	6023      	str	r3, [r4, #0]
 800a4c0:	4b7b      	ldr	r3, [pc, #492]	; (800a6b0 <Service_Sigfox_Callback+0x2a8>)
 800a4c2:	4978      	ldr	r1, [pc, #480]	; (800a6a4 <Service_Sigfox_Callback+0x29c>)
 800a4c4:	781a      	ldrb	r2, [r3, #0]
 800a4c6:	4876      	ldr	r0, [pc, #472]	; (800a6a0 <Service_Sigfox_Callback+0x298>)
 800a4c8:	f7fc fb78 	bl	8006bbc <WSSFM1XRX_ChangeFrequencyDL>
 800a4cc:	2803      	cmp	r0, #3
 800a4ce:	d000      	beq.n	800a4d2 <Service_Sigfox_Callback+0xca>
 800a4d0:	e0b4      	b.n	800a63c <Service_Sigfox_Callback+0x234>
	SigFoxData.WilsolService_Status = status;
 800a4d2:	2206      	movs	r2, #6
 800a4d4:	4b74      	ldr	r3, [pc, #464]	; (800a6a8 <Service_Sigfox_Callback+0x2a0>)
 800a4d6:	3305      	adds	r3, #5
 800a4d8:	77da      	strb	r2, [r3, #31]
		qCR_WaitUntil( (WSSFM1XRX_OK_RESPONSE == (ret = WSSFM1XRX_SaveParameters(&SigfoxModule,WAIT)) ) || ( WSSFM1XRX_MAX_RETRIES_REACHED == ret));
 800a4da:	23cd      	movs	r3, #205	; 0xcd
 800a4dc:	005b      	lsls	r3, r3, #1
 800a4de:	6023      	str	r3, [r4, #0]
 800a4e0:	e00a      	b.n	800a4f8 <Service_Sigfox_Callback+0xf0>
	qCR_Begin{
 800a4e2:	22d1      	movs	r2, #209	; 0xd1
 800a4e4:	0052      	lsls	r2, r2, #1
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d014      	beq.n	800a514 <Service_Sigfox_Callback+0x10c>
 800a4ea:	dc7e      	bgt.n	800a5ea <Service_Sigfox_Callback+0x1e2>
 800a4ec:	3a14      	subs	r2, #20
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d0e6      	beq.n	800a4c0 <Service_Sigfox_Callback+0xb8>
 800a4f2:	320c      	adds	r2, #12
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d1a8      	bne.n	800a44a <Service_Sigfox_Callback+0x42>
		qCR_WaitUntil( (WSSFM1XRX_OK_RESPONSE == (ret = WSSFM1XRX_SaveParameters(&SigfoxModule,WAIT)) ) || ( WSSFM1XRX_MAX_RETRIES_REACHED == ret));
 800a4f8:	496a      	ldr	r1, [pc, #424]	; (800a6a4 <Service_Sigfox_Callback+0x29c>)
 800a4fa:	4869      	ldr	r0, [pc, #420]	; (800a6a0 <Service_Sigfox_Callback+0x298>)
 800a4fc:	f7fc fb70 	bl	8006be0 <WSSFM1XRX_SaveParameters>
 800a500:	2803      	cmp	r0, #3
 800a502:	d000      	beq.n	800a506 <Service_Sigfox_Callback+0xfe>
 800a504:	e09a      	b.n	800a63c <Service_Sigfox_Callback+0x234>
	SigFoxData.WilsolService_Status = status;
 800a506:	2207      	movs	r2, #7
 800a508:	4b67      	ldr	r3, [pc, #412]	; (800a6a8 <Service_Sigfox_Callback+0x2a0>)
 800a50a:	3305      	adds	r3, #5
 800a50c:	77da      	strb	r2, [r3, #31]
		qCR_WaitUntil( (WSSFM1XRX_OK_RESPONSE == (ret = WSSFM1XRX_GetID(&SigfoxModule,WAIT,SigFoxData.ID))) ||  ( WSSFM1XRX_FAILURE == ret));
 800a50e:	23d1      	movs	r3, #209	; 0xd1
 800a510:	005b      	lsls	r3, r3, #1
 800a512:	6023      	str	r3, [r4, #0]
 800a514:	4e64      	ldr	r6, [pc, #400]	; (800a6a8 <Service_Sigfox_Callback+0x2a0>)
 800a516:	4963      	ldr	r1, [pc, #396]	; (800a6a4 <Service_Sigfox_Callback+0x29c>)
 800a518:	0032      	movs	r2, r6
 800a51a:	4861      	ldr	r0, [pc, #388]	; (800a6a0 <Service_Sigfox_Callback+0x298>)
 800a51c:	f7fc fc64 	bl	8006de8 <WSSFM1XRX_GetID>
 800a520:	2803      	cmp	r0, #3
 800a522:	d000      	beq.n	800a526 <Service_Sigfox_Callback+0x11e>
 800a524:	e0a1      	b.n	800a66a <Service_Sigfox_Callback+0x262>
		qDebug_String(Service_Sigfox_GetID());qDebug_Message(" ");
 800a526:	f7ff ff55 	bl	800a3d4 <Service_Sigfox_GetID>
 800a52a:	2500      	movs	r5, #0
 800a52c:	4f61      	ldr	r7, [pc, #388]	; (800a6b4 <Service_Sigfox_Callback+0x2ac>)
 800a52e:	0003      	movs	r3, r0
 800a530:	4a61      	ldr	r2, [pc, #388]	; (800a6b8 <Service_Sigfox_Callback+0x2b0>)
 800a532:	0029      	movs	r1, r5
 800a534:	0038      	movs	r0, r7
 800a536:	9501      	str	r5, [sp, #4]
 800a538:	9500      	str	r5, [sp, #0]
 800a53a:	f7fe fa15 	bl	8008968 <_qtrace_func>
 800a53e:	4b5f      	ldr	r3, [pc, #380]	; (800a6bc <Service_Sigfox_Callback+0x2b4>)
 800a540:	9501      	str	r5, [sp, #4]
 800a542:	9500      	str	r5, [sp, #0]
 800a544:	003a      	movs	r2, r7
 800a546:	0029      	movs	r1, r5
 800a548:	0038      	movs	r0, r7
 800a54a:	f7fe fa0d 	bl	8008968 <_qtrace_func>
	SigFoxData.WilsolService_Status = status;
 800a54e:	2308      	movs	r3, #8
 800a550:	3605      	adds	r6, #5
 800a552:	77f3      	strb	r3, [r6, #31]
		qCR_WaitUntil( (WSSFM1XRX_OK_RESPONSE == (ret = WSSFM1XRX_GetPAC(&SigfoxModule,WAIT,SigFoxData.PAC)) ) || ( WSSFM1XRX_FAILURE == ret) );
 800a554:	33a5      	adds	r3, #165	; 0xa5
 800a556:	33ff      	adds	r3, #255	; 0xff
 800a558:	6023      	str	r3, [r4, #0]
 800a55a:	4f53      	ldr	r7, [pc, #332]	; (800a6a8 <Service_Sigfox_Callback+0x2a0>)
 800a55c:	4951      	ldr	r1, [pc, #324]	; (800a6a4 <Service_Sigfox_Callback+0x29c>)
 800a55e:	003a      	movs	r2, r7
 800a560:	484f      	ldr	r0, [pc, #316]	; (800a6a0 <Service_Sigfox_Callback+0x298>)
 800a562:	320c      	adds	r2, #12
 800a564:	f7fc fc48 	bl	8006df8 <WSSFM1XRX_GetPAC>
 800a568:	2803      	cmp	r0, #3
 800a56a:	d17e      	bne.n	800a66a <Service_Sigfox_Callback+0x262>
		qDebug_String(Service_Sigfox_GetPAC());
 800a56c:	2500      	movs	r5, #0
 800a56e:	f7ff ff3d 	bl	800a3ec <Service_Sigfox_GetPAC>
 800a572:	4e50      	ldr	r6, [pc, #320]	; (800a6b4 <Service_Sigfox_Callback+0x2ac>)
 800a574:	0003      	movs	r3, r0
 800a576:	4a52      	ldr	r2, [pc, #328]	; (800a6c0 <Service_Sigfox_Callback+0x2b8>)
 800a578:	0029      	movs	r1, r5
 800a57a:	0030      	movs	r0, r6
 800a57c:	9501      	str	r5, [sp, #4]
 800a57e:	9500      	str	r5, [sp, #0]
 800a580:	f7fe f9f2 	bl	8008968 <_qtrace_func>
		qDebug_Message("=========================================");
 800a584:	4b4f      	ldr	r3, [pc, #316]	; (800a6c4 <Service_Sigfox_Callback+0x2bc>)
 800a586:	0032      	movs	r2, r6
 800a588:	0029      	movs	r1, r5
 800a58a:	0030      	movs	r0, r6
 800a58c:	9501      	str	r5, [sp, #4]
 800a58e:	9500      	str	r5, [sp, #0]
 800a590:	f7fe f9ea 	bl	8008968 <_qtrace_func>
	SigFoxData.WilsolService_Status = status;
 800a594:	2209      	movs	r2, #9
 800a596:	1d7b      	adds	r3, r7, #5
 800a598:	77da      	strb	r2, [r3, #31]
		SigFoxData.ReadyToUplink = 1;
 800a59a:	2301      	movs	r3, #1
 800a59c:	3706      	adds	r7, #6
 800a59e:	77fb      	strb	r3, [r7, #31]
		qDebug_Message("WSSFM1XRX_MODULE_INITIALIZED");
 800a5a0:	0032      	movs	r2, r6
 800a5a2:	4b49      	ldr	r3, [pc, #292]	; (800a6c8 <Service_Sigfox_Callback+0x2c0>)
 800a5a4:	9501      	str	r5, [sp, #4]
 800a5a6:	9500      	str	r5, [sp, #0]
 800a5a8:	0029      	movs	r1, r5
 800a5aa:	0030      	movs	r0, r6
 800a5ac:	f7fe f9dc 	bl	8008968 <_qtrace_func>
		if(request.Request == REQUEST_CHANGE_FREQUENCY ) {
 800a5b0:	4f38      	ldr	r7, [pc, #224]	; (800a694 <Service_Sigfox_Callback+0x28c>)
 800a5b2:	7b3b      	ldrb	r3, [r7, #12]
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d10e      	bne.n	800a5d6 <Service_Sigfox_Callback+0x1ce>
			qDebug_Message("qTaskSendNotification");
 800a5b8:	4b44      	ldr	r3, [pc, #272]	; (800a6cc <Service_Sigfox_Callback+0x2c4>)
 800a5ba:	0030      	movs	r0, r6
 800a5bc:	9501      	str	r5, [sp, #4]
 800a5be:	9500      	str	r5, [sp, #0]
 800a5c0:	0032      	movs	r2, r6
 800a5c2:	0029      	movs	r1, r5
 800a5c4:	f7fe f9d0 	bl	8008968 <_qtrace_func>
			if(obj.PtrToTaskFSM != NULL)
 800a5c8:	4b38      	ldr	r3, [pc, #224]	; (800a6ac <Service_Sigfox_Callback+0x2a4>)
 800a5ca:	6818      	ldr	r0, [r3, #0]
 800a5cc:	42a8      	cmp	r0, r5
 800a5ce:	d002      	beq.n	800a5d6 <Service_Sigfox_Callback+0x1ce>
				qTask_Notification_Send(obj.PtrToTaskFSM, (void*)OPERATION_SLEEP);
 800a5d0:	2108      	movs	r1, #8
 800a5d2:	f7fe f944 	bl	800885e <qTask_Notification_Send>
		qTask_Set_State(qTask_Self(),qDisabled);
 800a5d6:	f7fe f952 	bl	800887e <qTask_Self>
 800a5da:	2100      	movs	r1, #0
 800a5dc:	f7fe f979 	bl	80088d2 <qTask_Set_State>
		request.Request = 0xff;  /*limpiar request*/
 800a5e0:	23ff      	movs	r3, #255	; 0xff
 800a5e2:	733b      	strb	r3, [r7, #12]
		qCR_Yield;
 800a5e4:	33c1      	adds	r3, #193	; 0xc1
	}qCR_End;
 800a5e6:	6023      	str	r3, [r4, #0]
}
 800a5e8:	e72f      	b.n	800a44a <Service_Sigfox_Callback+0x42>
	qCR_Begin{
 800a5ea:	22d6      	movs	r2, #214	; 0xd6
 800a5ec:	0052      	lsls	r2, r2, #1
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d0b3      	beq.n	800a55a <Service_Sigfox_Callback+0x152>
 800a5f2:	3214      	adds	r2, #20
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d000      	beq.n	800a5fa <Service_Sigfox_Callback+0x1f2>
 800a5f8:	e727      	b.n	800a44a <Service_Sigfox_Callback+0x42>
	}qCR_End;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	425b      	negs	r3, r3
 800a5fe:	e7f2      	b.n	800a5e6 <Service_Sigfox_Callback+0x1de>
		qDebug_Message("Coroutine from Beginning");
 800a600:	2100      	movs	r1, #0
 800a602:	482c      	ldr	r0, [pc, #176]	; (800a6b4 <Service_Sigfox_Callback+0x2ac>)
 800a604:	4b32      	ldr	r3, [pc, #200]	; (800a6d0 <Service_Sigfox_Callback+0x2c8>)
 800a606:	0002      	movs	r2, r0
 800a608:	9101      	str	r1, [sp, #4]
 800a60a:	9100      	str	r1, [sp, #0]
 800a60c:	f7fe f9ac 	bl	8008968 <_qtrace_func>
	SigFoxData.WilsolService_Status = status;
 800a610:	2201      	movs	r2, #1
 800a612:	4b25      	ldr	r3, [pc, #148]	; (800a6a8 <Service_Sigfox_Callback+0x2a0>)
		qCR_WaitUntil(WSSFM1XRX_TIMEOUT == ( ret = WSSFM1XRX_WakeUP(&SigfoxModule)) );
 800a614:	6026      	str	r6, [r4, #0]
	SigFoxData.WilsolService_Status = status;
 800a616:	3305      	adds	r3, #5
 800a618:	77da      	strb	r2, [r3, #31]
		qCR_WaitUntil(WSSFM1XRX_TIMEOUT == ( ret = WSSFM1XRX_WakeUP(&SigfoxModule)) );
 800a61a:	4821      	ldr	r0, [pc, #132]	; (800a6a0 <Service_Sigfox_Callback+0x298>)
 800a61c:	f7fc f98c 	bl	8006938 <WSSFM1XRX_WakeUP>
 800a620:	2800      	cmp	r0, #0
 800a622:	d000      	beq.n	800a626 <Service_Sigfox_Callback+0x21e>
 800a624:	e711      	b.n	800a44a <Service_Sigfox_Callback+0x42>
	SigFoxData.WilsolService_Status = status;
 800a626:	2202      	movs	r2, #2
 800a628:	4b1f      	ldr	r3, [pc, #124]	; (800a6a8 <Service_Sigfox_Callback+0x2a0>)
		qCR_WaitUntil( ( WSSFM1XRX_OK_RESPONSE == (ret = WSSFM1XRX_CheckModule(&SigfoxModule, WAIT)) )  || (WSSFM1XRX_MAX_RETRIES_REACHED == ret)  );
 800a62a:	6025      	str	r5, [r4, #0]
	SigFoxData.WilsolService_Status = status;
 800a62c:	3305      	adds	r3, #5
 800a62e:	77da      	strb	r2, [r3, #31]
		qCR_WaitUntil( ( WSSFM1XRX_OK_RESPONSE == (ret = WSSFM1XRX_CheckModule(&SigfoxModule, WAIT)) )  || (WSSFM1XRX_MAX_RETRIES_REACHED == ret)  );
 800a630:	491c      	ldr	r1, [pc, #112]	; (800a6a4 <Service_Sigfox_Callback+0x29c>)
 800a632:	481b      	ldr	r0, [pc, #108]	; (800a6a0 <Service_Sigfox_Callback+0x298>)
 800a634:	f7fc fa5e 	bl	8006af4 <WSSFM1XRX_CheckModule>
 800a638:	2803      	cmp	r0, #3
 800a63a:	d007      	beq.n	800a64c <Service_Sigfox_Callback+0x244>
 800a63c:	280b      	cmp	r0, #11
 800a63e:	d000      	beq.n	800a642 <Service_Sigfox_Callback+0x23a>
 800a640:	e703      	b.n	800a44a <Service_Sigfox_Callback+0x42>
			WSSFM1XRX_ResetModule(&SigfoxModule,WSSFM1XRX_Wait_Block);
 800a642:	4924      	ldr	r1, [pc, #144]	; (800a6d4 <Service_Sigfox_Callback+0x2cc>)
 800a644:	4816      	ldr	r0, [pc, #88]	; (800a6a0 <Service_Sigfox_Callback+0x298>)
 800a646:	f7fc f99b 	bl	8006980 <WSSFM1XRX_ResetModule>
 800a64a:	e7d6      	b.n	800a5fa <Service_Sigfox_Callback+0x1f2>
	SigFoxData.WilsolService_Status = status;
 800a64c:	4b16      	ldr	r3, [pc, #88]	; (800a6a8 <Service_Sigfox_Callback+0x2a0>)
 800a64e:	3305      	adds	r3, #5
 800a650:	77d8      	strb	r0, [r3, #31]
		qCR_WaitUntil( (WSSFM1XRX_OK_RESPONSE == (ret = WSSFM1XRX_GetVoltage(&SigfoxModule,WAIT,&SigFoxData.VBatt ) )) || (WSSFM1XRX_FAILURE == ret) );
 800a652:	2368      	movs	r3, #104	; 0x68
 800a654:	33ff      	adds	r3, #255	; 0xff
 800a656:	6023      	str	r3, [r4, #0]
 800a658:	4d13      	ldr	r5, [pc, #76]	; (800a6a8 <Service_Sigfox_Callback+0x2a0>)
 800a65a:	4912      	ldr	r1, [pc, #72]	; (800a6a4 <Service_Sigfox_Callback+0x29c>)
 800a65c:	002a      	movs	r2, r5
 800a65e:	4810      	ldr	r0, [pc, #64]	; (800a6a0 <Service_Sigfox_Callback+0x298>)
 800a660:	3222      	adds	r2, #34	; 0x22
 800a662:	f7fc fbd1 	bl	8006e08 <WSSFM1XRX_GetVoltage>
 800a666:	2803      	cmp	r0, #3
 800a668:	d003      	beq.n	800a672 <Service_Sigfox_Callback+0x26a>
		qCR_WaitUntil( (WSSFM1XRX_OK_RESPONSE == (ret = WSSFM1XRX_GetPAC(&SigfoxModule,WAIT,SigFoxData.PAC)) ) || ( WSSFM1XRX_FAILURE == ret) );
 800a66a:	280a      	cmp	r0, #10
 800a66c:	d000      	beq.n	800a670 <Service_Sigfox_Callback+0x268>
 800a66e:	e6ec      	b.n	800a44a <Service_Sigfox_Callback+0x42>
 800a670:	e7e7      	b.n	800a642 <Service_Sigfox_Callback+0x23a>
	SigFoxData.WilsolService_Status = status;
 800a672:	2304      	movs	r3, #4
 800a674:	3505      	adds	r5, #5
 800a676:	77eb      	strb	r3, [r5, #31]
		qCR_WaitUntil( (WSSFM1XRX_OK_RESPONSE == ( ret = WSSFM1XRX_AskFrequencyUL(&SigfoxModule, WAIT, &Frequency) ) ) ||
 800a678:	2374      	movs	r3, #116	; 0x74
 800a67a:	33ff      	adds	r3, #255	; 0xff
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	e6ee      	b.n	800a45e <Service_Sigfox_Callback+0x56>
		if( (request.Request == REQUEST_CHANGE_FREQUENCY && Frequency != request.Frequency ) || (Frequency != obj.FreqInFlash) ){ /*el != es para la primera vez*/
 800a680:	429a      	cmp	r2, r3
 800a682:	d100      	bne.n	800a686 <Service_Sigfox_Callback+0x27e>
 800a684:	e725      	b.n	800a4d2 <Service_Sigfox_Callback+0xca>
 800a686:	e70a      	b.n	800a49e <Service_Sigfox_Callback+0x96>
 800a688:	429a      	cmp	r2, r3
 800a68a:	d100      	bne.n	800a68e <Service_Sigfox_Callback+0x286>
 800a68c:	e721      	b.n	800a4d2 <Service_Sigfox_Callback+0xca>
 800a68e:	001a      	movs	r2, r3
 800a690:	e705      	b.n	800a49e <Service_Sigfox_Callback+0x96>
 800a692:	46c0      	nop			; (mov r8, r8)
 800a694:	20000fe4 	.word	0x20000fe4
 800a698:	20000274 	.word	0x20000274
 800a69c:	20000260 	.word	0x20000260
 800a6a0:	20000e98 	.word	0x20000e98
 800a6a4:	080068d1 	.word	0x080068d1
 800a6a8:	20000e54 	.word	0x20000e54
 800a6ac:	20000fdc 	.word	0x20000fdc
 800a6b0:	20000df2 	.word	0x20000df2
 800a6b4:	0800d709 	.word	0x0800d709
 800a6b8:	0800d615 	.word	0x0800d615
 800a6bc:	0800d500 	.word	0x0800d500
 800a6c0:	0800d62d 	.word	0x0800d62d
 800a6c4:	0800d646 	.word	0x0800d646
 800a6c8:	0800d670 	.word	0x0800d670
 800a6cc:	0800d68d 	.word	0x0800d68d
 800a6d0:	0800d5fc 	.word	0x0800d5fc
 800a6d4:	08006921 	.word	0x08006921

0800a6d8 <Service_Sigfox_Send>:
void Service_Sigfox_Send( uint8_t *data, uint8_t downlink){
 800a6d8:	b570      	push	{r4, r5, r6, lr}
 800a6da:	000d      	movs	r5, r1
	Service_SigfoxRequest.Request = ((downlink == 1) ? REQUEST_SEND_PAYLOAD_DOWNLINK : REQUEST_SEND_PAYLOAD);
 800a6dc:	3d01      	subs	r5, #1
 800a6de:	426b      	negs	r3, r5
 800a6e0:	415d      	adcs	r5, r3
	memcpy(Service_SigfoxRequest.Payload, data,12);  /*add repeticiones*/
 800a6e2:	4c0c      	ldr	r4, [pc, #48]	; (800a714 <Service_Sigfox_Send+0x3c>)
 800a6e4:	220c      	movs	r2, #12
 800a6e6:	0001      	movs	r1, r0
 800a6e8:	0020      	movs	r0, r4
 800a6ea:	f001 f825 	bl	800b738 <memcpy>
	if(obj.Repeat){   /*flag  isactive repeat*/
 800a6ee:	4b0a      	ldr	r3, [pc, #40]	; (800a718 <Service_Sigfox_Send+0x40>)
	Service_SigfoxRequest.Request = ((downlink == 1) ? REQUEST_SEND_PAYLOAD_DOWNLINK : REQUEST_SEND_PAYLOAD);
 800a6f0:	7325      	strb	r5, [r4, #12]
	if(obj.Repeat){   /*flag  isactive repeat*/
 800a6f2:	795a      	ldrb	r2, [r3, #5]
 800a6f4:	4d09      	ldr	r5, [pc, #36]	; (800a71c <Service_Sigfox_Send+0x44>)
 800a6f6:	2a00      	cmp	r2, #0
 800a6f8:	d006      	beq.n	800a708 <Service_Sigfox_Send+0x30>
		qQueue_SendToBack(&SigFox_UplinkQueue, &Service_SigfoxRequest);
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	0021      	movs	r1, r4
 800a6fe:	0028      	movs	r0, r5
 800a700:	f7fe f827 	bl	8008752 <qQueue_SendGeneric>
		Service_SigfoxRequest.Request =  REQUEST_SEND_PAYLOAD;  /*downlink solo en una vez */
 800a704:	2200      	movs	r2, #0
 800a706:	7322      	strb	r2, [r4, #12]
		qQueue_SendToBack(&SigFox_UplinkQueue, &Service_SigfoxRequest);
 800a708:	0028      	movs	r0, r5
 800a70a:	0021      	movs	r1, r4
 800a70c:	f7fe f821 	bl	8008752 <qQueue_SendGeneric>
}
 800a710:	bd70      	pop	{r4, r5, r6, pc}
 800a712:	46c0      	nop			; (mov r8, r8)
 800a714:	20000e40 	.word	0x20000e40
 800a718:	20000fdc 	.word	0x20000fdc
 800a71c:	20000e7c 	.word	0x20000e7c

0800a720 <Service_Sigfox_WakeUp>:
WSSFM1XRX_Return_t Service_Sigfox_WakeUp(void){
 800a720:	b570      	push	{r4, r5, r6, lr}
	ret =  WSSFM1XRX_WakeUP(&SigfoxModule);
 800a722:	4c05      	ldr	r4, [pc, #20]	; (800a738 <Service_Sigfox_WakeUp+0x18>)
 800a724:	0020      	movs	r0, r4
 800a726:	f7fc f907 	bl	8006938 <WSSFM1XRX_WakeUP>
 800a72a:	0005      	movs	r5, r0
	WSSFM1XRX_Wait_Block(&SigfoxModule,1.0);
 800a72c:	2101      	movs	r1, #1
 800a72e:	0020      	movs	r0, r4
 800a730:	f7fc f8f6 	bl	8006920 <WSSFM1XRX_Wait_Block>
}
 800a734:	0028      	movs	r0, r5
 800a736:	bd70      	pop	{r4, r5, r6, pc}
 800a738:	20000e98 	.word	0x20000e98

0800a73c <Service_Sigfox_Sleep>:
WSSFM1XRX_Return_t Service_Sigfox_Sleep(void){
 800a73c:	b510      	push	{r4, lr}
	return  WSSFM1XRX_Sleep(&SigfoxModule,WSSFM1XRX_Wait_NonBlock);
 800a73e:	4902      	ldr	r1, [pc, #8]	; (800a748 <Service_Sigfox_Sleep+0xc>)
 800a740:	4802      	ldr	r0, [pc, #8]	; (800a74c <Service_Sigfox_Sleep+0x10>)
 800a742:	f7fc f9bf 	bl	8006ac4 <WSSFM1XRX_Sleep>
}
 800a746:	bd10      	pop	{r4, pc}
 800a748:	080068d1 	.word	0x080068d1
 800a74c:	20000e98 	.word	0x20000e98

0800a750 <Service_Sigfox_GetDownlinkFrame>:
uint8_t* Service_Sigfox_GetDownlinkFrame(void){
 800a750:	b510      	push	{r4, lr}
	memcpy(Downlink_NumericFrame, (char*)SigfoxModule.DL_NumericFrame , sizeof(SigfoxModule.DL_NumericFrame));
 800a752:	4904      	ldr	r1, [pc, #16]	; (800a764 <Service_Sigfox_GetDownlinkFrame+0x14>)
 800a754:	4c04      	ldr	r4, [pc, #16]	; (800a768 <Service_Sigfox_GetDownlinkFrame+0x18>)
 800a756:	2208      	movs	r2, #8
 800a758:	3120      	adds	r1, #32
 800a75a:	0020      	movs	r0, r4
 800a75c:	f000 ffec 	bl	800b738 <memcpy>
}
 800a760:	0020      	movs	r0, r4
 800a762:	bd10      	pop	{r4, pc}
 800a764:	20000e98 	.word	0x20000e98
 800a768:	20000dea 	.word	0x20000dea

0800a76c <Service_Sigfox_GetDownlinkStatus>:
	return obj.StatusDownlink;
 800a76c:	4b01      	ldr	r3, [pc, #4]	; (800a774 <Service_Sigfox_GetDownlinkStatus+0x8>)
 800a76e:	7998      	ldrb	r0, [r3, #6]
}
 800a770:	4770      	bx	lr
 800a772:	46c0      	nop			; (mov r8, r8)
 800a774:	20000fdc 	.word	0x20000fdc

0800a778 <Service_Sigfox_QueueIsEmpty>:
uint8_t Service_Sigfox_QueueIsEmpty(void){
 800a778:	b510      	push	{r4, lr}
	return qQueue_IsEmpty(&SigFox_UplinkQueue);
 800a77a:	4802      	ldr	r0, [pc, #8]	; (800a784 <Service_Sigfox_QueueIsEmpty+0xc>)
 800a77c:	f7fd ff86 	bl	800868c <qQueue_IsEmpty>
}
 800a780:	bd10      	pop	{r4, pc}
 800a782:	46c0      	nop			; (mov r8, r8)
 800a784:	20000e7c 	.word	0x20000e7c

0800a788 <WSQ_ADC_Init>:
#define WSQ_ADC_CHANNEL_2	1		/*!< ADC1 channel 2*/
#define WSQ_ADC_CHANNEL_3	2		/*!< ADC1 channel 2*/
#define WSQ_ADC_RETRIES  10000000U   /*!< Number of attempts to get a valid conversion from the ADC */
static volatile uint16_t AnalogVal[WSQ_ADC_CHS] = {0}; /*!< Array to hold the read ADC values */

void WSQ_ADC_Init(void){
 800a788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a78a:	b093      	sub	sp, #76	; 0x4c
	  /* USER CODE BEGIN ADC_Init 0 */

	  /* USER CODE END ADC_Init 0 */

	  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800a78c:	2214      	movs	r2, #20
 800a78e:	2100      	movs	r1, #0
 800a790:	a807      	add	r0, sp, #28
 800a792:	f000 ffda 	bl	800b74a <memset>
	  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800a796:	2210      	movs	r2, #16
 800a798:	2100      	movs	r1, #0
 800a79a:	a803      	add	r0, sp, #12
 800a79c:	f000 ffd5 	bl	800b74a <memset>

	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7a0:	2210      	movs	r2, #16
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	a80e      	add	r0, sp, #56	; 0x38
 800a7a6:	f000 ffd0 	bl	800b74a <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800a7aa:	2080      	movs	r0, #128	; 0x80
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800a7ac:	2601      	movs	r6, #1
  SET_BIT(RCC->APB2ENR, Periphs);
 800a7ae:	4b3f      	ldr	r3, [pc, #252]	; (800a8ac <WSQ_ADC_Init+0x124>)
 800a7b0:	0080      	lsls	r0, r0, #2
 800a7b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
	  /**ADC GPIO Configuration
	  PA1   ------> ADC_IN1
	  PA2   ------> ADC_IN2
	  */
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800a7b4:	2403      	movs	r4, #3
 800a7b6:	4301      	orrs	r1, r0
 800a7b8:	6359      	str	r1, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a7ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7bc:	a90c      	add	r1, sp, #48	; 0x30
 800a7be:	4002      	ands	r2, r0
 800a7c0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800a7c2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 800a7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c6:	20a0      	movs	r0, #160	; 0xa0
 800a7c8:	4332      	orrs	r2, r6
 800a7ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800a7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ce:	05c0      	lsls	r0, r0, #23
 800a7d0:	4033      	ands	r3, r6
 800a7d2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800a7d4:	9b01      	ldr	r3, [sp, #4]
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800a7d6:	2302      	movs	r3, #2
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800a7d8:	940d      	str	r4, [sp, #52]	; 0x34
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800a7da:	930c      	str	r3, [sp, #48]	; 0x30
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7dc:	f7f9 fdd8 	bl	8004390 <LL_GPIO_Init>

	  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7e0:	20a0      	movs	r0, #160	; 0xa0
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a7e2:	2500      	movs	r5, #0
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800a7e4:	2704      	movs	r7, #4
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7e6:	a90c      	add	r1, sp, #48	; 0x30
 800a7e8:	05c0      	lsls	r0, r0, #23
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800a7ea:	940d      	str	r4, [sp, #52]	; 0x34
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800a7ec:	970c      	str	r7, [sp, #48]	; 0x30
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a7ee:	9510      	str	r5, [sp, #64]	; 0x40
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7f0:	f7f9 fdce 	bl	8004390 <LL_GPIO_Init>
	    PB0   ------> ADC_IN8
	    */
	    GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
	    GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
	    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a7f4:	a90c      	add	r1, sp, #48	; 0x30
 800a7f6:	482e      	ldr	r0, [pc, #184]	; (800a8b0 <WSQ_ADC_Init+0x128>)
	    GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800a7f8:	940d      	str	r4, [sp, #52]	; 0x34
	    GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800a7fa:	960c      	str	r6, [sp, #48]	; 0x30
	    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a7fc:	9510      	str	r5, [sp, #64]	; 0x40
	    LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a7fe:	f7f9 fdc7 	bl	8004390 <LL_GPIO_Init>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800a802:	2202      	movs	r2, #2
 800a804:	4c2b      	ldr	r4, [pc, #172]	; (800a8b4 <WSQ_ADC_Init+0x12c>)
	  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
	  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
	  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
	  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
	  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
	  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800a806:	a907      	add	r1, sp, #28
 800a808:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a80a:	0020      	movs	r0, r4
 800a80c:	4313      	orrs	r3, r2
 800a80e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a810:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a812:	433b      	orrs	r3, r7
 800a814:	62a3      	str	r3, [r4, #40]	; 0x28
 800a816:	2380      	movs	r3, #128	; 0x80
 800a818:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a81a:	005b      	lsls	r3, r3, #1
 800a81c:	4313      	orrs	r3, r2
 800a81e:	62a3      	str	r3, [r4, #40]	; 0x28
	  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800a820:	9507      	str	r5, [sp, #28]
	  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800a822:	9508      	str	r5, [sp, #32]
	  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800a824:	9509      	str	r5, [sp, #36]	; 0x24
	  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 800a826:	950a      	str	r5, [sp, #40]	; 0x28
	  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800a828:	950b      	str	r5, [sp, #44]	; 0x2c
	  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800a82a:	f7f9 fd99 	bl	8004360 <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800a82e:	2207      	movs	r2, #7
 800a830:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, Resolution);
 800a832:	4921      	ldr	r1, [pc, #132]	; (800a8b8 <WSQ_ADC_Init+0x130>)
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 800a834:	4313      	orrs	r3, r2
 800a836:	6163      	str	r3, [r4, #20]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 800a838:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, Resolution);
 800a83a:	4a20      	ldr	r2, [pc, #128]	; (800a8bc <WSQ_ADC_Init+0x134>)
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 800a83c:	43b3      	bics	r3, r6
 800a83e:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800a840:	68e3      	ldr	r3, [r4, #12]
	  LL_ADC_EnableInternalRegulator(ADC1);
	  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
	  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
	  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
	  ADC_InitStruct.LowPowerMode = LL_ADC_LP_AUTOWAIT_AUTOPOWEROFF;
	  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800a842:	0020      	movs	r0, r4
 800a844:	43bb      	bics	r3, r7
 800a846:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, Resolution);
 800a848:	6813      	ldr	r3, [r2, #0]
 800a84a:	400b      	ands	r3, r1
 800a84c:	6013      	str	r3, [r2, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800a84e:	2208      	movs	r2, #8
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a850:	6863      	ldr	r3, [r4, #4]
 800a852:	a903      	add	r1, sp, #12
 800a854:	43bb      	bics	r3, r7
 800a856:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800a858:	6863      	ldr	r3, [r4, #4]
 800a85a:	4393      	bics	r3, r2
 800a85c:	6063      	str	r3, [r4, #4]
  MODIFY_REG(ADCx->CR,
 800a85e:	68a3      	ldr	r3, [r4, #8]
 800a860:	4a17      	ldr	r2, [pc, #92]	; (800a8c0 <WSQ_ADC_Init+0x138>)
 800a862:	401a      	ands	r2, r3
 800a864:	2380      	movs	r3, #128	; 0x80
 800a866:	055b      	lsls	r3, r3, #21
 800a868:	4313      	orrs	r3, r2
 800a86a:	60a3      	str	r3, [r4, #8]
	  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 800a86c:	2380      	movs	r3, #128	; 0x80
 800a86e:	05db      	lsls	r3, r3, #23
 800a870:	9303      	str	r3, [sp, #12]
	  ADC_InitStruct.LowPowerMode = LL_ADC_LP_AUTOWAIT_AUTOPOWEROFF;
 800a872:	23c0      	movs	r3, #192	; 0xc0
 800a874:	021b      	lsls	r3, r3, #8
 800a876:	9306      	str	r3, [sp, #24]
	  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800a878:	9504      	str	r5, [sp, #16]
	  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800a87a:	9505      	str	r5, [sp, #20]
	  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800a87c:	f7f9 fd56 	bl	800432c <LL_ADC_Init>
	  /* USER CODE BEGIN ADC_Init 2 */
		/* Calibration procedure----------------------------------------*/
		/* Ensure ADEN = 0 */
		if((ADC1->CR & ADC_CR_ADEN) != 0)
 800a880:	68a3      	ldr	r3, [r4, #8]
 800a882:	4233      	tst	r3, r6
 800a884:	d003      	beq.n	800a88e <WSQ_ADC_Init+0x106>
			ADC1->CR |= ADC_CR_ADDIS;
 800a886:	2202      	movs	r2, #2
 800a888:	68a3      	ldr	r3, [r4, #8]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	60a3      	str	r3, [r4, #8]

		/* Start calibration */
		ADC1->CR |= ADC_CR_ADCAL;
 800a88e:	2380      	movs	r3, #128	; 0x80
 800a890:	68a2      	ldr	r2, [r4, #8]
 800a892:	061b      	lsls	r3, r3, #24
 800a894:	4313      	orrs	r3, r2
 800a896:	60a3      	str	r3, [r4, #8]

		/* Wait for and clear EOCAL */
		while((ADC1->ISR & ADC_ISR_EOCAL) == 0){
 800a898:	2380      	movs	r3, #128	; 0x80
 800a89a:	011b      	lsls	r3, r3, #4
 800a89c:	6822      	ldr	r2, [r4, #0]
 800a89e:	421a      	tst	r2, r3
 800a8a0:	d0fc      	beq.n	800a89c <WSQ_ADC_Init+0x114>
			/*TODO: handle timeout here*/
		}
		ADC1->ISR |= ADC_ISR_EOCAL;
 800a8a2:	6822      	ldr	r2, [r4, #0]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	6023      	str	r3, [r4, #0]
		  /* ADC interrupt Init */
	 // NVIC_SetPriority(ADC1_COMP_IRQn, 0);
	  //NVIC_EnableIRQ(ADC1_COMP_IRQn);

	 // LL_ADC_EnableIT_EOC(ADC1);
}
 800a8a8:	b013      	add	sp, #76	; 0x4c
 800a8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ac:	40021000 	.word	0x40021000
 800a8b0:	50000400 	.word	0x50000400
 800a8b4:	40012400 	.word	0x40012400
 800a8b8:	fdffffff 	.word	0xfdffffff
 800a8bc:	40012708 	.word	0x40012708
 800a8c0:	6fffffe8 	.word	0x6fffffe8

0800a8c4 <ADC1_COMP_IRQHandler>:
void ADC1_COMP_IRQHandler(void)
{
	//	static volatile int i=0;
	//	AnalogVal[i++] = LL_ADC_REG_ReadConversionData12(ADC1);
	//	i= i < WSQ_ADC_CHS ? i : 0;
}
 800a8c4:	4770      	bx	lr

0800a8c6 <WSQ_RestoreDataFlash>:
				0x0808 0C00 - 0x0808 17FF            - Data EEPROM Bank 2
 * */


 // @example WSQ_RestoreDataFlash(WSQ_ADDR_RESERVED_DATA_CONFIG,WSQ_FLASH_RESTORE_DATA_CONFIG)
void WSQ_RestoreDataFlash(uint32_t address ,_size_t amount){
 800a8c6:	b570      	push	{r4, r5, r6, lr}
 800a8c8:	000d      	movs	r5, r1
 800a8ca:	0006      	movs	r6, r0

	HAL_FLASHEx_DATAEEPROM_Unlock();
	 for( _size_t i = 0 ; i <= (amount/sizeof(uint32_t) ) ; i++){
 800a8cc:	2400      	movs	r4, #0
	HAL_FLASHEx_DATAEEPROM_Unlock();
 800a8ce:	f7f8 fc6f 	bl	80031b0 <HAL_FLASHEx_DATAEEPROM_Unlock>
	 for( _size_t i = 0 ; i <= (amount/sizeof(uint32_t) ) ; i++){
 800a8d2:	08ad      	lsrs	r5, r5, #2
 800a8d4:	b2a3      	uxth	r3, r4
 800a8d6:	429d      	cmp	r5, r3
 800a8d8:	d202      	bcs.n	800a8e0 <WSQ_RestoreDataFlash+0x1a>
		HAL_FLASHEx_DATAEEPROM_Erase(address + (i<<2) );
	}
	HAL_FLASHEx_DATAEEPROM_Lock();
 800a8da:	f7f8 fc81 	bl	80031e0 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800a8de:	bd70      	pop	{r4, r5, r6, pc}
		HAL_FLASHEx_DATAEEPROM_Erase(address + (i<<2) );
 800a8e0:	00a0      	lsls	r0, r4, #2
 800a8e2:	1980      	adds	r0, r0, r6
 800a8e4:	f7f8 fc86 	bl	80031f4 <HAL_FLASHEx_DATAEEPROM_Erase>
 800a8e8:	3401      	adds	r4, #1
 800a8ea:	e7f3      	b.n	800a8d4 <WSQ_RestoreDataFlash+0xe>

0800a8ec <WSQ_Flash_Read>:
	 for( _size_t i = 0 ; i <= (amount/sizeof(uint32_t) ) ; i++) {
		 WSQ_Flash_Write_Word(Address + (i<<2), bytedata[i] );
	 }
}

void WSQ_Flash_Read(uint32_t Address, void *pData , _size_t amount){
 800a8ec:	000b      	movs	r3, r1
 800a8ee:	b510      	push	{r4, lr}
		memcpy(pData , (void*)(Address),amount);  /*copy n data*/
 800a8f0:	0001      	movs	r1, r0
 800a8f2:	0018      	movs	r0, r3
 800a8f4:	f000 ff20 	bl	800b738 <memcpy>
}
 800a8f8:	bd10      	pop	{r4, pc}

0800a8fa <WSQ_Flash_Write_Word>:


void WSQ_Flash_Write_Word(uint32_t Flash_Address, uint32_t Flash_Data){
 800a8fa:	b570      	push	{r4, r5, r6, lr}
 800a8fc:	0004      	movs	r4, r0
 800a8fe:	000d      	movs	r5, r1
	HAL_FLASHEx_DATAEEPROM_Unlock();
 800a900:	f7f8 fc56 	bl	80031b0 <HAL_FLASHEx_DATAEEPROM_Unlock>
	HAL_FLASHEx_DATAEEPROM_Erase(Flash_Address);
 800a904:	0020      	movs	r0, r4
 800a906:	f7f8 fc75 	bl	80031f4 <HAL_FLASHEx_DATAEEPROM_Erase>
	HAL_FLASHEx_DATAEEPROM_Program(TypeProgram, Flash_Address ,Flash_Data);   /*16 bits halfword*/
 800a90a:	002a      	movs	r2, r5
 800a90c:	0021      	movs	r1, r4
 800a90e:	2002      	movs	r0, #2
 800a910:	f7f8 fc82 	bl	8003218 <HAL_FLASHEx_DATAEEPROM_Program>
	HAL_FLASHEx_DATAEEPROM_Lock();
 800a914:	f7f8 fc64 	bl	80031e0 <HAL_FLASHEx_DATAEEPROM_Lock>
	/*FLASH_TYPEPROGRAMDATA_WORD		(uint32_t)Flash_Data*/
	Flash_Write(Flash_Address,Flash_Data,FLASH_TYPEPROGRAMDATA_WORD);
}
 800a918:	bd70      	pop	{r4, r5, r6, pc}

0800a91a <WSQ_Flash_Write>:
void WSQ_Flash_Write(uint32_t Address, void *pData , _size_t amount){
 800a91a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a91c:	0006      	movs	r6, r0
 800a91e:	000f      	movs	r7, r1
	 for( _size_t i = 0 ; i <= (amount/sizeof(uint32_t) ) ; i++) {
 800a920:	0005      	movs	r5, r0
 800a922:	2400      	movs	r4, #0
 800a924:	0893      	lsrs	r3, r2, #2
 800a926:	9301      	str	r3, [sp, #4]
		 WSQ_Flash_Write_Word(Address + (i<<2), bytedata[i] );
 800a928:	1bbb      	subs	r3, r7, r6
 800a92a:	5959      	ldr	r1, [r3, r5]
 800a92c:	0028      	movs	r0, r5
 800a92e:	f7ff ffe4 	bl	800a8fa <WSQ_Flash_Write_Word>
	 for( _size_t i = 0 ; i <= (amount/sizeof(uint32_t) ) ; i++) {
 800a932:	3401      	adds	r4, #1
 800a934:	9b01      	ldr	r3, [sp, #4]
 800a936:	b2a4      	uxth	r4, r4
 800a938:	3504      	adds	r5, #4
 800a93a:	42a3      	cmp	r3, r4
 800a93c:	d2f4      	bcs.n	800a928 <WSQ_Flash_Write+0xe>
}
 800a93e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800a940 <WSQ_Flash_IsEmpty>:
	Flash_Data = *( (uint32_t*)Flash_Address);  // de-referenciar
	return Flash_Data;
}

/*ZeroEmpty is 1 if you want to get zero as empty*/
uint8_t WSQ_Flash_IsEmpty(uint32_t Address, _size_t n , int zeroEmpty){
 800a940:	b570      	push	{r4, r5, r6, lr}
	uint32_t *chk = (uint32_t*)Address;
	uint8_t retVal = 0;
	for( uint32_t i = 0; i <= (n/sizeof(uint32_t)) ; i++){
 800a942:	2400      	movs	r4, #0
		if(1 == zeroEmpty){
			retVal = ( (0xFFFFFFFF == *( chk + i)) ||  (0x00000000 == *( chk + i)) );  /*check by 4*/
 800a944:	2503      	movs	r5, #3
	uint8_t retVal = 0;
 800a946:	0023      	movs	r3, r4
	for( uint32_t i = 0; i <= (n/sizeof(uint32_t)) ; i++){
 800a948:	0889      	lsrs	r1, r1, #2
			retVal = ( (0xFFFFFFFF == *( chk + i)) ||  (0x00000000 == *( chk + i)) );  /*check by 4*/
 800a94a:	426d      	negs	r5, r5
		if(1 == zeroEmpty){
 800a94c:	2a01      	cmp	r2, #1
 800a94e:	d10c      	bne.n	800a96a <WSQ_Flash_IsEmpty+0x2a>
			retVal = ( (0xFFFFFFFF == *( chk + i)) ||  (0x00000000 == *( chk + i)) );  /*check by 4*/
 800a950:	00a3      	lsls	r3, r4, #2
 800a952:	581b      	ldr	r3, [r3, r0]
 800a954:	3b01      	subs	r3, #1
 800a956:	429d      	cmp	r5, r3
 800a958:	419b      	sbcs	r3, r3
 800a95a:	425b      	negs	r3, r3
		}else if(0 == zeroEmpty){
			retVal =  (0xFFFFFFFF == *( chk + i)) ;
		}
		if(0 == retVal){    /*if is writed, is not empty*/
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d002      	beq.n	800a966 <WSQ_Flash_IsEmpty+0x26>
	for( uint32_t i = 0; i <= (n/sizeof(uint32_t)) ; i++){
 800a960:	3401      	adds	r4, #1
 800a962:	42a1      	cmp	r1, r4
 800a964:	d2f2      	bcs.n	800a94c <WSQ_Flash_IsEmpty+0xc>
		    break;
		}
	}
	return retVal;
}
 800a966:	0018      	movs	r0, r3
 800a968:	bd70      	pop	{r4, r5, r6, pc}
		}else if(0 == zeroEmpty){
 800a96a:	2a00      	cmp	r2, #0
 800a96c:	d1f6      	bne.n	800a95c <WSQ_Flash_IsEmpty+0x1c>
			retVal =  (0xFFFFFFFF == *( chk + i)) ;
 800a96e:	00a3      	lsls	r3, r4, #2
 800a970:	581b      	ldr	r3, [r3, r0]
 800a972:	3301      	adds	r3, #1
 800a974:	425e      	negs	r6, r3
 800a976:	4173      	adcs	r3, r6
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	e7ef      	b.n	800a95c <WSQ_Flash_IsEmpty+0x1c>

0800a97c <GPIO_Write>:
	  GPIO_Write(GPIOB, LL_GPIO_PIN_5,pinState);
  }


 static void GPIO_Write(GPIO_TypeDef *GPIOx, uint32_t PinMask, WSQ_bool pinState){
	 if(WSQ_TRUE == pinState )
 800a97c:	2a01      	cmp	r2, #1
 800a97e:	d101      	bne.n	800a984 <GPIO_Write+0x8>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a980:	6181      	str	r1, [r0, #24]
		 LL_GPIO_SetOutputPin(GPIOx, PinMask);
	 else if( WSQ_FALSE == pinState){
		 LL_GPIO_ResetOutputPin(GPIOx, PinMask);
	 }
 }
 800a982:	4770      	bx	lr
	 else if( WSQ_FALSE == pinState){
 800a984:	2a00      	cmp	r2, #0
 800a986:	d1fc      	bne.n	800a982 <GPIO_Write+0x6>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800a988:	6281      	str	r1, [r0, #40]	; 0x28
 }
 800a98a:	e7fa      	b.n	800a982 <GPIO_Write+0x6>

0800a98c <WSQ_GPIO_Init>:
 void WSQ_GPIO_Init(void){
 800a98c:	b5f0      	push	{r4, r5, r6, r7, lr}
	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a98e:	2410      	movs	r4, #16
  SET_BIT(RCC->IOPENR, Periphs);
 800a990:	2601      	movs	r6, #1
 void WSQ_GPIO_Init(void){
 800a992:	b08b      	sub	sp, #44	; 0x2c
	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a994:	0022      	movs	r2, r4
 800a996:	2100      	movs	r1, #0
 800a998:	a806      	add	r0, sp, #24
 800a99a:	f000 fed6 	bl	800b74a <memset>
 800a99e:	2202      	movs	r2, #2
 800a9a0:	4d4c      	ldr	r5, [pc, #304]	; (800aad4 <WSQ_GPIO_Init+0x148>)
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a9a2:	27a0      	movs	r7, #160	; 0xa0
 800a9a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a9a6:	05ff      	lsls	r7, r7, #23
 800a9a8:	4333      	orrs	r3, r6
 800a9aa:	62eb      	str	r3, [r5, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800a9ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9ae:	a904      	add	r1, sp, #16
 800a9b0:	4033      	ands	r3, r6
 800a9b2:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800a9b4:	9b03      	ldr	r3, [sp, #12]
  SET_BIT(RCC->IOPENR, Periphs);
 800a9b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a9b8:	0038      	movs	r0, r7
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	62eb      	str	r3, [r5, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800a9be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800a9c4:	9b02      	ldr	r3, [sp, #8]
 800a9c6:	2380      	movs	r3, #128	; 0x80
 800a9c8:	61bb      	str	r3, [r7, #24]
 800a9ca:	18db      	adds	r3, r3, r3
 800a9cc:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_7  | LL_GPIO_PIN_8 ;
 800a9ce:	3380      	adds	r3, #128	; 0x80
 800a9d0:	9304      	str	r3, [sp, #16]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800a9d2:	9605      	str	r6, [sp, #20]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9d4:	f7f9 fcdc 	bl	8004390 <LL_GPIO_Init>
 800a9d8:	2340      	movs	r3, #64	; 0x40
 800a9da:	2120      	movs	r1, #32
 800a9dc:	61bb      	str	r3, [r7, #24]
 800a9de:	61b9      	str	r1, [r7, #24]
 800a9e0:	61bc      	str	r4, [r7, #24]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800a9e2:	2400      	movs	r4, #0
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_4  | LL_GPIO_PIN_5 | LL_GPIO_PIN_6;
 800a9e4:	3330      	adds	r3, #48	; 0x30
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9e6:	a904      	add	r1, sp, #16
 800a9e8:	0038      	movs	r0, r7
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_4  | LL_GPIO_PIN_5 | LL_GPIO_PIN_6;
 800a9ea:	9304      	str	r3, [sp, #16]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800a9ec:	9605      	str	r6, [sp, #20]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800a9ee:	9406      	str	r4, [sp, #24]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a9f0:	9407      	str	r4, [sp, #28]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a9f2:	9408      	str	r4, [sp, #32]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9f4:	f7f9 fccc 	bl	8004390 <LL_GPIO_Init>
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800a9f8:	2380      	movs	r3, #128	; 0x80
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9fa:	a904      	add	r1, sp, #16
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800a9fc:	021b      	lsls	r3, r3, #8
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9fe:	0038      	movs	r0, r7
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800aa00:	9304      	str	r3, [sp, #16]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800aa02:	9405      	str	r4, [sp, #20]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800aa04:	9408      	str	r4, [sp, #32]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa06:	f7f9 fcc3 	bl	8004390 <LL_GPIO_Init>
 800aa0a:	2308      	movs	r3, #8
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa0c:	a904      	add	r1, sp, #16
 800aa0e:	61bb      	str	r3, [r7, #24]
 800aa10:	0038      	movs	r0, r7
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800aa12:	9304      	str	r3, [sp, #16]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800aa14:	9605      	str	r6, [sp, #20]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800aa16:	9406      	str	r4, [sp, #24]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800aa18:	9407      	str	r4, [sp, #28]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800aa1a:	9408      	str	r4, [sp, #32]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa1c:	f7f9 fcb8 	bl	8004390 <LL_GPIO_Init>
 800aa20:	2380      	movs	r3, #128	; 0x80
 800aa22:	4f2d      	ldr	r7, [pc, #180]	; (800aad8 <WSQ_GPIO_Init+0x14c>)
 800aa24:	019b      	lsls	r3, r3, #6
 800aa26:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa28:	a904      	add	r1, sp, #16
 800aa2a:	0038      	movs	r0, r7
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800aa2c:	9304      	str	r3, [sp, #16]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800aa2e:	9605      	str	r6, [sp, #20]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800aa30:	9406      	str	r4, [sp, #24]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800aa32:	9407      	str	r4, [sp, #28]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800aa34:	9408      	str	r4, [sp, #32]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa36:	f7f9 fcab 	bl	8004390 <LL_GPIO_Init>
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 800aa3a:	2380      	movs	r3, #128	; 0x80
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa3c:	a904      	add	r1, sp, #16
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 800aa3e:	01db      	lsls	r3, r3, #7
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa40:	0038      	movs	r0, r7
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 800aa42:	9304      	str	r3, [sp, #16]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800aa44:	9405      	str	r4, [sp, #20]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800aa46:	9408      	str	r4, [sp, #32]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa48:	f7f9 fca2 	bl	8004390 <LL_GPIO_Init>
  WRITE_REG(GPIOx->BRR, PinMask);
 800aa4c:	2380      	movs	r3, #128	; 0x80
 800aa4e:	005b      	lsls	r3, r3, #1
 800aa50:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa52:	2080      	movs	r0, #128	; 0x80
 800aa54:	2380      	movs	r3, #128	; 0x80
 800aa56:	0080      	lsls	r0, r0, #2
 800aa58:	00db      	lsls	r3, r3, #3
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	62b8      	str	r0, [r7, #40]	; 0x28
 800aa5e:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_8 | LL_GPIO_PIN_9 |  LL_GPIO_PIN_10;
 800aa60:	23e0      	movs	r3, #224	; 0xe0
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800aa62:	9206      	str	r2, [sp, #24]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa64:	aa04      	add	r2, sp, #16
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_8 | LL_GPIO_PIN_9 |  LL_GPIO_PIN_10;
 800aa66:	00db      	lsls	r3, r3, #3
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa68:	0011      	movs	r1, r2
 800aa6a:	0038      	movs	r0, r7
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_8 | LL_GPIO_PIN_9 |  LL_GPIO_PIN_10;
 800aa6c:	9304      	str	r3, [sp, #16]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800aa6e:	9605      	str	r6, [sp, #20]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800aa70:	9407      	str	r4, [sp, #28]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800aa72:	9408      	str	r4, [sp, #32]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa74:	f7f9 fc8c 	bl	8004390 <LL_GPIO_Init>
 800aa78:	2220      	movs	r2, #32
 800aa7a:	62ba      	str	r2, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800aa7c:	9204      	str	r2, [sp, #16]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa7e:	aa04      	add	r2, sp, #16
 800aa80:	0011      	movs	r1, r2
 800aa82:	0038      	movs	r0, r7
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800aa84:	9605      	str	r6, [sp, #20]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800aa86:	9406      	str	r4, [sp, #24]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800aa88:	9407      	str	r4, [sp, #28]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800aa8a:	9408      	str	r4, [sp, #32]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa8c:	f7f9 fc80 	bl	8004390 <LL_GPIO_Init>
  SET_BIT(RCC->APB1ENR, Periphs);
 800aa90:	2180      	movs	r1, #128	; 0x80
 800aa92:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800aa94:	0549      	lsls	r1, r1, #21
 800aa96:	430a      	orrs	r2, r1
 800aa98:	63aa      	str	r2, [r5, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800aa9a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  SET_BIT(PWR->CSR, WakeUpPin);
 800aa9c:	2080      	movs	r0, #128	; 0x80
 800aa9e:	400b      	ands	r3, r1
 800aaa0:	2180      	movs	r1, #128	; 0x80
 800aaa2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800aaa4:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800aaa6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800aaa8:	4a0c      	ldr	r2, [pc, #48]	; (800aadc <WSQ_GPIO_Init+0x150>)
 800aaaa:	4333      	orrs	r3, r6
 800aaac:	636b      	str	r3, [r5, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800aaae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800aab0:	0049      	lsls	r1, r1, #1
 800aab2:	401e      	ands	r6, r3
 800aab4:	9600      	str	r6, [sp, #0]
  (void)tmpreg;
 800aab6:	9b00      	ldr	r3, [sp, #0]
 800aab8:	6853      	ldr	r3, [r2, #4]
 800aaba:	0080      	lsls	r0, r0, #2
 800aabc:	430b      	orrs	r3, r1
 800aabe:	6053      	str	r3, [r2, #4]
 800aac0:	6853      	ldr	r3, [r2, #4]
	 Debounce_Init(&DebounceData, WSQ_BUTTON_SENSIVITY , PULL_DOWN);
 800aac2:	39ec      	subs	r1, #236	; 0xec
 800aac4:	4303      	orrs	r3, r0
 800aac6:	6053      	str	r3, [r2, #4]
 800aac8:	4805      	ldr	r0, [pc, #20]	; (800aae0 <WSQ_GPIO_Init+0x154>)
 800aaca:	2206      	movs	r2, #6
 800aacc:	f7fb fe73 	bl	80067b6 <Debounce_Init>
 }
 800aad0:	b00b      	add	sp, #44	; 0x2c
 800aad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aad4:	40021000 	.word	0x40021000
 800aad8:	50000400 	.word	0x50000400
 800aadc:	40007000 	.word	0x40007000
 800aae0:	20000ff4 	.word	0x20000ff4

0800aae4 <WSQ_GPIO_ReadWakeUp>:
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800aae4:	23a0      	movs	r3, #160	; 0xa0
 800aae6:	05db      	lsls	r3, r3, #23
 800aae8:	6918      	ldr	r0, [r3, #16]
	 return GPIO_Read(GPIOA, LL_GPIO_PIN_0);
 800aaea:	2301      	movs	r3, #1
 800aaec:	4018      	ands	r0, r3
 }
 800aaee:	4770      	bx	lr

0800aaf0 <WSQ_GPIO_DebounceUpdate>:
 void WSQ_GPIO_DebounceUpdate(void){
 800aaf0:	b510      	push	{r4, lr}
	 Debounce_Update(&DebounceData, WSQ_GPIO_ReadWakeUp());
 800aaf2:	f7ff fff7 	bl	800aae4 <WSQ_GPIO_ReadWakeUp>
 800aaf6:	0001      	movs	r1, r0
 800aaf8:	4801      	ldr	r0, [pc, #4]	; (800ab00 <WSQ_GPIO_DebounceUpdate+0x10>)
 800aafa:	f7fb fe6c 	bl	80067d6 <Debounce_Update>
 }
 800aafe:	bd10      	pop	{r4, pc}
 800ab00:	20000ff4 	.word	0x20000ff4

0800ab04 <WSQ_GPIO_DebounceCountClicks>:
	 return (WSQ_bool)DebounceData.FlagRising;
 800ab04:	4b05      	ldr	r3, [pc, #20]	; (800ab1c <WSQ_GPIO_DebounceCountClicks+0x18>)
 800ab06:	78da      	ldrb	r2, [r3, #3]
		if(WSQ_GPIO_DebounceGetRising()){
 800ab08:	2a00      	cmp	r2, #0
 800ab0a:	d006      	beq.n	800ab1a <WSQ_GPIO_DebounceCountClicks+0x16>
 	 DebounceData.FlagRising = WSQ_FALSE;
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	70da      	strb	r2, [r3, #3]
			++Click;
 800ab10:	4a03      	ldr	r2, [pc, #12]	; (800ab20 <WSQ_GPIO_DebounceCountClicks+0x1c>)
 800ab12:	7813      	ldrb	r3, [r2, #0]
 800ab14:	3301      	adds	r3, #1
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	7013      	strb	r3, [r2, #0]
 }
 800ab1a:	4770      	bx	lr
 800ab1c:	20000ff4 	.word	0x20000ff4
 800ab20:	20000ff3 	.word	0x20000ff3

0800ab24 <WSQ_GPIO_DebounceGetClicks>:
	 return Click;
 800ab24:	4b01      	ldr	r3, [pc, #4]	; (800ab2c <WSQ_GPIO_DebounceGetClicks+0x8>)
 800ab26:	7818      	ldrb	r0, [r3, #0]
 800ab28:	b2c0      	uxtb	r0, r0
 }
 800ab2a:	4770      	bx	lr
 800ab2c:	20000ff3 	.word	0x20000ff3

0800ab30 <WSQ_GPIO_SigFoxWriteReset>:
  void WSQ_GPIO_SigFoxWriteReset(WSQ_bool pinState){
 800ab30:	0002      	movs	r2, r0
 	 GPIO_Write(GPIOA, LL_GPIO_PIN_7,pinState);
 800ab32:	20a0      	movs	r0, #160	; 0xa0
  void WSQ_GPIO_SigFoxWriteReset(WSQ_bool pinState){
 800ab34:	b510      	push	{r4, lr}
 	 GPIO_Write(GPIOA, LL_GPIO_PIN_7,pinState);
 800ab36:	2180      	movs	r1, #128	; 0x80
 800ab38:	05c0      	lsls	r0, r0, #23
 800ab3a:	f7ff ff1f 	bl	800a97c <GPIO_Write>
  }
 800ab3e:	bd10      	pop	{r4, pc}

0800ab40 <WSQ_GPIO_SigFoxWriteWakeUp>:
  void WSQ_GPIO_SigFoxWriteWakeUp(WSQ_bool pinState){
 800ab40:	0002      	movs	r2, r0
	 	 GPIO_Write(GPIOA, LL_GPIO_PIN_8,pinState);
 800ab42:	2180      	movs	r1, #128	; 0x80
 800ab44:	20a0      	movs	r0, #160	; 0xa0
  void WSQ_GPIO_SigFoxWriteWakeUp(WSQ_bool pinState){
 800ab46:	b510      	push	{r4, lr}
	 	 GPIO_Write(GPIOA, LL_GPIO_PIN_8,pinState);
 800ab48:	0049      	lsls	r1, r1, #1
 800ab4a:	05c0      	lsls	r0, r0, #23
 800ab4c:	f7ff ff16 	bl	800a97c <GPIO_Write>
	  }
 800ab50:	bd10      	pop	{r4, pc}

0800ab52 <WSQ_GPIO_EnableAnalog>:
  void  WSQ_GPIO_EnableAnalog(WSQ_bool pinState){
 800ab52:	0002      	movs	r2, r0
	  GPIO_Write(GPIOA, LL_GPIO_PIN_3,pinState);
 800ab54:	20a0      	movs	r0, #160	; 0xa0
  void  WSQ_GPIO_EnableAnalog(WSQ_bool pinState){
 800ab56:	b510      	push	{r4, lr}
	  GPIO_Write(GPIOA, LL_GPIO_PIN_3,pinState);
 800ab58:	2108      	movs	r1, #8
 800ab5a:	05c0      	lsls	r0, r0, #23
 800ab5c:	f7ff ff0e 	bl	800a97c <GPIO_Write>
  }
 800ab60:	bd10      	pop	{r4, pc}
	...

0800ab64 <WSQ_GPIO_EnableSensors>:
	  GPIO_Write(GPIOB, LL_GPIO_PIN_13,pinState);  //
 800ab64:	2180      	movs	r1, #128	; 0x80
  void  WSQ_GPIO_EnableSensors(WSQ_bool pinState){
 800ab66:	b510      	push	{r4, lr}
 800ab68:	0002      	movs	r2, r0
	  GPIO_Write(GPIOB, LL_GPIO_PIN_13,pinState);  //
 800ab6a:	0189      	lsls	r1, r1, #6
 800ab6c:	4801      	ldr	r0, [pc, #4]	; (800ab74 <WSQ_GPIO_EnableSensors+0x10>)
 800ab6e:	f7ff ff05 	bl	800a97c <GPIO_Write>
  }
 800ab72:	bd10      	pop	{r4, pc}
 800ab74:	50000400 	.word	0x50000400

0800ab78 <WSQ_GPIO_DisplayColorRGB>:
	  GPIO_Write(GPIOB,LL_GPIO_PIN_8,color.bits.blue);
 800ab78:	2180      	movs	r1, #128	; 0x80
  void WSQ_GPIO_DisplayColorRGB(WSQ_Colores_t Color){
 800ab7a:	b570      	push	{r4, r5, r6, lr}
	  GPIO_Write(GPIOB,LL_GPIO_PIN_8,color.bits.blue);
 800ab7c:	4d0b      	ldr	r5, [pc, #44]	; (800abac <WSQ_GPIO_DisplayColorRGB+0x34>)
 800ab7e:	07c2      	lsls	r2, r0, #31
  void WSQ_GPIO_DisplayColorRGB(WSQ_Colores_t Color){
 800ab80:	0004      	movs	r4, r0
	  GPIO_Write(GPIOB,LL_GPIO_PIN_8,color.bits.blue);
 800ab82:	0fd2      	lsrs	r2, r2, #31
 800ab84:	0028      	movs	r0, r5
 800ab86:	0049      	lsls	r1, r1, #1
 800ab88:	f7ff fef8 	bl	800a97c <GPIO_Write>
	  GPIO_Write(GPIOB,LL_GPIO_PIN_9,color.bits.green);
 800ab8c:	2180      	movs	r1, #128	; 0x80
 800ab8e:	07a2      	lsls	r2, r4, #30
 800ab90:	0028      	movs	r0, r5
 800ab92:	0fd2      	lsrs	r2, r2, #31
 800ab94:	0089      	lsls	r1, r1, #2
 800ab96:	f7ff fef1 	bl	800a97c <GPIO_Write>
	  GPIO_Write(GPIOB,LL_GPIO_PIN_10,color.bits.red);
 800ab9a:	2180      	movs	r1, #128	; 0x80
 800ab9c:	0762      	lsls	r2, r4, #29
 800ab9e:	0028      	movs	r0, r5
 800aba0:	0fd2      	lsrs	r2, r2, #31
 800aba2:	00c9      	lsls	r1, r1, #3
 800aba4:	f7ff feea 	bl	800a97c <GPIO_Write>
  }
 800aba8:	bd70      	pop	{r4, r5, r6, pc}
 800abaa:	46c0      	nop			; (mov r8, r8)
 800abac:	50000400 	.word	0x50000400

0800abb0 <WSQ_GPIO_WriteOutputCtrl>:
  void WSQ_GPIO_WriteOutputCtrl(WSQ_bool pinState){
 800abb0:	b510      	push	{r4, lr}
 800abb2:	0002      	movs	r2, r0
	  GPIO_Write(GPIOB, LL_GPIO_PIN_5,pinState);
 800abb4:	2120      	movs	r1, #32
 800abb6:	4802      	ldr	r0, [pc, #8]	; (800abc0 <WSQ_GPIO_WriteOutputCtrl+0x10>)
 800abb8:	f7ff fee0 	bl	800a97c <GPIO_Write>
  }
 800abbc:	bd10      	pop	{r4, pc}
 800abbe:	46c0      	nop			; (mov r8, r8)
 800abc0:	50000400 	.word	0x50000400

0800abc4 <WSQ_I2C_Init>:

/* Private definitions -----------------------------------------------------------*/
#define WSQ_I2C_MAX_READ_RET   200000    /*!< Number of attempts to read the data register */
#define WSQ_I2C_MAX_WRITE_RET   200000

void WSQ_I2C_Init(){
 800abc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_I2C_InitTypeDef i2cInit = {0};
	LL_GPIO_InitTypeDef gpioInit = {0};
 800abc6:	2400      	movs	r4, #0
void WSQ_I2C_Init(){
 800abc8:	b08f      	sub	sp, #60	; 0x3c
	LL_I2C_InitTypeDef i2cInit = {0};
 800abca:	221c      	movs	r2, #28
 800abcc:	2100      	movs	r1, #0
 800abce:	a807      	add	r0, sp, #28
 800abd0:	f000 fdbb 	bl	800b74a <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 800abd4:	2080      	movs	r0, #128	; 0x80
 800abd6:	4a23      	ldr	r2, [pc, #140]	; (800ac64 <WSQ_I2C_Init+0xa0>)
	LL_GPIO_InitTypeDef gpioInit = {0};
 800abd8:	9405      	str	r4, [sp, #20]
 800abda:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800abdc:	0380      	lsls	r0, r0, #14
 800abde:	4301      	orrs	r1, r0
 800abe0:	6391      	str	r1, [r2, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800abe2:	6b93      	ldr	r3, [r2, #56]	; 0x38
	PB7   ------> I2C1_SDA
	*/
	gpioInit.Pin = LL_GPIO_PIN_6;
	gpioInit.Mode = LL_GPIO_MODE_ALTERNATE;
	gpioInit.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	gpioInit.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800abe4:	2501      	movs	r5, #1
 800abe6:	4003      	ands	r3, r0
 800abe8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800abea:	9b00      	ldr	r3, [sp, #0]
	gpioInit.Pin = LL_GPIO_PIN_6;
 800abec:	2340      	movs	r3, #64	; 0x40
	gpioInit.Mode = LL_GPIO_MODE_ALTERNATE;
 800abee:	2702      	movs	r7, #2
	gpioInit.Pull = LL_GPIO_PULL_NO;
	gpioInit.Alternate = LL_GPIO_AF_1;
	LL_GPIO_Init(GPIOB, &gpioInit);
 800abf0:	4e1d      	ldr	r6, [pc, #116]	; (800ac68 <WSQ_I2C_Init+0xa4>)
	gpioInit.Pin = LL_GPIO_PIN_6;
 800abf2:	9301      	str	r3, [sp, #4]
	LL_GPIO_Init(GPIOB, &gpioInit);
 800abf4:	a901      	add	r1, sp, #4
	gpioInit.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800abf6:	3b3d      	subs	r3, #61	; 0x3d
	LL_GPIO_Init(GPIOB, &gpioInit);
 800abf8:	0030      	movs	r0, r6
	gpioInit.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800abfa:	9303      	str	r3, [sp, #12]
	gpioInit.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800abfc:	9504      	str	r5, [sp, #16]
	gpioInit.Alternate = LL_GPIO_AF_1;
 800abfe:	9506      	str	r5, [sp, #24]
	gpioInit.Mode = LL_GPIO_MODE_ALTERNATE;
 800ac00:	9702      	str	r7, [sp, #8]
	LL_GPIO_Init(GPIOB, &gpioInit);
 800ac02:	f7f9 fbc5 	bl	8004390 <LL_GPIO_Init>

	gpioInit.Pin = LL_GPIO_PIN_7;
 800ac06:	2380      	movs	r3, #128	; 0x80
	gpioInit.Mode = LL_GPIO_MODE_ALTERNATE;
	gpioInit.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	gpioInit.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800ac08:	9504      	str	r5, [sp, #16]
	gpioInit.Pull = LL_GPIO_PULL_NO;
	gpioInit.Alternate = LL_GPIO_AF_1;
 800ac0a:	9506      	str	r5, [sp, #24]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800ac0c:	4d17      	ldr	r5, [pc, #92]	; (800ac6c <WSQ_I2C_Init+0xa8>)
	gpioInit.Pin = LL_GPIO_PIN_7;
 800ac0e:	9301      	str	r3, [sp, #4]
	LL_GPIO_Init(GPIOB, &gpioInit);
 800ac10:	a901      	add	r1, sp, #4
	gpioInit.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800ac12:	3b7d      	subs	r3, #125	; 0x7d
	LL_GPIO_Init(GPIOB, &gpioInit);
 800ac14:	0030      	movs	r0, r6
	gpioInit.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800ac16:	9303      	str	r3, [sp, #12]
	gpioInit.Mode = LL_GPIO_MODE_ALTERNATE;
 800ac18:	9702      	str	r7, [sp, #8]
	gpioInit.Pull = LL_GPIO_PULL_NO;
 800ac1a:	9405      	str	r4, [sp, #20]
	LL_GPIO_Init(GPIOB, &gpioInit);
 800ac1c:	f7f9 fbb8 	bl	8004390 <LL_GPIO_Init>
 800ac20:	686b      	ldr	r3, [r5, #4]
 800ac22:	4a13      	ldr	r2, [pc, #76]	; (800ac70 <WSQ_I2C_Init+0xac>)
	i2cInit.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
	i2cInit.DigitalFilter = 0;
	i2cInit.OwnAddress1 = 0;
	i2cInit.TypeAcknowledge = LL_I2C_ACK;
	i2cInit.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
	LL_I2C_Init(I2C1, &i2cInit);
 800ac24:	a907      	add	r1, sp, #28
 800ac26:	4013      	ands	r3, r2
 800ac28:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800ac2a:	68eb      	ldr	r3, [r5, #12]
 800ac2c:	4a11      	ldr	r2, [pc, #68]	; (800ac74 <WSQ_I2C_Init+0xb0>)
 800ac2e:	0028      	movs	r0, r5
 800ac30:	4013      	ands	r3, r2
 800ac32:	60eb      	str	r3, [r5, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800ac34:	682b      	ldr	r3, [r5, #0]
 800ac36:	4a10      	ldr	r2, [pc, #64]	; (800ac78 <WSQ_I2C_Init+0xb4>)
 800ac38:	4013      	ands	r3, r2
 800ac3a:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	4a0f      	ldr	r2, [pc, #60]	; (800ac7c <WSQ_I2C_Init+0xb8>)
 800ac40:	4013      	ands	r3, r2
 800ac42:	602b      	str	r3, [r5, #0]
	i2cInit.Timing = 0x00303D5B ; /* Value calculated by the code generator 100 khz  - 0x0010061A ->400khz*/
 800ac44:	4b0e      	ldr	r3, [pc, #56]	; (800ac80 <WSQ_I2C_Init+0xbc>)
	i2cInit.PeripheralMode = LL_I2C_MODE_I2C;
 800ac46:	9407      	str	r4, [sp, #28]
	i2cInit.Timing = 0x00303D5B ; /* Value calculated by the code generator 100 khz  - 0x0010061A ->400khz*/
 800ac48:	9308      	str	r3, [sp, #32]
	i2cInit.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800ac4a:	9409      	str	r4, [sp, #36]	; 0x24
	i2cInit.DigitalFilter = 0;
 800ac4c:	940a      	str	r4, [sp, #40]	; 0x28
	i2cInit.OwnAddress1 = 0;
 800ac4e:	940b      	str	r4, [sp, #44]	; 0x2c
	i2cInit.TypeAcknowledge = LL_I2C_ACK;
 800ac50:	940c      	str	r4, [sp, #48]	; 0x30
	i2cInit.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800ac52:	940d      	str	r4, [sp, #52]	; 0x34
	LL_I2C_Init(I2C1, &i2cInit);
 800ac54:	f7f9 fbf8 	bl	8004448 <LL_I2C_Init>
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800ac58:	68eb      	ldr	r3, [r5, #12]
 800ac5a:	4a0a      	ldr	r2, [pc, #40]	; (800ac84 <WSQ_I2C_Init+0xc0>)
 800ac5c:	4013      	ands	r3, r2
 800ac5e:	60eb      	str	r3, [r5, #12]
	LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
}
 800ac60:	b00f      	add	sp, #60	; 0x3c
 800ac62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac64:	40021000 	.word	0x40021000
 800ac68:	50000400 	.word	0x50000400
 800ac6c:	40005400 	.word	0x40005400
 800ac70:	fdffffff 	.word	0xfdffffff
 800ac74:	ffff7fff 	.word	0xffff7fff
 800ac78:	fff7ffff 	.word	0xfff7ffff
 800ac7c:	fffdffff 	.word	0xfffdffff
 800ac80:	00303d5b 	.word	0x00303d5b
 800ac84:	fffff801 	.word	0xfffff801

0800ac88 <WSQ_I2C_Write>:
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 800ac88:	4b1e      	ldr	r3, [pc, #120]	; (800ad04 <WSQ_I2C_Write+0x7c>)


WSQ_bool WSQ_I2C_Write(uint8_t slaveAddr, uint8_t* data, uint8_t n){
 800ac8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac8c:	685c      	ldr	r4, [r3, #4]
 800ac8e:	0aa4      	lsrs	r4, r4, #10
 800ac90:	02a4      	lsls	r4, r4, #10
 800ac92:	4320      	orrs	r0, r4
 800ac94:	6058      	str	r0, [r3, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 800ac96:	6858      	ldr	r0, [r3, #4]
 800ac98:	4c1b      	ldr	r4, [pc, #108]	; (800ad08 <WSQ_I2C_Write+0x80>)
 800ac9a:	4020      	ands	r0, r4
 800ac9c:	6058      	str	r0, [r3, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800ac9e:	6858      	ldr	r0, [r3, #4]
 800aca0:	4c1a      	ldr	r4, [pc, #104]	; (800ad0c <WSQ_I2C_Write+0x84>)
 800aca2:	4020      	ands	r0, r4
 800aca4:	0414      	lsls	r4, r2, #16
 800aca6:	4320      	orrs	r0, r4
 800aca8:	6058      	str	r0, [r3, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 800acaa:	2080      	movs	r0, #128	; 0x80
 800acac:	685c      	ldr	r4, [r3, #4]
 800acae:	0180      	lsls	r0, r0, #6
 800acb0:	4304      	orrs	r4, r0
 800acb2:	605c      	str	r4, [r3, #4]
 800acb4:	4c16      	ldr	r4, [pc, #88]	; (800ad10 <WSQ_I2C_Write+0x88>)
	/* At most, 255 bytes are being transmitted */
	//LL_I2C_EnableAutoEndMode(I2C1);

	/* Flag the peripheral to start transmission */
	LL_I2C_GenerateStartCondition(I2C1);
	while(I2C1->CR2 & I2C_CR2_START){
 800acb6:	685d      	ldr	r5, [r3, #4]
 800acb8:	4205      	tst	r5, r0
 800acba:	d107      	bne.n	800accc <WSQ_I2C_Write+0x44>
 800acbc:	0008      	movs	r0, r1
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 800acbe:	2410      	movs	r4, #16
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800acc0:	2602      	movs	r6, #2
		if(++retries >= WSQ_I2C_MAX_READ_RET)
					return WSQ_FALSE;
	}

	/* Loop until all bytes have been sent */
	for(int i = 0; i < n; i++){
 800acc2:	1a45      	subs	r5, r0, r1
 800acc4:	42aa      	cmp	r2, r5
 800acc6:	dc06      	bgt.n	800acd6 <WSQ_I2C_Write+0x4e>

		LL_I2C_TransmitData8(I2C1, data[i]);
	}


	return WSQ_TRUE;
 800acc8:	2001      	movs	r0, #1
 800acca:	e003      	b.n	800acd4 <WSQ_I2C_Write+0x4c>
 800accc:	3c01      	subs	r4, #1
		if(++retries >= WSQ_I2C_MAX_READ_RET)
 800acce:	2c00      	cmp	r4, #0
 800acd0:	d1f1      	bne.n	800acb6 <WSQ_I2C_Write+0x2e>
			return WSQ_FALSE;
 800acd2:	2000      	movs	r0, #0
}
 800acd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(int i = 0; i < n; i++){
 800acd6:	4d0e      	ldr	r5, [pc, #56]	; (800ad10 <WSQ_I2C_Write+0x88>)
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 800acd8:	699f      	ldr	r7, [r3, #24]
 800acda:	4227      	tst	r7, r4
 800acdc:	d106      	bne.n	800acec <WSQ_I2C_Write+0x64>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800acde:	699f      	ldr	r7, [r3, #24]
 800ace0:	4237      	tst	r7, r6
 800ace2:	d103      	bne.n	800acec <WSQ_I2C_Write+0x64>
 800ace4:	3d01      	subs	r5, #1
			if(++retries >= WSQ_I2C_MAX_WRITE_RET)
 800ace6:	2d00      	cmp	r5, #0
 800ace8:	d1f6      	bne.n	800acd8 <WSQ_I2C_Write+0x50>
 800acea:	e7f2      	b.n	800acd2 <WSQ_I2C_Write+0x4a>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 800acec:	699d      	ldr	r5, [r3, #24]
 800acee:	4225      	tst	r5, r4
 800acf0:	d103      	bne.n	800acfa <WSQ_I2C_Write+0x72>
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 800acf2:	7805      	ldrb	r5, [r0, #0]
 800acf4:	3001      	adds	r0, #1
 800acf6:	629d      	str	r5, [r3, #40]	; 0x28
 800acf8:	e7e3      	b.n	800acc2 <WSQ_I2C_Write+0x3a>
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 800acfa:	69da      	ldr	r2, [r3, #28]
 800acfc:	4314      	orrs	r4, r2
 800acfe:	61dc      	str	r4, [r3, #28]
 800ad00:	e7e7      	b.n	800acd2 <WSQ_I2C_Write+0x4a>
 800ad02:	46c0      	nop			; (mov r8, r8)
 800ad04:	40005400 	.word	0x40005400
 800ad08:	fffffbff 	.word	0xfffffbff
 800ad0c:	ff00ffff 	.word	0xff00ffff
 800ad10:	00030d40 	.word	0x00030d40

0800ad14 <WSQ_I2C_Read>:
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 800ad14:	4b19      	ldr	r3, [pc, #100]	; (800ad7c <WSQ_I2C_Read+0x68>)


WSQ_bool WSQ_I2C_Read(uint8_t slaveAddr, uint8_t* data, uint8_t n){
 800ad16:	b570      	push	{r4, r5, r6, lr}
 800ad18:	685c      	ldr	r4, [r3, #4]
 800ad1a:	0aa4      	lsrs	r4, r4, #10
 800ad1c:	02a4      	lsls	r4, r4, #10
 800ad1e:	4320      	orrs	r0, r4
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 800ad20:	2480      	movs	r4, #128	; 0x80
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 800ad22:	6058      	str	r0, [r3, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_RD_WRN, TransferRequest);
 800ad24:	6858      	ldr	r0, [r3, #4]
 800ad26:	00e4      	lsls	r4, r4, #3
 800ad28:	4320      	orrs	r0, r4
 800ad2a:	6058      	str	r0, [r3, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NBYTES, TransferSize << I2C_CR2_NBYTES_Pos);
 800ad2c:	6858      	ldr	r0, [r3, #4]
 800ad2e:	4c14      	ldr	r4, [pc, #80]	; (800ad80 <WSQ_I2C_Read+0x6c>)
 800ad30:	4020      	ands	r0, r4
 800ad32:	0414      	lsls	r4, r2, #16
 800ad34:	4320      	orrs	r0, r4
 800ad36:	6058      	str	r0, [r3, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_START);
 800ad38:	2080      	movs	r0, #128	; 0x80
 800ad3a:	685c      	ldr	r4, [r3, #4]
 800ad3c:	0180      	lsls	r0, r0, #6
 800ad3e:	4304      	orrs	r4, r0
 800ad40:	605c      	str	r4, [r3, #4]
 800ad42:	4c10      	ldr	r4, [pc, #64]	; (800ad84 <WSQ_I2C_Read+0x70>)
	//LL_I2C_EnableAutoEndMode(I2C1);

	/* Flag the peripheral to start transmission */
	LL_I2C_GenerateStartCondition(I2C1);

	while(I2C1->CR2 & I2C_CR2_START){
 800ad44:	685d      	ldr	r5, [r3, #4]
 800ad46:	4205      	tst	r5, r0
 800ad48:	d106      	bne.n	800ad58 <WSQ_I2C_Read+0x44>
 800ad4a:	0008      	movs	r0, r1
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800ad4c:	2504      	movs	r5, #4
			return WSQ_FALSE;
	}

	/* Loop until all bytes have been received */

	for(int i = 0; i < n; i++){
 800ad4e:	1a44      	subs	r4, r0, r1
 800ad50:	4294      	cmp	r4, r2
 800ad52:	db06      	blt.n	800ad62 <WSQ_I2C_Read+0x4e>

		data[i] = LL_I2C_ReceiveData8(I2C1);
	}


	return WSQ_TRUE;
 800ad54:	2001      	movs	r0, #1
 800ad56:	e003      	b.n	800ad60 <WSQ_I2C_Read+0x4c>
 800ad58:	3c01      	subs	r4, #1
		if(++retries >= WSQ_I2C_MAX_READ_RET)
 800ad5a:	2c00      	cmp	r4, #0
 800ad5c:	d1f2      	bne.n	800ad44 <WSQ_I2C_Read+0x30>
			return WSQ_FALSE;
 800ad5e:	2000      	movs	r0, #0

}
 800ad60:	bd70      	pop	{r4, r5, r6, pc}
	for(int i = 0; i < n; i++){
 800ad62:	4c08      	ldr	r4, [pc, #32]	; (800ad84 <WSQ_I2C_Read+0x70>)
 800ad64:	699e      	ldr	r6, [r3, #24]
 800ad66:	422e      	tst	r6, r5
 800ad68:	d003      	beq.n	800ad72 <WSQ_I2C_Read+0x5e>
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800ad6a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ad6c:	7004      	strb	r4, [r0, #0]
 800ad6e:	3001      	adds	r0, #1
 800ad70:	e7ed      	b.n	800ad4e <WSQ_I2C_Read+0x3a>
 800ad72:	3c01      	subs	r4, #1
			if(++retries >= WSQ_I2C_MAX_READ_RET)
 800ad74:	2c00      	cmp	r4, #0
 800ad76:	d1f5      	bne.n	800ad64 <WSQ_I2C_Read+0x50>
 800ad78:	e7f1      	b.n	800ad5e <WSQ_I2C_Read+0x4a>
 800ad7a:	46c0      	nop			; (mov r8, r8)
 800ad7c:	40005400 	.word	0x40005400
 800ad80:	ff00ffff 	.word	0xff00ffff
 800ad84:	00030d40 	.word	0x00030d40

0800ad88 <WSQ_I2C_Transmit>:
/*
 ** ===================================================================
 **  Functions Wrappers -  HAl_I2C STM32
 ** ===================================================================
 */
void WSQ_I2C_Transmit(uint8_t Address, void *data, uint8_t amount){
 800ad88:	b510      	push	{r4, lr}
	uint8_t *DatatoSend = (uint8_t *)data;
	WSQ_I2C_Write(Address, DatatoSend, amount);
 800ad8a:	f7ff ff7d 	bl	800ac88 <WSQ_I2C_Write>
}
 800ad8e:	bd10      	pop	{r4, pc}

0800ad90 <WSQ_I2C_Receive>:

void WSQ_I2C_Receive(uint8_t Address, void *Register, uint8_t amount,uint8_t Sizereg){
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	000d      	movs	r5, r1
 800ad94:	0016      	movs	r6, r2
 800ad96:	0004      	movs	r4, r0
	WSQ_I2C_Write(Address, DatatoSend, amount);
 800ad98:	001a      	movs	r2, r3
 800ad9a:	f7ff ff75 	bl	800ac88 <WSQ_I2C_Write>
	uint8_t *DatatoSend = (uint8_t *)Register;
	WSQ_I2C_Transmit(Address, DatatoSend, Sizereg);
	WSQ_I2C_Read(Address, DatatoSend, amount);
 800ad9e:	0032      	movs	r2, r6
 800ada0:	0029      	movs	r1, r5
 800ada2:	0020      	movs	r0, r4
 800ada4:	f7ff ffb6 	bl	800ad14 <WSQ_I2C_Read>
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 800ada8:	2380      	movs	r3, #128	; 0x80
 800adaa:	4a03      	ldr	r2, [pc, #12]	; (800adb8 <WSQ_I2C_Receive+0x28>)
 800adac:	01db      	lsls	r3, r3, #7
 800adae:	6851      	ldr	r1, [r2, #4]
 800adb0:	430b      	orrs	r3, r1
 800adb2:	6053      	str	r3, [r2, #4]
	LL_I2C_GenerateStopCondition(I2C1);  /*stop manually*/
}
 800adb4:	bd70      	pop	{r4, r5, r6, pc}
 800adb6:	46c0      	nop			; (mov r8, r8)
 800adb8:	40005400 	.word	0x40005400

0800adbc <WSQ_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
void WSQ_RTC_Init(void)
{
 800adbc:	b570      	push	{r4, r5, r6, lr}

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	LL_RTC_InitTypeDef RTC_InitStruct = {0};
 800adbe:	2400      	movs	r4, #0
{
 800adc0:	b086      	sub	sp, #24
	LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 800adc2:	ad01      	add	r5, sp, #4
 800adc4:	0021      	movs	r1, r4
 800adc6:	2208      	movs	r2, #8
 800adc8:	0028      	movs	r0, r5
	LL_RTC_InitTypeDef RTC_InitStruct = {0};
 800adca:	9403      	str	r4, [sp, #12]
	LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 800adcc:	f000 fcbd 	bl	800b74a <memset>
  SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 800add0:	2380      	movs	r3, #128	; 0x80
 800add2:	4a15      	ldr	r2, [pc, #84]	; (800ae28 <WSQ_RTC_Init+0x6c>)
 800add4:	02db      	lsls	r3, r3, #11
 800add6:	6d11      	ldr	r1, [r2, #80]	; 0x50
	LL_RTC_DateTypeDef RTC_DateStruct = {0};
 800add8:	9400      	str	r4, [sp, #0]
 800adda:	430b      	orrs	r3, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800addc:	21c0      	movs	r1, #192	; 0xc0
 800adde:	6513      	str	r3, [r2, #80]	; 0x50
 800ade0:	4b12      	ldr	r3, [pc, #72]	; (800ae2c <WSQ_RTC_Init+0x70>)
 800ade2:	0089      	lsls	r1, r1, #2
 800ade4:	585a      	ldr	r2, [r3, r1]
 800ade6:	4812      	ldr	r0, [pc, #72]	; (800ae30 <WSQ_RTC_Init+0x74>)
	/** Initialize RTC and set the Time and Date
	 */
	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
	RTC_InitStruct.AsynchPrescaler = 127;
	RTC_InitStruct.SynchPrescaler = 255;
	LL_RTC_Init(RTC, &RTC_InitStruct);
 800ade8:	4e12      	ldr	r6, [pc, #72]	; (800ae34 <WSQ_RTC_Init+0x78>)
 800adea:	4002      	ands	r2, r0
 800adec:	505a      	str	r2, [r3, r1]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800adee:	2204      	movs	r2, #4
 800adf0:	601a      	str	r2, [r3, #0]
	RTC_InitStruct.AsynchPrescaler = 127;
 800adf2:	237f      	movs	r3, #127	; 0x7f
	LL_RTC_Init(RTC, &RTC_InitStruct);
 800adf4:	a903      	add	r1, sp, #12
	RTC_InitStruct.AsynchPrescaler = 127;
 800adf6:	9304      	str	r3, [sp, #16]
	LL_RTC_Init(RTC, &RTC_InitStruct);
 800adf8:	0030      	movs	r0, r6
	RTC_InitStruct.SynchPrescaler = 255;
 800adfa:	3380      	adds	r3, #128	; 0x80
 800adfc:	9305      	str	r3, [sp, #20]
	LL_RTC_Init(RTC, &RTC_InitStruct);
 800adfe:	f7f9 fcf9 	bl	80047f4 <LL_RTC_Init>
	/** Initialize RTC and set the Time and Date
	 */
	RTC_TimeStruct.Hours = 0;
	RTC_TimeStruct.Minutes = 0;
	RTC_TimeStruct.Seconds = 0;
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_TimeStruct);
 800ae02:	002a      	movs	r2, r5
 800ae04:	2101      	movs	r1, #1
 800ae06:	0030      	movs	r0, r6
	RTC_TimeStruct.Hours = 0;
 800ae08:	80ac      	strh	r4, [r5, #4]
	RTC_TimeStruct.Minutes = 0;
 800ae0a:	71ac      	strb	r4, [r5, #6]
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_TimeStruct);
 800ae0c:	f7f9 fd64 	bl	80048d8 <LL_RTC_TIME_Init>
	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;
 800ae10:	2302      	movs	r3, #2
 800ae12:	466a      	mov	r2, sp
 800ae14:	33ff      	adds	r3, #255	; 0xff
 800ae16:	8013      	strh	r3, [r2, #0]
	RTC_DateStruct.Month = LL_RTC_MONTH_JANUARY;
	RTC_DateStruct.Year = 0;
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_DateStruct);
 800ae18:	2101      	movs	r1, #1
 800ae1a:	0030      	movs	r0, r6
	RTC_DateStruct.Year = 0;
 800ae1c:	70d4      	strb	r4, [r2, #3]
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_DateStruct);
 800ae1e:	f7f9 fdc5 	bl	80049ac <LL_RTC_DATE_Init>
	/** Initialize RTC and set the Time and Date
	 */
	//WSQ_RTC_SetTime(Hor,Min,Seg);  /*Hour,min, seg max 18.2h*/


}
 800ae22:	b006      	add	sp, #24
 800ae24:	bd70      	pop	{r4, r5, r6, pc}
 800ae26:	46c0      	nop			; (mov r8, r8)
 800ae28:	40021000 	.word	0x40021000
 800ae2c:	e000e100 	.word	0xe000e100
 800ae30:	ff00ffff 	.word	0xff00ffff
 800ae34:	40002800 	.word	0x40002800

0800ae38 <WSQ_RTC_SetTime>:


void WSQ_RTC_SetTime(uint8_t Hor , uint8_t Min , uint8_t Seg, uint8_t rewrite){
 800ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3a:	0016      	movs	r6, r2
	/** Enable the WakeUp  A.15.3 RM
		 */
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800ae3c:	2204      	movs	r2, #4
void WSQ_RTC_SetTime(uint8_t Hor , uint8_t Min , uint8_t Seg, uint8_t rewrite){
 800ae3e:	0005      	movs	r5, r0
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800ae40:	4825      	ldr	r0, [pc, #148]	; (800aed8 <WSQ_RTC_SetTime+0xa0>)
void WSQ_RTC_SetTime(uint8_t Hor , uint8_t Min , uint8_t Seg, uint8_t rewrite){
 800ae42:	000f      	movs	r7, r1
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800ae44:	6801      	ldr	r1, [r0, #0]
 800ae46:	4c25      	ldr	r4, [pc, #148]	; (800aedc <WSQ_RTC_SetTime+0xa4>)
 800ae48:	4311      	orrs	r1, r2
 800ae4a:	6001      	str	r1, [r0, #0]
 800ae4c:	68e0      	ldr	r0, [r4, #12]
 800ae4e:	4924      	ldr	r1, [pc, #144]	; (800aee0 <WSQ_RTC_SetTime+0xa8>)
 800ae50:	b2c0      	uxtb	r0, r0
 800ae52:	4301      	orrs	r1, r0
 800ae54:	60e1      	str	r1, [r4, #12]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800ae56:	21ca      	movs	r1, #202	; 0xca
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800ae58:	2007      	movs	r0, #7
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800ae5a:	6261      	str	r1, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800ae5c:	3977      	subs	r1, #119	; 0x77
 800ae5e:	6261      	str	r1, [r4, #36]	; 0x24
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800ae60:	68a1      	ldr	r1, [r4, #8]
 800ae62:	4381      	bics	r1, r0
 800ae64:	430a      	orrs	r2, r1
 800ae66:	60a2      	str	r2, [r4, #8]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableIT_WUT(RTC_TypeDef *RTCx)
{
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTIE);
 800ae68:	68a2      	ldr	r2, [r4, #8]
 800ae6a:	491e      	ldr	r1, [pc, #120]	; (800aee4 <WSQ_RTC_SetTime+0xac>)
 800ae6c:	400a      	ands	r2, r1
 800ae6e:	60a2      	str	r2, [r4, #8]
		LL_RTC_ClearFlag_WUT(RTC);
		LL_RTC_DisableWriteProtection(RTC);
		LL_RTC_WAKEUP_SetClock(RTC, LL_RTC_WAKEUPCLOCK_CKSPRE);
		LL_RTC_DisableIT_WUT(RTC);

		if(rewrite) //nuevo
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <WSQ_RTC_SetTime+0x44>
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTE);
 800ae74:	68a3      	ldr	r3, [r4, #8]
 800ae76:	4a1c      	ldr	r2, [pc, #112]	; (800aee8 <WSQ_RTC_SetTime+0xb0>)
 800ae78:	4013      	ands	r3, r2
 800ae7a:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_WUTWF) == (RTC_ISR_WUTWF)) ? 1UL : 0UL);
 800ae7c:	68e3      	ldr	r3, [r4, #12]
 800ae7e:	075b      	lsls	r3, r3, #29
 800ae80:	d402      	bmi.n	800ae88 <WSQ_RTC_SetTime+0x50>
			LL_RTC_WAKEUP_Disable(RTC);//nuevo wutwf =1   counter=0

		if ( LL_RTC_IsActiveFlag_WUTW(RTC) == 0 ){
			HAL_Delay(1);
 800ae82:	2001      	movs	r0, #1
 800ae84:	f7f8 f8a8 	bl	8002fd8 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(RTC_IRQn);
	HAL_NVIC_EnableIRQ(RTC_IRQn);
}
/*!< Converter minutes in integer to seconds in integer*/
uint32_t ConvertMinToSeg(uint16_t Min){
	uint32_t Sec = Min*60;
 800ae88:	223c      	movs	r2, #60	; 0x3c
	return Sec;
}
/*!< Converter Hours in integer to seconds in integer*/
uint32_t ConvertHourToSeg(uint16_t Hour){
	uint32_t Sec = Hour*3600;
 800ae8a:	23e1      	movs	r3, #225	; 0xe1
	uint32_t Sec = Min*60;
 800ae8c:	437a      	muls	r2, r7
	uint32_t Sec = Hour*3600;
 800ae8e:	011b      	lsls	r3, r3, #4
 800ae90:	435d      	muls	r5, r3
		LL_RTC_WAKEUP_SetAutoReload(RTC, RTC_CalibManual((uint16_t)ConvertHourToSeg(Hor) + (uint16_t)ConvertMinToSeg(Min) + Seg) );  /*Max seconds 0xffff -1 a 1Hz*/
 800ae92:	1992      	adds	r2, r2, r6
 800ae94:	1952      	adds	r2, r2, r5
 * @brief This function calibrate rtc wake up timer with try and failure
 * @param Seg: seconds to temporize
 * @note lag time of 7 seconds for every 30 seconds temporize  20 seg en 10 min , 10 seg en 5 min( 4: 50s)
 * */
static uint16_t RTC_CalibManual( uint16_t Seg){
    Seg = Seg > RTC_CALIB_MAN_MAX_TIME ? RTC_CALIB_MAN_MAX_TIME : Seg;   /*upper limit*/
 800ae96:	4b15      	ldr	r3, [pc, #84]	; (800aeec <WSQ_RTC_SetTime+0xb4>)
 800ae98:	1c15      	adds	r5, r2, #0
 800ae9a:	b292      	uxth	r2, r2
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d901      	bls.n	800aea4 <WSQ_RTC_SetTime+0x6c>
 800aea0:	4b13      	ldr	r3, [pc, #76]	; (800aef0 <WSQ_RTC_SetTime+0xb8>)
 800aea2:	881d      	ldrh	r5, [r3, #0]
 800aea4:	b2ad      	uxth	r5, r5
	Seg += ((Seg/RTC_CALIB_MAN_BASE_TIME)*RTC_CALIB_MAN_OFFSET_BASE_TIME) ;  /*5min-> 300+(300/30)*7*/   /*300 +(300/30)*1*/
 800aea6:	0028      	movs	r0, r5
 800aea8:	211e      	movs	r1, #30
 800aeaa:	f7f5 f949 	bl	8000140 <__udivsi3>
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 800aeae:	6963      	ldr	r3, [r4, #20]
 800aeb0:	1940      	adds	r0, r0, r5
 800aeb2:	0c1b      	lsrs	r3, r3, #16
 800aeb4:	041b      	lsls	r3, r3, #16
		LL_RTC_WAKEUP_SetAutoReload(RTC, RTC_CalibManual((uint16_t)ConvertHourToSeg(Hor) + (uint16_t)ConvertMinToSeg(Min) + Seg) );  /*Max seconds 0xffff -1 a 1Hz*/
 800aeb6:	b280      	uxth	r0, r0
 800aeb8:	4318      	orrs	r0, r3
  SET_BIT(RTCx->CR, RTC_CR_WUTIE);
 800aeba:	2380      	movs	r3, #128	; 0x80
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 800aebc:	6160      	str	r0, [r4, #20]
  SET_BIT(RTCx->CR, RTC_CR_WUTIE);
 800aebe:	68a2      	ldr	r2, [r4, #8]
 800aec0:	01db      	lsls	r3, r3, #7
 800aec2:	4313      	orrs	r3, r2
 800aec4:	60a3      	str	r3, [r4, #8]
  SET_BIT(RTCx->CR, RTC_CR_WUTE);
 800aec6:	2380      	movs	r3, #128	; 0x80
 800aec8:	68a2      	ldr	r2, [r4, #8]
 800aeca:	00db      	lsls	r3, r3, #3
 800aecc:	4313      	orrs	r3, r2
 800aece:	60a3      	str	r3, [r4, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800aed0:	23ff      	movs	r3, #255	; 0xff
 800aed2:	6263      	str	r3, [r4, #36]	; 0x24
}
 800aed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aed6:	46c0      	nop			; (mov r8, r8)
 800aed8:	40007000 	.word	0x40007000
 800aedc:	40002800 	.word	0x40002800
 800aee0:	fffffb7f 	.word	0xfffffb7f
 800aee4:	ffffbfff 	.word	0xffffbfff
 800aee8:	fffffbff 	.word	0xfffffbff
 800aeec:	0000cf90 	.word	0x0000cf90
 800aef0:	0800d6e4 	.word	0x0800d6e4

0800aef4 <WSQ_RTC_ClearWkupFlag>:
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);  /*Wkup pin*/
 800aef4:	2304      	movs	r3, #4
 800aef6:	4a05      	ldr	r2, [pc, #20]	; (800af0c <WSQ_RTC_ClearWkupFlag+0x18>)
 800aef8:	6811      	ldr	r1, [r2, #0]
 800aefa:	430b      	orrs	r3, r1
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_WUTF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 800aefc:	4904      	ldr	r1, [pc, #16]	; (800af10 <WSQ_RTC_ClearWkupFlag+0x1c>)
 800aefe:	6013      	str	r3, [r2, #0]
 800af00:	68ca      	ldr	r2, [r1, #12]
 800af02:	4b04      	ldr	r3, [pc, #16]	; (800af14 <WSQ_RTC_ClearWkupFlag+0x20>)
 800af04:	b2d2      	uxtb	r2, r2
 800af06:	4313      	orrs	r3, r2
 800af08:	60cb      	str	r3, [r1, #12]
}
 800af0a:	4770      	bx	lr
 800af0c:	40007000 	.word	0x40007000
 800af10:	40002800 	.word	0x40002800
 800af14:	fffffb7f 	.word	0xfffffb7f

0800af18 <RTC_IRQHandler>:
 800af18:	b510      	push	{r4, lr}
 800af1a:	f7ff ffeb 	bl	800aef4 <WSQ_RTC_ClearWkupFlag>
 800af1e:	bd10      	pop	{r4, pc}

0800af20 <LL_RCC_ClearResetFlags>:
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800af20:	2380      	movs	r3, #128	; 0x80
 800af22:	4a03      	ldr	r2, [pc, #12]	; (800af30 <LL_RCC_ClearResetFlags+0x10>)
 800af24:	041b      	lsls	r3, r3, #16
 800af26:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800af28:	430b      	orrs	r3, r1
 800af2a:	6513      	str	r3, [r2, #80]	; 0x50
}
 800af2c:	4770      	bx	lr
 800af2e:	46c0      	nop			; (mov r8, r8)
 800af30:	40021000 	.word	0x40021000

0800af34 <WSQ_SYSTEM_LowLevelInit>:
void WSQ_SYSTEM_Delay(uint32_t ms){
	HAL_Delay(ms);
}


void WSQ_SYSTEM_LowLevelInit(void (*UART_SigFoxCustomInputHandler)(char) , void (*UART_WiFiCustomInputHandler)(char), WSQ_VPC_CallbackRxFcn_t usercallback){
 800af34:	b570      	push	{r4, r5, r6, lr}
 800af36:	0014      	movs	r4, r2
 800af38:	0006      	movs	r6, r0
 800af3a:	000d      	movs	r5, r1
	WSQ_GPIO_Init();
 800af3c:	f7ff fd26 	bl	800a98c <WSQ_GPIO_Init>
	WSQ_ADC_Init();
 800af40:	f7ff fc22 	bl	800a788 <WSQ_ADC_Init>
	WSQ_UART_SigFoxInit(WSQ_SIGFOX_BR, UART_SigFoxCustomInputHandler);
 800af44:	2096      	movs	r0, #150	; 0x96
 800af46:	0031      	movs	r1, r6
 800af48:	0180      	lsls	r0, r0, #6
 800af4a:	f000 f903 	bl	800b154 <WSQ_UART_SigFoxInit>
	WSQ_UART_WiFiInit(AppData_Config.idDevice == 1?WSQ_GPS_BR :WSQ_WIFI_BR , UART_WiFiCustomInputHandler);
 800af4e:	4b0e      	ldr	r3, [pc, #56]	; (800af88 <WSQ_SYSTEM_LowLevelInit+0x54>)
 800af50:	0029      	movs	r1, r5
 800af52:	339e      	adds	r3, #158	; 0x9e
 800af54:	7818      	ldrb	r0, [r3, #0]
 800af56:	3801      	subs	r0, #1
 800af58:	4243      	negs	r3, r0
 800af5a:	4158      	adcs	r0, r3
 800af5c:	4b0b      	ldr	r3, [pc, #44]	; (800af8c <WSQ_SYSTEM_LowLevelInit+0x58>)
 800af5e:	4240      	negs	r0, r0
 800af60:	4018      	ands	r0, r3
 800af62:	23e1      	movs	r3, #225	; 0xe1
 800af64:	025b      	lsls	r3, r3, #9
 800af66:	18c0      	adds	r0, r0, r3
 800af68:	f000 f990 	bl	800b28c <WSQ_UART_WiFiInit>
	WSQ_UART_DebugInit(WSQ_DEBUG_BR, NULL);
 800af6c:	20e1      	movs	r0, #225	; 0xe1
 800af6e:	2100      	movs	r1, #0
 800af70:	0240      	lsls	r0, r0, #9
 800af72:	f000 fa1d 	bl	800b3b0 <WSQ_UART_DebugInit>
	WSQ_VCP_Init(usercallback);
 800af76:	0020      	movs	r0, r4
 800af78:	f000 faa8 	bl	800b4cc <WSQ_VCP_Init>
	WSQ_I2C_Init();
 800af7c:	f7ff fe22 	bl	800abc4 <WSQ_I2C_Init>
	WSQ_RTC_Init();
 800af80:	f7ff ff1c 	bl	800adbc <WSQ_RTC_Init>
	//WSQ_SYSTEM_COPInit(); /*TODO: WDT new*/


}
 800af84:	bd70      	pop	{r4, r5, r6, pc}
 800af86:	46c0      	nop			; (mov r8, r8)
 800af88:	20000184 	.word	0x20000184
 800af8c:	fffe6380 	.word	0xfffe6380

0800af90 <WSQ_SYSTEM_StandbyCore>:
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 800af90:	2304      	movs	r3, #4
  MODIFY_REG(PWR->CR, PWR_CR_PDDS, PDMode);
 800af92:	2002      	movs	r0, #2
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 800af94:	4a06      	ldr	r2, [pc, #24]	; (800afb0 <WSQ_SYSTEM_StandbyCore+0x20>)
 800af96:	6811      	ldr	r1, [r2, #0]
 800af98:	4319      	orrs	r1, r3
 800af9a:	6011      	str	r1, [r2, #0]
  MODIFY_REG(PWR->CR, PWR_CR_PDDS, PDMode);
 800af9c:	6811      	ldr	r1, [r2, #0]
 800af9e:	4301      	orrs	r1, r0
 800afa0:	6011      	str	r1, [r2, #0]
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800afa2:	4a04      	ldr	r2, [pc, #16]	; (800afb4 <WSQ_SYSTEM_StandbyCore+0x24>)
 800afa4:	6911      	ldr	r1, [r2, #16]
 800afa6:	430b      	orrs	r3, r1
 800afa8:	6113      	str	r3, [r2, #16]
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800afaa:	bf30      	wfi
void WSQ_SYSTEM_StandbyCore(void){
	LL_PWR_ClearFlag_WU(); /*Clear Wakeup flag*/
	LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
	LL_LPM_EnableDeepSleep(); //Processor uses deep sleep as its low power mode.
	__WFI(); /*Wait for interrupt*/
}
 800afac:	4770      	bx	lr
 800afae:	46c0      	nop			; (mov r8, r8)
 800afb0:	40007000 	.word	0x40007000
 800afb4:	e000ed00 	.word	0xe000ed00

0800afb8 <SysTick_Handler>:

/* System handlers --------------------------------------------------------*/

void SysTick_Handler(void){
 800afb8:	b510      	push	{r4, lr}
	HAL_IncTick();
 800afba:	f7f7 ffff 	bl	8002fbc <HAL_IncTick>
	WSQ_KERNEL_TICK();
 800afbe:	f7fc fb21 	bl	8007604 <qClock_SysTick>
	WSQ_GPIO_DebounceUpdate();		/*update debounce falling or rising*/
 800afc2:	f7ff fd95 	bl	800aaf0 <WSQ_GPIO_DebounceUpdate>
	WSQ_GPIO_DebounceCountClicks();  /*increment number of click- clear rising edge*/
 800afc6:	f7ff fd9d 	bl	800ab04 <WSQ_GPIO_DebounceCountClicks>
}
 800afca:	bd10      	pop	{r4, pc}

0800afcc <USB_IRQHandler>:

void USB_IRQHandler(void){
 800afcc:	b510      	push	{r4, lr}
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800afce:	4802      	ldr	r0, [pc, #8]	; (800afd8 <USB_IRQHandler+0xc>)
 800afd0:	f7f8 fa6c 	bl	80034ac <HAL_PCD_IRQHandler>
}
 800afd4:	bd10      	pop	{r4, pc}
 800afd6:	46c0      	nop			; (mov r8, r8)
 800afd8:	20001ca4 	.word	0x20001ca4

0800afdc <NMI_Handler>:


void NMI_Handler(void){}
 800afdc:	4770      	bx	lr
	...

0800afe0 <WSQ_SYSTEM_ResetSFT>:

void HardFault_Handler(void){
	WSQ_SYSTEM_FatalException();
}

void WSQ_SYSTEM_ResetSFT(void){
 800afe0:	b510      	push	{r4, lr}
	WSQ_UART_DebugPutString("Software reset!\r\n");
 800afe2:	4803      	ldr	r0, [pc, #12]	; (800aff0 <WSQ_SYSTEM_ResetSFT+0x10>)
 800afe4:	f000 fa46 	bl	800b474 <WSQ_UART_DebugPutString>
	SCB->AIRCR = (0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk;
 800afe8:	4b02      	ldr	r3, [pc, #8]	; (800aff4 <WSQ_SYSTEM_ResetSFT+0x14>)
 800afea:	4a03      	ldr	r2, [pc, #12]	; (800aff8 <WSQ_SYSTEM_ResetSFT+0x18>)
 800afec:	60da      	str	r2, [r3, #12]
 800afee:	e7fe      	b.n	800afee <WSQ_SYSTEM_ResetSFT+0xe>
 800aff0:	0800d6f8 	.word	0x0800d6f8
 800aff4:	e000ed00 	.word	0xe000ed00
 800aff8:	05fa0004 	.word	0x05fa0004

0800affc <WSQ_SYSTEM_FatalException>:
void WSQ_SYSTEM_FatalException(){
 800affc:	b510      	push	{r4, lr}
	WSQ_UART_DebugPutString("Fatal exception\r\n");  // borrar
 800affe:	4802      	ldr	r0, [pc, #8]	; (800b008 <WSQ_SYSTEM_FatalException+0xc>)
 800b000:	f000 fa38 	bl	800b474 <WSQ_UART_DebugPutString>
	WSQ_SYSTEM_ResetSFT();
 800b004:	f7ff ffec 	bl	800afe0 <WSQ_SYSTEM_ResetSFT>
 800b008:	0800d6e6 	.word	0x0800d6e6

0800b00c <Error_Handler>:
void Error_Handler(){
 800b00c:	b510      	push	{r4, lr}
	WSQ_SYSTEM_FatalException();
 800b00e:	f7ff fff5 	bl	800affc <WSQ_SYSTEM_FatalException>
	...

0800b014 <SystemClock_Config>:
void SystemClock_Config(void){
 800b014:	b510      	push	{r4, lr}
 800b016:	b09c      	sub	sp, #112	; 0x70
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b018:	2234      	movs	r2, #52	; 0x34
 800b01a:	2100      	movs	r1, #0
 800b01c:	a80f      	add	r0, sp, #60	; 0x3c
 800b01e:	f000 fb94 	bl	800b74a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b022:	2214      	movs	r2, #20
 800b024:	2100      	movs	r1, #0
 800b026:	4668      	mov	r0, sp
 800b028:	f000 fb8f 	bl	800b74a <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b02c:	2224      	movs	r2, #36	; 0x24
 800b02e:	2100      	movs	r1, #0
 800b030:	a805      	add	r0, sp, #20
 800b032:	f000 fb8a 	bl	800b74a <memset>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b036:	491b      	ldr	r1, [pc, #108]	; (800b0a4 <SystemClock_Config+0x90>)
 800b038:	4a1b      	ldr	r2, [pc, #108]	; (800b0a8 <SystemClock_Config+0x94>)
 800b03a:	680b      	ldr	r3, [r1, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b03c:	2401      	movs	r4, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b03e:	401a      	ands	r2, r3
 800b040:	2380      	movs	r3, #128	; 0x80
 800b042:	011b      	lsls	r3, r3, #4
 800b044:	4313      	orrs	r3, r2
 800b046:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|
 800b048:	232a      	movs	r3, #42	; 0x2a
 800b04a:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b04c:	3b1a      	subs	r3, #26
 800b04e:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800b050:	2300      	movs	r3, #0
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b052:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b054:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800b056:	9413      	str	r4, [sp, #76]	; 0x4c
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800b058:	9414      	str	r4, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800b05a:	9318      	str	r3, [sp, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b05c:	f7f8 fd46 	bl	8003aec <HAL_RCC_OscConfig>
 800b060:	1e01      	subs	r1, r0, #0
 800b062:	d001      	beq.n	800b068 <SystemClock_Config+0x54>
	WSQ_SYSTEM_FatalException();
 800b064:	f7ff ffca 	bl	800affc <WSQ_SYSTEM_FatalException>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b068:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b06a:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b06c:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b06e:	9004      	str	r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800b070:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b072:	9300      	str	r3, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800b074:	9401      	str	r4, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800b076:	f7f8 ffc5 	bl	8004004 <HAL_RCC_ClockConfig>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d1f2      	bne.n	800b064 <SystemClock_Config+0x50>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 800b07e:	236d      	movs	r3, #109	; 0x6d
 800b080:	9305      	str	r3, [sp, #20]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800b082:	2380      	movs	r3, #128	; 0x80
 800b084:	029b      	lsls	r3, r3, #10
 800b086:	9306      	str	r3, [sp, #24]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b088:	2380      	movs	r3, #128	; 0x80
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b08a:	9007      	str	r0, [sp, #28]
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800b08c:	9009      	str	r0, [sp, #36]	; 0x24
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800b08e:	900a      	str	r0, [sp, #40]	; 0x28
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b090:	04db      	lsls	r3, r3, #19
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b092:	a805      	add	r0, sp, #20
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b094:	930d      	str	r3, [sp, #52]	; 0x34
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b096:	f7f9 f86d 	bl	8004174 <HAL_RCCEx_PeriphCLKConfig>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	d1e2      	bne.n	800b064 <SystemClock_Config+0x50>
}
 800b09e:	b01c      	add	sp, #112	; 0x70
 800b0a0:	bd10      	pop	{r4, pc}
 800b0a2:	46c0      	nop			; (mov r8, r8)
 800b0a4:	40007000 	.word	0x40007000
 800b0a8:	ffffe7ff 	.word	0xffffe7ff

0800b0ac <HardFault_Handler>:
void HardFault_Handler(void){
 800b0ac:	b510      	push	{r4, lr}
	WSQ_SYSTEM_FatalException();
 800b0ae:	f7ff ffa5 	bl	800affc <WSQ_SYSTEM_FatalException>

0800b0b2 <SVC_Handler>:
 800b0b2:	4770      	bx	lr

0800b0b4 <PendSV_Handler>:
 800b0b4:	4770      	bx	lr
	...

0800b0b8 <WSQ_SYSTEM_GetResetCause>:
  SET_BIT(RCC->APB1ENR, Periphs);
 800b0b8:	2280      	movs	r2, #128	; 0x80
 800b0ba:	4b1a      	ldr	r3, [pc, #104]	; (800b124 <WSQ_SYSTEM_GetResetCause+0x6c>)


void PendSV_Handler(void){}

/* ===================================================================*/
WSQ_WakeUp_Source_t WSQ_SYSTEM_GetResetCause(void){
 800b0bc:	b513      	push	{r0, r1, r4, lr}
 800b0be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800b0c0:	0552      	lsls	r2, r2, #21
 800b0c2:	4311      	orrs	r1, r2
 800b0c4:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800b0c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800b0c8:	4c17      	ldr	r4, [pc, #92]	; (800b128 <WSQ_SYSTEM_GetResetCause+0x70>)
 800b0ca:	4011      	ands	r1, r2
 800b0cc:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
 800b0ce:	9901      	ldr	r1, [sp, #4]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_WUTF) == (RTC_ISR_WUTF)) ? 1UL : 0UL);
 800b0d0:	4916      	ldr	r1, [pc, #88]	; (800b12c <WSQ_SYSTEM_GetResetCause+0x74>)
 800b0d2:	68c8      	ldr	r0, [r1, #12]
 800b0d4:	0540      	lsls	r0, r0, #21
 800b0d6:	d50a      	bpl.n	800b0ee <WSQ_SYSTEM_GetResetCause+0x36>
	static WSQ_WakeUp_Source_t Source_wkup;

	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);

	if(LL_RTC_IsActiveFlag_WUT(RTC)  ){
		Source_wkup.Source = WKUP_TIME;
 800b0d8:	2308      	movs	r3, #8
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_WUTF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 800b0da:	68ca      	ldr	r2, [r1, #12]
 800b0dc:	7023      	strb	r3, [r4, #0]
 800b0de:	4b14      	ldr	r3, [pc, #80]	; (800b130 <WSQ_SYSTEM_GetResetCause+0x78>)
 800b0e0:	b2d2      	uxtb	r2, r2
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	60cb      	str	r3, [r1, #12]
	}else if ( LL_RCC_IsActiveFlag_SFTRST() ){ /*Reset por software*/
		LL_RCC_ClearResetFlags();
		Source_wkup.Source = WKUP_SF_RESET;
	}else if (LL_RCC_IsActiveFlag_PORRST()){/*Power ON/DOWN*/
		Source_wkup.Source = WKUP_POR_PDR;
		LL_RCC_ClearResetFlags();
 800b0e6:	f7ff ff1b 	bl	800af20 <LL_RCC_ClearResetFlags>
		LL_RCC_ClearResetFlags();
	} else {
		Source_wkup.Source = WKUP_UNKNOW;
	}

	return Source_wkup;
 800b0ea:	7820      	ldrb	r0, [r4, #0]
}
 800b0ec:	bd16      	pop	{r1, r2, r4, pc}
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == RCC_CSR_SFTRSTF) ? 1UL : 0UL);
 800b0ee:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b0f0:	4211      	tst	r1, r2
 800b0f2:	d105      	bne.n	800b100 <WSQ_SYSTEM_GetResetCause+0x48>
  return ((READ_BIT(RCC->CSR, RCC_CSR_PORRSTF) == RCC_CSR_PORRSTF) ? 1UL : 0UL);
 800b0f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0f6:	011b      	lsls	r3, r3, #4
 800b0f8:	d507      	bpl.n	800b10a <WSQ_SYSTEM_GetResetCause+0x52>
		Source_wkup.Source = WKUP_POR_PDR;
 800b0fa:	2306      	movs	r3, #6
 800b0fc:	7023      	strb	r3, [r4, #0]
 800b0fe:	e7f2      	b.n	800b0e6 <WSQ_SYSTEM_GetResetCause+0x2e>
		LL_RCC_ClearResetFlags();
 800b100:	f7ff ff0e 	bl	800af20 <LL_RCC_ClearResetFlags>
		Source_wkup.Source = WKUP_SF_RESET;
 800b104:	2305      	movs	r3, #5
		Source_wkup.Source = WKUP_UNKNOW;
 800b106:	7023      	strb	r3, [r4, #0]
 800b108:	e7ef      	b.n	800b0ea <WSQ_SYSTEM_GetResetCause+0x32>
  return (READ_BIT(PWR->CSR, PWR_CSR_WUF) == (PWR_CSR_WUF));
 800b10a:	4b0a      	ldr	r3, [pc, #40]	; (800b134 <WSQ_SYSTEM_GetResetCause+0x7c>)
 800b10c:	685a      	ldr	r2, [r3, #4]
	}else if ( LL_PWR_IsActiveFlag_WU()   ){
 800b10e:	07d2      	lsls	r2, r2, #31
 800b110:	d506      	bpl.n	800b120 <WSQ_SYSTEM_GetResetCause+0x68>
		Source_wkup.Source = WKUP_PIN;
 800b112:	2207      	movs	r2, #7
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 800b114:	6819      	ldr	r1, [r3, #0]
 800b116:	7022      	strb	r2, [r4, #0]
 800b118:	3a03      	subs	r2, #3
 800b11a:	430a      	orrs	r2, r1
 800b11c:	601a      	str	r2, [r3, #0]
 800b11e:	e7e2      	b.n	800b0e6 <WSQ_SYSTEM_GetResetCause+0x2e>
		Source_wkup.Source = WKUP_UNKNOW;
 800b120:	2309      	movs	r3, #9
 800b122:	e7f0      	b.n	800b106 <WSQ_SYSTEM_GetResetCause+0x4e>
 800b124:	40021000 	.word	0x40021000
 800b128:	20000ffb 	.word	0x20000ffb
 800b12c:	40002800 	.word	0x40002800
 800b130:	fffffb7f 	.word	0xfffffb7f
 800b134:	40007000 	.word	0x40007000

0800b138 <LL_IOP_GRP1_EnableClock>:
  SET_BIT(RCC->IOPENR, Periphs);
 800b138:	4b05      	ldr	r3, [pc, #20]	; (800b150 <LL_IOP_GRP1_EnableClock+0x18>)
{
 800b13a:	b082      	sub	sp, #8
  SET_BIT(RCC->IOPENR, Periphs);
 800b13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13e:	4302      	orrs	r2, r0
 800b140:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800b142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b144:	4018      	ands	r0, r3
 800b146:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800b148:	9b01      	ldr	r3, [sp, #4]
}
 800b14a:	b002      	add	sp, #8
 800b14c:	4770      	bx	lr
 800b14e:	46c0      	nop			; (mov r8, r8)
 800b150:	40021000 	.word	0x40021000

0800b154 <WSQ_UART_SigFoxInit>:

static WSQ_UART_CustomInputHandler_t UART5_RXUserDefined = NULL;

static WSQ_UART_CustomInputHandler_t LPUART1_RXUserDefined = NULL;

void WSQ_UART_SigFoxInit(uint32_t bitRate , WSQ_UART_CustomInputHandler_t CustomCallback){
 800b154:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b156:	b091      	sub	sp, #68	; 0x44
 800b158:	9000      	str	r0, [sp, #0]
 800b15a:	9101      	str	r1, [sp, #4]

	LL_USART_InitTypeDef USART_InitStruct = {0};
 800b15c:	221c      	movs	r2, #28
 800b15e:	2100      	movs	r1, #0
 800b160:	a809      	add	r0, sp, #36	; 0x24
 800b162:	f000 faf2 	bl	800b74a <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b166:	2218      	movs	r2, #24
 800b168:	2100      	movs	r1, #0
 800b16a:	a803      	add	r0, sp, #12
 800b16c:	f000 faed 	bl	800b74a <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 800b170:	2080      	movs	r0, #128	; 0x80
 800b172:	4a2c      	ldr	r2, [pc, #176]	; (800b224 <WSQ_UART_SigFoxInit+0xd0>)
 800b174:	01c0      	lsls	r0, r0, #7
 800b176:	6b51      	ldr	r1, [r2, #52]	; 0x34
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b178:	25a0      	movs	r5, #160	; 0xa0
 800b17a:	4301      	orrs	r1, r0
 800b17c:	6351      	str	r1, [r2, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800b17e:	6b53      	ldr	r3, [r2, #52]	; 0x34
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b180:	2400      	movs	r4, #0
 800b182:	4003      	ands	r3, r0
 800b184:	9302      	str	r3, [sp, #8]
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800b186:	2001      	movs	r0, #1
  (void)tmpreg;
 800b188:	9b02      	ldr	r3, [sp, #8]
 800b18a:	f7ff ffd5 	bl	800b138 <LL_IOP_GRP1_EnableClock>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800b18e:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b190:	2702      	movs	r7, #2
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b192:	2603      	movs	r6, #3
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	9303      	str	r3, [sp, #12]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b198:	05ed      	lsls	r5, r5, #23
	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800b19a:	3bfd      	subs	r3, #253	; 0xfd
 800b19c:	3bff      	subs	r3, #255	; 0xff
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b19e:	a903      	add	r1, sp, #12
 800b1a0:	0028      	movs	r0, r5
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b1a2:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b1a4:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800b1a6:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b1a8:	9704      	str	r7, [sp, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b1aa:	9605      	str	r6, [sp, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1ac:	f7f9 f8f0 	bl	8004390 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800b1b0:	2380      	movs	r3, #128	; 0x80
 800b1b2:	00db      	lsls	r3, r3, #3
 800b1b4:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800b1b6:	2304      	movs	r3, #4
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1b8:	a903      	add	r1, sp, #12
 800b1ba:	0028      	movs	r0, r5
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b1bc:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b1be:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800b1c0:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b1c2:	9704      	str	r7, [sp, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b1c4:	9605      	str	r6, [sp, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1c6:	f7f9 f8e3 	bl	8004390 <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b1ca:	21c6      	movs	r1, #198	; 0xc6
 800b1cc:	4a16      	ldr	r2, [pc, #88]	; (800b228 <WSQ_UART_SigFoxInit+0xd4>)
 800b1ce:	0089      	lsls	r1, r1, #2
 800b1d0:	5853      	ldr	r3, [r2, r1]
 800b1d2:	021b      	lsls	r3, r3, #8
 800b1d4:	0a1b      	lsrs	r3, r3, #8
 800b1d6:	5053      	str	r3, [r2, r1]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800b1d8:	2380      	movs	r3, #128	; 0x80
 800b1da:	051b      	lsls	r3, r3, #20
 800b1dc:	6013      	str	r3, [r2, #0]

	/* USART1 interrupt Init */
	NVIC_SetPriority(USART1_IRQn, 0);
	NVIC_EnableIRQ(USART1_IRQn);

	USART_InitStruct.BaudRate = bitRate;
 800b1de:	9b00      	ldr	r3, [sp, #0]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800b1e0:	940a      	str	r4, [sp, #40]	; 0x28
	USART_InitStruct.BaudRate = bitRate;
 800b1e2:	9309      	str	r3, [sp, #36]	; 0x24
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800b1e4:	230c      	movs	r3, #12
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800b1e6:	940b      	str	r4, [sp, #44]	; 0x2c
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800b1e8:	940c      	str	r4, [sp, #48]	; 0x30
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800b1ea:	940e      	str	r4, [sp, #56]	; 0x38
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800b1ec:	940f      	str	r4, [sp, #60]	; 0x3c
	LL_USART_Init(USART1, &USART_InitStruct);
 800b1ee:	4c0f      	ldr	r4, [pc, #60]	; (800b22c <WSQ_UART_SigFoxInit+0xd8>)
 800b1f0:	a909      	add	r1, sp, #36	; 0x24
 800b1f2:	0020      	movs	r0, r4
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800b1f4:	930d      	str	r3, [sp, #52]	; 0x34
	LL_USART_Init(USART1, &USART_InitStruct);
 800b1f6:	f7f9 fc45 	bl	8004a84 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1fa:	6863      	ldr	r3, [r4, #4]
 800b1fc:	4a0c      	ldr	r2, [pc, #48]	; (800b230 <WSQ_UART_SigFoxInit+0xdc>)
 800b1fe:	4013      	ands	r3, r2
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800b200:	222a      	movs	r2, #42	; 0x2a
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b202:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800b204:	68a3      	ldr	r3, [r4, #8]
 800b206:	4393      	bics	r3, r2
 800b208:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800b20a:	2301      	movs	r3, #1
 800b20c:	6822      	ldr	r2, [r4, #0]
 800b20e:	4313      	orrs	r3, r2
 800b210:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800b212:	2320      	movs	r3, #32
 800b214:	6822      	ldr	r2, [r4, #0]
 800b216:	4313      	orrs	r3, r2
 800b218:	6023      	str	r3, [r4, #0]
	}
}

/*Set custom callback usart1*/
void WSQ_UART_SigFoxSetCustomInputHandler( WSQ_UART_CustomInputHandler_t UserDefinedAction ){
	UART1_RXUserDefined  = UserDefinedAction ;
 800b21a:	9a01      	ldr	r2, [sp, #4]
 800b21c:	4b05      	ldr	r3, [pc, #20]	; (800b234 <WSQ_UART_SigFoxInit+0xe0>)
 800b21e:	601a      	str	r2, [r3, #0]
}
 800b220:	b011      	add	sp, #68	; 0x44
 800b222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b224:	40021000 	.word	0x40021000
 800b228:	e000e100 	.word	0xe000e100
 800b22c:	40013800 	.word	0x40013800
 800b230:	ffffb7ff 	.word	0xffffb7ff
 800b234:	20001000 	.word	0x20001000

0800b238 <WSQ_UART_SigFoxPutChar>:
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800b238:	2280      	movs	r2, #128	; 0x80
 800b23a:	4b03      	ldr	r3, [pc, #12]	; (800b248 <WSQ_UART_SigFoxPutChar+0x10>)
 800b23c:	69d8      	ldr	r0, [r3, #28]
 800b23e:	4210      	tst	r0, r2
 800b240:	d0fc      	beq.n	800b23c <WSQ_UART_SigFoxPutChar+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800b242:	6299      	str	r1, [r3, #40]	; 0x28
}
 800b244:	4770      	bx	lr
 800b246:	46c0      	nop			; (mov r8, r8)
 800b248:	40013800 	.word	0x40013800

0800b24c <USART1_IRQHandler>:
}

/*TODO: Cuando toco con rx del serial rx del micro se queda activa la isr por un rato, quizas sea ruido pero estabiliza depues*/
void USART1_IRQHandler( void ){
 800b24c:	b510      	push	{r4, lr}
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800b24e:	4c0d      	ldr	r4, [pc, #52]	; (800b284 <USART1_IRQHandler+0x38>)
 800b250:	69e3      	ldr	r3, [r4, #28]
 800b252:	069b      	lsls	r3, r3, #26
 800b254:	d506      	bpl.n	800b264 <USART1_IRQHandler+0x18>

	char dataIn = '\0';
	if ( LL_USART_IsActiveFlag_RXNE(USART1) == 1 ){ /*read data and clear flag*/
		dataIn = LL_USART_ReceiveData8( USART1 );
		//WSQ_UART_SigFoxPutChar('a');
		if( NULL != UART1_RXUserDefined ){
 800b256:	4b0c      	ldr	r3, [pc, #48]	; (800b288 <USART1_IRQHandler+0x3c>)
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 800b258:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <USART1_IRQHandler+0x18>
			UART1_RXUserDefined( dataIn  ); /*callback*/
 800b260:	b2c0      	uxtb	r0, r0
 800b262:	4798      	blx	r3
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800b264:	2308      	movs	r3, #8
 800b266:	69e2      	ldr	r2, [r4, #28]
 800b268:	421a      	tst	r2, r3
 800b26a:	d000      	beq.n	800b26e <USART1_IRQHandler+0x22>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800b26c:	6223      	str	r3, [r4, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800b26e:	2304      	movs	r3, #4
 800b270:	69e2      	ldr	r2, [r4, #28]
 800b272:	421a      	tst	r2, r3
 800b274:	d000      	beq.n	800b278 <USART1_IRQHandler+0x2c>
  WRITE_REG(USARTx->ICR, USART_ICR_NCF );
 800b276:	6223      	str	r3, [r4, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800b278:	2302      	movs	r3, #2
 800b27a:	69e2      	ldr	r2, [r4, #28]
 800b27c:	421a      	tst	r2, r3
 800b27e:	d000      	beq.n	800b282 <USART1_IRQHandler+0x36>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800b280:	6223      	str	r3, [r4, #32]
	if (LL_USART_IsActiveFlag_NE(USART1) == 1) // Noise Error
		LL_USART_ClearFlag_NE(USART1);

	if (LL_USART_IsActiveFlag_FE(USART1) == 1) // Framing Error
		LL_USART_ClearFlag_FE(USART1);
}
 800b282:	bd10      	pop	{r4, pc}
 800b284:	40013800 	.word	0x40013800
 800b288:	20001000 	.word	0x20001000

0800b28c <WSQ_UART_WiFiInit>:

/*------------------------- WiFi ------------------------*/
void WSQ_UART_WiFiInit(uint32_t bitRate , WSQ_UART_CustomInputHandler_t CustomCallback){
 800b28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b28e:	b091      	sub	sp, #68	; 0x44
 800b290:	9000      	str	r0, [sp, #0]
 800b292:	9101      	str	r1, [sp, #4]

	LL_USART_InitTypeDef USART_InitStruct = {0};
 800b294:	221c      	movs	r2, #28
 800b296:	2100      	movs	r1, #0
 800b298:	a809      	add	r0, sp, #36	; 0x24
 800b29a:	f000 fa56 	bl	800b74a <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b29e:	2218      	movs	r2, #24
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	a803      	add	r0, sp, #12
 800b2a4:	f000 fa51 	bl	800b74a <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 800b2a8:	2080      	movs	r0, #128	; 0x80
 800b2aa:	4a2a      	ldr	r2, [pc, #168]	; (800b354 <WSQ_UART_WiFiInit+0xc8>)
 800b2ac:	0340      	lsls	r0, r0, #13
 800b2ae:	6b91      	ldr	r1, [r2, #56]	; 0x38
	// PB4   ------> USART5_RX

	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b2b0:	2400      	movs	r4, #0
 800b2b2:	4301      	orrs	r1, r0
 800b2b4:	6391      	str	r1, [r2, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800b2b6:	6b93      	ldr	r3, [r2, #56]	; 0x38
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b2b8:	2702      	movs	r7, #2
 800b2ba:	4003      	ands	r3, r0
 800b2bc:	9302      	str	r3, [sp, #8]
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 800b2be:	2002      	movs	r0, #2
  (void)tmpreg;
 800b2c0:	9b02      	ldr	r3, [sp, #8]
 800b2c2:	f7ff ff39 	bl	800b138 <LL_IOP_GRP1_EnableClock>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800b2c6:	2308      	movs	r3, #8
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b2c8:	2603      	movs	r6, #3
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2ca:	4d23      	ldr	r5, [pc, #140]	; (800b358 <WSQ_UART_WiFiInit+0xcc>)
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800b2cc:	9303      	str	r3, [sp, #12]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2ce:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800b2d0:	3b02      	subs	r3, #2
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2d2:	0028      	movs	r0, r5
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b2d4:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b2d6:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800b2d8:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b2da:	9704      	str	r7, [sp, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b2dc:	9605      	str	r6, [sp, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2de:	f7f9 f857 	bl	8004390 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800b2e2:	2310      	movs	r3, #16
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2e4:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800b2e6:	9303      	str	r3, [sp, #12]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2e8:	0028      	movs	r0, r5
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800b2ea:	3b0a      	subs	r3, #10
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b2ec:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b2ee:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800b2f0:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b2f2:	9704      	str	r7, [sp, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b2f4:	9605      	str	r6, [sp, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2f6:	f7f9 f84b 	bl	8004390 <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b2fa:	21c3      	movs	r1, #195	; 0xc3
 800b2fc:	4b17      	ldr	r3, [pc, #92]	; (800b35c <WSQ_UART_WiFiInit+0xd0>)
 800b2fe:	0089      	lsls	r1, r1, #2
 800b300:	585a      	ldr	r2, [r3, r1]
 800b302:	4817      	ldr	r0, [pc, #92]	; (800b360 <WSQ_UART_WiFiInit+0xd4>)
 800b304:	4002      	ands	r2, r0
 800b306:	505a      	str	r2, [r3, r1]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800b308:	2280      	movs	r2, #128	; 0x80
 800b30a:	01d2      	lsls	r2, r2, #7
 800b30c:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(USART4_5_IRQn, 0);
	NVIC_EnableIRQ(USART4_5_IRQn);


	USART_InitStruct.BaudRate = bitRate;
 800b30e:	9b00      	ldr	r3, [sp, #0]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800b310:	940a      	str	r4, [sp, #40]	; 0x28
	USART_InitStruct.BaudRate = bitRate;
 800b312:	9309      	str	r3, [sp, #36]	; 0x24
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800b314:	230c      	movs	r3, #12
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800b316:	940b      	str	r4, [sp, #44]	; 0x2c
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800b318:	940c      	str	r4, [sp, #48]	; 0x30
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800b31a:	940e      	str	r4, [sp, #56]	; 0x38
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800b31c:	940f      	str	r4, [sp, #60]	; 0x3c
	LL_USART_Init(USART5, &USART_InitStruct);
 800b31e:	4c11      	ldr	r4, [pc, #68]	; (800b364 <WSQ_UART_WiFiInit+0xd8>)
 800b320:	a909      	add	r1, sp, #36	; 0x24
 800b322:	0020      	movs	r0, r4
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800b324:	930d      	str	r3, [sp, #52]	; 0x34
	LL_USART_Init(USART5, &USART_InitStruct);
 800b326:	f7f9 fbad 	bl	8004a84 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b32a:	6863      	ldr	r3, [r4, #4]
 800b32c:	4a0e      	ldr	r2, [pc, #56]	; (800b368 <WSQ_UART_WiFiInit+0xdc>)
 800b32e:	4013      	ands	r3, r2
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800b330:	222a      	movs	r2, #42	; 0x2a
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b332:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800b334:	68a3      	ldr	r3, [r4, #8]
 800b336:	4393      	bics	r3, r2
 800b338:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800b33a:	2301      	movs	r3, #1
 800b33c:	6822      	ldr	r2, [r4, #0]
 800b33e:	4313      	orrs	r3, r2
 800b340:	6023      	str	r3, [r4, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800b342:	2320      	movs	r3, #32
 800b344:	6822      	ldr	r2, [r4, #0]
 800b346:	4313      	orrs	r3, r2
 800b348:	6023      	str	r3, [r4, #0]
	}
}

/*Set custom callback usart1*/
void WSQ_UART_WiFiSetCustomInputHandler( WSQ_UART_CustomInputHandler_t UserDefinedAction ){
	UART5_RXUserDefined  = UserDefinedAction ;
 800b34a:	9a01      	ldr	r2, [sp, #4]
 800b34c:	4b07      	ldr	r3, [pc, #28]	; (800b36c <WSQ_UART_WiFiInit+0xe0>)
 800b34e:	601a      	str	r2, [r3, #0]
}
 800b350:	b011      	add	sp, #68	; 0x44
 800b352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b354:	40021000 	.word	0x40021000
 800b358:	50000400 	.word	0x50000400
 800b35c:	e000e100 	.word	0xe000e100
 800b360:	ff00ffff 	.word	0xff00ffff
 800b364:	40005000 	.word	0x40005000
 800b368:	ffffb7ff 	.word	0xffffb7ff
 800b36c:	20001004 	.word	0x20001004

0800b370 <USART4_5_IRQHandler>:
}

void USART4_5_IRQHandler( void ){
 800b370:	b510      	push	{r4, lr}
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800b372:	4c0d      	ldr	r4, [pc, #52]	; (800b3a8 <USART4_5_IRQHandler+0x38>)
 800b374:	69e3      	ldr	r3, [r4, #28]
 800b376:	069b      	lsls	r3, r3, #26
 800b378:	d506      	bpl.n	800b388 <USART4_5_IRQHandler+0x18>

	char dataIn = '\0';
	if ( LL_USART_IsActiveFlag_RXNE(USART5) == 1 ){ /*read data and clear flag*/
		dataIn = LL_USART_ReceiveData8( USART5 );
		if( NULL != UART5_RXUserDefined ){
 800b37a:	4b0c      	ldr	r3, [pc, #48]	; (800b3ac <USART4_5_IRQHandler+0x3c>)
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 800b37c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d001      	beq.n	800b388 <USART4_5_IRQHandler+0x18>
			UART5_RXUserDefined( dataIn  ); /*callback*/
 800b384:	b2c0      	uxtb	r0, r0
 800b386:	4798      	blx	r3
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800b388:	2308      	movs	r3, #8
 800b38a:	69e2      	ldr	r2, [r4, #28]
 800b38c:	421a      	tst	r2, r3
 800b38e:	d000      	beq.n	800b392 <USART4_5_IRQHandler+0x22>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800b390:	6223      	str	r3, [r4, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800b392:	2304      	movs	r3, #4
 800b394:	69e2      	ldr	r2, [r4, #28]
 800b396:	421a      	tst	r2, r3
 800b398:	d000      	beq.n	800b39c <USART4_5_IRQHandler+0x2c>
  WRITE_REG(USARTx->ICR, USART_ICR_NCF );
 800b39a:	6223      	str	r3, [r4, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800b39c:	2302      	movs	r3, #2
 800b39e:	69e2      	ldr	r2, [r4, #28]
 800b3a0:	421a      	tst	r2, r3
 800b3a2:	d000      	beq.n	800b3a6 <USART4_5_IRQHandler+0x36>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800b3a4:	6223      	str	r3, [r4, #32]
		LL_USART_ClearFlag_NE(USART5);

	if (LL_USART_IsActiveFlag_FE(USART5) == 1) // Framing Error
		LL_USART_ClearFlag_FE(USART5);

}
 800b3a6:	bd10      	pop	{r4, pc}
 800b3a8:	40005000 	.word	0x40005000
 800b3ac:	20001004 	.word	0x20001004

0800b3b0 <WSQ_UART_DebugInit>:


/*------------------------- Debug ------------------------*/
/*No working Debug ?????????????????????????????????????*/
void WSQ_UART_DebugInit(uint32_t bitRate , WSQ_UART_CustomInputHandler_t CustomCallback){
 800b3b0:	b5f0      	push	{r4, r5, r6, r7, lr}

	LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 800b3b2:	2418      	movs	r4, #24
void WSQ_UART_DebugInit(uint32_t bitRate , WSQ_UART_CustomInputHandler_t CustomCallback){
 800b3b4:	b091      	sub	sp, #68	; 0x44
 800b3b6:	9000      	str	r0, [sp, #0]
 800b3b8:	9101      	str	r1, [sp, #4]
	LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 800b3ba:	0022      	movs	r2, r4
 800b3bc:	2100      	movs	r1, #0
 800b3be:	a804      	add	r0, sp, #16
 800b3c0:	f000 f9c3 	bl	800b74a <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3c4:	0022      	movs	r2, r4
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	a80a      	add	r0, sp, #40	; 0x28
 800b3ca:	f000 f9be 	bl	800b74a <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 800b3ce:	2080      	movs	r0, #128	; 0x80
 800b3d0:	4a20      	ldr	r2, [pc, #128]	; (800b454 <WSQ_UART_DebugInit+0xa4>)
 800b3d2:	02c0      	lsls	r0, r0, #11
 800b3d4:	6b91      	ldr	r1, [r2, #56]	; 0x38
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3d6:	25a0      	movs	r5, #160	; 0xa0
 800b3d8:	4301      	orrs	r1, r0
 800b3da:	6391      	str	r1, [r2, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800b3dc:	6b93      	ldr	r3, [r2, #56]	; 0x38
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b3de:	2400      	movs	r4, #0
 800b3e0:	4003      	ands	r3, r0
 800b3e2:	9303      	str	r3, [sp, #12]
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800b3e4:	2001      	movs	r0, #1
  (void)tmpreg;
 800b3e6:	9b03      	ldr	r3, [sp, #12]
 800b3e8:	f7ff fea6 	bl	800b138 <LL_IOP_GRP1_EnableClock>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800b3ec:	2380      	movs	r3, #128	; 0x80
 800b3ee:	019b      	lsls	r3, r3, #6
 800b3f0:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b3f2:	2702      	movs	r7, #2
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b3f4:	2603      	movs	r6, #3
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800b3f6:	2306      	movs	r3, #6
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3f8:	05ed      	lsls	r5, r5, #23
 800b3fa:	a90a      	add	r1, sp, #40	; 0x28
 800b3fc:	0028      	movs	r0, r5
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b3fe:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b400:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800b402:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b404:	970b      	str	r7, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b406:	960c      	str	r6, [sp, #48]	; 0x30
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b408:	f7f8 ffc2 	bl	8004390 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 800b40c:	2380      	movs	r3, #128	; 0x80
 800b40e:	01db      	lsls	r3, r3, #7
 800b410:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800b412:	2306      	movs	r3, #6
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b414:	a90a      	add	r1, sp, #40	; 0x28
 800b416:	0028      	movs	r0, r5
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b418:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b41a:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800b41c:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b41e:	970b      	str	r7, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b420:	960c      	str	r6, [sp, #48]	; 0x30
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b422:	f7f8 ffb5 	bl	8004390 <LL_GPIO_Init>

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	LPUART_InitStruct.BaudRate = bitRate;
 800b426:	9b00      	ldr	r3, [sp, #0]
	LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 800b428:	9405      	str	r4, [sp, #20]
	LPUART_InitStruct.BaudRate = bitRate;
 800b42a:	9304      	str	r3, [sp, #16]
	LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
	LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
	LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 800b42c:	230c      	movs	r3, #12
	LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 800b42e:	9406      	str	r4, [sp, #24]
	LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 800b430:	9407      	str	r4, [sp, #28]
	LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 800b432:	9409      	str	r4, [sp, #36]	; 0x24
	LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 800b434:	4c08      	ldr	r4, [pc, #32]	; (800b458 <WSQ_UART_DebugInit+0xa8>)
 800b436:	a904      	add	r1, sp, #16
 800b438:	0020      	movs	r0, r4
	LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 800b43a:	9308      	str	r3, [sp, #32]
	LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 800b43c:	f7f9 f83e 	bl	80044bc <LL_LPUART_Init>
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 800b440:	2301      	movs	r3, #1
 800b442:	6822      	ldr	r2, [r4, #0]
 800b444:	4313      	orrs	r3, r2
 800b446:	6023      	str	r3, [r4, #0]
	}
}

/*Set custom callback usart1*/
void WSQ_UART_DebugSetCustomInputHandler( WSQ_UART_CustomInputHandler_t UserDefinedAction ){
	LPUART1_RXUserDefined  = UserDefinedAction ;
 800b448:	9a01      	ldr	r2, [sp, #4]
 800b44a:	4b04      	ldr	r3, [pc, #16]	; (800b45c <WSQ_UART_DebugInit+0xac>)
 800b44c:	601a      	str	r2, [r3, #0]
}
 800b44e:	b011      	add	sp, #68	; 0x44
 800b450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b452:	46c0      	nop			; (mov r8, r8)
 800b454:	40021000 	.word	0x40021000
 800b458:	40004800 	.word	0x40004800
 800b45c:	20000ffc 	.word	0x20000ffc

0800b460 <WSQ_UART_DebugPutChar>:
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TXE(USART_TypeDef *LPUARTx)
{
  return (READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
 800b460:	2280      	movs	r2, #128	; 0x80
 800b462:	4b03      	ldr	r3, [pc, #12]	; (800b470 <WSQ_UART_DebugPutChar+0x10>)
 800b464:	69d8      	ldr	r0, [r3, #28]
	while( WSQ_FALSE == LL_LPUART_IsActiveFlag_TXE(LPUART1))
 800b466:	4210      	tst	r0, r2
 800b468:	d0fc      	beq.n	800b464 <WSQ_UART_DebugPutChar+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
  LPUARTx->TDR = Value;
 800b46a:	6299      	str	r1, [r3, #40]	; 0x28
}
 800b46c:	4770      	bx	lr
 800b46e:	46c0      	nop			; (mov r8, r8)
 800b470:	40004800 	.word	0x40004800

0800b474 <WSQ_UART_DebugPutString>:
void WSQ_UART_DebugPutString(const char* s){
 800b474:	b510      	push	{r4, lr}
 800b476:	0004      	movs	r4, r0
	while(*s != '\0'){
 800b478:	7821      	ldrb	r1, [r4, #0]
 800b47a:	2900      	cmp	r1, #0
 800b47c:	d100      	bne.n	800b480 <WSQ_UART_DebugPutString+0xc>
}
 800b47e:	bd10      	pop	{r4, pc}
		WSQ_UART_DebugPutChar(NULL , *s++);
 800b480:	2000      	movs	r0, #0
 800b482:	3401      	adds	r4, #1
 800b484:	f7ff ffec 	bl	800b460 <WSQ_UART_DebugPutChar>
 800b488:	e7f6      	b.n	800b478 <WSQ_UART_DebugPutString+0x4>
	...

0800b48c <RNG_LPUART1_IRQHandler>:
}

void RNG_LPUART1_IRQHandler( void ){
 800b48c:	b510      	push	{r4, lr}
  return (READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 800b48e:	4c0d      	ldr	r4, [pc, #52]	; (800b4c4 <RNG_LPUART1_IRQHandler+0x38>)
 800b490:	69e3      	ldr	r3, [r4, #28]

	char dataIn = '\0';
	if ( LL_LPUART_IsActiveFlag_RXNE(LPUART1) == 1 ){ /*read data and clear flag*/
 800b492:	069b      	lsls	r3, r3, #26
 800b494:	d506      	bpl.n	800b4a4 <RNG_LPUART1_IRQHandler+0x18>
		dataIn = LL_LPUART_ReceiveData8( LPUART1 );
		if( NULL != LPUART1_RXUserDefined ){
 800b496:	4b0c      	ldr	r3, [pc, #48]	; (800b4c8 <RNG_LPUART1_IRQHandler+0x3c>)
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR));
 800b498:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	b2c0      	uxtb	r0, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d000      	beq.n	800b4a4 <RNG_LPUART1_IRQHandler+0x18>
			LPUART1_RXUserDefined( dataIn  ); /*callback*/
 800b4a2:	4798      	blx	r3
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800b4a4:	2308      	movs	r3, #8
 800b4a6:	69e2      	ldr	r2, [r4, #28]
 800b4a8:	421a      	tst	r2, r3
 800b4aa:	d000      	beq.n	800b4ae <RNG_LPUART1_IRQHandler+0x22>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800b4ac:	6223      	str	r3, [r4, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800b4ae:	2304      	movs	r3, #4
 800b4b0:	69e2      	ldr	r2, [r4, #28]
 800b4b2:	421a      	tst	r2, r3
 800b4b4:	d000      	beq.n	800b4b8 <RNG_LPUART1_IRQHandler+0x2c>
  WRITE_REG(USARTx->ICR, USART_ICR_NCF );
 800b4b6:	6223      	str	r3, [r4, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	69e2      	ldr	r2, [r4, #28]
 800b4bc:	421a      	tst	r2, r3
 800b4be:	d000      	beq.n	800b4c2 <RNG_LPUART1_IRQHandler+0x36>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800b4c0:	6223      	str	r3, [r4, #32]
		LL_USART_ClearFlag_NE(LPUART1);

	if (LL_USART_IsActiveFlag_FE(LPUART1) == 1) // Framing Error
		LL_USART_ClearFlag_FE(LPUART1);

}
 800b4c2:	bd10      	pop	{r4, pc}
 800b4c4:	40004800 	.word	0x40004800
 800b4c8:	20000ffc 	.word	0x20000ffc

0800b4cc <WSQ_VCP_Init>:

/*============================================================================
 * API implementation
 *============================================================================*/

void WSQ_VCP_Init(WSQ_VPC_CallbackRxFcn_t CustomCallbackRx){
 800b4cc:	b510      	push	{r4, lr}
	WSQ_VPC_CallbackRXUserDefined = CustomCallbackRx;
 800b4ce:	4b02      	ldr	r3, [pc, #8]	; (800b4d8 <WSQ_VCP_Init+0xc>)
 800b4d0:	6018      	str	r0, [r3, #0]
	MX_USB_DEVICE_Init();
 800b4d2:	f7fa fca5 	bl	8005e20 <MX_USB_DEVICE_Init>
}
 800b4d6:	bd10      	pop	{r4, pc}
 800b4d8:	2000100c 	.word	0x2000100c

0800b4dc <WSQ_VCP_Print>:


/*@brief USB Transmission buffer*/
void WSQ_VCP_Print(uint8_t* msg ){
 800b4dc:	b510      	push	{r4, lr}
 800b4de:	0004      	movs	r4, r0
		uint16_t Len = strlen((const char*)msg);
 800b4e0:	f7f4 fe12 	bl	8000108 <strlen>
		if(CDC_Transmit_FS(msg, Len) != USBD_OK){
 800b4e4:	b281      	uxth	r1, r0
 800b4e6:	0020      	movs	r0, r4
 800b4e8:	f7fa fd08 	bl	8005efc <CDC_Transmit_FS>

		}
}
 800b4ec:	bd10      	pop	{r4, pc}
	...

0800b4f0 <WSQ_VPC_PutChar>:


/*@brief USB Transmission char*/
void WSQ_VPC_PutChar( void *sp, const char c ){
 800b4f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4f2:	466b      	mov	r3, sp
	while( ( ( CDC_Transmit_FS((uint8_t*)&c, 1)) == USBD_BUSY)  &&  host_com_port_open && (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) ); /*put the char in the output buffer and wait until transmit is complete*/
 800b4f4:	259d      	movs	r5, #157	; 0x9d
void WSQ_VPC_PutChar( void *sp, const char c ){
 800b4f6:	1ddc      	adds	r4, r3, #7
 800b4f8:	7021      	strb	r1, [r4, #0]
	while( ( ( CDC_Transmit_FS((uint8_t*)&c, 1)) == USBD_BUSY)  &&  host_com_port_open && (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) ); /*put the char in the output buffer and wait until transmit is complete*/
 800b4fa:	00ad      	lsls	r5, r5, #2
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	0020      	movs	r0, r4
 800b500:	f7fa fcfc 	bl	8005efc <CDC_Transmit_FS>
 800b504:	2801      	cmp	r0, #1
 800b506:	d107      	bne.n	800b518 <WSQ_VPC_PutChar+0x28>
 800b508:	4b04      	ldr	r3, [pc, #16]	; (800b51c <WSQ_VPC_PutChar+0x2c>)
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d003      	beq.n	800b518 <WSQ_VPC_PutChar+0x28>
 800b510:	4b03      	ldr	r3, [pc, #12]	; (800b520 <WSQ_VPC_PutChar+0x30>)
 800b512:	5d5b      	ldrb	r3, [r3, r5]
 800b514:	2b03      	cmp	r3, #3
 800b516:	d0f1      	beq.n	800b4fc <WSQ_VPC_PutChar+0xc>

}
 800b518:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800b51a:	46c0      	nop			; (mov r8, r8)
 800b51c:	20002034 	.word	0x20002034
 800b520:	20001034 	.word	0x20001034

0800b524 <main>:

/*Borrar ↓*/
void CustomCallback(char c);


int main(){
 800b524:	b570      	push	{r4, r5, r6, lr}
 800b526:	b088      	sub	sp, #32
	/* System init-------------------------------------------*/
	if(HAL_Init() != HAL_OK)
 800b528:	f7f7 fd34 	bl	8002f94 <HAL_Init>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d001      	beq.n	800b534 <main+0x10>
		BSP_SYSTEM_FATAL_EXCEPTION();
 800b530:	f7ff fd64 	bl	800affc <WSQ_SYSTEM_FatalException>

	BSP_SYSTEM_CLOCK_INIT();
 800b534:	f7ff fd6e 	bl	800b014 <SystemClock_Config>
	WakeUp_Source = BSP_SYSTEM_GET_RESET_CAUSE();
 800b538:	f7ff fdbe 	bl	800b0b8 <WSQ_SYSTEM_GetResetCause>
 800b53c:	4e3e      	ldr	r6, [pc, #248]	; (800b638 <main+0x114>)
 800b53e:	7030      	strb	r0, [r6, #0]
	HAL_Delay(200);/*for not erase epprom when insert battery AAA*/
 800b540:	20c8      	movs	r0, #200	; 0xc8
 800b542:	f7f7 fd49 	bl	8002fd8 <HAL_Delay>


	if(BSP_FLASH_ISEMPTY(BSP_FLASH_INIT_ADDR_RESERVED_DATA_CONF , sizeof(AppData_Config),1)){
 800b546:	2201      	movs	r2, #1
 800b548:	21a4      	movs	r1, #164	; 0xa4
 800b54a:	483c      	ldr	r0, [pc, #240]	; (800b63c <main+0x118>)
 800b54c:	f7ff f9f8 	bl	800a940 <WSQ_Flash_IsEmpty>
 800b550:	4c3b      	ldr	r4, [pc, #236]	; (800b640 <main+0x11c>)
		BSP_FLASH_WRITE(BSP_FLASH_INIT_ADDR_RESERVED_DATA_CONF,&AppData_Config , sizeof(AppData_Config));
 800b552:	22a4      	movs	r2, #164	; 0xa4
 800b554:	0021      	movs	r1, r4
	if(BSP_FLASH_ISEMPTY(BSP_FLASH_INIT_ADDR_RESERVED_DATA_CONF , sizeof(AppData_Config),1)){
 800b556:	2800      	cmp	r0, #0
 800b558:	d06a      	beq.n	800b630 <main+0x10c>
		BSP_FLASH_WRITE(BSP_FLASH_INIT_ADDR_RESERVED_DATA_CONF,&AppData_Config , sizeof(AppData_Config));
 800b55a:	4838      	ldr	r0, [pc, #224]	; (800b63c <main+0x118>)
 800b55c:	f7ff f9dd 	bl	800a91a <WSQ_Flash_Write>
	}else{
		BSP_FLASH_READ(BSP_FLASH_INIT_ADDR_RESERVED_DATA_CONF,&AppData_Config,sizeof(AppData_Config));
	}

	BSP_SYSTEM_LL_INIT(Service_Sigfox_ISRHandler,NULL,AT_CLI_CustomCallback);
 800b560:	4a38      	ldr	r2, [pc, #224]	; (800b644 <main+0x120>)
 800b562:	2100      	movs	r1, #0
 800b564:	4838      	ldr	r0, [pc, #224]	; (800b648 <main+0x124>)
 800b566:	f7ff fce5 	bl	800af34 <WSQ_SYSTEM_LowLevelInit>
	BSP_RTC_SET_TIME(AppData_Config.time.hour,AppData_Config.time.min,AppData_Config.time.sec,0) ;
 800b56a:	0023      	movs	r3, r4
 800b56c:	336e      	adds	r3, #110	; 0x6e
 800b56e:	781a      	ldrb	r2, [r3, #0]
 800b570:	0023      	movs	r3, r4
 800b572:	336d      	adds	r3, #109	; 0x6d
 800b574:	7819      	ldrb	r1, [r3, #0]
 800b576:	0023      	movs	r3, r4
 800b578:	336c      	adds	r3, #108	; 0x6c
 800b57a:	7818      	ldrb	r0, [r3, #0]
 800b57c:	2300      	movs	r3, #0
 800b57e:	f7ff fc5b 	bl	800ae38 <WSQ_RTC_SetTime>
	BSP_GPIO_DISPLAY_COLOR_RGB( AppData_Config.Pulsation_1.rgb); /*while wait delay turn on led*/
 800b582:	0023      	movs	r3, r4
 800b584:	3378      	adds	r3, #120	; 0x78
 800b586:	7818      	ldrb	r0, [r3, #0]
 800b588:	f7ff faf6 	bl	800ab78 <WSQ_GPIO_DisplayColorRGB>


	//BSP_FUEL_GAUGE_INIT(BSP_I2C_TRANSMIT ,BSP_I2C_RECEIVE);

	BSP_SENSOR_TH_INIT(BSP_I2C_TRANSMIT ,BSP_I2C_RECEIVE);
 800b58c:	2388      	movs	r3, #136	; 0x88
 800b58e:	4a2f      	ldr	r2, [pc, #188]	; (800b64c <main+0x128>)
 800b590:	492f      	ldr	r1, [pc, #188]	; (800b650 <main+0x12c>)
 800b592:	4830      	ldr	r0, [pc, #192]	; (800b654 <main+0x130>)
 800b594:	f7fb fc7a 	bl	8006e8c <SHT30_Init>

	/* Pass control to the scheduler */

	qTrace_Set_OutputFcn(BSP_UART_DEBUG_PUTC);  /*debug by usb*/
 800b598:	482f      	ldr	r0, [pc, #188]	; (800b658 <main+0x134>)
 800b59a:	f7fd fa23 	bl	80089e4 <qTrace_Set_OutputFcn>

	ProjectInformation(0);
 800b59e:	2000      	movs	r0, #0
 800b5a0:	f7fe fd00 	bl	8009fa4 <ProjectInformation>
	qOS_Setup(NULL, 0.001, App_Task_Idle);
 800b5a4:	4a2d      	ldr	r2, [pc, #180]	; (800b65c <main+0x138>)
 800b5a6:	492e      	ldr	r1, [pc, #184]	; (800b660 <main+0x13c>)
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	f7fc fdbd 	bl	8008128 <qOS_Setup>
	Service_Sigfox_Setup(AppData_Config.RCZ, BSP_SIGFOX_WRITE_RESET,
 800b5ae:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b5b0:	4a2c      	ldr	r2, [pc, #176]	; (800b664 <main+0x140>)
 800b5b2:	b2d8      	uxtb	r0, r3
 800b5b4:	4b2c      	ldr	r3, [pc, #176]	; (800b668 <main+0x144>)
 800b5b6:	492d      	ldr	r1, [pc, #180]	; (800b66c <main+0x148>)
 800b5b8:	9300      	str	r3, [sp, #0]
 800b5ba:	4b2d      	ldr	r3, [pc, #180]	; (800b670 <main+0x14c>)
 800b5bc:	f7fe feaa 	bl	800a314 <Service_Sigfox_Setup>
			BSP_SIGFOX_WRITE_WAKUP,
			BSP_UART_SIGFOX_PUTC,
			HAL_GetTick);

	Service_Sigfox_Init(NULL, AppData_Config.RCZ , 0 , AppData_Config.redundanciaIsActive);
 800b5c0:	0023      	movs	r3, r4
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	6f61      	ldr	r1, [r4, #116]	; 0x74

	/*FSM*/
	qOS_Add_StateMachineTask(&TaskApplicationFSM, qMedium_Priority, APP_CONFIG_TIME_FSM, &ApplicationFSM, App_State_CheckConditions, NULL,NULL , App_State_Failure, NULL, qEnabled, NULL);
 800b5c6:	2501      	movs	r5, #1
 800b5c8:	2400      	movs	r4, #0
	Service_Sigfox_Init(NULL, AppData_Config.RCZ , 0 , AppData_Config.redundanciaIsActive);
 800b5ca:	3340      	adds	r3, #64	; 0x40
 800b5cc:	0010      	movs	r0, r2
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	b289      	uxth	r1, r1
 800b5d2:	f7fe fee3 	bl	800a39c <Service_Sigfox_Init>
	qOS_Add_StateMachineTask(&TaskApplicationFSM, qMedium_Priority, APP_CONFIG_TIME_FSM, &ApplicationFSM, App_State_CheckConditions, NULL,NULL , App_State_Failure, NULL, qEnabled, NULL);
 800b5d6:	4b27      	ldr	r3, [pc, #156]	; (800b674 <main+0x150>)
 800b5d8:	4a27      	ldr	r2, [pc, #156]	; (800b678 <main+0x154>)
 800b5da:	9303      	str	r3, [sp, #12]
 800b5dc:	4b27      	ldr	r3, [pc, #156]	; (800b67c <main+0x158>)
 800b5de:	0029      	movs	r1, r5
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	9406      	str	r4, [sp, #24]
 800b5e4:	4b26      	ldr	r3, [pc, #152]	; (800b680 <main+0x15c>)
 800b5e6:	9505      	str	r5, [sp, #20]
 800b5e8:	9404      	str	r4, [sp, #16]
 800b5ea:	9402      	str	r4, [sp, #8]
 800b5ec:	9401      	str	r4, [sp, #4]
 800b5ee:	4825      	ldr	r0, [pc, #148]	; (800b684 <main+0x160>)
 800b5f0:	f7fc fe30 	bl	8008254 <qOS_Add_StateMachineTask>
	qOS_Add_Task(&TaskHandlerEvents_Scan,App_Task_ScanAndEvents_Callback, qMedium_Priority, 1, qPeriodic, qDisabled, NULL);
 800b5f4:	2380      	movs	r3, #128	; 0x80
 800b5f6:	061b      	lsls	r3, r3, #24
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	23fe      	movs	r3, #254	; 0xfe
 800b5fc:	002a      	movs	r2, r5
 800b5fe:	059b      	lsls	r3, r3, #22
 800b600:	4921      	ldr	r1, [pc, #132]	; (800b688 <main+0x164>)
 800b602:	9402      	str	r4, [sp, #8]
 800b604:	9401      	str	r4, [sp, #4]
 800b606:	4821      	ldr	r0, [pc, #132]	; (800b68c <main+0x168>)
 800b608:	f7fc fdd8 	bl	80081bc <qOS_Add_Task>

	qDebug_Decimal(WakeUp_Source.Source);
 800b60c:	220a      	movs	r2, #10
 800b60e:	4920      	ldr	r1, [pc, #128]	; (800b690 <main+0x16c>)
 800b610:	7830      	ldrb	r0, [r6, #0]
 800b612:	f7fc faa8 	bl	8007b66 <qIOUtil_ItoA>
 800b616:	4a1f      	ldr	r2, [pc, #124]	; (800b694 <main+0x170>)
 800b618:	0003      	movs	r3, r0
 800b61a:	0021      	movs	r1, r4
 800b61c:	481e      	ldr	r0, [pc, #120]	; (800b698 <main+0x174>)
 800b61e:	9401      	str	r4, [sp, #4]
 800b620:	9400      	str	r4, [sp, #0]
 800b622:	f7fd f9a1 	bl	8008968 <_qtrace_func>

	AT_Command_Init();
 800b626:	f7fe facf 	bl	8009bc8 <AT_Command_Init>

	qOS_Run();
 800b62a:	f7fc fe57 	bl	80082dc <qOS_Run>
 800b62e:	e7fe      	b.n	800b62e <main+0x10a>
		BSP_FLASH_READ(BSP_FLASH_INIT_ADDR_RESERVED_DATA_CONF,&AppData_Config,sizeof(AppData_Config));
 800b630:	4802      	ldr	r0, [pc, #8]	; (800b63c <main+0x118>)
 800b632:	f7ff f95b 	bl	800a8ec <WSQ_Flash_Read>
 800b636:	e793      	b.n	800b560 <main+0x3c>
 800b638:	20001f30 	.word	0x20001f30
 800b63c:	08080000 	.word	0x08080000
 800b640:	20000184 	.word	0x20000184
 800b644:	08009f91 	.word	0x08009f91
 800b648:	0800a305 	.word	0x0800a305
 800b64c:	0800ad91 	.word	0x0800ad91
 800b650:	0800ad89 	.word	0x0800ad89
 800b654:	20001f18 	.word	0x20001f18
 800b658:	0800b461 	.word	0x0800b461
 800b65c:	080067b5 	.word	0x080067b5
 800b660:	3a83126f 	.word	0x3a83126f
 800b664:	0800ab41 	.word	0x0800ab41
 800b668:	08002fcd 	.word	0x08002fcd
 800b66c:	0800ab31 	.word	0x0800ab31
 800b670:	0800b239 	.word	0x0800b239
 800b674:	080065ed 	.word	0x080065ed
 800b678:	3c23d70a 	.word	0x3c23d70a
 800b67c:	080064ed 	.word	0x080064ed
 800b680:	20001fc0 	.word	0x20001fc0
 800b684:	20001f74 	.word	0x20001f74
 800b688:	080065f1 	.word	0x080065f1
 800b68c:	20001f34 	.word	0x20001f34
 800b690:	20000804 	.word	0x20000804
 800b694:	0800d70a 	.word	0x0800d70a
 800b698:	0800d709 	.word	0x0800d709

0800b69c <__errno>:
 800b69c:	4b01      	ldr	r3, [pc, #4]	; (800b6a4 <__errno+0x8>)
 800b69e:	6818      	ldr	r0, [r3, #0]
 800b6a0:	4770      	bx	lr
 800b6a2:	46c0      	nop			; (mov r8, r8)
 800b6a4:	20000284 	.word	0x20000284

0800b6a8 <__libc_init_array>:
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	2600      	movs	r6, #0
 800b6ac:	4d0c      	ldr	r5, [pc, #48]	; (800b6e0 <__libc_init_array+0x38>)
 800b6ae:	4c0d      	ldr	r4, [pc, #52]	; (800b6e4 <__libc_init_array+0x3c>)
 800b6b0:	1b64      	subs	r4, r4, r5
 800b6b2:	10a4      	asrs	r4, r4, #2
 800b6b4:	42a6      	cmp	r6, r4
 800b6b6:	d109      	bne.n	800b6cc <__libc_init_array+0x24>
 800b6b8:	2600      	movs	r6, #0
 800b6ba:	f000 fd43 	bl	800c144 <_init>
 800b6be:	4d0a      	ldr	r5, [pc, #40]	; (800b6e8 <__libc_init_array+0x40>)
 800b6c0:	4c0a      	ldr	r4, [pc, #40]	; (800b6ec <__libc_init_array+0x44>)
 800b6c2:	1b64      	subs	r4, r4, r5
 800b6c4:	10a4      	asrs	r4, r4, #2
 800b6c6:	42a6      	cmp	r6, r4
 800b6c8:	d105      	bne.n	800b6d6 <__libc_init_array+0x2e>
 800b6ca:	bd70      	pop	{r4, r5, r6, pc}
 800b6cc:	00b3      	lsls	r3, r6, #2
 800b6ce:	58eb      	ldr	r3, [r5, r3]
 800b6d0:	4798      	blx	r3
 800b6d2:	3601      	adds	r6, #1
 800b6d4:	e7ee      	b.n	800b6b4 <__libc_init_array+0xc>
 800b6d6:	00b3      	lsls	r3, r6, #2
 800b6d8:	58eb      	ldr	r3, [r5, r3]
 800b6da:	4798      	blx	r3
 800b6dc:	3601      	adds	r6, #1
 800b6de:	e7f2      	b.n	800b6c6 <__libc_init_array+0x1e>
 800b6e0:	0800d864 	.word	0x0800d864
 800b6e4:	0800d864 	.word	0x0800d864
 800b6e8:	0800d864 	.word	0x0800d864
 800b6ec:	0800d868 	.word	0x0800d868

0800b6f0 <__locale_ctype_ptr_l>:
 800b6f0:	30ec      	adds	r0, #236	; 0xec
 800b6f2:	6800      	ldr	r0, [r0, #0]
 800b6f4:	4770      	bx	lr
	...

0800b6f8 <__locale_ctype_ptr>:
 800b6f8:	4b04      	ldr	r3, [pc, #16]	; (800b70c <__locale_ctype_ptr+0x14>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	6a1b      	ldr	r3, [r3, #32]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d100      	bne.n	800b704 <__locale_ctype_ptr+0xc>
 800b702:	4b03      	ldr	r3, [pc, #12]	; (800b710 <__locale_ctype_ptr+0x18>)
 800b704:	33ec      	adds	r3, #236	; 0xec
 800b706:	6818      	ldr	r0, [r3, #0]
 800b708:	4770      	bx	lr
 800b70a:	46c0      	nop			; (mov r8, r8)
 800b70c:	20000284 	.word	0x20000284
 800b710:	200002e8 	.word	0x200002e8

0800b714 <__ascii_mbtowc>:
 800b714:	b082      	sub	sp, #8
 800b716:	2900      	cmp	r1, #0
 800b718:	d100      	bne.n	800b71c <__ascii_mbtowc+0x8>
 800b71a:	a901      	add	r1, sp, #4
 800b71c:	1e10      	subs	r0, r2, #0
 800b71e:	d006      	beq.n	800b72e <__ascii_mbtowc+0x1a>
 800b720:	2b00      	cmp	r3, #0
 800b722:	d006      	beq.n	800b732 <__ascii_mbtowc+0x1e>
 800b724:	7813      	ldrb	r3, [r2, #0]
 800b726:	600b      	str	r3, [r1, #0]
 800b728:	7810      	ldrb	r0, [r2, #0]
 800b72a:	1e43      	subs	r3, r0, #1
 800b72c:	4198      	sbcs	r0, r3
 800b72e:	b002      	add	sp, #8
 800b730:	4770      	bx	lr
 800b732:	2002      	movs	r0, #2
 800b734:	4240      	negs	r0, r0
 800b736:	e7fa      	b.n	800b72e <__ascii_mbtowc+0x1a>

0800b738 <memcpy>:
 800b738:	2300      	movs	r3, #0
 800b73a:	b510      	push	{r4, lr}
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d100      	bne.n	800b742 <memcpy+0xa>
 800b740:	bd10      	pop	{r4, pc}
 800b742:	5ccc      	ldrb	r4, [r1, r3]
 800b744:	54c4      	strb	r4, [r0, r3]
 800b746:	3301      	adds	r3, #1
 800b748:	e7f8      	b.n	800b73c <memcpy+0x4>

0800b74a <memset>:
 800b74a:	0003      	movs	r3, r0
 800b74c:	1812      	adds	r2, r2, r0
 800b74e:	4293      	cmp	r3, r2
 800b750:	d100      	bne.n	800b754 <memset+0xa>
 800b752:	4770      	bx	lr
 800b754:	7019      	strb	r1, [r3, #0]
 800b756:	3301      	adds	r3, #1
 800b758:	e7f9      	b.n	800b74e <memset+0x4>
	...

0800b75c <siprintf>:
 800b75c:	b40e      	push	{r1, r2, r3}
 800b75e:	b500      	push	{lr}
 800b760:	490b      	ldr	r1, [pc, #44]	; (800b790 <siprintf+0x34>)
 800b762:	b09c      	sub	sp, #112	; 0x70
 800b764:	ab1d      	add	r3, sp, #116	; 0x74
 800b766:	9002      	str	r0, [sp, #8]
 800b768:	9006      	str	r0, [sp, #24]
 800b76a:	9107      	str	r1, [sp, #28]
 800b76c:	9104      	str	r1, [sp, #16]
 800b76e:	4809      	ldr	r0, [pc, #36]	; (800b794 <siprintf+0x38>)
 800b770:	4909      	ldr	r1, [pc, #36]	; (800b798 <siprintf+0x3c>)
 800b772:	cb04      	ldmia	r3!, {r2}
 800b774:	9105      	str	r1, [sp, #20]
 800b776:	6800      	ldr	r0, [r0, #0]
 800b778:	a902      	add	r1, sp, #8
 800b77a:	9301      	str	r3, [sp, #4]
 800b77c:	f000 f966 	bl	800ba4c <_svfiprintf_r>
 800b780:	2300      	movs	r3, #0
 800b782:	9a02      	ldr	r2, [sp, #8]
 800b784:	7013      	strb	r3, [r2, #0]
 800b786:	b01c      	add	sp, #112	; 0x70
 800b788:	bc08      	pop	{r3}
 800b78a:	b003      	add	sp, #12
 800b78c:	4718      	bx	r3
 800b78e:	46c0      	nop			; (mov r8, r8)
 800b790:	7fffffff 	.word	0x7fffffff
 800b794:	20000284 	.word	0x20000284
 800b798:	ffff0208 	.word	0xffff0208

0800b79c <strchr>:
 800b79c:	b2c9      	uxtb	r1, r1
 800b79e:	7803      	ldrb	r3, [r0, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d004      	beq.n	800b7ae <strchr+0x12>
 800b7a4:	428b      	cmp	r3, r1
 800b7a6:	d100      	bne.n	800b7aa <strchr+0xe>
 800b7a8:	4770      	bx	lr
 800b7aa:	3001      	adds	r0, #1
 800b7ac:	e7f7      	b.n	800b79e <strchr+0x2>
 800b7ae:	424b      	negs	r3, r1
 800b7b0:	4159      	adcs	r1, r3
 800b7b2:	4249      	negs	r1, r1
 800b7b4:	4008      	ands	r0, r1
 800b7b6:	e7f7      	b.n	800b7a8 <strchr+0xc>

0800b7b8 <strcpy>:
 800b7b8:	0003      	movs	r3, r0
 800b7ba:	780a      	ldrb	r2, [r1, #0]
 800b7bc:	3101      	adds	r1, #1
 800b7be:	701a      	strb	r2, [r3, #0]
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	2a00      	cmp	r2, #0
 800b7c4:	d1f9      	bne.n	800b7ba <strcpy+0x2>
 800b7c6:	4770      	bx	lr

0800b7c8 <strncmp>:
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	b530      	push	{r4, r5, lr}
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d00a      	beq.n	800b7e6 <strncmp+0x1e>
 800b7d0:	3a01      	subs	r2, #1
 800b7d2:	5cc4      	ldrb	r4, [r0, r3]
 800b7d4:	5ccd      	ldrb	r5, [r1, r3]
 800b7d6:	42ac      	cmp	r4, r5
 800b7d8:	d104      	bne.n	800b7e4 <strncmp+0x1c>
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d002      	beq.n	800b7e4 <strncmp+0x1c>
 800b7de:	3301      	adds	r3, #1
 800b7e0:	2c00      	cmp	r4, #0
 800b7e2:	d1f6      	bne.n	800b7d2 <strncmp+0xa>
 800b7e4:	1b63      	subs	r3, r4, r5
 800b7e6:	0018      	movs	r0, r3
 800b7e8:	bd30      	pop	{r4, r5, pc}

0800b7ea <strncpy>:
 800b7ea:	b530      	push	{r4, r5, lr}
 800b7ec:	0005      	movs	r5, r0
 800b7ee:	2a00      	cmp	r2, #0
 800b7f0:	d100      	bne.n	800b7f4 <strncpy+0xa>
 800b7f2:	bd30      	pop	{r4, r5, pc}
 800b7f4:	780c      	ldrb	r4, [r1, #0]
 800b7f6:	3a01      	subs	r2, #1
 800b7f8:	1c6b      	adds	r3, r5, #1
 800b7fa:	702c      	strb	r4, [r5, #0]
 800b7fc:	3101      	adds	r1, #1
 800b7fe:	2c00      	cmp	r4, #0
 800b800:	d105      	bne.n	800b80e <strncpy+0x24>
 800b802:	189a      	adds	r2, r3, r2
 800b804:	429a      	cmp	r2, r3
 800b806:	d0f4      	beq.n	800b7f2 <strncpy+0x8>
 800b808:	701c      	strb	r4, [r3, #0]
 800b80a:	3301      	adds	r3, #1
 800b80c:	e7fa      	b.n	800b804 <strncpy+0x1a>
 800b80e:	001d      	movs	r5, r3
 800b810:	e7ed      	b.n	800b7ee <strncpy+0x4>

0800b812 <strstr>:
 800b812:	b510      	push	{r4, lr}
 800b814:	7803      	ldrb	r3, [r0, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d10f      	bne.n	800b83a <strstr+0x28>
 800b81a:	780b      	ldrb	r3, [r1, #0]
 800b81c:	425a      	negs	r2, r3
 800b81e:	4153      	adcs	r3, r2
 800b820:	425b      	negs	r3, r3
 800b822:	4018      	ands	r0, r3
 800b824:	bd10      	pop	{r4, pc}
 800b826:	2300      	movs	r3, #0
 800b828:	5cca      	ldrb	r2, [r1, r3]
 800b82a:	2a00      	cmp	r2, #0
 800b82c:	d0fa      	beq.n	800b824 <strstr+0x12>
 800b82e:	5cc4      	ldrb	r4, [r0, r3]
 800b830:	4294      	cmp	r4, r2
 800b832:	d101      	bne.n	800b838 <strstr+0x26>
 800b834:	3301      	adds	r3, #1
 800b836:	e7f7      	b.n	800b828 <strstr+0x16>
 800b838:	3001      	adds	r0, #1
 800b83a:	7803      	ldrb	r3, [r0, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1f2      	bne.n	800b826 <strstr+0x14>
 800b840:	0018      	movs	r0, r3
 800b842:	e7ef      	b.n	800b824 <strstr+0x12>

0800b844 <_strtol_l.isra.0>:
 800b844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b846:	001f      	movs	r7, r3
 800b848:	000e      	movs	r6, r1
 800b84a:	b087      	sub	sp, #28
 800b84c:	9005      	str	r0, [sp, #20]
 800b84e:	9101      	str	r1, [sp, #4]
 800b850:	9202      	str	r2, [sp, #8]
 800b852:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b854:	7834      	ldrb	r4, [r6, #0]
 800b856:	f7ff ff4b 	bl	800b6f0 <__locale_ctype_ptr_l>
 800b85a:	2208      	movs	r2, #8
 800b85c:	1900      	adds	r0, r0, r4
 800b85e:	7843      	ldrb	r3, [r0, #1]
 800b860:	1c75      	adds	r5, r6, #1
 800b862:	4013      	ands	r3, r2
 800b864:	d136      	bne.n	800b8d4 <_strtol_l.isra.0+0x90>
 800b866:	2c2d      	cmp	r4, #45	; 0x2d
 800b868:	d136      	bne.n	800b8d8 <_strtol_l.isra.0+0x94>
 800b86a:	1cb5      	adds	r5, r6, #2
 800b86c:	7874      	ldrb	r4, [r6, #1]
 800b86e:	2601      	movs	r6, #1
 800b870:	2f00      	cmp	r7, #0
 800b872:	d062      	beq.n	800b93a <_strtol_l.isra.0+0xf6>
 800b874:	2f10      	cmp	r7, #16
 800b876:	d109      	bne.n	800b88c <_strtol_l.isra.0+0x48>
 800b878:	2c30      	cmp	r4, #48	; 0x30
 800b87a:	d107      	bne.n	800b88c <_strtol_l.isra.0+0x48>
 800b87c:	2220      	movs	r2, #32
 800b87e:	782b      	ldrb	r3, [r5, #0]
 800b880:	4393      	bics	r3, r2
 800b882:	2b58      	cmp	r3, #88	; 0x58
 800b884:	d154      	bne.n	800b930 <_strtol_l.isra.0+0xec>
 800b886:	2710      	movs	r7, #16
 800b888:	786c      	ldrb	r4, [r5, #1]
 800b88a:	3502      	adds	r5, #2
 800b88c:	4b2d      	ldr	r3, [pc, #180]	; (800b944 <_strtol_l.isra.0+0x100>)
 800b88e:	0039      	movs	r1, r7
 800b890:	18f3      	adds	r3, r6, r3
 800b892:	0018      	movs	r0, r3
 800b894:	9303      	str	r3, [sp, #12]
 800b896:	f7f4 fcd9 	bl	800024c <__aeabi_uidivmod>
 800b89a:	9104      	str	r1, [sp, #16]
 800b89c:	2101      	movs	r1, #1
 800b89e:	2300      	movs	r3, #0
 800b8a0:	4249      	negs	r1, r1
 800b8a2:	0002      	movs	r2, r0
 800b8a4:	468c      	mov	ip, r1
 800b8a6:	0018      	movs	r0, r3
 800b8a8:	0021      	movs	r1, r4
 800b8aa:	3930      	subs	r1, #48	; 0x30
 800b8ac:	2909      	cmp	r1, #9
 800b8ae:	d81a      	bhi.n	800b8e6 <_strtol_l.isra.0+0xa2>
 800b8b0:	000c      	movs	r4, r1
 800b8b2:	42a7      	cmp	r7, r4
 800b8b4:	dd23      	ble.n	800b8fe <_strtol_l.isra.0+0xba>
 800b8b6:	1c59      	adds	r1, r3, #1
 800b8b8:	d009      	beq.n	800b8ce <_strtol_l.isra.0+0x8a>
 800b8ba:	4663      	mov	r3, ip
 800b8bc:	4282      	cmp	r2, r0
 800b8be:	d306      	bcc.n	800b8ce <_strtol_l.isra.0+0x8a>
 800b8c0:	d102      	bne.n	800b8c8 <_strtol_l.isra.0+0x84>
 800b8c2:	9904      	ldr	r1, [sp, #16]
 800b8c4:	42a1      	cmp	r1, r4
 800b8c6:	db02      	blt.n	800b8ce <_strtol_l.isra.0+0x8a>
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	4378      	muls	r0, r7
 800b8cc:	1820      	adds	r0, r4, r0
 800b8ce:	782c      	ldrb	r4, [r5, #0]
 800b8d0:	3501      	adds	r5, #1
 800b8d2:	e7e9      	b.n	800b8a8 <_strtol_l.isra.0+0x64>
 800b8d4:	002e      	movs	r6, r5
 800b8d6:	e7bc      	b.n	800b852 <_strtol_l.isra.0+0xe>
 800b8d8:	2c2b      	cmp	r4, #43	; 0x2b
 800b8da:	d001      	beq.n	800b8e0 <_strtol_l.isra.0+0x9c>
 800b8dc:	001e      	movs	r6, r3
 800b8de:	e7c7      	b.n	800b870 <_strtol_l.isra.0+0x2c>
 800b8e0:	1cb5      	adds	r5, r6, #2
 800b8e2:	7874      	ldrb	r4, [r6, #1]
 800b8e4:	e7fa      	b.n	800b8dc <_strtol_l.isra.0+0x98>
 800b8e6:	0021      	movs	r1, r4
 800b8e8:	3941      	subs	r1, #65	; 0x41
 800b8ea:	2919      	cmp	r1, #25
 800b8ec:	d801      	bhi.n	800b8f2 <_strtol_l.isra.0+0xae>
 800b8ee:	3c37      	subs	r4, #55	; 0x37
 800b8f0:	e7df      	b.n	800b8b2 <_strtol_l.isra.0+0x6e>
 800b8f2:	0021      	movs	r1, r4
 800b8f4:	3961      	subs	r1, #97	; 0x61
 800b8f6:	2919      	cmp	r1, #25
 800b8f8:	d801      	bhi.n	800b8fe <_strtol_l.isra.0+0xba>
 800b8fa:	3c57      	subs	r4, #87	; 0x57
 800b8fc:	e7d9      	b.n	800b8b2 <_strtol_l.isra.0+0x6e>
 800b8fe:	1c5a      	adds	r2, r3, #1
 800b900:	d108      	bne.n	800b914 <_strtol_l.isra.0+0xd0>
 800b902:	9a05      	ldr	r2, [sp, #20]
 800b904:	3323      	adds	r3, #35	; 0x23
 800b906:	6013      	str	r3, [r2, #0]
 800b908:	9b02      	ldr	r3, [sp, #8]
 800b90a:	9803      	ldr	r0, [sp, #12]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d109      	bne.n	800b924 <_strtol_l.isra.0+0xe0>
 800b910:	b007      	add	sp, #28
 800b912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b914:	2e00      	cmp	r6, #0
 800b916:	d000      	beq.n	800b91a <_strtol_l.isra.0+0xd6>
 800b918:	4240      	negs	r0, r0
 800b91a:	9a02      	ldr	r2, [sp, #8]
 800b91c:	2a00      	cmp	r2, #0
 800b91e:	d0f7      	beq.n	800b910 <_strtol_l.isra.0+0xcc>
 800b920:	2b00      	cmp	r3, #0
 800b922:	d001      	beq.n	800b928 <_strtol_l.isra.0+0xe4>
 800b924:	1e6b      	subs	r3, r5, #1
 800b926:	9301      	str	r3, [sp, #4]
 800b928:	9b02      	ldr	r3, [sp, #8]
 800b92a:	9a01      	ldr	r2, [sp, #4]
 800b92c:	601a      	str	r2, [r3, #0]
 800b92e:	e7ef      	b.n	800b910 <_strtol_l.isra.0+0xcc>
 800b930:	2430      	movs	r4, #48	; 0x30
 800b932:	2f00      	cmp	r7, #0
 800b934:	d1aa      	bne.n	800b88c <_strtol_l.isra.0+0x48>
 800b936:	2708      	movs	r7, #8
 800b938:	e7a8      	b.n	800b88c <_strtol_l.isra.0+0x48>
 800b93a:	2c30      	cmp	r4, #48	; 0x30
 800b93c:	d09e      	beq.n	800b87c <_strtol_l.isra.0+0x38>
 800b93e:	270a      	movs	r7, #10
 800b940:	e7a4      	b.n	800b88c <_strtol_l.isra.0+0x48>
 800b942:	46c0      	nop			; (mov r8, r8)
 800b944:	7fffffff 	.word	0x7fffffff

0800b948 <strtol>:
 800b948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b94a:	0013      	movs	r3, r2
 800b94c:	4a06      	ldr	r2, [pc, #24]	; (800b968 <strtol+0x20>)
 800b94e:	0005      	movs	r5, r0
 800b950:	6810      	ldr	r0, [r2, #0]
 800b952:	6a04      	ldr	r4, [r0, #32]
 800b954:	2c00      	cmp	r4, #0
 800b956:	d100      	bne.n	800b95a <strtol+0x12>
 800b958:	4c04      	ldr	r4, [pc, #16]	; (800b96c <strtol+0x24>)
 800b95a:	000a      	movs	r2, r1
 800b95c:	9400      	str	r4, [sp, #0]
 800b95e:	0029      	movs	r1, r5
 800b960:	f7ff ff70 	bl	800b844 <_strtol_l.isra.0>
 800b964:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800b966:	46c0      	nop			; (mov r8, r8)
 800b968:	20000284 	.word	0x20000284
 800b96c:	200002e8 	.word	0x200002e8

0800b970 <__ascii_wctomb>:
 800b970:	1e0b      	subs	r3, r1, #0
 800b972:	d004      	beq.n	800b97e <__ascii_wctomb+0xe>
 800b974:	2aff      	cmp	r2, #255	; 0xff
 800b976:	d904      	bls.n	800b982 <__ascii_wctomb+0x12>
 800b978:	238a      	movs	r3, #138	; 0x8a
 800b97a:	6003      	str	r3, [r0, #0]
 800b97c:	3b8b      	subs	r3, #139	; 0x8b
 800b97e:	0018      	movs	r0, r3
 800b980:	4770      	bx	lr
 800b982:	700a      	strb	r2, [r1, #0]
 800b984:	2301      	movs	r3, #1
 800b986:	e7fa      	b.n	800b97e <__ascii_wctomb+0xe>

0800b988 <__ssputs_r>:
 800b988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b98a:	688e      	ldr	r6, [r1, #8]
 800b98c:	b085      	sub	sp, #20
 800b98e:	0007      	movs	r7, r0
 800b990:	000c      	movs	r4, r1
 800b992:	9203      	str	r2, [sp, #12]
 800b994:	9301      	str	r3, [sp, #4]
 800b996:	429e      	cmp	r6, r3
 800b998:	d83c      	bhi.n	800ba14 <__ssputs_r+0x8c>
 800b99a:	2390      	movs	r3, #144	; 0x90
 800b99c:	898a      	ldrh	r2, [r1, #12]
 800b99e:	00db      	lsls	r3, r3, #3
 800b9a0:	421a      	tst	r2, r3
 800b9a2:	d034      	beq.n	800ba0e <__ssputs_r+0x86>
 800b9a4:	2503      	movs	r5, #3
 800b9a6:	6909      	ldr	r1, [r1, #16]
 800b9a8:	6823      	ldr	r3, [r4, #0]
 800b9aa:	1a5b      	subs	r3, r3, r1
 800b9ac:	9302      	str	r3, [sp, #8]
 800b9ae:	6963      	ldr	r3, [r4, #20]
 800b9b0:	9802      	ldr	r0, [sp, #8]
 800b9b2:	435d      	muls	r5, r3
 800b9b4:	0feb      	lsrs	r3, r5, #31
 800b9b6:	195d      	adds	r5, r3, r5
 800b9b8:	9b01      	ldr	r3, [sp, #4]
 800b9ba:	106d      	asrs	r5, r5, #1
 800b9bc:	3301      	adds	r3, #1
 800b9be:	181b      	adds	r3, r3, r0
 800b9c0:	42ab      	cmp	r3, r5
 800b9c2:	d900      	bls.n	800b9c6 <__ssputs_r+0x3e>
 800b9c4:	001d      	movs	r5, r3
 800b9c6:	0553      	lsls	r3, r2, #21
 800b9c8:	d532      	bpl.n	800ba30 <__ssputs_r+0xa8>
 800b9ca:	0029      	movs	r1, r5
 800b9cc:	0038      	movs	r0, r7
 800b9ce:	f000 fb19 	bl	800c004 <_malloc_r>
 800b9d2:	1e06      	subs	r6, r0, #0
 800b9d4:	d109      	bne.n	800b9ea <__ssputs_r+0x62>
 800b9d6:	230c      	movs	r3, #12
 800b9d8:	603b      	str	r3, [r7, #0]
 800b9da:	2340      	movs	r3, #64	; 0x40
 800b9dc:	2001      	movs	r0, #1
 800b9de:	89a2      	ldrh	r2, [r4, #12]
 800b9e0:	4240      	negs	r0, r0
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	81a3      	strh	r3, [r4, #12]
 800b9e6:	b005      	add	sp, #20
 800b9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9ea:	9a02      	ldr	r2, [sp, #8]
 800b9ec:	6921      	ldr	r1, [r4, #16]
 800b9ee:	f7ff fea3 	bl	800b738 <memcpy>
 800b9f2:	89a3      	ldrh	r3, [r4, #12]
 800b9f4:	4a14      	ldr	r2, [pc, #80]	; (800ba48 <__ssputs_r+0xc0>)
 800b9f6:	401a      	ands	r2, r3
 800b9f8:	2380      	movs	r3, #128	; 0x80
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	81a3      	strh	r3, [r4, #12]
 800b9fe:	9b02      	ldr	r3, [sp, #8]
 800ba00:	6126      	str	r6, [r4, #16]
 800ba02:	18f6      	adds	r6, r6, r3
 800ba04:	6026      	str	r6, [r4, #0]
 800ba06:	6165      	str	r5, [r4, #20]
 800ba08:	9e01      	ldr	r6, [sp, #4]
 800ba0a:	1aed      	subs	r5, r5, r3
 800ba0c:	60a5      	str	r5, [r4, #8]
 800ba0e:	9b01      	ldr	r3, [sp, #4]
 800ba10:	429e      	cmp	r6, r3
 800ba12:	d900      	bls.n	800ba16 <__ssputs_r+0x8e>
 800ba14:	9e01      	ldr	r6, [sp, #4]
 800ba16:	0032      	movs	r2, r6
 800ba18:	9903      	ldr	r1, [sp, #12]
 800ba1a:	6820      	ldr	r0, [r4, #0]
 800ba1c:	f000 fa95 	bl	800bf4a <memmove>
 800ba20:	68a3      	ldr	r3, [r4, #8]
 800ba22:	2000      	movs	r0, #0
 800ba24:	1b9b      	subs	r3, r3, r6
 800ba26:	60a3      	str	r3, [r4, #8]
 800ba28:	6823      	ldr	r3, [r4, #0]
 800ba2a:	199e      	adds	r6, r3, r6
 800ba2c:	6026      	str	r6, [r4, #0]
 800ba2e:	e7da      	b.n	800b9e6 <__ssputs_r+0x5e>
 800ba30:	002a      	movs	r2, r5
 800ba32:	0038      	movs	r0, r7
 800ba34:	f000 fb44 	bl	800c0c0 <_realloc_r>
 800ba38:	1e06      	subs	r6, r0, #0
 800ba3a:	d1e0      	bne.n	800b9fe <__ssputs_r+0x76>
 800ba3c:	6921      	ldr	r1, [r4, #16]
 800ba3e:	0038      	movs	r0, r7
 800ba40:	f000 fa96 	bl	800bf70 <_free_r>
 800ba44:	e7c7      	b.n	800b9d6 <__ssputs_r+0x4e>
 800ba46:	46c0      	nop			; (mov r8, r8)
 800ba48:	fffffb7f 	.word	0xfffffb7f

0800ba4c <_svfiprintf_r>:
 800ba4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba4e:	b0a1      	sub	sp, #132	; 0x84
 800ba50:	9003      	str	r0, [sp, #12]
 800ba52:	001d      	movs	r5, r3
 800ba54:	898b      	ldrh	r3, [r1, #12]
 800ba56:	000f      	movs	r7, r1
 800ba58:	0016      	movs	r6, r2
 800ba5a:	061b      	lsls	r3, r3, #24
 800ba5c:	d511      	bpl.n	800ba82 <_svfiprintf_r+0x36>
 800ba5e:	690b      	ldr	r3, [r1, #16]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d10e      	bne.n	800ba82 <_svfiprintf_r+0x36>
 800ba64:	2140      	movs	r1, #64	; 0x40
 800ba66:	f000 facd 	bl	800c004 <_malloc_r>
 800ba6a:	6038      	str	r0, [r7, #0]
 800ba6c:	6138      	str	r0, [r7, #16]
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d105      	bne.n	800ba7e <_svfiprintf_r+0x32>
 800ba72:	230c      	movs	r3, #12
 800ba74:	9a03      	ldr	r2, [sp, #12]
 800ba76:	3801      	subs	r0, #1
 800ba78:	6013      	str	r3, [r2, #0]
 800ba7a:	b021      	add	sp, #132	; 0x84
 800ba7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba7e:	2340      	movs	r3, #64	; 0x40
 800ba80:	617b      	str	r3, [r7, #20]
 800ba82:	2300      	movs	r3, #0
 800ba84:	ac08      	add	r4, sp, #32
 800ba86:	6163      	str	r3, [r4, #20]
 800ba88:	3320      	adds	r3, #32
 800ba8a:	7663      	strb	r3, [r4, #25]
 800ba8c:	3310      	adds	r3, #16
 800ba8e:	76a3      	strb	r3, [r4, #26]
 800ba90:	9507      	str	r5, [sp, #28]
 800ba92:	0035      	movs	r5, r6
 800ba94:	782b      	ldrb	r3, [r5, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <_svfiprintf_r+0x52>
 800ba9a:	2b25      	cmp	r3, #37	; 0x25
 800ba9c:	d146      	bne.n	800bb2c <_svfiprintf_r+0xe0>
 800ba9e:	1bab      	subs	r3, r5, r6
 800baa0:	9305      	str	r3, [sp, #20]
 800baa2:	d00c      	beq.n	800babe <_svfiprintf_r+0x72>
 800baa4:	0032      	movs	r2, r6
 800baa6:	0039      	movs	r1, r7
 800baa8:	9803      	ldr	r0, [sp, #12]
 800baaa:	f7ff ff6d 	bl	800b988 <__ssputs_r>
 800baae:	1c43      	adds	r3, r0, #1
 800bab0:	d100      	bne.n	800bab4 <_svfiprintf_r+0x68>
 800bab2:	e0ae      	b.n	800bc12 <_svfiprintf_r+0x1c6>
 800bab4:	6962      	ldr	r2, [r4, #20]
 800bab6:	9b05      	ldr	r3, [sp, #20]
 800bab8:	4694      	mov	ip, r2
 800baba:	4463      	add	r3, ip
 800babc:	6163      	str	r3, [r4, #20]
 800babe:	782b      	ldrb	r3, [r5, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d100      	bne.n	800bac6 <_svfiprintf_r+0x7a>
 800bac4:	e0a5      	b.n	800bc12 <_svfiprintf_r+0x1c6>
 800bac6:	2201      	movs	r2, #1
 800bac8:	2300      	movs	r3, #0
 800baca:	4252      	negs	r2, r2
 800bacc:	6062      	str	r2, [r4, #4]
 800bace:	a904      	add	r1, sp, #16
 800bad0:	3254      	adds	r2, #84	; 0x54
 800bad2:	1852      	adds	r2, r2, r1
 800bad4:	1c6e      	adds	r6, r5, #1
 800bad6:	6023      	str	r3, [r4, #0]
 800bad8:	60e3      	str	r3, [r4, #12]
 800bada:	60a3      	str	r3, [r4, #8]
 800badc:	7013      	strb	r3, [r2, #0]
 800bade:	65a3      	str	r3, [r4, #88]	; 0x58
 800bae0:	7831      	ldrb	r1, [r6, #0]
 800bae2:	2205      	movs	r2, #5
 800bae4:	4853      	ldr	r0, [pc, #332]	; (800bc34 <_svfiprintf_r+0x1e8>)
 800bae6:	f000 fa25 	bl	800bf34 <memchr>
 800baea:	1c75      	adds	r5, r6, #1
 800baec:	2800      	cmp	r0, #0
 800baee:	d11f      	bne.n	800bb30 <_svfiprintf_r+0xe4>
 800baf0:	6822      	ldr	r2, [r4, #0]
 800baf2:	06d3      	lsls	r3, r2, #27
 800baf4:	d504      	bpl.n	800bb00 <_svfiprintf_r+0xb4>
 800baf6:	2353      	movs	r3, #83	; 0x53
 800baf8:	a904      	add	r1, sp, #16
 800bafa:	185b      	adds	r3, r3, r1
 800bafc:	2120      	movs	r1, #32
 800bafe:	7019      	strb	r1, [r3, #0]
 800bb00:	0713      	lsls	r3, r2, #28
 800bb02:	d504      	bpl.n	800bb0e <_svfiprintf_r+0xc2>
 800bb04:	2353      	movs	r3, #83	; 0x53
 800bb06:	a904      	add	r1, sp, #16
 800bb08:	185b      	adds	r3, r3, r1
 800bb0a:	212b      	movs	r1, #43	; 0x2b
 800bb0c:	7019      	strb	r1, [r3, #0]
 800bb0e:	7833      	ldrb	r3, [r6, #0]
 800bb10:	2b2a      	cmp	r3, #42	; 0x2a
 800bb12:	d016      	beq.n	800bb42 <_svfiprintf_r+0xf6>
 800bb14:	0035      	movs	r5, r6
 800bb16:	2100      	movs	r1, #0
 800bb18:	200a      	movs	r0, #10
 800bb1a:	68e3      	ldr	r3, [r4, #12]
 800bb1c:	782a      	ldrb	r2, [r5, #0]
 800bb1e:	1c6e      	adds	r6, r5, #1
 800bb20:	3a30      	subs	r2, #48	; 0x30
 800bb22:	2a09      	cmp	r2, #9
 800bb24:	d94e      	bls.n	800bbc4 <_svfiprintf_r+0x178>
 800bb26:	2900      	cmp	r1, #0
 800bb28:	d018      	beq.n	800bb5c <_svfiprintf_r+0x110>
 800bb2a:	e010      	b.n	800bb4e <_svfiprintf_r+0x102>
 800bb2c:	3501      	adds	r5, #1
 800bb2e:	e7b1      	b.n	800ba94 <_svfiprintf_r+0x48>
 800bb30:	4b40      	ldr	r3, [pc, #256]	; (800bc34 <_svfiprintf_r+0x1e8>)
 800bb32:	6822      	ldr	r2, [r4, #0]
 800bb34:	1ac0      	subs	r0, r0, r3
 800bb36:	2301      	movs	r3, #1
 800bb38:	4083      	lsls	r3, r0
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	002e      	movs	r6, r5
 800bb40:	e7ce      	b.n	800bae0 <_svfiprintf_r+0x94>
 800bb42:	9b07      	ldr	r3, [sp, #28]
 800bb44:	1d19      	adds	r1, r3, #4
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	9107      	str	r1, [sp, #28]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	db01      	blt.n	800bb52 <_svfiprintf_r+0x106>
 800bb4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb50:	e004      	b.n	800bb5c <_svfiprintf_r+0x110>
 800bb52:	425b      	negs	r3, r3
 800bb54:	60e3      	str	r3, [r4, #12]
 800bb56:	2302      	movs	r3, #2
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	6023      	str	r3, [r4, #0]
 800bb5c:	782b      	ldrb	r3, [r5, #0]
 800bb5e:	2b2e      	cmp	r3, #46	; 0x2e
 800bb60:	d10a      	bne.n	800bb78 <_svfiprintf_r+0x12c>
 800bb62:	786b      	ldrb	r3, [r5, #1]
 800bb64:	2b2a      	cmp	r3, #42	; 0x2a
 800bb66:	d135      	bne.n	800bbd4 <_svfiprintf_r+0x188>
 800bb68:	9b07      	ldr	r3, [sp, #28]
 800bb6a:	3502      	adds	r5, #2
 800bb6c:	1d1a      	adds	r2, r3, #4
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	9207      	str	r2, [sp, #28]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	db2b      	blt.n	800bbce <_svfiprintf_r+0x182>
 800bb76:	9309      	str	r3, [sp, #36]	; 0x24
 800bb78:	4e2f      	ldr	r6, [pc, #188]	; (800bc38 <_svfiprintf_r+0x1ec>)
 800bb7a:	7829      	ldrb	r1, [r5, #0]
 800bb7c:	2203      	movs	r2, #3
 800bb7e:	0030      	movs	r0, r6
 800bb80:	f000 f9d8 	bl	800bf34 <memchr>
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d006      	beq.n	800bb96 <_svfiprintf_r+0x14a>
 800bb88:	2340      	movs	r3, #64	; 0x40
 800bb8a:	1b80      	subs	r0, r0, r6
 800bb8c:	4083      	lsls	r3, r0
 800bb8e:	6822      	ldr	r2, [r4, #0]
 800bb90:	3501      	adds	r5, #1
 800bb92:	4313      	orrs	r3, r2
 800bb94:	6023      	str	r3, [r4, #0]
 800bb96:	7829      	ldrb	r1, [r5, #0]
 800bb98:	2206      	movs	r2, #6
 800bb9a:	4828      	ldr	r0, [pc, #160]	; (800bc3c <_svfiprintf_r+0x1f0>)
 800bb9c:	1c6e      	adds	r6, r5, #1
 800bb9e:	7621      	strb	r1, [r4, #24]
 800bba0:	f000 f9c8 	bl	800bf34 <memchr>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d03c      	beq.n	800bc22 <_svfiprintf_r+0x1d6>
 800bba8:	4b25      	ldr	r3, [pc, #148]	; (800bc40 <_svfiprintf_r+0x1f4>)
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d125      	bne.n	800bbfa <_svfiprintf_r+0x1ae>
 800bbae:	2207      	movs	r2, #7
 800bbb0:	9b07      	ldr	r3, [sp, #28]
 800bbb2:	3307      	adds	r3, #7
 800bbb4:	4393      	bics	r3, r2
 800bbb6:	3308      	adds	r3, #8
 800bbb8:	9307      	str	r3, [sp, #28]
 800bbba:	6963      	ldr	r3, [r4, #20]
 800bbbc:	9a04      	ldr	r2, [sp, #16]
 800bbbe:	189b      	adds	r3, r3, r2
 800bbc0:	6163      	str	r3, [r4, #20]
 800bbc2:	e766      	b.n	800ba92 <_svfiprintf_r+0x46>
 800bbc4:	4343      	muls	r3, r0
 800bbc6:	2101      	movs	r1, #1
 800bbc8:	189b      	adds	r3, r3, r2
 800bbca:	0035      	movs	r5, r6
 800bbcc:	e7a6      	b.n	800bb1c <_svfiprintf_r+0xd0>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	425b      	negs	r3, r3
 800bbd2:	e7d0      	b.n	800bb76 <_svfiprintf_r+0x12a>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	200a      	movs	r0, #10
 800bbd8:	001a      	movs	r2, r3
 800bbda:	3501      	adds	r5, #1
 800bbdc:	6063      	str	r3, [r4, #4]
 800bbde:	7829      	ldrb	r1, [r5, #0]
 800bbe0:	1c6e      	adds	r6, r5, #1
 800bbe2:	3930      	subs	r1, #48	; 0x30
 800bbe4:	2909      	cmp	r1, #9
 800bbe6:	d903      	bls.n	800bbf0 <_svfiprintf_r+0x1a4>
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d0c5      	beq.n	800bb78 <_svfiprintf_r+0x12c>
 800bbec:	9209      	str	r2, [sp, #36]	; 0x24
 800bbee:	e7c3      	b.n	800bb78 <_svfiprintf_r+0x12c>
 800bbf0:	4342      	muls	r2, r0
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	1852      	adds	r2, r2, r1
 800bbf6:	0035      	movs	r5, r6
 800bbf8:	e7f1      	b.n	800bbde <_svfiprintf_r+0x192>
 800bbfa:	ab07      	add	r3, sp, #28
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	003a      	movs	r2, r7
 800bc00:	4b10      	ldr	r3, [pc, #64]	; (800bc44 <_svfiprintf_r+0x1f8>)
 800bc02:	0021      	movs	r1, r4
 800bc04:	9803      	ldr	r0, [sp, #12]
 800bc06:	e000      	b.n	800bc0a <_svfiprintf_r+0x1be>
 800bc08:	bf00      	nop
 800bc0a:	9004      	str	r0, [sp, #16]
 800bc0c:	9b04      	ldr	r3, [sp, #16]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	d1d3      	bne.n	800bbba <_svfiprintf_r+0x16e>
 800bc12:	89bb      	ldrh	r3, [r7, #12]
 800bc14:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bc16:	065b      	lsls	r3, r3, #25
 800bc18:	d400      	bmi.n	800bc1c <_svfiprintf_r+0x1d0>
 800bc1a:	e72e      	b.n	800ba7a <_svfiprintf_r+0x2e>
 800bc1c:	2001      	movs	r0, #1
 800bc1e:	4240      	negs	r0, r0
 800bc20:	e72b      	b.n	800ba7a <_svfiprintf_r+0x2e>
 800bc22:	ab07      	add	r3, sp, #28
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	003a      	movs	r2, r7
 800bc28:	4b06      	ldr	r3, [pc, #24]	; (800bc44 <_svfiprintf_r+0x1f8>)
 800bc2a:	0021      	movs	r1, r4
 800bc2c:	9803      	ldr	r0, [sp, #12]
 800bc2e:	f000 f879 	bl	800bd24 <_printf_i>
 800bc32:	e7ea      	b.n	800bc0a <_svfiprintf_r+0x1be>
 800bc34:	0800d829 	.word	0x0800d829
 800bc38:	0800d82f 	.word	0x0800d82f
 800bc3c:	0800d833 	.word	0x0800d833
 800bc40:	00000000 	.word	0x00000000
 800bc44:	0800b989 	.word	0x0800b989

0800bc48 <_printf_common>:
 800bc48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc4a:	0015      	movs	r5, r2
 800bc4c:	9301      	str	r3, [sp, #4]
 800bc4e:	688a      	ldr	r2, [r1, #8]
 800bc50:	690b      	ldr	r3, [r1, #16]
 800bc52:	9000      	str	r0, [sp, #0]
 800bc54:	000c      	movs	r4, r1
 800bc56:	4293      	cmp	r3, r2
 800bc58:	da00      	bge.n	800bc5c <_printf_common+0x14>
 800bc5a:	0013      	movs	r3, r2
 800bc5c:	0022      	movs	r2, r4
 800bc5e:	602b      	str	r3, [r5, #0]
 800bc60:	3243      	adds	r2, #67	; 0x43
 800bc62:	7812      	ldrb	r2, [r2, #0]
 800bc64:	2a00      	cmp	r2, #0
 800bc66:	d001      	beq.n	800bc6c <_printf_common+0x24>
 800bc68:	3301      	adds	r3, #1
 800bc6a:	602b      	str	r3, [r5, #0]
 800bc6c:	6823      	ldr	r3, [r4, #0]
 800bc6e:	069b      	lsls	r3, r3, #26
 800bc70:	d502      	bpl.n	800bc78 <_printf_common+0x30>
 800bc72:	682b      	ldr	r3, [r5, #0]
 800bc74:	3302      	adds	r3, #2
 800bc76:	602b      	str	r3, [r5, #0]
 800bc78:	2706      	movs	r7, #6
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	401f      	ands	r7, r3
 800bc7e:	d027      	beq.n	800bcd0 <_printf_common+0x88>
 800bc80:	0023      	movs	r3, r4
 800bc82:	3343      	adds	r3, #67	; 0x43
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	1e5a      	subs	r2, r3, #1
 800bc88:	4193      	sbcs	r3, r2
 800bc8a:	6822      	ldr	r2, [r4, #0]
 800bc8c:	0692      	lsls	r2, r2, #26
 800bc8e:	d430      	bmi.n	800bcf2 <_printf_common+0xaa>
 800bc90:	0022      	movs	r2, r4
 800bc92:	9901      	ldr	r1, [sp, #4]
 800bc94:	3243      	adds	r2, #67	; 0x43
 800bc96:	9800      	ldr	r0, [sp, #0]
 800bc98:	9e08      	ldr	r6, [sp, #32]
 800bc9a:	47b0      	blx	r6
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d025      	beq.n	800bcec <_printf_common+0xa4>
 800bca0:	2306      	movs	r3, #6
 800bca2:	6820      	ldr	r0, [r4, #0]
 800bca4:	682a      	ldr	r2, [r5, #0]
 800bca6:	68e1      	ldr	r1, [r4, #12]
 800bca8:	4003      	ands	r3, r0
 800bcaa:	2500      	movs	r5, #0
 800bcac:	2b04      	cmp	r3, #4
 800bcae:	d103      	bne.n	800bcb8 <_printf_common+0x70>
 800bcb0:	1a8d      	subs	r5, r1, r2
 800bcb2:	43eb      	mvns	r3, r5
 800bcb4:	17db      	asrs	r3, r3, #31
 800bcb6:	401d      	ands	r5, r3
 800bcb8:	68a3      	ldr	r3, [r4, #8]
 800bcba:	6922      	ldr	r2, [r4, #16]
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	dd01      	ble.n	800bcc4 <_printf_common+0x7c>
 800bcc0:	1a9b      	subs	r3, r3, r2
 800bcc2:	18ed      	adds	r5, r5, r3
 800bcc4:	2700      	movs	r7, #0
 800bcc6:	42bd      	cmp	r5, r7
 800bcc8:	d120      	bne.n	800bd0c <_printf_common+0xc4>
 800bcca:	2000      	movs	r0, #0
 800bccc:	e010      	b.n	800bcf0 <_printf_common+0xa8>
 800bcce:	3701      	adds	r7, #1
 800bcd0:	68e3      	ldr	r3, [r4, #12]
 800bcd2:	682a      	ldr	r2, [r5, #0]
 800bcd4:	1a9b      	subs	r3, r3, r2
 800bcd6:	42bb      	cmp	r3, r7
 800bcd8:	ddd2      	ble.n	800bc80 <_printf_common+0x38>
 800bcda:	0022      	movs	r2, r4
 800bcdc:	2301      	movs	r3, #1
 800bcde:	3219      	adds	r2, #25
 800bce0:	9901      	ldr	r1, [sp, #4]
 800bce2:	9800      	ldr	r0, [sp, #0]
 800bce4:	9e08      	ldr	r6, [sp, #32]
 800bce6:	47b0      	blx	r6
 800bce8:	1c43      	adds	r3, r0, #1
 800bcea:	d1f0      	bne.n	800bcce <_printf_common+0x86>
 800bcec:	2001      	movs	r0, #1
 800bcee:	4240      	negs	r0, r0
 800bcf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bcf2:	2030      	movs	r0, #48	; 0x30
 800bcf4:	18e1      	adds	r1, r4, r3
 800bcf6:	3143      	adds	r1, #67	; 0x43
 800bcf8:	7008      	strb	r0, [r1, #0]
 800bcfa:	0021      	movs	r1, r4
 800bcfc:	1c5a      	adds	r2, r3, #1
 800bcfe:	3145      	adds	r1, #69	; 0x45
 800bd00:	7809      	ldrb	r1, [r1, #0]
 800bd02:	18a2      	adds	r2, r4, r2
 800bd04:	3243      	adds	r2, #67	; 0x43
 800bd06:	3302      	adds	r3, #2
 800bd08:	7011      	strb	r1, [r2, #0]
 800bd0a:	e7c1      	b.n	800bc90 <_printf_common+0x48>
 800bd0c:	0022      	movs	r2, r4
 800bd0e:	2301      	movs	r3, #1
 800bd10:	321a      	adds	r2, #26
 800bd12:	9901      	ldr	r1, [sp, #4]
 800bd14:	9800      	ldr	r0, [sp, #0]
 800bd16:	9e08      	ldr	r6, [sp, #32]
 800bd18:	47b0      	blx	r6
 800bd1a:	1c43      	adds	r3, r0, #1
 800bd1c:	d0e6      	beq.n	800bcec <_printf_common+0xa4>
 800bd1e:	3701      	adds	r7, #1
 800bd20:	e7d1      	b.n	800bcc6 <_printf_common+0x7e>
	...

0800bd24 <_printf_i>:
 800bd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd26:	b089      	sub	sp, #36	; 0x24
 800bd28:	9204      	str	r2, [sp, #16]
 800bd2a:	000a      	movs	r2, r1
 800bd2c:	3243      	adds	r2, #67	; 0x43
 800bd2e:	9305      	str	r3, [sp, #20]
 800bd30:	9003      	str	r0, [sp, #12]
 800bd32:	9202      	str	r2, [sp, #8]
 800bd34:	7e0a      	ldrb	r2, [r1, #24]
 800bd36:	000c      	movs	r4, r1
 800bd38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd3a:	2a6e      	cmp	r2, #110	; 0x6e
 800bd3c:	d100      	bne.n	800bd40 <_printf_i+0x1c>
 800bd3e:	e086      	b.n	800be4e <_printf_i+0x12a>
 800bd40:	d81f      	bhi.n	800bd82 <_printf_i+0x5e>
 800bd42:	2a63      	cmp	r2, #99	; 0x63
 800bd44:	d033      	beq.n	800bdae <_printf_i+0x8a>
 800bd46:	d808      	bhi.n	800bd5a <_printf_i+0x36>
 800bd48:	2a00      	cmp	r2, #0
 800bd4a:	d100      	bne.n	800bd4e <_printf_i+0x2a>
 800bd4c:	e08c      	b.n	800be68 <_printf_i+0x144>
 800bd4e:	2a58      	cmp	r2, #88	; 0x58
 800bd50:	d04d      	beq.n	800bdee <_printf_i+0xca>
 800bd52:	0025      	movs	r5, r4
 800bd54:	3542      	adds	r5, #66	; 0x42
 800bd56:	702a      	strb	r2, [r5, #0]
 800bd58:	e030      	b.n	800bdbc <_printf_i+0x98>
 800bd5a:	2a64      	cmp	r2, #100	; 0x64
 800bd5c:	d001      	beq.n	800bd62 <_printf_i+0x3e>
 800bd5e:	2a69      	cmp	r2, #105	; 0x69
 800bd60:	d1f7      	bne.n	800bd52 <_printf_i+0x2e>
 800bd62:	6819      	ldr	r1, [r3, #0]
 800bd64:	6825      	ldr	r5, [r4, #0]
 800bd66:	1d0a      	adds	r2, r1, #4
 800bd68:	0628      	lsls	r0, r5, #24
 800bd6a:	d529      	bpl.n	800bdc0 <_printf_i+0x9c>
 800bd6c:	6808      	ldr	r0, [r1, #0]
 800bd6e:	601a      	str	r2, [r3, #0]
 800bd70:	2800      	cmp	r0, #0
 800bd72:	da03      	bge.n	800bd7c <_printf_i+0x58>
 800bd74:	232d      	movs	r3, #45	; 0x2d
 800bd76:	9a02      	ldr	r2, [sp, #8]
 800bd78:	4240      	negs	r0, r0
 800bd7a:	7013      	strb	r3, [r2, #0]
 800bd7c:	4e6b      	ldr	r6, [pc, #428]	; (800bf2c <_printf_i+0x208>)
 800bd7e:	270a      	movs	r7, #10
 800bd80:	e04f      	b.n	800be22 <_printf_i+0xfe>
 800bd82:	2a73      	cmp	r2, #115	; 0x73
 800bd84:	d074      	beq.n	800be70 <_printf_i+0x14c>
 800bd86:	d808      	bhi.n	800bd9a <_printf_i+0x76>
 800bd88:	2a6f      	cmp	r2, #111	; 0x6f
 800bd8a:	d01f      	beq.n	800bdcc <_printf_i+0xa8>
 800bd8c:	2a70      	cmp	r2, #112	; 0x70
 800bd8e:	d1e0      	bne.n	800bd52 <_printf_i+0x2e>
 800bd90:	2220      	movs	r2, #32
 800bd92:	6809      	ldr	r1, [r1, #0]
 800bd94:	430a      	orrs	r2, r1
 800bd96:	6022      	str	r2, [r4, #0]
 800bd98:	e003      	b.n	800bda2 <_printf_i+0x7e>
 800bd9a:	2a75      	cmp	r2, #117	; 0x75
 800bd9c:	d016      	beq.n	800bdcc <_printf_i+0xa8>
 800bd9e:	2a78      	cmp	r2, #120	; 0x78
 800bda0:	d1d7      	bne.n	800bd52 <_printf_i+0x2e>
 800bda2:	0022      	movs	r2, r4
 800bda4:	2178      	movs	r1, #120	; 0x78
 800bda6:	3245      	adds	r2, #69	; 0x45
 800bda8:	7011      	strb	r1, [r2, #0]
 800bdaa:	4e61      	ldr	r6, [pc, #388]	; (800bf30 <_printf_i+0x20c>)
 800bdac:	e022      	b.n	800bdf4 <_printf_i+0xd0>
 800bdae:	0025      	movs	r5, r4
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	3542      	adds	r5, #66	; 0x42
 800bdb4:	1d11      	adds	r1, r2, #4
 800bdb6:	6019      	str	r1, [r3, #0]
 800bdb8:	6813      	ldr	r3, [r2, #0]
 800bdba:	702b      	strb	r3, [r5, #0]
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e065      	b.n	800be8c <_printf_i+0x168>
 800bdc0:	6808      	ldr	r0, [r1, #0]
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	0669      	lsls	r1, r5, #25
 800bdc6:	d5d3      	bpl.n	800bd70 <_printf_i+0x4c>
 800bdc8:	b200      	sxth	r0, r0
 800bdca:	e7d1      	b.n	800bd70 <_printf_i+0x4c>
 800bdcc:	6819      	ldr	r1, [r3, #0]
 800bdce:	6825      	ldr	r5, [r4, #0]
 800bdd0:	1d08      	adds	r0, r1, #4
 800bdd2:	6018      	str	r0, [r3, #0]
 800bdd4:	6808      	ldr	r0, [r1, #0]
 800bdd6:	062e      	lsls	r6, r5, #24
 800bdd8:	d505      	bpl.n	800bde6 <_printf_i+0xc2>
 800bdda:	4e54      	ldr	r6, [pc, #336]	; (800bf2c <_printf_i+0x208>)
 800bddc:	2708      	movs	r7, #8
 800bdde:	2a6f      	cmp	r2, #111	; 0x6f
 800bde0:	d01b      	beq.n	800be1a <_printf_i+0xf6>
 800bde2:	270a      	movs	r7, #10
 800bde4:	e019      	b.n	800be1a <_printf_i+0xf6>
 800bde6:	066d      	lsls	r5, r5, #25
 800bde8:	d5f7      	bpl.n	800bdda <_printf_i+0xb6>
 800bdea:	b280      	uxth	r0, r0
 800bdec:	e7f5      	b.n	800bdda <_printf_i+0xb6>
 800bdee:	3145      	adds	r1, #69	; 0x45
 800bdf0:	4e4e      	ldr	r6, [pc, #312]	; (800bf2c <_printf_i+0x208>)
 800bdf2:	700a      	strb	r2, [r1, #0]
 800bdf4:	6818      	ldr	r0, [r3, #0]
 800bdf6:	6822      	ldr	r2, [r4, #0]
 800bdf8:	1d01      	adds	r1, r0, #4
 800bdfa:	6800      	ldr	r0, [r0, #0]
 800bdfc:	6019      	str	r1, [r3, #0]
 800bdfe:	0615      	lsls	r5, r2, #24
 800be00:	d521      	bpl.n	800be46 <_printf_i+0x122>
 800be02:	07d3      	lsls	r3, r2, #31
 800be04:	d502      	bpl.n	800be0c <_printf_i+0xe8>
 800be06:	2320      	movs	r3, #32
 800be08:	431a      	orrs	r2, r3
 800be0a:	6022      	str	r2, [r4, #0]
 800be0c:	2710      	movs	r7, #16
 800be0e:	2800      	cmp	r0, #0
 800be10:	d103      	bne.n	800be1a <_printf_i+0xf6>
 800be12:	2320      	movs	r3, #32
 800be14:	6822      	ldr	r2, [r4, #0]
 800be16:	439a      	bics	r2, r3
 800be18:	6022      	str	r2, [r4, #0]
 800be1a:	0023      	movs	r3, r4
 800be1c:	2200      	movs	r2, #0
 800be1e:	3343      	adds	r3, #67	; 0x43
 800be20:	701a      	strb	r2, [r3, #0]
 800be22:	6863      	ldr	r3, [r4, #4]
 800be24:	60a3      	str	r3, [r4, #8]
 800be26:	2b00      	cmp	r3, #0
 800be28:	db58      	blt.n	800bedc <_printf_i+0x1b8>
 800be2a:	2204      	movs	r2, #4
 800be2c:	6821      	ldr	r1, [r4, #0]
 800be2e:	4391      	bics	r1, r2
 800be30:	6021      	str	r1, [r4, #0]
 800be32:	2800      	cmp	r0, #0
 800be34:	d154      	bne.n	800bee0 <_printf_i+0x1bc>
 800be36:	9d02      	ldr	r5, [sp, #8]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d05a      	beq.n	800bef2 <_printf_i+0x1ce>
 800be3c:	0025      	movs	r5, r4
 800be3e:	7833      	ldrb	r3, [r6, #0]
 800be40:	3542      	adds	r5, #66	; 0x42
 800be42:	702b      	strb	r3, [r5, #0]
 800be44:	e055      	b.n	800bef2 <_printf_i+0x1ce>
 800be46:	0655      	lsls	r5, r2, #25
 800be48:	d5db      	bpl.n	800be02 <_printf_i+0xde>
 800be4a:	b280      	uxth	r0, r0
 800be4c:	e7d9      	b.n	800be02 <_printf_i+0xde>
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	680d      	ldr	r5, [r1, #0]
 800be52:	1d10      	adds	r0, r2, #4
 800be54:	6949      	ldr	r1, [r1, #20]
 800be56:	6018      	str	r0, [r3, #0]
 800be58:	6813      	ldr	r3, [r2, #0]
 800be5a:	062e      	lsls	r6, r5, #24
 800be5c:	d501      	bpl.n	800be62 <_printf_i+0x13e>
 800be5e:	6019      	str	r1, [r3, #0]
 800be60:	e002      	b.n	800be68 <_printf_i+0x144>
 800be62:	066d      	lsls	r5, r5, #25
 800be64:	d5fb      	bpl.n	800be5e <_printf_i+0x13a>
 800be66:	8019      	strh	r1, [r3, #0]
 800be68:	2300      	movs	r3, #0
 800be6a:	9d02      	ldr	r5, [sp, #8]
 800be6c:	6123      	str	r3, [r4, #16]
 800be6e:	e04f      	b.n	800bf10 <_printf_i+0x1ec>
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	1d11      	adds	r1, r2, #4
 800be74:	6019      	str	r1, [r3, #0]
 800be76:	6815      	ldr	r5, [r2, #0]
 800be78:	2100      	movs	r1, #0
 800be7a:	6862      	ldr	r2, [r4, #4]
 800be7c:	0028      	movs	r0, r5
 800be7e:	f000 f859 	bl	800bf34 <memchr>
 800be82:	2800      	cmp	r0, #0
 800be84:	d001      	beq.n	800be8a <_printf_i+0x166>
 800be86:	1b40      	subs	r0, r0, r5
 800be88:	6060      	str	r0, [r4, #4]
 800be8a:	6863      	ldr	r3, [r4, #4]
 800be8c:	6123      	str	r3, [r4, #16]
 800be8e:	2300      	movs	r3, #0
 800be90:	9a02      	ldr	r2, [sp, #8]
 800be92:	7013      	strb	r3, [r2, #0]
 800be94:	e03c      	b.n	800bf10 <_printf_i+0x1ec>
 800be96:	6923      	ldr	r3, [r4, #16]
 800be98:	002a      	movs	r2, r5
 800be9a:	9904      	ldr	r1, [sp, #16]
 800be9c:	9803      	ldr	r0, [sp, #12]
 800be9e:	9d05      	ldr	r5, [sp, #20]
 800bea0:	47a8      	blx	r5
 800bea2:	1c43      	adds	r3, r0, #1
 800bea4:	d03e      	beq.n	800bf24 <_printf_i+0x200>
 800bea6:	6823      	ldr	r3, [r4, #0]
 800bea8:	079b      	lsls	r3, r3, #30
 800beaa:	d415      	bmi.n	800bed8 <_printf_i+0x1b4>
 800beac:	9b07      	ldr	r3, [sp, #28]
 800beae:	68e0      	ldr	r0, [r4, #12]
 800beb0:	4298      	cmp	r0, r3
 800beb2:	da39      	bge.n	800bf28 <_printf_i+0x204>
 800beb4:	0018      	movs	r0, r3
 800beb6:	e037      	b.n	800bf28 <_printf_i+0x204>
 800beb8:	0022      	movs	r2, r4
 800beba:	2301      	movs	r3, #1
 800bebc:	3219      	adds	r2, #25
 800bebe:	9904      	ldr	r1, [sp, #16]
 800bec0:	9803      	ldr	r0, [sp, #12]
 800bec2:	9e05      	ldr	r6, [sp, #20]
 800bec4:	47b0      	blx	r6
 800bec6:	1c43      	adds	r3, r0, #1
 800bec8:	d02c      	beq.n	800bf24 <_printf_i+0x200>
 800beca:	3501      	adds	r5, #1
 800becc:	68e3      	ldr	r3, [r4, #12]
 800bece:	9a07      	ldr	r2, [sp, #28]
 800bed0:	1a9b      	subs	r3, r3, r2
 800bed2:	42ab      	cmp	r3, r5
 800bed4:	dcf0      	bgt.n	800beb8 <_printf_i+0x194>
 800bed6:	e7e9      	b.n	800beac <_printf_i+0x188>
 800bed8:	2500      	movs	r5, #0
 800beda:	e7f7      	b.n	800becc <_printf_i+0x1a8>
 800bedc:	2800      	cmp	r0, #0
 800bede:	d0ad      	beq.n	800be3c <_printf_i+0x118>
 800bee0:	9d02      	ldr	r5, [sp, #8]
 800bee2:	0039      	movs	r1, r7
 800bee4:	f7f4 f9b2 	bl	800024c <__aeabi_uidivmod>
 800bee8:	5c73      	ldrb	r3, [r6, r1]
 800beea:	3d01      	subs	r5, #1
 800beec:	702b      	strb	r3, [r5, #0]
 800beee:	2800      	cmp	r0, #0
 800bef0:	d1f7      	bne.n	800bee2 <_printf_i+0x1be>
 800bef2:	2f08      	cmp	r7, #8
 800bef4:	d109      	bne.n	800bf0a <_printf_i+0x1e6>
 800bef6:	6823      	ldr	r3, [r4, #0]
 800bef8:	07db      	lsls	r3, r3, #31
 800befa:	d506      	bpl.n	800bf0a <_printf_i+0x1e6>
 800befc:	6863      	ldr	r3, [r4, #4]
 800befe:	6922      	ldr	r2, [r4, #16]
 800bf00:	4293      	cmp	r3, r2
 800bf02:	dc02      	bgt.n	800bf0a <_printf_i+0x1e6>
 800bf04:	2330      	movs	r3, #48	; 0x30
 800bf06:	3d01      	subs	r5, #1
 800bf08:	702b      	strb	r3, [r5, #0]
 800bf0a:	9b02      	ldr	r3, [sp, #8]
 800bf0c:	1b5b      	subs	r3, r3, r5
 800bf0e:	6123      	str	r3, [r4, #16]
 800bf10:	9b05      	ldr	r3, [sp, #20]
 800bf12:	aa07      	add	r2, sp, #28
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	0021      	movs	r1, r4
 800bf18:	9b04      	ldr	r3, [sp, #16]
 800bf1a:	9803      	ldr	r0, [sp, #12]
 800bf1c:	f7ff fe94 	bl	800bc48 <_printf_common>
 800bf20:	1c43      	adds	r3, r0, #1
 800bf22:	d1b8      	bne.n	800be96 <_printf_i+0x172>
 800bf24:	2001      	movs	r0, #1
 800bf26:	4240      	negs	r0, r0
 800bf28:	b009      	add	sp, #36	; 0x24
 800bf2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf2c:	0800d83a 	.word	0x0800d83a
 800bf30:	0800d84b 	.word	0x0800d84b

0800bf34 <memchr>:
 800bf34:	b2c9      	uxtb	r1, r1
 800bf36:	1882      	adds	r2, r0, r2
 800bf38:	4290      	cmp	r0, r2
 800bf3a:	d101      	bne.n	800bf40 <memchr+0xc>
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	4770      	bx	lr
 800bf40:	7803      	ldrb	r3, [r0, #0]
 800bf42:	428b      	cmp	r3, r1
 800bf44:	d0fb      	beq.n	800bf3e <memchr+0xa>
 800bf46:	3001      	adds	r0, #1
 800bf48:	e7f6      	b.n	800bf38 <memchr+0x4>

0800bf4a <memmove>:
 800bf4a:	b510      	push	{r4, lr}
 800bf4c:	4288      	cmp	r0, r1
 800bf4e:	d902      	bls.n	800bf56 <memmove+0xc>
 800bf50:	188b      	adds	r3, r1, r2
 800bf52:	4298      	cmp	r0, r3
 800bf54:	d303      	bcc.n	800bf5e <memmove+0x14>
 800bf56:	2300      	movs	r3, #0
 800bf58:	e007      	b.n	800bf6a <memmove+0x20>
 800bf5a:	5c8b      	ldrb	r3, [r1, r2]
 800bf5c:	5483      	strb	r3, [r0, r2]
 800bf5e:	3a01      	subs	r2, #1
 800bf60:	d2fb      	bcs.n	800bf5a <memmove+0x10>
 800bf62:	bd10      	pop	{r4, pc}
 800bf64:	5ccc      	ldrb	r4, [r1, r3]
 800bf66:	54c4      	strb	r4, [r0, r3]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d1fa      	bne.n	800bf64 <memmove+0x1a>
 800bf6e:	e7f8      	b.n	800bf62 <memmove+0x18>

0800bf70 <_free_r>:
 800bf70:	b570      	push	{r4, r5, r6, lr}
 800bf72:	0005      	movs	r5, r0
 800bf74:	2900      	cmp	r1, #0
 800bf76:	d010      	beq.n	800bf9a <_free_r+0x2a>
 800bf78:	1f0c      	subs	r4, r1, #4
 800bf7a:	6823      	ldr	r3, [r4, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	da00      	bge.n	800bf82 <_free_r+0x12>
 800bf80:	18e4      	adds	r4, r4, r3
 800bf82:	0028      	movs	r0, r5
 800bf84:	f000 f8d4 	bl	800c130 <__malloc_lock>
 800bf88:	4a1d      	ldr	r2, [pc, #116]	; (800c000 <_free_r+0x90>)
 800bf8a:	6813      	ldr	r3, [r2, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d105      	bne.n	800bf9c <_free_r+0x2c>
 800bf90:	6063      	str	r3, [r4, #4]
 800bf92:	6014      	str	r4, [r2, #0]
 800bf94:	0028      	movs	r0, r5
 800bf96:	f000 f8cc 	bl	800c132 <__malloc_unlock>
 800bf9a:	bd70      	pop	{r4, r5, r6, pc}
 800bf9c:	42a3      	cmp	r3, r4
 800bf9e:	d909      	bls.n	800bfb4 <_free_r+0x44>
 800bfa0:	6821      	ldr	r1, [r4, #0]
 800bfa2:	1860      	adds	r0, r4, r1
 800bfa4:	4283      	cmp	r3, r0
 800bfa6:	d1f3      	bne.n	800bf90 <_free_r+0x20>
 800bfa8:	6818      	ldr	r0, [r3, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	1841      	adds	r1, r0, r1
 800bfae:	6021      	str	r1, [r4, #0]
 800bfb0:	e7ee      	b.n	800bf90 <_free_r+0x20>
 800bfb2:	0013      	movs	r3, r2
 800bfb4:	685a      	ldr	r2, [r3, #4]
 800bfb6:	2a00      	cmp	r2, #0
 800bfb8:	d001      	beq.n	800bfbe <_free_r+0x4e>
 800bfba:	42a2      	cmp	r2, r4
 800bfbc:	d9f9      	bls.n	800bfb2 <_free_r+0x42>
 800bfbe:	6819      	ldr	r1, [r3, #0]
 800bfc0:	1858      	adds	r0, r3, r1
 800bfc2:	42a0      	cmp	r0, r4
 800bfc4:	d10b      	bne.n	800bfde <_free_r+0x6e>
 800bfc6:	6820      	ldr	r0, [r4, #0]
 800bfc8:	1809      	adds	r1, r1, r0
 800bfca:	1858      	adds	r0, r3, r1
 800bfcc:	6019      	str	r1, [r3, #0]
 800bfce:	4282      	cmp	r2, r0
 800bfd0:	d1e0      	bne.n	800bf94 <_free_r+0x24>
 800bfd2:	6810      	ldr	r0, [r2, #0]
 800bfd4:	6852      	ldr	r2, [r2, #4]
 800bfd6:	1841      	adds	r1, r0, r1
 800bfd8:	6019      	str	r1, [r3, #0]
 800bfda:	605a      	str	r2, [r3, #4]
 800bfdc:	e7da      	b.n	800bf94 <_free_r+0x24>
 800bfde:	42a0      	cmp	r0, r4
 800bfe0:	d902      	bls.n	800bfe8 <_free_r+0x78>
 800bfe2:	230c      	movs	r3, #12
 800bfe4:	602b      	str	r3, [r5, #0]
 800bfe6:	e7d5      	b.n	800bf94 <_free_r+0x24>
 800bfe8:	6821      	ldr	r1, [r4, #0]
 800bfea:	1860      	adds	r0, r4, r1
 800bfec:	4282      	cmp	r2, r0
 800bfee:	d103      	bne.n	800bff8 <_free_r+0x88>
 800bff0:	6810      	ldr	r0, [r2, #0]
 800bff2:	6852      	ldr	r2, [r2, #4]
 800bff4:	1841      	adds	r1, r0, r1
 800bff6:	6021      	str	r1, [r4, #0]
 800bff8:	6062      	str	r2, [r4, #4]
 800bffa:	605c      	str	r4, [r3, #4]
 800bffc:	e7ca      	b.n	800bf94 <_free_r+0x24>
 800bffe:	46c0      	nop			; (mov r8, r8)
 800c000:	20001010 	.word	0x20001010

0800c004 <_malloc_r>:
 800c004:	2303      	movs	r3, #3
 800c006:	b570      	push	{r4, r5, r6, lr}
 800c008:	1ccd      	adds	r5, r1, #3
 800c00a:	439d      	bics	r5, r3
 800c00c:	3508      	adds	r5, #8
 800c00e:	0006      	movs	r6, r0
 800c010:	2d0c      	cmp	r5, #12
 800c012:	d21e      	bcs.n	800c052 <_malloc_r+0x4e>
 800c014:	250c      	movs	r5, #12
 800c016:	42a9      	cmp	r1, r5
 800c018:	d81d      	bhi.n	800c056 <_malloc_r+0x52>
 800c01a:	0030      	movs	r0, r6
 800c01c:	f000 f888 	bl	800c130 <__malloc_lock>
 800c020:	4a25      	ldr	r2, [pc, #148]	; (800c0b8 <_malloc_r+0xb4>)
 800c022:	6814      	ldr	r4, [r2, #0]
 800c024:	0021      	movs	r1, r4
 800c026:	2900      	cmp	r1, #0
 800c028:	d119      	bne.n	800c05e <_malloc_r+0x5a>
 800c02a:	4c24      	ldr	r4, [pc, #144]	; (800c0bc <_malloc_r+0xb8>)
 800c02c:	6823      	ldr	r3, [r4, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d103      	bne.n	800c03a <_malloc_r+0x36>
 800c032:	0030      	movs	r0, r6
 800c034:	f000 f86a 	bl	800c10c <_sbrk_r>
 800c038:	6020      	str	r0, [r4, #0]
 800c03a:	0029      	movs	r1, r5
 800c03c:	0030      	movs	r0, r6
 800c03e:	f000 f865 	bl	800c10c <_sbrk_r>
 800c042:	1c43      	adds	r3, r0, #1
 800c044:	d12b      	bne.n	800c09e <_malloc_r+0x9a>
 800c046:	230c      	movs	r3, #12
 800c048:	0030      	movs	r0, r6
 800c04a:	6033      	str	r3, [r6, #0]
 800c04c:	f000 f871 	bl	800c132 <__malloc_unlock>
 800c050:	e003      	b.n	800c05a <_malloc_r+0x56>
 800c052:	2d00      	cmp	r5, #0
 800c054:	dadf      	bge.n	800c016 <_malloc_r+0x12>
 800c056:	230c      	movs	r3, #12
 800c058:	6033      	str	r3, [r6, #0]
 800c05a:	2000      	movs	r0, #0
 800c05c:	bd70      	pop	{r4, r5, r6, pc}
 800c05e:	680b      	ldr	r3, [r1, #0]
 800c060:	1b5b      	subs	r3, r3, r5
 800c062:	d419      	bmi.n	800c098 <_malloc_r+0x94>
 800c064:	2b0b      	cmp	r3, #11
 800c066:	d903      	bls.n	800c070 <_malloc_r+0x6c>
 800c068:	600b      	str	r3, [r1, #0]
 800c06a:	18cc      	adds	r4, r1, r3
 800c06c:	6025      	str	r5, [r4, #0]
 800c06e:	e003      	b.n	800c078 <_malloc_r+0x74>
 800c070:	684b      	ldr	r3, [r1, #4]
 800c072:	428c      	cmp	r4, r1
 800c074:	d10d      	bne.n	800c092 <_malloc_r+0x8e>
 800c076:	6013      	str	r3, [r2, #0]
 800c078:	0030      	movs	r0, r6
 800c07a:	f000 f85a 	bl	800c132 <__malloc_unlock>
 800c07e:	0020      	movs	r0, r4
 800c080:	2207      	movs	r2, #7
 800c082:	300b      	adds	r0, #11
 800c084:	1d23      	adds	r3, r4, #4
 800c086:	4390      	bics	r0, r2
 800c088:	1ac3      	subs	r3, r0, r3
 800c08a:	d0e7      	beq.n	800c05c <_malloc_r+0x58>
 800c08c:	425a      	negs	r2, r3
 800c08e:	50e2      	str	r2, [r4, r3]
 800c090:	e7e4      	b.n	800c05c <_malloc_r+0x58>
 800c092:	6063      	str	r3, [r4, #4]
 800c094:	000c      	movs	r4, r1
 800c096:	e7ef      	b.n	800c078 <_malloc_r+0x74>
 800c098:	000c      	movs	r4, r1
 800c09a:	6849      	ldr	r1, [r1, #4]
 800c09c:	e7c3      	b.n	800c026 <_malloc_r+0x22>
 800c09e:	2303      	movs	r3, #3
 800c0a0:	1cc4      	adds	r4, r0, #3
 800c0a2:	439c      	bics	r4, r3
 800c0a4:	42a0      	cmp	r0, r4
 800c0a6:	d0e1      	beq.n	800c06c <_malloc_r+0x68>
 800c0a8:	1a21      	subs	r1, r4, r0
 800c0aa:	0030      	movs	r0, r6
 800c0ac:	f000 f82e 	bl	800c10c <_sbrk_r>
 800c0b0:	1c43      	adds	r3, r0, #1
 800c0b2:	d1db      	bne.n	800c06c <_malloc_r+0x68>
 800c0b4:	e7c7      	b.n	800c046 <_malloc_r+0x42>
 800c0b6:	46c0      	nop			; (mov r8, r8)
 800c0b8:	20001010 	.word	0x20001010
 800c0bc:	20001014 	.word	0x20001014

0800c0c0 <_realloc_r>:
 800c0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c2:	0007      	movs	r7, r0
 800c0c4:	000d      	movs	r5, r1
 800c0c6:	0016      	movs	r6, r2
 800c0c8:	2900      	cmp	r1, #0
 800c0ca:	d105      	bne.n	800c0d8 <_realloc_r+0x18>
 800c0cc:	0011      	movs	r1, r2
 800c0ce:	f7ff ff99 	bl	800c004 <_malloc_r>
 800c0d2:	0004      	movs	r4, r0
 800c0d4:	0020      	movs	r0, r4
 800c0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0d8:	2a00      	cmp	r2, #0
 800c0da:	d103      	bne.n	800c0e4 <_realloc_r+0x24>
 800c0dc:	f7ff ff48 	bl	800bf70 <_free_r>
 800c0e0:	0034      	movs	r4, r6
 800c0e2:	e7f7      	b.n	800c0d4 <_realloc_r+0x14>
 800c0e4:	f000 f826 	bl	800c134 <_malloc_usable_size_r>
 800c0e8:	002c      	movs	r4, r5
 800c0ea:	42b0      	cmp	r0, r6
 800c0ec:	d2f2      	bcs.n	800c0d4 <_realloc_r+0x14>
 800c0ee:	0031      	movs	r1, r6
 800c0f0:	0038      	movs	r0, r7
 800c0f2:	f7ff ff87 	bl	800c004 <_malloc_r>
 800c0f6:	1e04      	subs	r4, r0, #0
 800c0f8:	d0ec      	beq.n	800c0d4 <_realloc_r+0x14>
 800c0fa:	0029      	movs	r1, r5
 800c0fc:	0032      	movs	r2, r6
 800c0fe:	f7ff fb1b 	bl	800b738 <memcpy>
 800c102:	0029      	movs	r1, r5
 800c104:	0038      	movs	r0, r7
 800c106:	f7ff ff33 	bl	800bf70 <_free_r>
 800c10a:	e7e3      	b.n	800c0d4 <_realloc_r+0x14>

0800c10c <_sbrk_r>:
 800c10c:	2300      	movs	r3, #0
 800c10e:	b570      	push	{r4, r5, r6, lr}
 800c110:	4c06      	ldr	r4, [pc, #24]	; (800c12c <_sbrk_r+0x20>)
 800c112:	0005      	movs	r5, r0
 800c114:	0008      	movs	r0, r1
 800c116:	6023      	str	r3, [r4, #0]
 800c118:	f7f9 f8bc 	bl	8005294 <_sbrk>
 800c11c:	1c43      	adds	r3, r0, #1
 800c11e:	d103      	bne.n	800c128 <_sbrk_r+0x1c>
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d000      	beq.n	800c128 <_sbrk_r+0x1c>
 800c126:	602b      	str	r3, [r5, #0]
 800c128:	bd70      	pop	{r4, r5, r6, pc}
 800c12a:	46c0      	nop			; (mov r8, r8)
 800c12c:	20002420 	.word	0x20002420

0800c130 <__malloc_lock>:
 800c130:	4770      	bx	lr

0800c132 <__malloc_unlock>:
 800c132:	4770      	bx	lr

0800c134 <_malloc_usable_size_r>:
 800c134:	1f0b      	subs	r3, r1, #4
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	1f18      	subs	r0, r3, #4
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	da01      	bge.n	800c142 <_malloc_usable_size_r+0xe>
 800c13e:	580b      	ldr	r3, [r1, r0]
 800c140:	18c0      	adds	r0, r0, r3
 800c142:	4770      	bx	lr

0800c144 <_init>:
 800c144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c146:	46c0      	nop			; (mov r8, r8)
 800c148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c14a:	bc08      	pop	{r3}
 800c14c:	469e      	mov	lr, r3
 800c14e:	4770      	bx	lr

0800c150 <_fini>:
 800c150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c152:	46c0      	nop			; (mov r8, r8)
 800c154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c156:	bc08      	pop	{r3}
 800c158:	469e      	mov	lr, r3
 800c15a:	4770      	bx	lr
